<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://survivejs.com/atom.xml" rel="self"></link><link href="https://survivejs.com/" rel=""></link><updated>Sat Mar 17 2018 15:24:48 GMT+0100 (CET)</updated><id>https://survivejs.com/</id><author><name></name><email></email></author><entry><title>Experiences on Concat 2018</title><id>aexperiencesonconcat20182018-03-05t00:00:00z</id><link href="https://survivejs.com/blog/concat-2018/"></link><updated>2018-03-05T00:00:00Z</updated><content type="html">&lt;p&gt;I participated &lt;a href=&quot;https://2018.conc.at/&quot;&gt;Concat 2018&lt;/a&gt; at Salzburg this year. I held &lt;a href=&quot;https://survivejs.com/training/&quot;&gt;a four-hour webpack workshop&lt;/a&gt; with Tobias Koppers, the author of the tool, and visited the event itself. Overall, it was a great one-day dual-track conference, and I don&amp;#39;t regret going.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-workshop-day&quot; id=&quot;the-workshop-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Workshop Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-workshop-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/eec14a97cdb68835c85cf3820dcef409.jpg&quot; alt=&quot;Train at Salzburg&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Train at Salzburg&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We held the four-hour workshop from 13:00 to 17:00. It was based on my slide set, &lt;a href=&quot;https://presentations.survivejs.com/webpack-the-good-parts/&quot;&gt;Webpack - The Good Parts&lt;/a&gt;. I spent a good chunk of the preceding week updating my content to support webpack 4. Having Tobias around was great as he was able to go into more in-depth detail where needed and I also learned a few new things.&lt;/p&gt;
&lt;p&gt;After the workshop and a brief break, we headed to the speaker&amp;#39;s dinner. It was arranged in an Italian restaurant, de Cesare, and was high quality. I met several people including Rasmus Lerdorf, the creator of PHP. I understand the philosophy behind the language far better now and can appreciate the ecosystem for its achievements.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-conference-day&quot; id=&quot;the-conference-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Conference Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-conference-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/f8f69f3c647a0a5d0eaea8b73410f860.jpg&quot; alt=&quot;The Venue was modern&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;The Venue was modern&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The conference started with breakfast although to save some time I ate one at my hotel. It is good to note the venue itself was about twenty minutes from the center of Salzburg as it was held at a local technical university. The place itself was amazing and had plenty of space available. The only significant restriction was that you couldn&amp;#39;t take alcohol inside, but I didn&amp;#39;t mind.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#daniel-clifford-on-optimizing-for-real-world&quot; id=&quot;daniel-clifford-on-optimizing-for-real-world&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Daniel Clifford on Optimizing for Real World&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#daniel-clifford-on-optimizing-for-real-world&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/4ba4da6f0206edcd6956dc4b45df8837.jpg&quot; alt=&quot;Daniel on optimizing for real world&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Daniel on optimizing for real world&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Daniel Clifford had the honor of opening the conference. I consider the keynote of a conference as the talk that sets the tone of the entire day. Daniel&amp;#39;s talk was somewhat technical and expertly given. It reminded me of Benedikt Meurer&amp;#39;s talks at &lt;a href=&quot;https://survivejs.com/blog/agentconf-2018&quot;&gt;AgentConf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was nice to see and understand how the V8 team has managed to improve the performance of the JavaScript engine. That said, the talk felt too technical as the first talk to me. My personal preference is to have an inspirational, high-level talk in the beginning. The talk itself was great, but I feel it could have fit better before lunch.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#ivana-mcconnell-on-exclusionary-ux-and-how-to-avoid-it&quot; id=&quot;ivana-mcconnell-on-exclusionary-ux-and-how-to-avoid-it&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Ivana McConnell on Exclusionary UX and How to Avoid It&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#ivana-mcconnell-on-exclusionary-ux-and-how-to-avoid-it&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/ed0e950b2ce8c2d65927a633fc82ceaf.jpg&quot; alt=&quot;Ivana on exclusionary UX&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Ivana on exclusionary UX&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;User eXperience (UX) is a relevant topic to web developers as when you design a user interface and its functionalities; you also have to consider different types of users. The talk contained theory and quotes behind the topic while there were also examples.&lt;/p&gt;
&lt;p&gt;The talk didn&amp;#39;t work that well timing-wise as it roughly 30 minutes instead of 20 minutes given to usual talks. A part of this had to do with technical difficulties that weren&amp;#39;t due to the organizer. I feel the same message could have been gotten through by putting more emphasis on examples and then justifying the topic through that.&lt;/p&gt;
&lt;p&gt;The topic fits the conference, but I feel the execution could have been stronger. But I think most of the audience got the point.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#cory-ann-joseph-on-poker-playing-ais&quot; id=&quot;cory-ann-joseph-on-poker-playing-ais&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Cory-Ann Joseph on Poker Playing AIs&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#cory-ann-joseph-on-poker-playing-ais&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/8d7c0a26a6464932badb06810d7e70dd.jpg&quot; alt=&quot;Cory-Ann on AI&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Cory-Ann on AI&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Cory-Ann Joseph&amp;#39;s talk was built based on a narrative based on her career so far. The interesting fact is that she was a poker professional once. The central message of her talk was that entire industry can become disrupted fast by emerging technologies, such as Artificial Intelligence (AI).&lt;/p&gt;
&lt;p&gt;I would have loved to see more examples of how to combine AI with design towards the end. I believe there&amp;#39;s a lot of potential in AI aided design where an AI helps a human designer to generate more concepts, faster. I don&amp;#39;t think fully generative designs are feasible yet, but if we can push even a part of the work to a machine, we&amp;#39;ll get better results, cheaper.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#ola-gasidlo-on-how-to-make-browsers-compatible-with-the-web&quot; id=&quot;ola-gasidlo-on-how-to-make-browsers-compatible-with-the-web&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Ola Gasidlo on How to Make Browsers Compatible with the Web&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#ola-gasidlo-on-how-to-make-browsers-compatible-with-the-web&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/4f7dcadbf043025b1e9494a0f17db615.jpg&quot; alt=&quot;Ola on how to make browsers compatible with the web&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Ola on how to make browsers compatible with the web&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Ola Gasidlo&amp;#39;s talk was on the second track, and by the time we arrived there, it was full. We had to stand, but it was still an excellent presentation. The talk discussed the history of the web and how we ended up with what we have right now. She also gave insight on how to get involved with its development.&lt;/p&gt;
&lt;p&gt;There wasn&amp;#39;t anything particularly surprising in the talk to me, but it was still an excellent recap. It would have been interesting to see Ola&amp;#39;s projections for the future of the web.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#jenny-shen-on-designing-across-cultures&quot; id=&quot;jenny-shen-on-designing-across-cultures&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Jenny Shen on Designing Across Cultures&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#jenny-shen-on-designing-across-cultures&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/df51814d4ecf1bb7d486b009590430e9.jpg&quot; alt=&quot;Jenny on designing across cultures&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Jenny on designing across cultures&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Jenny Shen&amp;#39;s talk on the second track was the highlight of the conference for me. I would have made it the keynote as the topic was relevant and the execution was top class. She discussed the cultural differences you encounter in design through her broad experience. As it happens, the way you design has to take the culture into account as otherwise, you&amp;#39;ll end up with a solution that doesn&amp;#39;t work well. Different cultures have different expectations.&lt;/p&gt;
&lt;p&gt;Interestingly enough Jenny&amp;#39;s talk complemented Ivana&amp;#39;s one on exclusionary UX but a cultural level. It&amp;#39;s not always about race or gender; it can be about culture as well.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#houssein-djirdeh-on-thinking-in-prpl&quot; id=&quot;houssein-djirdeh-on-thinking-in-prpl&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Houssein Djirdeh on Thinking in PRPL&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#houssein-djirdeh-on-thinking-in-prpl&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/8d331f8135cfc6f75d05915deb559f22.jpg&quot; alt=&quot;Houssein on PRPL&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Houssein on PRPL&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Houssein discussed &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/prpl-pattern/&quot;&gt;the popular PRPL (Push, Render, Pre-cache, Lazy-loader) pattern&lt;/a&gt; made known by Google. Houssein&amp;#39;s talk discussed various possibilities in detail, and it fit the conference well. It was right after lunch, so I was ready to focus on the talk and appreciate it fully.&lt;/p&gt;
&lt;p&gt;I skipped the next two slots as there was something else to do and continued on Varun&amp;#39;s presentation about animation.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#varun-vachhar-on-mathematics-of-animation&quot; id=&quot;varun-vachhar-on-mathematics-of-animation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Varun Vachhar on Mathematics of Animation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#varun-vachhar-on-mathematics-of-animation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/719319a5991c557c7a031812f95776bc.jpg&quot; alt=&quot;Varun on mathematics of animation&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Varun on mathematics of animation&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Varun discussed the mathematics of animation through various examples. It brought back some memories from my university time. I wish they taught this way as the concepts become intuitive through animation and can be fun to implement this way even. Once you see the applications, you will pick up the ideas as well.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#max-stoiber-on-styled-components&quot; id=&quot;max-stoiber-on-styled-components&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Max Stoiber on Styled Components&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#max-stoiber-on-styled-components&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/8b97f7edcc9f6bd14df9189fb13db480.jpg&quot; alt=&quot;Max on Styled Components&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Max on Styled Components&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After a coffee break, Max gave an entertaining talk that explained why his Styled Components approach works the way it does. It was an excellent introduction to the topic although I felt it could have gone technically deeper.&lt;/p&gt;
&lt;p&gt;I would have approached it by live coding a naïve version on stage. It&amp;#39;s essential as few people know the related APIs and find them magical. The magic goes away when you see how it all goes together under the hood. It&amp;#39;s a minor gripe, though, and this way the talk was to the point without veering too much from its topic.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#lightning-talks&quot; id=&quot;lightning-talks&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Lightning Talks&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#lightning-talks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/a5b3bb4522ae4456094b87c89de742d9.jpg&quot; alt=&quot;Andrey wants you to come to React Vienna!&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Andrey wants you to come to React Vienna!&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The conference had roughly forty minutes for lightning talks. The audience could vote which ones should go on stage and then the presenters did their best. The topics were varied and included ideas related to accessibility, productivity, CSS techniques, and Git. They were entertaining overall, and I wish a couple had been longer as there was potential for something more in-depth. Short talks tend to be more challenging to deliver than long ones.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#sara-soueidan-on-svg&quot; id=&quot;sara-soueidan-on-svg&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Sara Soueidan on SVG&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#sara-soueidan-on-svg&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/6f470b180d58c258ec0795071b1c5214.jpg&quot; alt=&quot;Sara on SVG&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Sara on SVG&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The conference ended with Sara Soueidan&amp;#39;s talk about SVG (Scalable Vector Graphics) and its capabilities. I knew you could do a lot with SVG, but I didn&amp;#39;t think it&amp;#39;s possible to do this much. She demonstrated how to implement its generative graphics and texturing capabilities for example.&lt;/p&gt;
&lt;p&gt;I feel the talk was a little detail-heavy for the last presentation of a day and I would have been able to appreciate it more had it been earlier. I would have probably swapped her talk with Max&amp;#39;s or had an inspirational, lighter talk at the end.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#afterparty&quot; id=&quot;afterparty&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Afterparty&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#afterparty&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/8bec68fb03bdc4c12266c69fbf06769d.jpg&quot; alt=&quot;DnB at afterparty&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;DnB at afterparty&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After the last talk, there was still something to eat and drink outside. From there people headed to the afterparty held in Studio 68 and MARK Salzburg. Although the location was remote and little tricky to reach, it was a good choice. I saw both Rasmus and Tobias singing karaoke and even made a few friends, so it wasn&amp;#39;t all that bad.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-good-the-bad-the-ugly&quot; id=&quot;the-good-the-bad-the-ugly&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Good, The Bad, The Ugly&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-good-the-bad-the-ugly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/8526105c685e6b34603fb37a00ee9299.jpg&quot; alt=&quot;The DJ was the only person dancing&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;The DJ was the only person dancing&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I was positively surprised by Concat. The conference went without any significant hiccups. The content was solid although I might have gone with a different order. The food was excellent, and there was plenty of it. I have never seen a conference with this tasty food yet, and I have seen a lot of events!&lt;/p&gt;
&lt;p&gt;Even though the conference venue was slightly remote, I can see why the organizers chose it. The space worked well, and there was enough of it. Compared to the other Austrian conferences (AgentConf, ScriptConf) I have seen this year, I would say Concat had the best space and food. AgentConf was on par when it came to the talks, and ScriptConf was solid as well.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/317b7bd9b4b19738e653323cf7db2f8d.jpg&quot; alt=&quot;The organizers of Concat&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;The organizers of Concat&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2018.conc.at/&quot;&gt;Concat&lt;/a&gt; was a great find for me, and I hope more people will discover it. Salzburg itself is worth visiting, and a technical conference like this makes a possible trip even better. I wish I can participate again next year!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can find more of &lt;a href=&quot;https://www.flickr.com/photos/bebraw/sets/72157692394539081&quot;&gt;my Concat 2018 photos at Flickr&lt;/a&gt;.&lt;/blockquote&gt;</content></entry><entry><title>Verdaccio - A lightweight npm proxy registry - Interview with Juan Picado</title><id>averdaccioalightweightnpmproxyregistryinterviewwithjuanpicado2018-02-26t00:00:00z</id><link href="https://survivejs.com/blog/verdaccio-interview/"></link><updated>2018-02-26T00:00:00Z</updated><content type="html">&lt;p&gt;If you develop JavaScript applications, you most likely use &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;, the most famous package manager available for JavaScript. At the time of writing, it hosts over 600 thousand packages, and the amount keeps rapidly increasing year by year.&lt;/p&gt;
&lt;p&gt;That said, npm isn&amp;#39;t perfect. What if it goes offline for a while or you want to use private packages at your company? npm provides several commercial options, but today we&amp;#39;ll discuss an open source one, &lt;a href=&quot;https://github.com/verdaccio/verdaccio&quot;&gt;Verdaccio&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/jotadeveloper&quot;&gt;Juan Picado&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/fba48015a688c38cc84e5b55b07858c0?s=200&quot; alt=&quot;Juan Picado&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;
My name is Juan, and I’m super passionate about open source and always willing to contribute and to learn something new. I’ve worked with several languages on the client side, but my favorite by far is JavaScript. I started using Dojo Toolkit, and these days I code mostly using React, TypeScript, and Node.js.
&lt;/p&gt;

&lt;p&gt;Currently, I work in Austria as a Software Engineer at Mobfox. I love meetups, books, sports, software conferences and I travel a lot.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-verdaccio-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-verdaccio-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Verdaccio&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-verdaccio-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Verdaccio is a lightweight private proxy registry with an entirely optional configuration that allows you to host private Node.js packages and compatible with all client package managers such npm, yarn or pnpm.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-verdaccio-work-&quot; id=&quot;how-does-verdaccio-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Verdaccio&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-verdaccio-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Verdaccio emulates the main npmjs registry, its internals can be broken down into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web Interface&lt;/strong&gt;: A simple interface to navigate your private packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private Storage&lt;/strong&gt;: The main feature is hosting private packages. For instance, you might override packages from public registries. The default storage is file system based.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uplinks&lt;/strong&gt;: References to other registries. Verdaccio can handle as many registries as you want to link. By default, it links to npm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proxy and Cache&lt;/strong&gt;: The most important part - it allows to selectively cache or route packages to other registries based on a match pattern.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin Support&lt;/strong&gt;: For authentication, web middleware and soon storage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: By default, Verdaccio uses htpasswd basic authentication, but there are plugins for LDAP, Gitlab, MongoDB, Bitbucket and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packages Access&lt;/strong&gt;: Restrict access to packages by peer groups, users or both, based on the auth plugin you want to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-verdaccio-differ-from-other-solutions-&quot; id=&quot;how-does-verdaccio-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Verdaccio&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-verdaccio-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Other solutions very often either require a long list of prerequisites before the first usage, hardware requirements are high and of course, you usually have to pay to use them.&lt;/p&gt;
&lt;p&gt;With Verdaccio, you instead start out small with a proper default configuration and can then scale or adapt if necessary. A configuration file is created when you install Verdaccio which you can then customize using plugins created by the community.&lt;/p&gt;
&lt;p&gt;And even if Verdaccio by default is file system based, it’s a limitation easy to resolve using our ecosystem of plugins. You can evolve Verdaccio from a small and straightforward registry to an application scaled to fit large infrastructures using the right list of plugins.&lt;/p&gt;
&lt;p&gt;Furthermore, we provide Docker and Kubernetes support that make things even easier for companies that use Verdaccio in their development workflows.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-verdaccio-&quot; id=&quot;why-did-you-develop-verdaccio-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Verdaccio&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-verdaccio-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://github.com/rlidwka/sinopia/issues/376&quot;&gt;long history&lt;/a&gt; behind this project. Verdaccio is one of the multiple forks of sinopia, forked initially by Trent Earl and John Wilkinson after Sinopia was abandoned. I became a regular contributor, and after some months contributing, I got the project’s ownership and evolving Verdaccio into what the project it is today.&lt;/p&gt;
&lt;p&gt;Among other things, we went from 200 stars on GitHub, 600 downloads per month on npm and 10k on Docker Hub to 2200 stars, 14k and 250k downloads. This rise in popularity would not have been possible without the help of many contributors and especially the core team composed of Meeeeow, Ayush Sharma, Breno Rodrigues and many others.&lt;/p&gt;
&lt;p&gt;This project is significant for the community and me, and I firmly believe it has to exist as a free and straightforward solution to emulate an npm package system in your company or local environment, as well as it being open source.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In one word – grow. We want to be the most important and most used open source registry, and for that, we have drawn a plan along last year to provide a good base. Throughout 2017 we managed to release several stable versions, ship new releases, improve Docker support, publish a new website with documentation and we have been working on the next major release v3 in parallel, currently in Alpha stage.&lt;/p&gt;
&lt;p&gt;v3 will provide a bunch of exciting things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scale&lt;/strong&gt;: Verdaccio v2 is file system based and that’s a problem if you want to scale, since Javascript is single thread and Node.js only uses one core for each process, a file system does not allow to scale properly. In v3, we are shipping the possibility to replace the default storage with a custom one, either in the cloud (Firebase, Google Cloud or Amazon S3) or any NoSQL database like CouchDB or MongoDB.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt;: We have improved the plugin documentation to help developers to ship more and more integrations, and we&amp;#39;ve tried to make the development more accessible with a plugin generator, types definitions based on Flow and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New Web UI&lt;/strong&gt;: In the latest version of v2 we have been already shipped a new feature, a sidebar with a dependencies navigator. But we want more. We want to create a UI that allows users to update their profiles, tokens and even the update registry configuration. We would like to enable users to customize the theme as well which may be welcomed by companies that put a strong emphasis on consistency with their corporate identity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API&lt;/strong&gt;: We will provide more support to the npm API, such tokens, deprecations or stars.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;v3 still &lt;strong&gt;will be entirely backward compatible with sinopia&lt;/strong&gt;, we want their users to feel comfortable with moving to Verdaccio.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-verdaccio-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-verdaccio-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Verdaccio&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-verdaccio-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Node.js stopped to being a tool only for backend developers a long time ago. These days with Javascript bundlers such as Webpack, Rollup or Prepack, npm packages have become significant - more than 600k in the central registry and much more privately.&lt;/p&gt;
&lt;p&gt;But not all is perfect, many incidents last years on central registry remind us we need a solution in case this happens again, and Verdaccio is the ideal tool for avoiding sudden development issues, missing packages and can also serve as an offline emergency solution.&lt;/p&gt;
&lt;p&gt;Verdaccio has lately also been used for E2E testing of npm packages before publishing them to npm, as outlined by Strapi in a &lt;a href=&quot;https://medium.com/@strapi/testing-your-npm-package-before-releasing-it-using-verdaccio-ngrok-28e2832c850a&quot;&gt;medium post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Contribute to open source (it will change your life), learn, read books, enjoy and be happy doing your work. Do not try to learn all fancy frameworks, focus on the JavaScript - which is beautiful and comfortable to learn. Teach others, share your knowledge and if you drink coffee while coding, be sure that is from Nicaragua, it&amp;#39;s magic.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I admire Kyle Simpson and Nicholas C. Zakas. They are great JavaScript teachers, writers, and excellent communicators; it would be great to have them here. Also, I’d like to read about Rebecca Turner (main npm contributor), Zoltan Kochan (pnpm core contributor) or Sebastian McKenzie (Yarn committer).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Juan! Verdaccio is a valuable service for any company developing JavaScript-based software seriously.&lt;/p&gt;
&lt;p&gt;To learn more, &lt;a href=&quot;http://www.verdaccio.org/&quot;&gt;head to Verdaccio site&lt;/a&gt; or &lt;a href=&quot;https://github.com/verdaccio/verdaccio&quot;&gt;check out Verdaccio on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Parket - A state management library inspired by mobx-state-tree - Interview with Leah Ullmann</title><id>aparketastatemanagementlibraryinspiredbymobxstatetreeinterviewwithleahullmann2018-02-16t00:00:00z</id><link href="https://survivejs.com/blog/parket-interview/"></link><updated>2018-02-16T00:00:00Z</updated><content type="html">&lt;p&gt;State management is one of those topics that divides opinions. So far we&amp;#39;ve seen a couple of options so far.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;#39;ll cover Parket, a solution by &lt;a href=&quot;https://twitter.com/hrmny_&quot;&gt;Leah Ullmann&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/52401c37bc5c4d54a051c619767fdbf8?s=200&quot; alt=&quot;Leah Ullmann&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m a (mostly) self-taught developer, started with Java in school, but the two languages I use the most at the moment are Rust and JavaScript.
&lt;/p&gt;

&lt;p&gt;My primary interests right now are web dev, devops, and game dev. I am currently working as a freelance full-stack developer.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-parket-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-parket-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Parket&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-parket-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Parket is a state management library; a well-known example would be Redux. It&amp;#39;s primarily inspired by mobx-state-tree, which I didn&amp;#39;t use because of the large file size.&lt;/p&gt;
&lt;p&gt;Parket lets you create models with a state, actions, and views; these can later be used by instantiating them and can be nested inside each other.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-parket-work-&quot; id=&quot;how-does-parket-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Parket&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-parket-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Parket internally uses Proxies. Proxy is a newish feature which allows you to wrap objects and manage to get and set access to it; it&amp;#39;s like adding a getter and setter to every property but also applies to new properties added.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-parket-differ-from-other-solutions-&quot; id=&quot;how-does-parket-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Parket&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-parket-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A lot of state management libs seem to focus on immutability a lot; every state update has to return an immutable object. I manage mutability via the proxies so you can&amp;#39;t set anything outside of actions, you also don&amp;#39;t have to return anything or call &lt;code&gt;setState&lt;/code&gt; and the likes, because it&amp;#39;s listening to the state changes and sends events based on those.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A basic example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; model &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;parket&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Person &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;model&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Person&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  initial&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    firstname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    lastname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  actions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot; &gt;setFirstName&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;first&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;firstname &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; first&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot; &gt;setLastName&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;last&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;lastname &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  views&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    fullname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;firstname&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;lastname&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; instance &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; firstname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Tom&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the state gets passed to the actions, which just modify it without doing anything special.&lt;/p&gt;
&lt;p&gt;The same thing happens with views, but that only read from the state, same as accessing it from the outside, the views get updates on every state change. Anyone familiar with mobx-state-tree will probably see the similarities.&lt;/p&gt;
&lt;p&gt;You define a model for the state and can reuse it. This is useful mostly for nested models, i.e., todos in a todo list.&lt;/p&gt;
&lt;p&gt;When instantiating the model, you can pass an object to get merged into the state. I might change this to pass it into the initial function because it can currently override nested objects.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;I have also adapted the mobx-state-tree TodoMVC example to Parket, which you can find in the repo.&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Asynchronous example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Async &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;model&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Async&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  initial&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loading&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    result&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  actions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; self &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;doSomethingAsync&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      self&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;loading &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Be aware that you should handle errors ( /rejections )&lt;/span&gt;
      self&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;result &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-await&quot; &gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;somethingAsync&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      self&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;loading &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see here, Parket doesn&amp;#39;t care what your action does or instead what it is; it just listens to state changes.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-parket-&quot; id=&quot;why-did-you-develop-parket-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Parket&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-parket-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found mobx-state-tree a while ago and immediately liked it. mobx-state-tree and the dependency to MobX make the file size big. Being in the Preact core team I obviously had to make something smaller, so after failing two times, Parket was born (~1.5kB).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not sure yet, maybe another library when I get an idea, there inevitably will be something. Perhaps I&amp;#39;ll go to university soon, so that might be fun.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-parket-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-parket-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Parket&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-parket-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#39;t think I&amp;#39;m qualified to predict the future, but I&amp;#39;ll try anyway.&lt;/p&gt;
&lt;p&gt;The one thing I can see happening is more PWAs (progressive web-apps) will get to the market, and with new web features, they can become even more powerful. There are already some fantastic examples of Twitter Lite and the new Instagram PWA. You could use Parket in a PWA, so that&amp;#39;s nice.&lt;/p&gt;
&lt;p&gt;There will also always be new frameworks, some worth looking at, others not so much, but it&amp;#39;s all in the name of progress.&lt;/p&gt;
&lt;p&gt;I hope we&amp;#39;ll get something innovative sometime soon, Jason (&lt;code&gt;@_developit&lt;/code&gt;) talked about how visual programming could be used for the UI instead of the component based frameworks we use now.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Go to a coding boot camp if you can, or some other place where you have a teacher you can ask when you have problems. Freecodecamp and the community around it are also great, but I only found that after I already knew most of what they teach.&lt;/p&gt;
&lt;p&gt;Not specific to web, but: Find a problem and solve it, even if it has been solved before&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maybe &lt;a href=&quot;https://github.com/zouhir&quot;&gt;zouhir&lt;/a&gt; or &lt;a href=&quot;https://github.com/lukeed&quot;&gt;lukeed&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to the Preact community for being so great, wouldn&amp;#39;t be where I am today without them.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Leah! It&amp;#39;s always nice to see new approach to state management.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/ForsakenHarmony/parket&quot;&gt;find Parket in GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>substyle - Build Styling Agnostic Components for React - Interview with Jan-Felix Schwarz</title><id>asubstylebuildstylingagnosticcomponentsforreactinterviewwithjanfelixschwarz2018-02-08t00:00:00z</id><link href="https://survivejs.com/blog/substyle-interview/"></link><updated>2018-02-08T00:00:00Z</updated><content type="html">&lt;p&gt;One of the tricky things about writing React components meant for public consumption is making them compatible with &lt;a href=&quot;react/advanced-techniques/styling-react/&quot;&gt;various styling approaches&lt;/a&gt; used by the community. The problem exists because application styling isn&amp;#39;t considered as a first-class citizen by React and it doesn&amp;#39;t provide a strong opinion on how to solve it. As a result, the amount of available approaches has exploded.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jfschwarz&quot;&gt;Jan-Felix Schwarz&lt;/a&gt; noticed the same problem. As a result &lt;em&gt;substyle&lt;/em&gt; was born.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/043c2f73dd7c170c8e616a8d87471b14?s=200&quot; alt=&quot;Jan-Felix Schwarz&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I work as front-end tech lead at Signavio in Berlin. We are building products that help large businesses to understand and transform the ways they work. I&amp;#39;ve been doing JavaScript SPA development for the best part of the past decade, so I guess when React came out it was a defining moment in my professional life. :)
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-substyle-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-substyle-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;substyle&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-substyle-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;substyle&lt;/em&gt; is a utility for authors of open source React component libraries. It tries to make it easier to build components in a way that allows users to customize styles of every single element rendered by a component. Users will be able to do that through CSS, CSS Modules, many css-in-js libraries, or using inline styles. This way, the component integrates well into applications using any styling approach, without forcing an opinion about tooling.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-substyle-work-&quot; id=&quot;how-does-substyle-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;substyle&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-substyle-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;substyle&lt;/em&gt; provides a higher-order component that preprocesses whichever props the user passes for styling purposes so that they become more comfortable to consume. It injects a single, special &lt;code&gt;style&lt;/code&gt; prop, which is used in the wrapped component&amp;#39;s render function to derive the right styling props to forward to each of the rendered elements.&lt;/p&gt;
&lt;p&gt;For example, a universally stylable &lt;code&gt;&amp;lt;Popover /&amp;gt;&lt;/code&gt; component could be written like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; substyle &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;substyle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Popover &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;substyle&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; style&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;...&lt;/span&gt;style&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;...&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;close&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;x&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; children &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, users of the &lt;code&gt;&amp;lt;Popover /&amp;gt;&lt;/code&gt; component can pass their custom &lt;code&gt;className&lt;/code&gt;, which will be used to derive classes for all the elements rendered by the component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// JSX                        // Rendered HTML&lt;/span&gt;

&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;Popover className&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;popover&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;div class=&quot;popover&quot;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   &amp;lt;button class=&quot;popover__close&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;Popover&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//     x&lt;/span&gt;
                              &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   &amp;lt;/button&amp;gt;&lt;/span&gt;
                              &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   &amp;lt;span&amp;gt;Hello world!&amp;lt;/span&amp;gt;&lt;/span&gt;
                              &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If they want to pass some custom inline styles, they can do so by supplying a nested &lt;code&gt;style&lt;/code&gt; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// JSX                        // Rendered HTML&lt;/span&gt;

&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;Popover style&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;             &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;div style=&quot;background: white;&quot;&amp;gt;&lt;/span&gt;
  background&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;white&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;        &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   &amp;lt;button style=&quot;right: 0;&quot;&amp;gt;x&amp;lt;/button&amp;gt;&lt;/span&gt;
  close&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;        &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   &amp;lt;span&amp;gt;Hello world!&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;                           &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;Popover&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If they use css modules or some css-in-js lib, they will want to pass the unique, auto-generated classes to assign to the elements. They can do so via the &lt;code&gt;classNames&lt;/code&gt; prop that is handled by substyle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// JSX                        // Rendered HTML&lt;/span&gt;

&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;Popover classNames&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;        &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;div class=&quot;1n3n1g&quot;&amp;gt;&lt;/span&gt;
  popover&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;1n3n1g&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;          &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   &amp;lt;button class=&quot;ew339k&quot;&amp;gt;x&amp;lt;/button&amp;gt;&lt;/span&gt;
  popover__close&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;ew339k&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;   &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   &amp;lt;span&amp;gt;Hello world!&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;                           &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;Popover&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-substyle-differ-from-other-solutions-&quot; id=&quot;how-does-substyle-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;substyle&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-substyle-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know of one other solution addressing the same problem called &lt;a href=&quot;https://github.com/markdalgleish/react-themeable&quot;&gt;react-themeable&lt;/a&gt;. The general idea behind both, &lt;em&gt;react-themeable&lt;/em&gt; and &lt;em&gt;substyle&lt;/em&gt;, is the same. However, during the development of a component library at Signavio I had to solve some additional practical challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to define default styles for components?&lt;/li&gt;
&lt;li&gt;How to build composite components so that also all leaf elements of nested components can be styled by the user?&lt;/li&gt;
&lt;li&gt;If, depending on the passed props, there are different variants of a component, how to allow the user to define custom styles specifically for a particular variant?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exploring solutions to these problems I finally ended up writing my utility.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-substyle-&quot; id=&quot;why-did-you-develop-substyle-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;substyle&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-substyle-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I got the initial idea for it while developing an open source &lt;a href=&quot;https://github.com/effektif/react-mentions&quot;&gt;React mentions input&lt;/a&gt;. As I was aiming to let users style this input widget with css and inline styles, I had to add quite a bit of code to my components just for this purpose. To keep my code DRY and the render functions clean, I extracted this repetitive styling logic into a helper function.&lt;/p&gt;
&lt;p&gt;Later I realized that I could quickly add support for styling through css modules and css-in-js libraries, just by changing this helper function and without having to touch any of the components. And this is basically how &lt;em&gt;substyle&lt;/em&gt; came to be.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope that the idea of supporting universal styling takes hold in the React community and that we can establish some best practices for writing reusable components. It would make app developers&amp;#39; lives better as they would not have to study docs, examples, or source code of every single component library to find out how to override styles of particular elements. Instead, they could just use the same familiar styling API for any open source component.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-substyle-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-substyle-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;substyle&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-substyle-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;substyle&lt;/em&gt; is just my take on a universal styling API for React components and it demonstrates that it is quite easy to implement this. So I don&amp;#39;t know if &lt;em&gt;substyle&lt;/em&gt; as a library will have a future, but I hope that we will continue the discussion about the styling of reusable components.&lt;/p&gt;
&lt;p&gt;For web development in general, I see much more fundamental trends: One hot topic is the shift from frameworks to compilers. I believe this idea has enormous potential and it&amp;#39;s exciting to see projects like Prepack and svelte pushing forward this frontier.&lt;/p&gt;
&lt;p&gt;Another development I expect for the next years is that the architectural boundary between client and server will become more and more blurry as server rendering and GraphQL APIs become the norm. We will be able to share much more code between front and back ends, up to a point, where this distinction is rendered useless.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Be more passionate about what you are building than how you are making it. Don&amp;#39;t choose libraries and frameworks just because they are hyped, but because they promise to solve a particular problem that you are feeling.&lt;/p&gt;
&lt;p&gt;I think this helps to embrace that there is so much choice in the JavaScript ecosystem, rather than feeling overwhelmed by it. Also, don&amp;#39;t be intimidated by unfamiliar, complex-sounding jargon. Usually, it&amp;#39;s just fancy names for simple concepts.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I dig the stuff Brent Jackson (@jxnblk) is building. He&amp;#39;s both, a great programmer and designer, and his work is right at the intersection of both disciplines.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Jan-Felix! &lt;em&gt;substyle&lt;/em&gt; looks like an excellent fit for anyone wanting to write robust React components that are easy to consume.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/jfschwarz/substyle&quot;&gt;find substyle on GitHub&lt;/a&gt;. See also &lt;a href=&quot;https://www.youtube.com/watch?v=CKPzyeX7nyA&quot;&gt;Jan-Felix&amp;#39;s presentation (16 mins) on the topic&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Experiences on AgentConf 2018</title><id>aexperiencesonagentconf20182018-02-06t00:00:00z</id><link href="https://survivejs.com/blog/agentconf-2018/"></link><updated>2018-02-06T00:00:00Z</updated><content type="html">&lt;p&gt;I was invited to &lt;a href=&quot;https://www.agent.sh/&quot;&gt;AgentConf 2018&lt;/a&gt; on its second iteration about a month ago as one of the organizers saw &lt;a href=&quot;https://presentations.survivejs.com/the-whys-hows-and-whats-of-npm-packaging/&quot;&gt;a presentation of mine about npm packaging&lt;/a&gt;. I gained free entry to the conference against a lightning talk but more on that later.&lt;/p&gt;
&lt;p&gt;The concept is simple. After two days of single track talks in Dornbirn, there are two days of skiing (alpine, not cross-country) in Lech. Skiing is optional, but at least for me, it was the highlight even if the talks were good quality. There were around 180 people in the main conference, and roughly 50 remained for skiing.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-arrival-day&quot; id=&quot;the-arrival-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Arrival Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-arrival-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/84ab9417246be62470d7107c3aebc256.jpg&quot; alt=&quot;Dornbirn at night&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Dornbirn at night&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As a large part of the hotel capacity of Dornbirn was taken, I decided to stay at a local Airbnb with a friend that was going to the conference as well. We shared the costs and felt it was good value.&lt;/p&gt;
&lt;p&gt;The train trip from Vienna took six and half hours, but given the quality of train service in Austria, the travel didn&amp;#39;t feel cumbersome. The train network worked well, and the price level of the restaurant was reasonable at least compared to what I&amp;#39;m used to personally. The quality was excellent as well.&lt;/p&gt;
&lt;p&gt;After we arrived at Dornbirn, we dropped our bits to Airbnb and headed to the center. From there we went to &lt;a href=&quot;https://www.karren.at/panoramarestaurant/&quot;&gt;Panoramarestaurant Karren&lt;/a&gt; with a cable car for the speakers&amp;#39; dinner after a short trip by car.&lt;/p&gt;
&lt;p&gt;It was a great way to start the conference, and I met several people that I knew online already. The food was amazing, and the views were great. Especially the mushroom soup (steinpilzsuppe) was a favorite of mine.&lt;/p&gt;
&lt;p&gt;There was some complication on the way back, and after the cable car came back down, we ended up walking back to our Airbnb. It wasn&amp;#39;t a long distance, and it didn&amp;#39;t matter that much after a satisfying dinner.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-first-presentation-day&quot; id=&quot;the-first-presentation-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The First Presentation Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-first-presentation-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/0c75b235ecceaf50a66d196430d01ed1.jpg&quot; alt=&quot;Breakfast at Spielboden kino&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Breakfast at Spielboden kino&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first day started with an hour-long breakfast and registration at 8:00. That was early enough for me at least! The breakfast was disappointing, though, as there was only single kind of bread and something to drink with it. Fortunately, this was fixed on the second day.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#max-stoiber-on-open-source&quot; id=&quot;max-stoiber-on-open-source&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Max Stoiber on Open Source&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#max-stoiber-on-open-source&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/3ce85eed6678d9bd9e7018627f7363db.jpg&quot; alt=&quot;Max Stoiber on open source&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Max Stoiber on open source&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Max&amp;#39;s presentation covered his successful career with open source so far. It was interesting for me to contrast it with &lt;a href=&quot;https://survivejs.com/blog/scriptconf-2018/#evan-you-on-open-source&quot;&gt;the one by Evan You on ScriptConf&lt;/a&gt; as the take was somewhat different. Whereas Evan&amp;#39;s presentation felt more grounded to the rough reality, Max&amp;#39;s was more on the lighter, optimistic side.&lt;/p&gt;
&lt;p&gt;The viewpoints complement each other. I think the key understanding is that open source is not an end itself but more of a means. The whole situation changed in two decades as first the industry resisted the idea and then ended up adopting it as a mainstream idea.&lt;/p&gt;
&lt;p&gt;For me, there&amp;#39;s not much left to sell in the idea, and I&amp;#39;m more interested in finding sustainable models as I feel that&amp;#39;s where we still have work left to do.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#guillermo-rauch-and-leo-lamprecht-on-folding-space-and-time&quot; id=&quot;guillermo-rauch-and-leo-lamprecht-on-folding-space-and-time&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Guillermo Rauch and Leo Lamprecht on Folding Space and Time&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#guillermo-rauch-and-leo-lamprecht-on-folding-space-and-time&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/125f7e6a0ba8032d57fc8834aaa0d89a.jpg&quot; alt=&quot;Guillermo and Leo on folding space and time&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Guillermo and Leo on folding space and time&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Guillermo and Leo discussed how their company Zeit approaches scalability. Once you understand what takes time in your requests, you can start to think about where and how to perform the work.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zeit/pkg&quot;&gt;pkg&lt;/a&gt; was one of the highlights of the presentation for me. As it happens, precompiling your code with Node.js can speed it up considerably. One benefit of doing this is that then you can run your application without having to install Node.js although you still have to compile somewhere.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#peggy-rayzis-on-apollo&quot; id=&quot;peggy-rayzis-on-apollo&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Peggy Rayzis on Apollo&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#peggy-rayzis-on-apollo&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c3740eaff7b7822b5072532c0ac36855.jpg&quot; alt=&quot;Peggy on Apollo&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Peggy on Apollo&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After a coffee break, Peggy gave a talk on Apollo. I&amp;#39;ve seen Peggy present twice before. Even though there tend to be similar elements in her Apollo talks, you also learn new things as their GraphQL client keeps evolving.&lt;/p&gt;
&lt;p&gt;It seems that at least in some cases you might be able to eschew state management solutions like Redux entirely by using something like &lt;a href=&quot;https://www.npmjs.com/package/apollo-link-state&quot;&gt;apollo-link-state&lt;/a&gt; instead. It would not surprise me if this trend continued although you lose some control in the process.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#kaylie-alexa-kwon-on-yarn-workflow&quot; id=&quot;kaylie-alexa-kwon-on-yarn-workflow&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Kaylie Alexa Kwon on Yarn Workflow&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#kaylie-alexa-kwon-on-yarn-workflow&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/537d9fe496cbcf91a54079d8312092dd.jpg&quot; alt=&quot;Kaylie on Yarn&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Kaylie on Yarn&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Kaylie discussed &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; package manager and how they use it in their company. It was a good talk given it showed how she got involved with the project and also about the impact she has made on it so far as an outside contributor.&lt;/p&gt;
&lt;p&gt;The important point of the talk for me is that you should find tools that fit your process. And if there&amp;#39;s something missing, you should look into improving the tool. Yarn seems to be open to improvements as a project. The development has motivated npm to become better as well, so everybody has won.&lt;/p&gt;
&lt;p&gt;After the talk, there was a lunch break although I don&amp;#39;t remember what we had for lunch, but I am quite sure it had beans in it, but it wasn&amp;#39;t a memorable one.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#carly-litchfield-on-testing&quot; id=&quot;carly-litchfield-on-testing&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Carly Litchfield on Testing&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#carly-litchfield-on-testing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/06d0b7116b55646fa839626d79624a32.jpg&quot; alt=&quot;Carly on testing&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Carly on testing&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Although I missed the majority of Carly&amp;#39;s talk, I did gain a few insights from it. I learned particularly of &lt;a href=&quot;https://percy.io/&quot;&gt;Percy&lt;/a&gt;, a tool for visual regression testing. I was aware of the technique, but I didn&amp;#39;t know there&amp;#39;s such a good solution available yet.&lt;/p&gt;
&lt;p&gt;Carly has made her &lt;a href=&quot;https://github.com/cjlitch/screenshot-test-app&quot;&gt;demo application&lt;/a&gt; and &lt;a href=&quot;https://github.com/cjlitch/screenshot-test-app/blob/master/Make%20backend%20devs%20jealous%20of%20your%20test%20suite.pdf&quot;&gt;presentation slides&lt;/a&gt; available.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#andrey-okonetchnikov-on-linting&quot; id=&quot;andrey-okonetchnikov-on-linting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Andrey Okonetchnikov on Linting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#andrey-okonetchnikov-on-linting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/ce6a5c8297fde5691cd839ecd3650746.jpg&quot; alt=&quot;Andrey on linting&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Andrey on linting&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Andrey discussed his story with &lt;a href=&quot;https://www.npmjs.com/package/lint-staged&quot;&gt;lint-staged&lt;/a&gt; so far. The plan was to get a particular feature done by the presentation, but no matter how hard we tried, there was always some edge case we couldn&amp;#39;t manage to resolve. Alas, development has to continue.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;lint-staged&lt;/em&gt; is interesting because it allows you to run commands on the files that are &lt;strong&gt;only&lt;/strong&gt; in the staging mode of Git. Doing this can save a considerable amount of computation and make development flow smoother.&lt;/p&gt;
&lt;p&gt;The beautiful thing is that although the tool has been written using JavaScript, you can run the tool against any other language since it operates on a command level.&lt;/p&gt;
&lt;p&gt;Since I know the tool already and helped Andrey with the slides, there wasn&amp;#39;t anything new in the presentation for me. But I&amp;#39;m sure people that don&amp;#39;t know it yet, gained a lot from the talk and it was pleasant to follow.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#javi-velasco-on-agnostic-component-design-for-react&quot; id=&quot;javi-velasco-on-agnostic-component-design-for-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Javi Velasco on Agnostic Component Design for React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#javi-velasco-on-agnostic-component-design-for-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/5f083f1b11de5c3370b95cb6f977c43a.jpg&quot; alt=&quot;Javi on React components&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Javi on React components&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Javi discussed his journey with &lt;a href=&quot;http://react-toolbox.io/&quot;&gt;React Toolbox&lt;/a&gt;. It is an implementation of Google Material Design for React, and he is currently working on the next major version. I know from experience API design is hard to get right, so it was a fitting talk. I had seen it before in ReactiveConf, though, so there weren&amp;#39;t many new insights for me.&lt;/p&gt;
&lt;p&gt;When it comes to APIs, the key point for me is figuring out the right coupling and responsibilities for each part of the API. An API should be solid on a conceptual level so that it&amp;#39;s easy to explain.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#lightning-talks&quot; id=&quot;lightning-talks&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Lightning Talks&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#lightning-talks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/e5c7ee9018fc2199ef3de638f85b42b0.jpg&quot; alt=&quot;Benedikt on strange features of JavaScript&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Benedikt on strange features of JavaScript&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The lightning talks were the part where I got my ten minutes of fame or so. I was supposed to go first, but due to some misunderstanding, a local team went on the stage instead. I didn&amp;#39;t follow their twenty-minute presentation too closely, but I did learn that if you wrap a web application in a desktop shell and it looks roughly the same, the enterprise clients won&amp;#39;t care.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1dYwzzByKugHIrfA48cdhV0N-b2S2Ms_Ojd8I4ux_QRg&quot;&gt;My presentation&lt;/a&gt; was about static sites. I built my first one over twenty years ago and decided to revisit that era while discussing why static sites and static site generators are so relevant these days. See the resulting site at &lt;a href=&quot;https://juhoshomepage.com/&quot;&gt;juhoshomepage.com&lt;/a&gt;. Creating an expanded version of this talk would be fun.&lt;/p&gt;
&lt;p&gt;After me, Patrick Stapfer discussed ReasonML and how he uses CSS Modules with it. I was still too excited about my time on the stage, so I don&amp;#39;t remember much else.&lt;/p&gt;
&lt;p&gt;Finally, Benedikt Meurer discussed strange features of JavaScript. The core point was to avoid using &lt;code&gt;with&lt;/code&gt; anywhere ever as it&amp;#39;s a horrible feature. Incidentally, it&amp;#39;s disabled in the strict mode. The problem is that you cannot remove features from the language as that would break the internet. Therefore it can only gain features.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#dinner-and-afterparty&quot; id=&quot;dinner-and-afterparty&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Dinner and Afterparty&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#dinner-and-afterparty&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The dinner and afterparty were organized at the venue. The venue itself was an old cinema and fit the event quite well although the atrium was a little narrow and forced people to two floors. Apart from that, it seemed to work nicely, and usually, there was enough space.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t have much to say for the dinner, but I&amp;#39;m sure it was something in an Italian style. The afterparty felt weak, so I decided to join other speakers at the center of the city in a cozy little restaurant. I&amp;#39;m not a great fan of afterparties, so not much was lost.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-second-presentation-day&quot; id=&quot;the-second-presentation-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Second Presentation Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-second-presentation-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/880d24387366d787cf0cc932a8897eb4.jpg&quot; alt=&quot;Spielboden kino&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Spielboden kino&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The second day of presentations started with breakfast as well. This time around there was more variety to choose from although this time around I was better prepared by bringing something to eat myself.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#sara-vieira-on-depression&quot; id=&quot;sara-vieira-on-depression&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Sara Vieira on Depression&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#sara-vieira-on-depression&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/7be5660424eef2511d8346afaee8c826.jpg&quot; alt=&quot;Sara on depression&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Sara on depression&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first presentation of the day was about depression by the famous Sara Vieira. I know her personally, so it was interesting for me to hear how she ended up where she is right now and the effort it took.&lt;/p&gt;
&lt;p&gt;It was an interesting choice for a keynote although the topic itself was highly important. People tend not to discuss mental health in public, so it was a good opening.&lt;/p&gt;
&lt;p&gt;Given it&amp;#39;s a massive topic and demands discussion, I would have left it at the end of the first presentation day to give people space. I feel it took some attention away from the following one although maybe that&amp;#39;s just me.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#nacho-martin-on-integrating-redux-with-a-server&quot; id=&quot;nacho-martin-on-integrating-redux-with-a-server&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Nacho Martin on Integrating Redux with a Server&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#nacho-martin-on-integrating-redux-with-a-server&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/88537c6318ecb71de5fdf3d8244cbd57.jpg&quot; alt=&quot;Nacho on integrating Redux with a server&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Nacho on integrating Redux with a server&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Nacho Martin, an internet acquaintance of mine, discussed how they are using Redux and integrating it with their Elixir server. The key insight for me was that if you consider what your real problem is, then it&amp;#39;s easier to solve it. In their case, they had a problem with duplicating logic over both server and client. If I understood right, the way to solve this was to simplify the state management and push a large part of this to the server.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#benedikt-meurer-on-turbofan&quot; id=&quot;benedikt-meurer-on-turbofan&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Benedikt Meurer on TurboFan&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#benedikt-meurer-on-turbofan&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/6dc7e207f8eaefd815bc7453cf3093dd.jpg&quot; alt=&quot;Benedikt on TurboFan&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Benedikt on TurboFan&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After a coffee break, Benedikt discussed V8&amp;#39;s new engine, TurboFan. The talk made me appreciate all the work Google puts into it. JavaScript isn&amp;#39;t a straightforward language to optimize yet they keep finding ways to achieve that, and there&amp;#39;s more in store.&lt;/p&gt;
&lt;p&gt;One of the learnings for me was that it&amp;#39;s better to write close to standard instead of trying to optimize code yourself. The interpreter can optimize the execution likely better than you can.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#michel-weststrate-on-reactivity&quot; id=&quot;michel-weststrate-on-reactivity&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Michel Weststrate on Reactivity&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#michel-weststrate-on-reactivity&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/4455dc03ff28e5681d889e2ec2d9eda0.jpg&quot; alt=&quot;Michel on reactivity&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Michel on reactivity&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Michel gave a skiing themed variant on his MobX talk. It was an excellent introduction to the topic, and I&amp;#39;m sure it inspired people to try it. A solid talk.&lt;/p&gt;
&lt;p&gt;This time around, the lunch was a burger. Both meat and vegetarian options were provided. Also, there was dessert for speakers at least. The lunch was much better than on the first day.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#emil-sj-lander-on-yoga&quot; id=&quot;emil-sj-lander-on-yoga&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Emil Sjölander on Yoga&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#emil-sj-lander-on-yoga&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/a713f308cd9568f84e8cd94526bb071a.jpg&quot; alt=&quot;Emil on Yoga&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Emil on Yoga&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Emil discussed &lt;a href=&quot;https://facebook.github.io/yoga/&quot;&gt;Yoga&lt;/a&gt;, a cross-platform layout engine. I didn&amp;#39;t get much out of the talk, but that might have been due to the excellent lunch, not the presentation.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#kristijan-ristovski-on-state-management&quot; id=&quot;kristijan-ristovski-on-state-management&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Kristijan Ristovski on State Management&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#kristijan-ristovski-on-state-management&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/253ad2f9c06ee86f7984b3fae91236db.jpg&quot; alt=&quot;Kristijan on state management&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Kristijan on state management&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Kristijan, also known as kitze by the community, discussed the concept of rock stars, trends, and following them. The points he made were fair. Instead of going with the popular option, it makes sense to consider your options and constraints, and only then make a decision. Going against the mainstream is an option too. Most importantly you should focus on providing value. Wrong thing done right is still the wrong thing.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#sia-karamalegos-on-react-performance&quot; id=&quot;sia-karamalegos-on-react-performance&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Sia Karamalegos on React Performance&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#sia-karamalegos-on-react-performance&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/bd4a57c20ea30829b08c1c101a4bde2e.jpg&quot; alt=&quot;Sia on React performance&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Sia on React performance&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Sia discussed React performance and provided multiple viewpoints on the topic. It was a good overview and you can &lt;a href=&quot;https://speakerdeck.com/siakaramalegos/lightning-fast-react-apps&quot;&gt;check out the slides online&lt;/a&gt; for the primary ideas. The topic is ideal for a small workshop.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#asim-hussain-on-bots&quot; id=&quot;asim-hussain-on-bots&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Asim Hussain on Bots&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#asim-hussain-on-bots&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/7d6ca58ef06eaa7a4e0116f5fa4e8e68.jpg&quot; alt=&quot;Asim on bots&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Asim on bots&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Asim gave the last presentation of the conference about bots. The point was simple. A certain famous American president writes tweets where &lt;a href=&quot;https://en.wikipedia.org/wiki/Sentiment_analysis&quot;&gt;sentiment analysis&lt;/a&gt; can be applied. Given he is an influential figure, the argument is that this affects economics. If you created a bot that uses the technique and then trades, you would be able to make money.&lt;/p&gt;
&lt;p&gt;Asim did simulated trades based on this. Although the bot wasn&amp;#39;t a great success, it still proved the point. Asim&amp;#39;s talk helped to show how emerging techniques will change computing in the coming years and it was an elegant way to end the spoken part of the conference.&lt;/p&gt;
&lt;p&gt;After Asim&amp;#39;s talk, we headed to Lech for skiing.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-first-skiing-day&quot; id=&quot;the-first-skiing-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The First Skiing Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-first-skiing-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/30743677eee7fe496de2ad78577d9423.jpg&quot; alt=&quot;Lech in the morning&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Lech in the morning&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Given I hadn&amp;#39;t been skiing in twenty years (just cross-country), I decided to play it safe and go with the beginner group. It didn&amp;#39;t take long for my skiing instincts to kick in, though, and it began to feel comfortable by the end of the day.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-second-skiing-day&quot; id=&quot;the-second-skiing-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Second Skiing Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-second-skiing-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/d645f7a7a1e5bd8e20d72dc0a2bd03c5.jpg&quot; alt=&quot;Before the epic ride&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Before the epic ride&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I decided to tackle the most prominent hill near the starting point in the second morning. The conditions weren&amp;#39;t as sunny as during the first day, but they were still quite good. The ride was epic, and after that, I headed back to a smaller one to chill out before heading for lunch with other attendees.&lt;/p&gt;
&lt;p&gt;Lech proved to be surprisingly expensive (2-3x Vienna), so therefore it&amp;#39;s not the best place for a cost-conscious person. It was still nice to visit and experience.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-good-the-bad-the-ugly&quot; id=&quot;the-good-the-bad-the-ugly&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Good, The Bad, The Ugly&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-good-the-bad-the-ugly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c01d92466f18104ef85162cfe8b6330a.jpg&quot; alt=&quot;Lech in sunset&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Lech in sunset&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Overall, AgentConf was great, and I enjoyed it a lot. Skiing was the highlight for me although I&amp;#39;ll prepare better next year so I can spend more time on the more challenging slopes. I was physically fit for it, but it takes a certain amount of adaptation to get most out of skiing.&lt;/p&gt;
&lt;p&gt;The presentations had high quality although I might have used a different order. I wish the second day had lightning talks as well and I would have loved to see panels in the program. One of the neat things AgentConf did was that they got Christoph Nakazawa to host them. If the audience was feeling shy, he had a few questions in store. I think it improved the quality of the conference a lot.&lt;/p&gt;
&lt;p&gt;When you visit a lot of conferences, it&amp;#39;s easier to see what&amp;#39;s missing. Compared to ScriptConf, I noticed I was missing an MC although Christoph compensated for this well. Still, having strong audio in place seems to help with the ambiance a lot which was interesting for me to notice.&lt;/p&gt;
&lt;p&gt;Food was excellent especially for the speakers&amp;#39; dinner and the second day. For some reason, the first day felt weaker when it came to this although I didn&amp;#39;t have to go hungry.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/d9e8c00e530aa8f3710986e0d4b8d448.jpg&quot; alt=&quot;The organizers of AgentConf&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;The organizers of AgentConf&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I might go to &lt;a href=&quot;https://www.agent.sh/&quot;&gt;AgentConf&lt;/a&gt; again next year, and it was one of the better technical conferences I&amp;#39;ve ever been. There are always little details you can do better, but the primary offering is solid and good value.&lt;/p&gt;
&lt;p&gt;I spent more money on the trip than I would have liked as I didn&amp;#39;t expect Lech to be so expensive. For me, even a less fancy place to ski would have been more than enough especially given I&amp;#39;m far from the level in which I can enjoy the most challenging slopes.&lt;/p&gt;
&lt;p&gt;If you want to go to a good conference and enjoy skiing, AgentConf is a great choice. I like the idea of combining high quality technical content with leisure and I wish more conferences followed this route.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can find more of &lt;a href=&quot;https://www.flickr.com/photos/bebraw/sets/72157691195161201/&quot;&gt;my AgentConf 2018 photos at Flickr&lt;/a&gt;. See also &lt;a href=&quot;https://www.flickr.com/photos/142568661@N06/&quot;&gt;the official photos&lt;/a&gt;.&lt;/blockquote&gt;</content></entry><entry><title>Experiences on ScriptConf 2018</title><id>aexperiencesonscriptconf20182018-02-01t00:00:00z</id><link href="https://survivejs.com/blog/scriptconf-2018/"></link><updated>2018-02-01T00:00:00Z</updated><content type="html">&lt;p&gt;One of the benefits of living in Vienna is that it&amp;#39;s easy to reach central Europe and its conferences. Given Linz is close to Vienna (about 90 minutes by train), I decided to visit &lt;a href=&quot;https://scriptconf.org/&quot;&gt;ScriptConf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ScriptConf is a JavaScript themed single-track conference, and the promise was great talks and great food. That was an offer I couldn&amp;#39;t resist, and as a result, I found myself in Linz for a day. It&amp;#39;s likely I&amp;#39;ll visit again as the city was enjoyable and it felt like it has more to offer.&lt;/p&gt;
&lt;p&gt;The conference was split into two days. The first day was for workshops and the second day for the presentations. I participated only in the latter day.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-beginning-of-the-presentation-day&quot; id=&quot;the-beginning-of-the-presentation-day&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Beginning of the Presentation Day&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-beginning-of-the-presentation-day&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/2bf14385f82219355c95e252593b286d.jpg&quot; alt=&quot;The beginning of the conference&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;The beginning of the conference&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The curious thing about ScriptConf was that the official program started at 13:00. There was an hour for registration before that. I came from Vienna on the morning train, and that left me time to explore Linz and make some friends. I met a couple of other developers going to the conference before registering and we had a chance to get some beverages and breakfast to eat.&lt;/p&gt;
&lt;p&gt;In retrospect, I should have eaten a proper lunch before the event given the first official coffee at three o&amp;#39;clock didn&amp;#39;t have anything salty in it. As a result, we left the conference venue and found &lt;a href=&quot;https://en.wikipedia.org/wiki/Bosna_(sausage%29&quot;&gt;bosnas&lt;/a&gt; for ourselves. It was a new experience for me, but I&amp;#39;m glad we made this move as I needed the salty bit although the cakes provided by the conference were tasty as well.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#evan-you-on-open-source&quot; id=&quot;evan-you-on-open-source&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Evan You on Open Source&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#evan-you-on-open-source&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/f24c966638d4d0642ce0d1e1eeda0969.jpg&quot; alt=&quot;Evan You&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Evan You&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The day itself began with a presentation by &lt;a href=&quot;https://twitter.com/youyuxi&quot;&gt;Evan You&lt;/a&gt;, the author of the popular &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; UI framework. It was about his journey into open source, and I think it was a fitting way to start the day. I could recognize many of his struggles and especially his version of hype cycle for open source development resonated with me.&lt;/p&gt;
&lt;p&gt;Each project has its momentum that it either sustains or loses. More importantly, there&amp;#39;s the personal side. As a project gains popularity, it has to deal with the pressures caused by this reputation.&lt;/p&gt;
&lt;p&gt;For some reason, the entire day was riddled with small technical problems, and this caused the schedule to slip at times. It wasn&amp;#39;t a big problem but something a little annoying especially given the day started so late.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#marcy-sutton-on-accessibility&quot; id=&quot;marcy-sutton-on-accessibility&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Marcy Sutton on Accessibility&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#marcy-sutton-on-accessibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/0d48da009b6c993a597bfb3dc1f88363.jpg&quot; alt=&quot;Marcy Sutton&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Marcy Sutton&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The day continued with &lt;a href=&quot;https://twitter.com/marcysutton&quot;&gt;Marcy Sutton&lt;/a&gt;&amp;#39;s talk on accessibility. I feel this is an important topic that needs more attention from the web development community. Often it&amp;#39;s an afterthought if it&amp;#39;s given any thought at all. I became aware of &lt;a href=&quot;https://axe-core.org/&quot;&gt;aXe tools&lt;/a&gt;, and I&amp;#39;ll use the Chrome plugin in the future.&lt;/p&gt;
&lt;p&gt;I feel the talk would work exceptionally well in a workshop format as then you get to test the tools and see their impact on accessibility.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#simona-cotin-on-serverless&quot; id=&quot;simona-cotin-on-serverless&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Simona Cotin on Serverless&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#simona-cotin-on-serverless&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/a09d4f04833f1e5562fa3bc4ede47f1b.jpg&quot; alt=&quot;scriptconf-2018&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;scriptconf-2018&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/simona_cotin&quot;&gt;Simona Cotin&lt;/a&gt; discussed the phenomenon of Serverless applications. It was an excellent overview of the topic although I&amp;#39;m not that interested in Azure myself. Perhaps something more platform-agnostic would have fit the conference better.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#michaela-lehr-on-augmented-reality&quot; id=&quot;michaela-lehr-on-augmented-reality&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Michaela Lehr on Augmented Reality&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#michaela-lehr-on-augmented-reality&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/d569389956e1f0c7fbf86aa4a20e316f.jpg&quot; alt=&quot;Michaela Lehr&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Michaela Lehr&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FischaelaMeer&quot;&gt;Michaela Lehr&lt;/a&gt; covered the rise of Augmented Reality (AR) and related technologies (Virtual Reality (VR), Mixed Reality (MR)). The beautiful thing about the talk was that it gave a good idea of the potential and future. It will still take years before we see real mainstream adoption. Now is the time to experiment.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#andr-staltz-on-cycle-js&quot; id=&quot;andr-staltz-on-cycle-js&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;André Staltz on Cycle.js&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#andr-staltz-on-cycle-js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/f0f4477c0dd5b80579001c63675f8463.jpg&quot; alt=&quot;André Staltz&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;André Staltz&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/andrestaltz&quot;&gt;André Staltz&lt;/a&gt; approached his &lt;a href=&quot;https://cycle.js.org/&quot;&gt;Cycle.js framework&lt;/a&gt; from a refreshing angle of paper coding. Instead of focusing on code, he focused on graphs to get to the concepts behind Cycle.js. Although Cycle.js was already familiar to me, the talk drove down the key ideas even further and explained the recent improvements which allow you to treat your applications as fractals - applications of applications.&lt;/p&gt;
&lt;p&gt;The dinner provided after André&amp;#39;s talk was adequate compared to some other technical conferences although it didn&amp;#39;t reach the advertised level at least for me. But then, you don&amp;#39;t go to these events to enjoy the local food. That&amp;#39;s why restaurants exist.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#phil-hawksworth-on-next-wave-infrastructure&quot; id=&quot;phil-hawksworth-on-next-wave-infrastructure&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Phil Hawksworth on Next Wave Infrastructure&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#phil-hawksworth-on-next-wave-infrastructure&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/aba784c925c20c8ccbce0a6938d19c32.jpg&quot; alt=&quot;Phil Hawksworth&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Phil Hawksworth&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Although the talk had a dry premise, &lt;a href=&quot;https://twitter.com/philhawksworth&quot;&gt;Phil Hawksworth&lt;/a&gt;&amp;#39;s talk was one of the better ones of the conference. It made me even more convinced that static sites enhanced the right way is an excellent way to develop websites. The technology is maturing, and it provides even more benefits than I knew.&lt;/p&gt;
&lt;p&gt;The ability to treat each Git commit as deployment is a simple yet powerful idea as it allows quick visual inspections during the development process. The fact that you can complement a static site with dynamic elements takes them closer to the CMS space, and you could claim that there&amp;#39;s a significant overlap between the two. It&amp;#39;s no wonder we have the category of static site CMS&amp;#39;s these days as a result.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#charlie-gerard-on-mind-control&quot; id=&quot;charlie-gerard-on-mind-control&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Charlie Gerard on Mind Control&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#charlie-gerard-on-mind-control&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/ea5f704a081f4f22ce001c5b4acc184b.jpg&quot; alt=&quot;Charlie Gerard&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Charlie Gerard&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/devdevcharlie&quot;&gt;Charlie Gerard&lt;/a&gt; discussed how to control JavaScript using your mind. That is, how to achieve this using a specific device. She showed how she acquired equipment and developed a Node.js API for it. The presentation was made even better by live demonstrations that drove down the points.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-good-the-bad-the-ugly&quot; id=&quot;the-good-the-bad-the-ugly&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Good, The Bad, The Ugly&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-good-the-bad-the-ugly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/35a989d528f28020cd2b6698f067c8b2.jpg&quot; alt=&quot;The MC&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;The MC&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Overall, the second iteration of ScriptConf was a cool conference. Especially having an MC on the stage was a good idea and that&amp;#39;s something I hope other conferences will copy as it improves the atmosphere surprisingly much.&lt;/p&gt;
&lt;p&gt;The format of long presentations along the day felt a bit much at times. I would have appreciated lightning talks in between to get access to more ideas. The problem was made even worse by the late start time and technical delays.&lt;/p&gt;
&lt;p&gt;Although the primary space of the conference was roomy, the place where you registered and ate felt too small. One way to solve this would have been to use the area on both sides of the venue to split the problem. The need for space might be a cultural issue, though, as I&amp;#39;m used to having room.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/f6f2f71ff2942bfdb591e4e86b4bcb57.jpg&quot; alt=&quot;Linz at night&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Linz at night&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I am happy I went to &lt;a href=&quot;https://scriptconf.org/&quot;&gt;ScriptConf&lt;/a&gt;, and I feel it was good value. I spent approximately 200 euros for the entire trip, and if nothing else, I got exposed to new ideas and people. I might do this again next year.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can find more of &lt;a href=&quot;https://www.flickr.com/photos/bebraw/sets/72157669068490399&quot;&gt;my ScriptConf 2018 photos at Flickr&lt;/a&gt;.&lt;/blockquote&gt;&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;See also &lt;a href=&quot;https://www.storyblok.com/tp/all-you-need-to-know-script18-scriptconf&quot;&gt;All you need to know: Script18 #scriptconf&lt;/a&gt; and &lt;a href=&quot;https://www.wolfgang-ziegler.com/blog/script18&quot;&gt;Script18 - Impressions and Recap&lt;/a&gt; for other reports.&lt;/blockquote&gt;</content></entry><entry><title>Illuminate - Syntax highlighter for Node - Interview with Vivek Bansal</title><id>ailluminatesyntaxhighlighterfornodeinterviewwithvivekbansal2018-01-30t00:00:00z</id><link href="https://survivejs.com/blog/illuminate-interview/"></link><updated>2018-01-30T00:00:00Z</updated><content type="html">&lt;p&gt;One of the core features of this site is custom syntax highlighting. I had to figure out ways to deal with custom syntax provided by Leanpub. Initially, I implemented a solution based on &lt;a href=&quot;http://prismjs.com/&quot;&gt;PrismJS&lt;/a&gt;, but I wasn&amp;#39;t entirely happy with it, and the frustration led me to look into alternatives. That&amp;#39;s how I found &lt;a href=&quot;https://github.com/vkbansal/illuminate-js/&quot;&gt;Illuminate&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/_vkbansal&quot;&gt;Vivek Bansal&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://secure.gravatar.com/avatar/57d10b8c8d537e8517f6a3c324679da5?s=200&quot; alt=&quot;Vivek Bansal&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

My name is Vivek Kumar Bansal, and I work as a UI Engineer at &lt;a href=&quot;https://flipkart.com&quot;&gt;Flipkart, India&lt;/a&gt;. I started as a PHP developer and later switched to JavaScript/NodeJs full-time and I have nearly five years of professional experience. I firmly believe in open source philosophy and try to contribute to open source projects regularly.&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-illuminate-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-illuminate-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Illuminate&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-illuminate-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Illuminate is a syntax highlighter which can be used to highlight code snippets in HTML files. It is based on already popular syntax highlighter &lt;a href=&quot;http://prismjs.com/&quot;&gt;PrismJS&lt;/a&gt;. It can be easily integrated with tools like &lt;a href=&quot;https://github.com/markdown-it/markdown-it&quot;&gt;markdown-it&lt;/a&gt;. It can also be used with &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; via &lt;a href=&quot;https://www.npmjs.com/package/react-illuminate&quot;&gt;react-illuminate&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-illuminate-work-&quot; id=&quot;how-does-illuminate-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Illuminate&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-illuminate-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similar to PrismJS, It works by creating a &lt;strong&gt;Token&lt;/strong&gt; tree, by matching the code string to a given set of Regular Expressions, called a &lt;strong&gt;Language definition&lt;/strong&gt;. Later, The Token tree is again converted to a string by wrapping the code in &lt;code&gt;span&lt;/code&gt; tags and add appropriate class names.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-illuminate-differ-from-other-solutions-&quot; id=&quot;how-does-illuminate-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Illuminate&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-illuminate-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Illuminate was re-written from the ground up in ES6, so that it can be used in NodeJS and browser with the help of tools webpack, rollup, etc., With &lt;a href=&quot;https://www.npmjs.com/package/react-illuminate&quot;&gt;react-illuminate&lt;/a&gt;, it can also be used with ReactJS in the &amp;quot;react way&amp;quot;, without using &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-illuminate-&quot; id=&quot;why-did-you-develop-illuminate-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Illuminate&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-illuminate-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While working on &lt;a href=&quot;https://vkbansal.me&quot;&gt;my website&lt;/a&gt;, which is statically generated, I wanted something that can be used with &lt;a href=&quot;https://github.com/markdown-it/markdown-it&quot;&gt;markdown-it&lt;/a&gt; on NodeJS. I was already familiar with PrismJS and its inner workings. I had proposed the change in PrismJS itself, but the maintainers were not interested in it. Hence, I started working on my alternative.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Make it stable and add support for other frameworks/tools like Gatsby, Vue, etc.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-illuminate-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-illuminate-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Illuminate&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-illuminate-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that compile-to-javascript languages like TypeScript, ReasonML, Flow, etc., will see broad adoption. Type safety will become the first-class citizen of the web world.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do not limit yourselves to a particular framework/paradigm. Keep pushing your limits.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Vivek! I have been happy with Illuminate so far and hope others find it useful as well. It&amp;#39;s a great little project that deserves kudos.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/vkbansal/illuminate-js/&quot;&gt;Illuminate on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Logux - Replace AJAX-REST - Interview with Andrey Sitnik</title><id>aloguxreplaceajaxrestinterviewwithandreysitnik2018-01-26t00:00:00z</id><link href="https://survivejs.com/blog/logux-interview/"></link><updated>2018-01-26T00:00:00Z</updated><content type="html">&lt;p&gt;When you build a web application, you often have to communicate with a backend. It&amp;#39;s not uncommon to do this using AJAX against a RESTful API.&lt;/p&gt;
&lt;p&gt;Logux by &lt;a href=&quot;https://twitter.com/sitnikcode&quot;&gt;Andrey Sitnik&lt;/a&gt; is one possible alternative.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/cd32d17c95d3bfb352504c36462b98bd?s=200&quot; alt=&quot;Andrey Sitnik&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I was born in Vladivostok, a Russian city near Japan and China. I spent childhood in Yemen, Arabic country where my grandparents work.&lt;/p&gt;

&lt;p&gt;Now I am a digital nomad and lead front-end developer at &lt;a href=&quot;https://evilmartians.com/&quot;&gt;Evil Martians&lt;/a&gt;. Most of the readers will know me because of my open source projects: &lt;a href=&quot;https://www.npmjs.com/package/autoprefixer&quot;&gt;autoprefixer&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/postcss&quot;&gt;PostCSS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-logux-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-logux-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Logux&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-logux-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Logux is a JS library and Node.js server to replace AJAX requests. It synchronizes Redux/Vuex actions between clients and server (each, Redux actions on the server 😆) and between clients.&lt;/p&gt;
&lt;p&gt;In Logux you don’t need to write Redux Saga, calling &lt;code&gt;fetch()&lt;/code&gt;, show loader during a request, handling network errors and worry, that you don’t support offline-first and push updates. In Logux you use &lt;code&gt;dispatch.sync(action)&lt;/code&gt; instead of &lt;code&gt;dispatch(action)&lt;/code&gt; and Logux will send this action to a server and other clients.&lt;/p&gt;
&lt;p&gt;At least, we want to have simple API in Logux. In fact, it is still experiment (current version is just 0.2). I was inspired by ideas of CRDT and distributing computing. Right now we still need to understand how to present this remarkable thought in a better way.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-logux-work-&quot; id=&quot;how-does-logux-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Logux&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-logux-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Logux core is a JS library to synchronize actions log between two machines (there is no client and servers in Logux protocol, it is peer-to-peer protocol). By default, it uses WebSockets to maintain a connection (you can change connection mechanism), and it can store actions in different stores (memory, IndexedDB).&lt;/p&gt;
&lt;p&gt;This core also takes care of an essential thing in distribution systems: the time. For example, Alice did not have Internet for 30 minutes (NY metro doesn’t have the network in trains). But good applications allow changing documents in offline so she can change document and get a connection only 30 minutes later.&lt;/p&gt;
&lt;p&gt;30 minutes is an extended period, and other clients can alter the same document during this time. Because of this, we have to merge changes and fix conflicts. Don’t forget that Alice’s phone could have wrong time to make things worse. Yep, a distributed system can sometimes be complicated.&lt;/p&gt;
&lt;p&gt;Logux core will mark every action with particular time mark to handle the problem. Also, it will calculate the time difference between client and server so it will be sure what action was the last.&lt;/p&gt;
&lt;p&gt;On top of this core, we have few packages with an end-user facing API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/logux/logux-redux&quot;&gt;Logux Redux&lt;/a&gt; wraps all Logux Core magic to Redux-compatible API. At any moment Logux Server could send action and put it inside your history (for example, Alice finally got WiFi and sent her changes from the metro ride). Logux Redux will undo all Bob’s newest actions, add that Alice action “from the past” and replay all Bob’s actions again. Or in any moment server could send “undo” action (for example, you changed your login in offline, but this login was taken, and renaming could not be applied anymore) and Logux Redux will remove this action from history.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nikolay-govorov/logux-vuex&quot;&gt;Logux Vuex&lt;/a&gt; does the same for Vue and Vuex.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://logux.github.io/logux-status/&quot;&gt;Logux Status&lt;/a&gt; contains widgets and UX best practice to show current synchronization process to the client. With Logux you can implement Optimistic UI. It updates UI immediately after “Save” button click. If a user doesn‘t have connection Logux Status will show the widget with “Your changes were not saved on the server, connect to the Internet to save them.”&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/logux/logux-server&quot;&gt;Logux Server&lt;/a&gt; is a Node.js framework, but &lt;a href=&quot;https://github.com/logux/logux-protocol&quot;&gt;Logux protocol&lt;/a&gt; is open. Logux server will be similar to most of Node.js web servers. But instead of REST, URLs and forms, you will have Redux/Vuex actions. And some of this actions came from the past. You need to check action’s created time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right now, our primary challenge is to provide better API to clean log. I told you about a shiny utopia about adding actions to the log. But we also need to clean old actions, which are not actual anymore. For example, if you renamed user from &lt;code&gt;Old name&lt;/code&gt; to &lt;code&gt;New name&lt;/code&gt; and saved this changes on the server, you don’t need old action with &lt;code&gt;Old name&lt;/code&gt; anymore.&lt;/p&gt;
&lt;p&gt;Current cleaning API is decent, but we could do better by focusing more on modern developers. Not only on distributed system scientists.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-logux-differ-from-other-solutions-&quot; id=&quot;how-does-logux-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Logux&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-logux-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is easy to compare Logux with AJAX 😋. With Logux you don’t need to handle network errors (Logux Status will show error widget, Logux Redux will save action until a user gets a good connection). Don’t need to make loaders during saving the changes (You can update UI right after “Save” button click).&lt;/p&gt;
&lt;p&gt;In many cases, we need Redux Saga for AJAX. In Logux you just dispatch action and Logux will take care of sending to the server and show synchronization process to the user.&lt;/p&gt;
&lt;p&gt;But with less code, you will get more features. You will get push updates out-of-box. When one client dispatch action (like user renaming), a server will resend this action to other clients (Logux uses channels and subscriptions to control who is allowed to receive actions).&lt;/p&gt;
&lt;p&gt;Also, you will get basic offline-first support. New actions will be applied immediately to client UI, but then they will wait for Internet connection in IndexedDB. Of course, for good offline-first support, you need to take care of merging conflicts (when two users changed the same document). And Logux cannot fix all conflicts for you because it depends on business logic. But Logux will help you here by taking care of distributed time and Redux state time-traveling.&lt;/p&gt;
&lt;p&gt;Of course, there is no sense you use Logux in simple web pages. With 2-3 requests, it is better to use AJAX. And of course, AJAX is still better for some unusual cases, like sending big files. But, I think, in big applications, AJAX is not a competitor for Logux.&lt;/p&gt;
&lt;p&gt;It is more interesting to compare Logux with some modern solutions. For example, GraphQL and Apollo. Having these technologies with many great ideas inside is great. GraphQL is more focused on requesting the data, though. Mutation doesn’t have correct distributed time marks. Optimistic UI and subscriptions still need more code.&lt;/p&gt;
&lt;p&gt;In contrast in Logux by default, your React components will be subscribed to data updates. Optimistic UI is out of the box. CRDT could be implemented much simpler.&lt;/p&gt;
&lt;p&gt;On the other hand, GraphQL works better with PHP, Ruby or Python, because it does not require a WebSocket connection. Also, Apollo is much stable and ready-for-production solution. Right now I don’t recommend Logux for big projects. GraphQL will be much better for them. I am making Logux for future beyond GraphQL.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-logux-&quot; id=&quot;why-did-you-develop-logux-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Logux&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-logux-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was tired to write 50+ lines of code to save simple React form 😧.&lt;/p&gt;
&lt;p&gt;But also I believe in the better world. In the world when all web applications will have push updates and offline support. Wireless connection is always unstable. Especially for next billion of the users. I was tired of pressing Reload button on any network problem during AJAX request.&lt;/p&gt;
&lt;p&gt;We have lousy networking in applications, not because developers are lazy. My forms were bad too 😅.&lt;/p&gt;
&lt;p&gt;So my dream was to have less code with better networking. When I saw talk about &lt;a href=&quot;https://github.com/gritzko/swarm&quot;&gt;Swarm.js&lt;/a&gt;, I was so excited how simple and powerful is the idea of CRDT. But it was not so easy to combine CRDT with Redux because Redux and Swarm.js have separated actions logs. And when we drink with Dan Abramov in the bar, the simple idea was created. Logux idea is to use one actions log for everything: Redux, CRDT, networking.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, I need to write good docs and guides for Logux 0.2.&lt;/p&gt;
&lt;p&gt;Next, I will think about Logux 0.3: more syntax sugar for log cleaning, improve API according to practical experience and user feedback.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-logux-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-logux-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Logux&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-logux-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think GraphQL, Apollo, Firebase, gun.js show the simple trend: next revolution will be not on the client or the server. Next revolution will be in client-server communications.&lt;/p&gt;
&lt;p&gt;We have so many great things to client-side development but right now when you need to write AJAX request you are going to the old jQuery-like world.&lt;/p&gt;
&lt;p&gt;With PWA we will have more mobile web applications. But mobile users expect better networking from your web app. Push updates and offline support are standard in iOS/Android world. If we want to compete with native applications, we should make our web application smarter.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software development should make people happy, not solving tasks. If you are making a tool, think about DX, not only about features. If you are making an app, the user experience is more critical than framework and technologies.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andreypopp&quot;&gt;Andrey Popp&lt;/a&gt; is one of the most underestimated React developers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gritzko&quot;&gt;Victor Grishenko&lt;/a&gt; is one of the best-distributed system scientists. His &lt;a href=&quot;https://github.com/gritzko/swarm&quot;&gt;Swarm.js&lt;/a&gt; was the main inspiration for Logux.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tonsky&quot;&gt;Nikita Prokopov&lt;/a&gt; is other great distributed systems engineer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Andrey! You might be right in that we&amp;#39;ll see improvements next when it comes to server communication.&lt;/p&gt;
&lt;p&gt;If you want to learn more about Logux, consider the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mv--1vRvCys&amp;amp;t=417s&quot;&gt;Andrey&amp;#39;s talk about Logux with code examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/logux/logux-redux&quot;&gt;Logux Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/logux/logux-server/&quot;&gt;Logux Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/logux_io&quot;&gt;@logux_io on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Fastify - Fast and low overhead web framework for Node.js - Interview with Tomas Della Vedova</title><id>afastifyfastandlowoverheadwebframeworkfornodejsinterviewwithtomasdellavedova2018-01-17t00:00:00z</id><link href="https://survivejs.com/blog/fastify-interview/"></link><updated>2018-01-17T00:00:00Z</updated><content type="html">&lt;p&gt;Servers, servers, servers. I&amp;#39;ve written a lot of Node.js servers since I began using it. Initially, I went through the API it provides but after a while most of the community settled on using &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this interview you&amp;#39;ll learn about an alternative by &lt;a href=&quot;https://twitter.com/delvedor&quot;&gt;Tomas Della Vedova&lt;/a&gt;. Fastify has been designed performance in mind.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/1db56707b818ace550da1123a8ad1304?s=200&quot; alt=&quot;Tomas Della Vedova&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I am an enthusiastic software engineer, who spends most of his time programming in JavaScript and Node.js. I am constantly forward the enrichment of my knowledge and the exploration of new technologies. Moreover, I truly believe in the open source philosophy, and I will always be passionate about technology, design, and cinema.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-fastify-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-fastify-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Fastify&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-fastify-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fastify/fastify&quot;&gt;Fastify&lt;/a&gt; is an opinionated web framework for Node.js; it focuses on performance and low overhead. The architectural pattern that we used to build it enables microservice ready applications.&lt;/p&gt;
&lt;p&gt;The core is small and it &lt;a href=&quot;https://github.com/fastify/fastify/blob/master/docs/Ecosystem.md&quot;&gt;exposes powerful APIs to extend it&lt;/a&gt; with all the functionalities that are needed.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-fastify-work-&quot; id=&quot;how-does-fastify-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Fastify&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-fastify-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fastify is the handler function that you pass to the HTTP core module, nothing more.&lt;/p&gt;
&lt;p&gt;We started building it from scratch, adding one feature at a time. For every new feature, we worked a lot on the optimization and lowering the overhead of the feature, trying to reach the &amp;quot;almost zero&amp;quot; overhead.&lt;/p&gt;
&lt;p&gt;Fastify supports our of the box Hooks, express style middlewares, decorators, HTTP2 and async-await.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; fastify &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fastify&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; reply&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; hello&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;world&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-throw&quot; &gt;throw&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`Server listening on &lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;address&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have extracted from Fastify all the code that could be separated from the framework itself and used in other situations, for example in our &lt;a href=&quot;https://github.com/delvedor/find-my-way&quot;&gt;router&lt;/a&gt;, the &lt;a href=&quot;https://github.com/fastify/fast-json-stringify&quot;&gt;serialization library&lt;/a&gt; and the &lt;a href=&quot;https://github.com/fastify/middie&quot;&gt;middleware engine&lt;/a&gt;. We released them as separate libraries that don&amp;#39;t need Fastify as a dependency, so you can use them in your current framework as well, or even build one just for your needs!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-fastify-differ-from-other-solutions-&quot; id=&quot;how-does-fastify-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Fastify&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-fastify-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given one of the core goals of the project is performance, we do not land any feature if the implementation isn&amp;#39;t well optimized and the cost that we pay is as low as possible.&lt;/p&gt;
&lt;p&gt;Fastify has a robust plugin system, it guarantees the load (and close) order of the plugins and creates a zero cost encapsulation to help the users maintain a clean and ordered code. It will also help the user to write decoupled code and use a different version of the same plugin (or maybe with different configurations) in a different subsystem of the application. A similar approach with Express would cause the performance to drop significantly for each nesting level.&lt;/p&gt;
&lt;p&gt;Furthermore, the plugin model is based on &lt;a href=&quot;https://stackoverflow.com/questions/1312259/what-is-the-re-entrant-lock-and-concept-in-general&quot;&gt;reentrant&lt;/a&gt; locks and given it&amp;#39;s graph-based, Fastify handles asynchronous code correctly while guaranteeing the loading order and the close order of the plugins.&lt;/p&gt;
&lt;p&gt;The plugin system creates a direct acyclic graph, and in this way, it is impossible to create cross dependencies, and you can use a different version of the same plugin in different parts of your application.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/9f7ecd003147aad41c8b8c236c703db4.png&quot; alt=&quot;Directed acyclic graph&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Directed acyclic graph&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Thanks to this architecture it is easy to split your application in multiple microservices because we&amp;#39;ll help you with the creation of a system where the separation of concerns and cohesion are two essential keys of your application.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/6758771bb4590b09ac0780ceb3c51da9.png&quot; alt=&quot;Directed acyclic graph services&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Directed acyclic graph services&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-fastify-&quot; id=&quot;why-did-you-develop-fastify-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Fastify&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-fastify-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Almost one year and a half ago me and &lt;a href=&quot;https://twitter.com/matteocollina&quot;&gt;Matteo&lt;/a&gt;, the coauthor of Fastify, started working on a nice project, &lt;a href=&quot;https://github.com/fastify/fast-json-stringify&quot;&gt;fast-json-stringify&lt;/a&gt;. By doing different performances analysis we discovered that serialize JSON is very expensive, so we asked ourself, can we make it faster? We worked for 1-2 months, and we built &lt;code&gt;fast-json-stringify&lt;/code&gt;, which is 2x-3x times faster than the native method (spoiler alert, we use &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; FJS &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fast-json-stringify&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; stringify &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;FJS&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  properties&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    user&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    age&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;integer&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;tomas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;24&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We were pleased with the results, so we started optimizing other parts that usually are pretty expensive. Routing, hooks, middlewares and so on.&lt;/p&gt;
&lt;p&gt;After some time we put all together, and Fastify was born. We wanted to challenge ourselves to build an extremely fast web framework, with the goal to get very close to the performances of a plain node HTTP server.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently, we are close to the version 1.0.0. We are focusing on fixing the last bugs, and we are listening to feedback from our early adopters. In this way, we can try to meet their needs and handle breaking changes. We are also updating the API plugin to allow the users to declare their dependencies and provide better support for async-await.&lt;/p&gt;
&lt;p&gt;An example of how &lt;em&gt;async-await&lt;/em&gt; works in Fastify:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;server.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;build&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;opts&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; fastify &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fastify&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;opts&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fastify-helmet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fastify-mongodb&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    url&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;mongodb://mongo/db&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./lib&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;/v1&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-await&quot; &gt;await&lt;/span&gt; fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;ready&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; fastify&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;lib/index.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;plugin&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fastify&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; db &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;mongo&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; collection &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;collection&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// you can reach this route with `/v1/user/:id`&lt;/span&gt;
  fastify&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;/user/:id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; reply&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-try&quot; &gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token keyword keyword-await&quot; &gt;await&lt;/span&gt; collection&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;findOne&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        id&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;id
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-catch&quot; &gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; &gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      reg&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Something went wrong&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; plugin&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want our community to continue to grow, so every time a plugin creator sends it work to us, before adding it to our &amp;quot;official&amp;quot; &lt;a href=&quot;https://github.com/fastify/fastify/blob/master/docs/Ecosystem.md&quot;&gt;plugin list&lt;/a&gt; we help them to improve their code (if needed), and enforce a correct use of our API.&lt;/p&gt;
&lt;p&gt;We are also constantly updating the documentation with all the hardest parts or our architectural decisions. For example, we wrote the &lt;a href=&quot;https://github.com/fastify/fastify/blob/master/docs/Plugins-Guide.md&quot;&gt;hitchhiker&amp;#39;s guide to plugins&lt;/a&gt; to help users understand the architecture of the framework and how to use correctly the APIs that we expose, and we have just updated our &lt;a href=&quot;https://github.com/fastify/fastify/blob/master/docs/Getting-Started.md&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-fastify-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-fastify-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Fastify&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-fastify-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope it looks shiny!&lt;/p&gt;
&lt;p&gt;Joke apart, one of our core design decision, is that Fastify should provide a lightweight and small core that is easy to extend with plugins. Probably most of the work we&amp;#39;ll do in the future will be in this direction while exposing new (and low overhead) APIs to the plugins creators and help them to create valuable plugins.&lt;/p&gt;
&lt;p&gt;Regarding the future of web development I think that progressive web apps, AI and internet of things will play a important role. This is why with Fastify we created a &amp;quot;batteries not included&amp;quot; framework, we want to help developers build the applications they need by using the code they need.&lt;/p&gt;
&lt;p&gt;I hope that the open source world will continue to grow massively as its doing right now, and that developers and companies will continue to release their work, in a way that everybody will continue to grow as a group, where we all help each other make valuable code to help people.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Try. The better way to learn new things is to try them.&lt;/p&gt;
&lt;p&gt;A book or a workshop can help until a certain point, but if you want to really understand how something works, just write it. Get your hands dirty.&lt;/p&gt;
&lt;p&gt;If you have some problem with a library or have a question on how approach to a pattern or technology, ask.
But remember to be always kind with others, we are all human beings and the way we interact each other is important.&lt;/p&gt;
&lt;p&gt;If you open an issue be kind, thank for the work that has been done, explain your problem and if you can, propose a solution. It will be appreciated.&lt;/p&gt;
&lt;p&gt;Contribute to open source, even with small things. The open source world is amazing and as much you give as much you get.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s hard to measure how much the open source world gave to me; it helped me to be a better developer and a better person.&lt;/p&gt;
&lt;p&gt;Do not be discouraged by others experienced developers, everyone has been young and everyone will help you, as well as you will help other young developers in the future.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/yoshuawuyts&quot;&gt;Yoshua Wuyts&lt;/a&gt;, creator of &lt;a href=&quot;https://github.com/choojs/choo&quot;&gt;Choo&lt;/a&gt; and many other cool things.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Tomas! Fastify looks like something I should try on my servers.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://www.fastify.io/&quot;&gt;learn more from Fastify site&lt;/a&gt; or &lt;a href=&quot;https://github.com/fastify/fastify&quot;&gt;Fastify GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>BEM - Methodology to enable reuse in front-end development - Interview with Sergey Berezhnoy</title><id>abemmethodologytoenablereuseinfrontenddevelopmentinterviewwithsergeyberezhnoy2018-01-12t00:00:00z</id><link href="https://survivejs.com/blog/bem-interview/"></link><updated>2018-01-12T00:00:00Z</updated><content type="html">&lt;p&gt;Developing large scale applications requires a certain amount of discipline. Sometimes it is enforced by the environment; sometimes you have to apply it yourself through conventions. Likely both are needed to some extent. As applications grow in complexity, the need for clear architecture grows unless you want to end up with a &lt;a href=&quot;http://www.laputan.org/mud/&quot;&gt;big ball of mud&lt;/a&gt; or a similar disaster.&lt;/p&gt;
&lt;p&gt;To learn more about the topic, I am interviewing &lt;a href=&quot;https://twitter.com/veged&quot;&gt;Sergey Berezhnoy&lt;/a&gt;, one of the authors of &lt;a href=&quot;https://en.bem.info/&quot;&gt;BEM&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/69aab18f21bd89606bf19a11c4989bb4?s=200&quot; alt=&quot;Sergey Berezhnoy&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I am a web developer in &lt;a href=&quot;https://yandex.com/company/&quot;&gt;Yandex&lt;/a&gt; since 2005, and I participate in the development of such Yandex services like Search, Mail, Blog Search, Yandex blogging platform, Video and Images searches. Along with service development created internal tools for web development. I am one of the co-authors of BEM.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-bem-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-bem-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;BEM&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-bem-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;BEM is an architecture pattern allowing to achieve flexible and maintainable code. It&amp;#39;s a way to make your code self-descriptive and predictable keeping everything consistent and familiar to all the developers on a project.&lt;/p&gt;
&lt;p&gt;And all you need to achieve this for literally any interface is just a few concepts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.bem.info/methodology/key-concepts/#block&quot;&gt;Blocks&lt;/a&gt; to split an interface into components&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.bem.info/methodology/key-concepts/#element&quot;&gt;Elements&lt;/a&gt; to split complex blocks into parts&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.bem.info/methodology/key-concepts/#modifier&quot;&gt;Modifiers&lt;/a&gt; to express state&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.bem.info/methodology/key-concepts/#mix&quot;&gt;Mixes&lt;/a&gt; to have different blocks or elements on the same DOM node&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.bem.info/methodology/redefinition-levels/&quot;&gt;Redefinition levels&lt;/a&gt; to build a project layer by layer avoiding copy/paste.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-bem-work-&quot; id=&quot;how-does-bem-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;BEM&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-bem-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The idea behind BEM is similar to Web Components or any other component approach to web development.&lt;/p&gt;
&lt;p&gt;Grasping sizeable complex system at once is hard. Developers may split it into simple reusable blocks which are easy to use and maintain. And then they can be used as Lego bricks to build anything.&lt;/p&gt;
&lt;p&gt;BEM provides best practices for that as well as ready-made &lt;a href=&quot;https://en.bem.info/toolbox/&quot;&gt;tools&lt;/a&gt; and &lt;a href=&quot;https://en.bem.info/platform/libs/bem-components/6.0.0/&quot;&gt;block libraries&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-bem-differ-from-the-other-solutions-&quot; id=&quot;how-does-bem-differ-from-the-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;BEM&lt;/em&gt; differ from the other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-bem-differ-from-the-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, BEM is just a concept (similar to OOP).&lt;/p&gt;
&lt;p&gt;The main power of BEM is that it works for any tech (HTML, CSS, JS, tests, documentation, etc.) and everything can be described with just a few simple concepts.&lt;/p&gt;
&lt;p&gt;BEM can be implemented in many different ways on any programming language.&lt;/p&gt;
&lt;p&gt;Of course, we have &lt;a href=&quot;https://en.bem.info/platform/&quot;&gt;our own&lt;/a&gt;, and as we love JavaScript, it&amp;#39;s JS based.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-bem-&quot; id=&quot;why-did-you-develop-bem-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;BEM&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-bem-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Initially, we faced a few problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoiding copy/paste on different projects with the same design style guide&lt;/li&gt;
&lt;li&gt;Keeping large projects maintainable&lt;/li&gt;
&lt;li&gt;Having unified structure on different projects to make it familiar to developers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So BEM was started to solve these problems but eventually became much more powerful.&lt;/p&gt;
&lt;p&gt;For all the steps of BEM evolution see &lt;a href=&quot;https://en.bem.info/methodology/history/&quot;&gt;The history of BEM&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll continue to popularize BEM methodology and develop examples of implementations in different techs.
Here&amp;#39;s one of them for React:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bem/bem-react-core&quot;&gt;bem-react-core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bem/bem-react-components&quot;&gt;bem-react-components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bem/create-bem-react-app&quot;&gt;create-bem-react-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#39;s also a &lt;a href=&quot;https://skillsmatter.com/skillscasts/10327-bem-the-unknown&quot;&gt;video&lt;/a&gt; from FullStackConf where we talked about all the features of BEM.&lt;/p&gt;
&lt;p&gt;Everything about interaction design in large teams is also important for me. As the department of search interfaces development continues to grow, we want to get benefits from the fact that so many cool people gathered in one place. It&amp;#39;s a pity though such insights are hard to open source.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-bem-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-bem-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;BEM&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-bem-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m sure that the component approach will continue to evolve. For example, nowadays in React the same ideas we used in our code several years ago are implemented. I hope that other concepts of the BEM methodology will be more widely known because ultimately it will make it easier to do web interfaces and it is beneficial to all of us as users.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Be always open to learning something new. On the other hand, do not reinvent the wheel but improve it — do not hurry to create your solution, take your time to find existing once and improve.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Sergey! Conventions have power!&lt;/p&gt;
&lt;p&gt;To learn more about BEM, visit &lt;a href=&quot;https://en.bem.info/&quot;&gt;bem.info&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Summary of 2017</title><id>asurvivejssummaryof20172017-12-31t00:00:00z</id><link href="https://survivejs.com/blog/summary-of-2017/"></link><updated>2017-12-31T00:00:00Z</updated><content type="html">&lt;p&gt;It was quite a year for me. You could say a life-changing one even. I visited at least ten countries in Europe, and most of them were new acquaintances to me. I traveled more in one year than in my entire life before. I made more friends in one year than the years before. I found a new place to live. I began learning a new language, German, and I am starting to get the hang of it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#publishing&quot; id=&quot;publishing&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Publishing&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#publishing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As if that wasn&amp;#39;t enough, I also published a new paper book, &lt;a href=&quot;https://www.amazon.com/dp/9526868803&quot;&gt;SurviveJS - Webpack&lt;/a&gt;, and I am progressing on &lt;a href=&quot;https://survivejs.com/maintenance/&quot;&gt;a new one about maintenance&lt;/a&gt; with the assistance of &lt;a href=&quot;http://sapegin.me/&quot;&gt;Artem Sapegin&lt;/a&gt;. I know I have to revise &lt;a href=&quot;https://survivejs.com/react&quot;&gt;the entire React book&lt;/a&gt; but that has to happen after the maintenance one is out of the oven.&lt;/p&gt;
&lt;p&gt;This blog grew by about sixty posts, most of which were interviews. It is merely humbling to see the amount of variety in the community. If you know good topics to cover in interviews, get in touch.&lt;/p&gt;
&lt;p&gt;The site received well needed technical tweaks as a part of its technical debt was paid away. There&amp;#39;s still some work left, but now it&amp;#39;s faster and easier to perform the needed improvements to serve the community better.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#public-appearances&quot; id=&quot;public-appearances&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Public Appearances&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#public-appearances&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I gave multiple public appearances across Europe in various meetups and conferences. It all started by coincidence as &lt;a href=&quot;https://survivejs.com/blog/euro-tour-2017/&quot;&gt;ReactiveConf invited me to tour with them about webpack&lt;/a&gt;. It was during this trip when I discovered Vienna and its welcoming community. &lt;a href=&quot;https://medium.com/@bebraw/how-a-month-in-vienna-changed-the-way-i-think-about-life-ba87da8c28a9&quot;&gt;I spent a life-changing Summer&lt;/a&gt; there and it still keeps changing as I am shaping my new life in the city.&lt;/p&gt;
&lt;p&gt;One of the more interesting sessions for me personally was the one about how I grew bootstrapped this little business for myself. You can &lt;a href=&quot;https://presentations.survivejs.com/bootstrapping-a-personal-lifestyle-business/&quot;&gt;find the slides online&lt;/a&gt;. It&amp;#39;s a topic I would like to revisit at a better time. Personal development itself is something I should study in greater detail.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#business&quot; id=&quot;business&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Business&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#business&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Business-wise the year wasn&amp;#39;t as good one as the first one but the advances on the personal side more than made up for that. I think I&amp;#39;ve finally found a business model that makes sense to me. I realized that I should do a mix of consulting/training and writing. I can use the consulting income to allow me to write while writing allows me to get those consulting clients. What&amp;#39;s missing is stronger integration between these two.&lt;/p&gt;
&lt;p&gt;While doing my webpack workshops, I realized it&amp;#39;s convenient to build them on top of the book. I need to be more intentional about this, though and modularize all the content so that it works for multiple purposes like this. The webpack book and the maintenance book are quite close to this goal. The point is that done right; this would allow me to provide an online course offering to support the model.&lt;/p&gt;
&lt;p&gt;My most immediate goal is to get &lt;a href=&quot;https://survivejs.com/maintenance/&quot;&gt;the maintenance book&lt;/a&gt; out there so people find it. Content-wise it&amp;#39;s beginning to look good, but I require more feedback to push it further. I have some idea how to improve it, but feedback allows me and Artem to go faster.&lt;/p&gt;
&lt;p&gt;Even if the business goes wrong, it&amp;#39;s not like I will run out of things to do. There&amp;#39;s a fantastic amount of content to develop and refine. This work alone will keep me busy for months assuming there&amp;#39;s no other work to be done.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#finnish-code-ambassador-of-2017&quot; id=&quot;finnish-code-ambassador-of-2017&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Finnish Code Ambassador of 2017&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#finnish-code-ambassador-of-2017&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the highlights of the year was the fact that &lt;a href=&quot;https://survivejs.com/blog/blue-arrow-awards-winner-2017/&quot;&gt;I was chosen as the Finnish Code Ambassador of 2017&lt;/a&gt;. It was my first major award, and I feel a large part of that belongs to the community that allows me to work this way.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-finland-24-26-4-2018-helsinki&quot; id=&quot;react-finland-24-26-4-2018-helsinki&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Finland - 24-26.4.2018, Helsinki&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-finland-24-26-4-2018-helsinki&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I began to organize &lt;a href=&quot;https://react-finland.fi/&quot;&gt;React Finland&lt;/a&gt;, the first major React conference in Finland, with a group of friends. It started as a joke but became something quite serious fast. So far organizing it has been a definite challenge, and I&amp;#39;ve been picking up a lot of new skills while using older ones gained during the past few years. I have a feeling the event will be one of the highlights of the next year for me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2017 was a memorable year in many ways. It was the most intense and tiring year I&amp;#39;ve gone through. I went far beyond my comfort zone, but I suppose that&amp;#39;s necessary if you want to progress in life. The year opened a lot of new possibilities, and although there are challenges ahead, I have a good feeling about 2018.&lt;/p&gt;
</content></entry><entry><title>controllerim - MobX Inspired State Management for React - Interview with Nir Yosef</title><id>acontrollerimmobxinspiredstatemanagementforreactinterviewwithniryosef2017-12-27t00:00:00z</id><link href="https://survivejs.com/blog/controllerim-interview/"></link><updated>2017-12-27T00:00:00Z</updated><content type="html">&lt;p&gt;When you are writing applications, eventually you have to decide how to manage state. You can get far with React &lt;code&gt;setState&lt;/code&gt; and lift the state in the component hierarchy as you go. Eventually that might become cumbersome and you realize using a state manager might save time and effort. This is the reason why solutions like Redux, MobX, and Cerebral are popular in the community.&lt;/p&gt;
&lt;p&gt;To provide another point of view, you will hear this time from Nir Yosef, the author of &lt;a href=&quot;https://github.com/Niryo/controllerim&quot;&gt;controllerim&lt;/a&gt;. It&amp;#39;s a solution that builds on top of MobX and has been designed testability in mind.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My name is Nir, and I am a front-end developer at Wix.com, with over two years of experience in React and MobX, and now gaining some experience with React Native and Android.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-controllerim-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-controllerim-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;controllerim&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-controllerim-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Controllerim is a state management library. It gives you the ability to create logic controllers for you React components, and makes your components automatically reactive to any change in the controllers. All of this is done with almost zero boilerplate.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-controllerim-work-&quot; id=&quot;how-does-controllerim-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;controllerim&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-controllerim-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Controllerim uses MobX Observables behind the scenes, so all the optimizations of MobX in term of performance are also relevant for Controllerim.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-controllerim-differ-from-other-solutions-like-redux-and-mobx-&quot; id=&quot;how-does-controllerim-differ-from-other-solutions-like-redux-and-mobx-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;controllerim&lt;/em&gt; differ from other solutions (like Redux and MobX)?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-controllerim-differ-from-other-solutions-like-redux-and-mobx-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Controllerim brings back the idea of the well know Controller, the C of MVC, and abandon the singleton Stores concept that Redux (using Flux terminology) gave birth to.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-controllerim-&quot; id=&quot;why-did-you-develop-controllerim-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;controllerim&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-controllerim-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I first came across React, I almost immediately came across Redux. Its seems like Redux was the only way to do React. Everyone was talking about it, so I decided to give it a try.&lt;/p&gt;
&lt;p&gt;After reading some tutorials, I was quite amazed by its complexity. All the different terms (thunk, reducers, selectors, map dispatch to props, etc.) weren’t so clear to me, and it seems like a considerable amount of boilerplate. Something just felt wrong. It seems like a strange way to implement the good old MVC. I think &lt;a href=&quot;https://staltz.com/nothing-new-in-react-and-flux-except-one-thing.html&quot;&gt;the article by André Staltz says it all&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After some playing around with dummy project, trying to crack this Redux thing, I came across MobX and dumped Redux for good.&lt;/p&gt;
&lt;p&gt;MobX was much clearer and straightforward.&lt;/p&gt;
&lt;p&gt;I used MobX for over a year with my team, and it was pretty good, but some problems immediately came up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MobX Observables are not vanilla JavaScript objects. They are full of other junk, and we soon started to insert &lt;code&gt;mobx.toJs()&lt;/code&gt; conversions all over the place.&lt;/li&gt;
&lt;li&gt;MobX doesn’t tell you how to structure your code, so we took the concept of singletons stores from Redux. Very soon we started to wonder how we should pass the stores around, how we should test components? Should we mock all the stores? Who needs to clean the stores when a component enters the screen? We tried to use &lt;code&gt;mobx.inject&lt;/code&gt; and &lt;code&gt;mobx.provide&lt;/code&gt; but those didn&amp;#39;t play well with our tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So MobX wasn’t perfect after all. At this point, I again started to wonder what happens to the good old MVC, Why things are getting so much more complicated on the web? And then I decided to write down all the pain points of our current architecture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have to get rid of the &lt;code&gt;toJS&lt;/code&gt; thing. I want everything to be a plain JavaScript object.&lt;/li&gt;
&lt;li&gt;We have to get rid of the singletons stores, and we must bind the stores life cycle to the components&amp;#39; life cycle.&lt;/li&gt;
&lt;li&gt;We must find a way to share data from one store to another, but I wanted to make it strict- it will be only possible to fetch data from stores that are higher in the hierarchy chain of the app, while &lt;code&gt;AppStore&lt;/code&gt; will be the root.&lt;/li&gt;
&lt;li&gt;Everything &lt;strong&gt;MUST&lt;/strong&gt; be testable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After writing it down, I found out that I don’t have a Store anymore. I have a Controller. The good old Controller. I knew I was on the right track. The API was just written itself down. I just needed to figure out the way to make it happen, and it wasn’t so hard. The final result was Controllerim.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you wonder about the name, I tried to name it “Controllers” but it was already taken. I tried React-controllers, but it was also taken. In Hebrew, the ‘im’ suffix is the plural suffix for the word controller, so I just named it Controllerim. :)&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#so-how-does-controllerim-look-&quot; id=&quot;so-how-does-controllerim-look-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;So how does controllerim look?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#so-how-does-controllerim-look-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s say we have &lt;code&gt;App&lt;/code&gt; component as the root of our web app, and that we have &lt;code&gt;Child&lt;/code&gt; component deeply nested in the app.&lt;/p&gt;
&lt;p&gt;Every data that we will put on the AppController will be available to all other components in the app for as long as the app is alive, so let&amp;#39;s create an &lt;code&gt;AppController&lt;/code&gt; and put some application data on it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;AppController&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Controller&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;componentInstance&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-super&quot; &gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;componentInstance&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; userName&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Bob&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;getUserName&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;userName&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;setUserName&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;userName &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So a controller is just an ES2015 class that extends &lt;code&gt;Controller&lt;/code&gt; and has some state and getters and setters methods.&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s connect the controller to the &lt;code&gt;App&lt;/code&gt; component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;App&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;React&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;componentWillMount&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;controller &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;AppController&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Welcome &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;controller&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getUserName&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;compA&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;compB&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;observer&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Easy right? We just need to init the controller in &lt;code&gt;componentWillMount&lt;/code&gt;, and we need to make sure that we wrap the component with &lt;code&gt;observer&lt;/code&gt;, and that&amp;#39;s it! Every change in the controller will be reflected by the view.&lt;/p&gt;
&lt;p&gt;Now, let&amp;#39;s say that &lt;code&gt;Child&lt;/code&gt; is some deeply nested component and that it should allow us to preview and edit the &lt;code&gt;userName&lt;/code&gt; when we click on a save button:&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s start with creating &lt;code&gt;ChildController&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;ChildController&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Controller&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;componentInstance&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-super&quot; &gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;componentInstance&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;getInput&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;setInput&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;input &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;saveInput&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getParentController&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot; &gt;&quot;AppController&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;setUserName&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;input&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only new thing here is the call to &lt;code&gt;getParentController()&lt;/code&gt;. Controllerim allows you to get any &lt;code&gt;Parent&lt;/code&gt; controller, not only a direct parent, so we just save the &lt;code&gt;userName&lt;/code&gt;, and because everything is reactive, this change will be reflected in all the views that make use of &lt;code&gt;userName&lt;/code&gt; prop from &lt;code&gt;App&lt;/code&gt;.
Let&amp;#39;s finish by creating &lt;code&gt;Child&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Child&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;React&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;componentWillMount&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;controller &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;ChildController&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;input
          value&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;controller&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getInput&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
          onChange&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;controller&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;setInput&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;controller&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;saveInput&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
          Save
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;#39;s it! Simple isn&amp;#39;t it?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-do-people-think-about-controllerim-&quot; id=&quot;what-do-people-think-about-controllerim-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What do people think about Controllerim?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-do-people-think-about-controllerim-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It depends. The ones that are already familiar with MobX are very supportive. The Redux people are more suspicious and begin to recycle arguments they heard about MobX, so I think it would be nice to tackle down the two most frequently recycled arguments once and for all:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;It’s magic, and we don’t like magic&lt;/em&gt;: Controllerim is &lt;strong&gt;NOT&lt;/strong&gt; magic. Controllerim works just like React native components’ state - when you touch a setter on the controller, Controllerim triggers a force update of your component. So where does MobX enter the picture? Controllerim utilizes MobX to make better updates decisions. Thanks to MobX, Instead of re-rendering on every setter, Controllerim will trigger a re-render only when needed.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;But what if you need some data to be accessed from everywhere?  You have to use singletons&lt;/em&gt;: No, you don’t. If you need some data to be available for all the components in your app, then this data is application data, just put it in your AppController (The root controller of your app), and it will be available to all other components for as long as your app lives.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It looks just like React’s state, so why not just using it&lt;/em&gt;: Controllerim looks like React’s native state by design. The problem with the native state is that it’s hard to share between different components and it’s awkward to test. Controllerim solves those problems, and it even gives you a more comfortable way to manipulate the state:
instead of &lt;code&gt;this.setState({some: {nested:{prop: true }}})&lt;/code&gt;, you can just write &lt;code&gt;this.state.some.nested.prop = true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use Controllerim all over the place to make it battle tested. :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-controllerim-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-controllerim-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;controllerim&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-controllerim-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think that Controllerim has the potential to be the best Redux alternative out there.
In general, I think that React is here to stay, and the next giant step will be in the field of CSS.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If something doesn&amp;#39;t feel right, don’t be fooled by its popularity.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You should interview someone from the CSS community. This field in the web development needs a little push.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Nir! Controllerim looks like a great abstraction over MobX and I hope people find it. The code feels almost amazingly simple.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Niryo/controllerim&quot;&gt;Learn more about Controllerim on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>React Finland - Your Chance to Learn React Up North - Interview with Juho Vepsäläinen</title><id>areactfinlandyourchancetolearnreactupnorthinterviewwithjuhovepsalainen2017-12-23t00:00:00z</id><link href="https://survivejs.com/blog/react-finland-interview/"></link><updated>2017-12-23T00:00:00Z</updated><content type="html">&lt;p&gt;There are &lt;a href=&quot;https://reactjs.org/community/conferences.html&quot;&gt;a lot of React conferences&lt;/a&gt; these days. React has become one of the most popular web technologies during the past few years so this is understandable.&lt;/p&gt;
&lt;p&gt;Given I, &lt;a href=&quot;https://twitter.com/bebraw&quot;&gt;Juho Vepsäläinen&lt;/a&gt;, am one of the organizers of &lt;a href=&quot;https://react-finland.fi/&quot;&gt;React Finland&lt;/a&gt; (24-26.4.2018, Helsinki), I thought it would be a good idea to provide an inside view on the event.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/b26ec3c2769168c2cbc64cc3df9cdd9c?s=200&quot; alt=&quot;Juho Vepsäläinen&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I maintain this site as my business. I consider myself as a consultant these days although I do development every once in a while. My perspective has changed completely over the past few years as I have had to move into business. It hasn&amp;#39;t been easy, but on the plus side, this process has been changing my life in ways I couldn&amp;#39;t have imagined before. And I have a feeling it continues to do so.
&lt;/p&gt;

&lt;p&gt;These days I consult companies ranging from small startups to big enterprises like eBay or Kapsch. I can provide perspective on how to improve their current workflow, especially on the technical side. I train people as needed. This process, in turn, helps me to develop the book offerings you can find on this site. The writing brings in the consulting clients and so far it has been working fine.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-finland-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-finland-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;React Finland&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-finland-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://react-finland.fi/&quot;&gt;React Finland&lt;/a&gt; brings together developers from both east and west. It is held late April (24-26.4) 2018 and contains a wide range of topics related to React. It is perhaps the northernmost React conference in the world and a perfect excuse to visit Finland, the most boring country in the world.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-react-finland-offer-&quot; id=&quot;what-does-react-finland-offer-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does &lt;em&gt;React Finland&lt;/em&gt; offer?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-react-finland-offer-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We settled on a three-day program early on. To keep the difficulty manageable, we decided to go with one day for workshops and then two days for presentations in a single track format. The schedule has ample amount of time per presenter and allows flexibility so we can have panels and lightning talks as a part of the days.&lt;/p&gt;
&lt;p&gt;We have a wide range of speakers on topics related to React. Most of the topics are technical, and we cover ideas from state management, styling, testing, React Native, React VR, and also upcoming technologies such as Reason. I feel we have a good program that can serve people with various amounts of React experience.&lt;/p&gt;
&lt;p&gt;Especially the workshop day should be exciting. The state management workshop by Michel Weststrate is a real masterclass as it takes the whole day. Rest of the sessions are up to four hours, and you will have time to participate in two sessions depending on your interest. We split the workshop profit with the speakers as we know organizing and coming up with the material is hard work.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-react-finland-differ-from-other-events-&quot; id=&quot;how-does-react-finland-differ-from-other-events-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;React Finland&lt;/em&gt; differ from other events?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-react-finland-differ-from-other-events-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the conference is held in late April, the weather isn&amp;#39;t our selling point. It&amp;#39;s still Spring and chilly, but that&amp;#39;s not the point. Finland is one of those countries most people know but have never visited. The idea is to provide an excellent excuse to visit this boring country in the north so you have stories to tell and can confirm the country indeed exists. You will learn something about sauna, sisu, and salmiakki.&lt;/p&gt;
&lt;p&gt;I am happy with the program and the speakers we managed to attract. I feel both the local and international audience will be able to get a lot out of the event. It can become a meeting point between the east and the west thanks to the location that&amp;#39;s relatively easy to reach from both directions. Finland has always been between the east and the west given it&amp;#39;s a buffer country by its past.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-decide-to-arrange-react-finland-&quot; id=&quot;why-did-you-decide-to-arrange-react-finland-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you decide to arrange &lt;em&gt;React Finland&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-decide-to-arrange-react-finland-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was around August of this year (2017) that we joked about organizing a React conference in Finland at &lt;a href=&quot;https://koodiklinikka.fi/&quot;&gt;Koodiklinikka&lt;/a&gt;, the most popular development Slack of Finland. As it happens, the joke is becoming a reality. It didn&amp;#39;t take long for me to realize that a conference would be feasible especially given there hasn&amp;#39;t been an international React conference in Finland, and there&amp;#39;s definite demand for one.&lt;/p&gt;
&lt;p&gt;As a result, we set up an association (harder than it sounds), set up a team, used our contacts to reach out to speakers, and developed website and technology required. It has taken a lot of effort so far, and the fact that this is volunteer based makes it a notch harder. Finding the time and motivation to do even boring tasks is the hardest part, but it&amp;#39;s required as, without a certain amount of work, there can be no conference.&lt;/p&gt;
&lt;p&gt;React Conference is &lt;a href=&quot;https://medium.com/react-finland/from-devs-to-devs-a807f8d41949&quot;&gt;a conference from developers to developers&lt;/a&gt;. Organizing a conference this way comes with different pressures than a commercial one. There are always particular struggles you have to go through, but so far we&amp;#39;ve managed well.&lt;/p&gt;
&lt;p&gt;For me, this was &lt;a href=&quot;https://medium.com/react-finland/conference-dos-and-donts-56973b82229a&quot;&gt;a chance to learn from conferences I had been to&lt;/a&gt; and try to avoid the mistakes they have made. I feel the most significant thing we can do better is to serve our speakers better by connecting them with the local community and generating business to them. It&amp;#39;s only fair to reward them as they are one of the critical parts that make the event work.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We recently announced that &lt;a href=&quot;https://medium.com/react-finland/ticket-sales-open-27th-of-december-c7a3c0c26068&quot;&gt;ticket sales will go live on 27th of December&lt;/a&gt;. That is your chance to get an early bird ticket at an affordable price (250€ for two days, 150€ for a half-day workshop). Our goal is to sell close 300 tickets. Most likely a majority of them will be sold to local developers, but we welcome international audience as well.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Be prepared to learn and change your mind a lot. Keep an eye on the hype. You don&amp;#39;t have to be the first always. Focus on delivering value to your business, and the rest will follow.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know who I&amp;#39;m going to interview next, but I&amp;#39;ll keep that as a secret.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A lot of technical development has gone into the conference. Check out &lt;a href=&quot;https://github.com/ReactFinland/site&quot;&gt;the site repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/ReactFinland/content-2018&quot;&gt;the content repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/ReactFinland/graphql-api&quot;&gt;the GraphQL API&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ReactFinland/react-finland-app&quot;&gt;the mobile app&lt;/a&gt; for example. Organizing this conference taught me how to develop small conference sites effectively, and I found a nice model for doing this. That might be worth a blog post of its own.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a feeling React Finland will be a good conference. That said, it&amp;#39;s important we&amp;#39;ll attract the right people there, and this is where you come in! Going to the event might be one of the better excuses to visit Finland.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://react-finland.fi/&quot;&gt;learn more about the event&lt;/a&gt; at its site. &lt;a href=&quot;http://eepurl.com/dfbVAX&quot;&gt;Subscribe to the mailing list&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/ReactFinland&quot;&gt;follow @ReactFinland&lt;/a&gt; on Twitter to stay in the loop.&lt;/p&gt;
</content></entry><entry><title>redux-saga-test-plan - Test Redux Saga with an easy plan - Interview with Jeremy Fairbank</title><id>areduxsagatestplantestreduxsagawithaneasyplaninterviewwithjeremyfairbank2017-12-20t00:00:00z</id><link href="https://survivejs.com/blog/redux-saga-test-plan-interview/"></link><updated>2017-12-20T00:00:00Z</updated><content type="html">&lt;p&gt;Redux Saga is famous for being easy to test but what if it could be even more comfortable. &lt;em&gt;redux-saga-test-plan&lt;/em&gt; by &lt;a href=&quot;https://twitter.com/elpapapollo&quot;&gt;Jeremy Fairbank&lt;/a&gt; was designed precisely for this purpose.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot;&gt;
    &lt;img src=&quot;https://www.gravatar.com/avatar/94bd558238b69c45d3d3e15797ae94f7?s=200&quot; alt=&quot;Jeremy Fairbank&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
  &lt;/span&gt;

I&amp;#39;m a software engineer and consultant with &lt;a href=&quot;https://testdouble.com/&quot;&gt;Test Double&lt;/a&gt;. We believe that software is broken, and we&amp;#39;re here to fix it. Our mission is to improve how the world builds software.
&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been doing front-end development for almost ten years now and enjoy the paradigms that React and Redux helped introduce to the front-end world. I&amp;#39;ve created a few open source projects that work well with the React and Redux ecosystem such as &lt;a href=&quot;https://github.com/jfairbank/revalidate&quot;&gt;revalidate&lt;/a&gt;, &lt;a href=&quot;https://github.com/jfairbank/redux-saga-router&quot;&gt;redux-saga-router&lt;/a&gt;, and, the topic of this interview, &lt;a href=&quot;https://github.com/jfairbank/redux-saga-test-plan&quot;&gt;&lt;em&gt;redux-saga-test-plan&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m a huge fan of functional programming and Elm. In fact, I&amp;#39;m currently writing a book on Elm with &lt;a href=&quot;https://pragprog.com/&quot;&gt;The Pragmatic Programmers&lt;/a&gt; called &lt;em&gt;Programming Elm: Build Safe and Maintainable Front-End Applications&lt;/em&gt;. The book is over halfway complete and should be available sometime in Spring 2018.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-_redux-saga-test-plan_-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-_redux-saga-test-plan_-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;redux-saga-test-plan&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-_redux-saga-test-plan_-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/&quot;&gt;&lt;em&gt;redux-saga-test-plan&lt;/em&gt;&lt;/a&gt; is a library for easily testing &lt;a href=&quot;https://redux-saga.js.org/&quot;&gt;redux-saga&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you&amp;#39;re unfamiliar with redux-saga, check out &lt;a href=&quot;https://survivejs.com/blog/redux-saga-interview/&quot;&gt;the redux-saga interview&lt;/a&gt; with creator Yassine Elouafi.&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;redux-saga-test-plan&lt;/em&gt; removes the headache of manually testing saga generator functions that couple your tests to their implementations. It offers a declarative, chainable API for testing that your saga yields certain effects without worrying about other effects or the order effects were yielded. It also runs your saga with redux-saga&amp;#39;s runtime so that you can write integration tests, or you can use &lt;em&gt;redux-saga-test-plan&amp;#39;s&lt;/em&gt; built-in effect mocking to write unit tests too.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-_redux-saga-test-plan_-work-&quot; id=&quot;how-does-_redux-saga-test-plan_-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;redux-saga-test-plan&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-_redux-saga-test-plan_-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s look at some example sagas to see how &lt;em&gt;redux-saga-test-plan&lt;/em&gt; makes it easy to test them.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#simple-api-saga&quot; id=&quot;simple-api-saga&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Simple API Saga&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#simple-api-saga&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given this simple saga for fetching an array of users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; call&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; put &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga/effects&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUsersSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test it with &lt;em&gt;redux-saga-test-plan&lt;/em&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; expectSaga &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga-test-plan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fetches users&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Jeremy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Tucker&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; api &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    getUsers&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;expectSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fetchUsersSaga&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; api&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;expectSaga&lt;/code&gt; function accepts a saga as an argument as well as any additional arguments for the saga itself. Here, we pass in the &lt;code&gt;fetchUsersSaga&lt;/code&gt; and inject a mock &lt;code&gt;api&lt;/code&gt; to fake the API response.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expectSaga&lt;/code&gt; returns a chainable API with lots of useful methods. The &lt;code&gt;put&lt;/code&gt; method is an assertion that the saga will eventually yield a &lt;code&gt;put&lt;/code&gt; effect with the given &lt;code&gt;FETCH_USERS_SUCCESS&lt;/code&gt; action.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; method starts the saga. &lt;em&gt;redux-saga-test-plan&lt;/em&gt; uses redux-saga&amp;#39;s &lt;code&gt;runSaga&lt;/code&gt; function to run the saga like it would be run in your application. &lt;code&gt;expectSaga&lt;/code&gt; tracks any effects your saga yields, so you can assert them like we do with &lt;code&gt;put&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;Sagas are inherently asynchronous, so &lt;em&gt;redux-saga-test-plan&lt;/em&gt; returns a promise from the &lt;code&gt;run&lt;/code&gt; method. You need that promise to know when the test is complete. In this example, we&amp;#39;re using Jest so that we can return the promise directly to it.&lt;/p&gt;
&lt;p&gt;Because &lt;em&gt;redux-saga-test-plan&lt;/em&gt; runs asynchronously, it times out your saga after a set amount of time. You can &lt;a href=&quot;http://redux-saga-test-plan.jeremyfairbank.com/integration-testing/timeout.html#adjusting-timeout&quot;&gt;configure the timeout length&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#built-in-mocking&quot; id=&quot;built-in-mocking&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Built-in Mocking&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#built-in-mocking&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you don&amp;#39;t inject dependencies like the &lt;code&gt;api&lt;/code&gt; object, you can use &lt;code&gt;expectSaga&lt;/code&gt;&amp;#39;s built-in mocking mechanism called &lt;em&gt;providers&lt;/em&gt;. Let&amp;#39;s say you import &lt;code&gt;api&lt;/code&gt; from another file and use it like this instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; call&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; put &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga/effects&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; api &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;./api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUsersSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can mock it with the &lt;code&gt;provide&lt;/code&gt; method like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; expectSaga &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga-test-plan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; api &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;./api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fetches users&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Jeremy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Tucker&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;expectSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fetchUsersSaga&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;provide&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;provide&lt;/code&gt; method takes an array of matcher-value pairs. Each matcher-value pair is an array with an effect to match and a fake value to return. &lt;em&gt;redux-saga-test-plan&lt;/em&gt; will intercept effects that match and return the fake value instead of letting redux-saga handle the effect. In this example, we match any &lt;code&gt;call&lt;/code&gt; effects to &lt;code&gt;api.getUsers&lt;/code&gt; and return a fake array of users instead.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#dispatching-effects-and-forked-sagas&quot; id=&quot;dispatching-effects-and-forked-sagas&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Dispatching Effects and Forked Sagas&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#dispatching-effects-and-forked-sagas&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;redux-saga-test-plan&lt;/em&gt; can handle more complex saga relationships like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; call&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; put&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; takeLatest &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga/effects&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; api &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;./api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUserSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; id &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; user &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUser&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; id&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USER_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; user &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;watchFetchUserSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;takeLatest&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USER_REQUEST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; fetchUserSaga&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;watchFetchUserSaga&lt;/code&gt; uses &lt;code&gt;takeLatest&lt;/code&gt; to handle the latest &lt;code&gt;FETCH_USER_REQUEST&lt;/code&gt; action. If something dispatches &lt;code&gt;FETCH_USER_REQUEST&lt;/code&gt;, then redux-saga forks &lt;code&gt;fetchUserSaga&lt;/code&gt; to handle the action and fetch a user by id from the action&amp;#39;s &lt;code&gt;payload&lt;/code&gt;. You can test these sagas with &lt;em&gt;redux-saga-test-plan&lt;/em&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; expectSaga &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga-test-plan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; api &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;./api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fetches a user&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; id &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; user &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Jeremy&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;expectSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;watchFetchUserSaga&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;provide&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUser&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; id&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USER_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; user &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USER_REQUEST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; id &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;silentRun&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;redux-saga-test-plan&lt;/em&gt; captures effects from forked sagas too. Notice that we call &lt;code&gt;expectSaga&lt;/code&gt; with &lt;code&gt;watchFetchUserSaga&lt;/code&gt; but still test the behavior of &lt;code&gt;fetchUserSaga&lt;/code&gt; with the &lt;code&gt;put&lt;/code&gt; assertion.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;dispatch&lt;/code&gt; method to dispatch a &lt;code&gt;FETCH_USER_REQUEST&lt;/code&gt; action with a &lt;code&gt;payload&lt;/code&gt; id of &lt;code&gt;42&lt;/code&gt; to &lt;code&gt;watchFetchUserSaga&lt;/code&gt;. redux-saga then forks and runs &lt;code&gt;fetchUserSaga&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;takeLatest&lt;/code&gt; runs in a loop so that &lt;em&gt;redux-saga-test-plan&lt;/em&gt; will time out the saga with a warning message. You can safely silence the warning with the alternative &lt;code&gt;silentRun&lt;/code&gt; method since we expect a timeout here.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#error-handling&quot; id=&quot;error-handling&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Error Handling&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#error-handling&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use providers to test your saga&amp;#39;s error handling too. Take this new version of &lt;code&gt;fetchUsersSaga&lt;/code&gt; that uses a &lt;code&gt;try-catch&lt;/code&gt; block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUsersSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-try&quot; &gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-catch&quot; &gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; &gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_FAIL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; e &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can import &lt;code&gt;throwError&lt;/code&gt; from &lt;code&gt;redux-saga-test-plan/providers&lt;/code&gt; to simulate an error in the &lt;code&gt;provide&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; expectSaga &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga-test-plan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; throwError &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga-test-plan/providers&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;handles errors&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Whoops&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;expectSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fetchUsersSaga&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;provide&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;throwError&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_FAIL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; error &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#redux-state&quot; id=&quot;redux-state&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Redux State&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#redux-state&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can also test your Redux reducers alongside your sagas. Take this reducer for updating the array of users in the store state:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; INITIAL_STATE &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; INITIAL_STATE&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-switch&quot; &gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;payload &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use the &lt;code&gt;withReducer&lt;/code&gt; method to hook up your reducer and then assert the final state with &lt;code&gt;hasFinalState&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; expectSaga &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;redux-saga-test-plan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fetches the users into the store state&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Jeremy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Tucker&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;expectSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fetchUsersSaga&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;withReducer&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;provide&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;hasFinalState&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#available-effect-assertions&quot; id=&quot;available-effect-assertions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Available Effect Assertions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#available-effect-assertions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here are the other effect assertions available for testing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;take(pattern)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;take.maybe(pattern)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;put(action)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;put.resolve(action)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call(fn, ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call([context, fn], ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apply(context, fn, args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cps(fn, ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cps([context, fn], ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork(fn, ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork([context, fn], ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn(fn, ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn([context, fn], ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join(task)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select(selector, ...args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;actionChannel(pattern, [buffer])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;race(effects)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#other-features&quot; id=&quot;other-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Other Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#other-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/snapshot-testing.html&quot;&gt;Snapshot testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/partial-matching.html&quot;&gt;Partial assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/partial-matching.html&quot;&gt;Negated assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/return-value.html&quot;&gt;Assert a saga&amp;#39;s return value&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-_redux-saga-test-plan_-differ-from-other-solutions-&quot; id=&quot;how-does-_redux-saga-test-plan_-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;redux-saga-test-plan&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-_redux-saga-test-plan_-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Only test the effects you&amp;#39;re interested in with &lt;code&gt;expectSaga&lt;/code&gt;. You don&amp;#39;t have to manually iterate through your saga&amp;#39;s yielded effects, which decouples your test from the implementation.&lt;/li&gt;
&lt;li&gt;A declarative, chainable API with less setup for testing sagas. Other options that I&amp;#39;ve seen use imperative APIs with more setup steps and only let you test certain effects.&lt;/li&gt;
&lt;li&gt;One of the few saga testing libraries that lets you also test your Redux reducers.&lt;/li&gt;
&lt;li&gt;Test forked sagas many layers deep.&lt;/li&gt;
&lt;li&gt;Built-in mocking with &lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/mocking/static-providers.html&quot;&gt;static&lt;/a&gt; and &lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/mocking/dynamic-providers.html&quot;&gt;dynamic&lt;/a&gt; providers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/partial-matching.html&quot;&gt;Negated assertions&lt;/a&gt;. You can test that your saga did &lt;strong&gt;not&lt;/strong&gt; yield a particular effect.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/partial-matching.html&quot;&gt;Partial assertions&lt;/a&gt;. For example, you can test that your saga &lt;code&gt;put&lt;/code&gt; a particular &lt;code&gt;type&lt;/code&gt; of action without worrying about the action payload.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-_redux-saga-test-plan_-&quot; id=&quot;why-did-you-develop-_redux-saga-test-plan_-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;redux-saga-test-plan&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-_redux-saga-test-plan_-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I grew tired of manually testing sagas by iterating through yielded effects like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUsersSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;fetches users&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Jeremy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Tucker&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; iter &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUsersSaga&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;iter&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;iter&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;users&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;FETCH_USERS_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; users &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These tests took long to write and coupled the test to the implementation. One small change in the order of effects would break a test even if the change didn&amp;#39;t change the saga&amp;#39;s overall behavior. Ironically, I created a &lt;a href=&quot;https://redux-saga-test-plan.jeremyfairbank.com/unit-testing/&quot;&gt;testSaga API&lt;/a&gt; that took some of that boilerplate away but still coupled tests to their implementation.&lt;/p&gt;
&lt;p&gt;I finally set out to create a more user-friendly API that removed most of the boilerplate and let you focus on testing the behavior you were most interested, and this is how &lt;code&gt;expectSaga&lt;/code&gt; was born.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Writing my Elm book is currently consuming a lot of my time, so I&amp;#39;ve had to take a short break from &lt;em&gt;redux-saga-test-plan&lt;/em&gt;. However, the next big plan is to support redux-saga v1, which adds support for effect middlewares. Effect middlewares let you intercept effects to return a mock value. I hope to simplify &lt;code&gt;expectSaga&lt;/code&gt;&amp;#39;s implementation of providers with effect middlewares.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a nice backlog of issues for other cool features like new helpful assertions and integrating with a full Redux store too.&lt;/p&gt;
&lt;p&gt;Contributors are welcome!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-_redux-saga-test-plan_-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-_redux-saga-test-plan_-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;redux-saga-test-plan&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-_redux-saga-test-plan_-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not entirely sure because it depends on the life of redux-saga. &lt;a href=&quot;https://github.com/Andarist&quot;&gt;Mateusz Burzyński&lt;/a&gt; and all the contributors have been doing a great job maintaining it. It&amp;#39;s a great sign that they&amp;#39;re working toward v1. But front-end development can move and change so fast. For example, we&amp;#39;ve seen a massive rise in the popularity of &lt;a href=&quot;https://github.com/ReactiveX/rxjs&quot;&gt;RxJS&lt;/a&gt; and &lt;a href=&quot;https://github.com/redux-observable/redux-observable&quot;&gt;redux-observable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As long as there is broad support for redux-saga in front-end applications, I think &lt;em&gt;redux-saga-test-plan&lt;/em&gt; will stick around and fill a much-needed testing niche. Testing saga generators is hard, so &lt;em&gt;redux-saga-test-plan&lt;/em&gt; will hopefully continue to make it easy. That being said, I don&amp;#39;t always get to use redux-saga with my client projects, so I could use the support of other contributors to make &lt;em&gt;redux-saga-test-plan&lt;/em&gt; the best it can be for testing.&lt;/p&gt;
&lt;p&gt;As far as trends, I think front-end development is heading toward better maintainability and safety with static typing. Elm, TypeScript, and Flow are making it easier to build robust front-end applications. Static types can catch so many simple bugs and mistakes to help you refactor code more confidently.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You don&amp;#39;t need to keep up with every new library and framework coming out. Focus on a stack that you like and build fantastic software. Don&amp;#39;t let others make you feel like you&amp;#39;re not a real developer because you&amp;#39;re not up-to-date with the latest JavaScript framework. What&amp;#39;s most important is understanding the language you&amp;#39;re working with and how to stick to good software engineering practices. Find a mentor that&amp;#39;s empathetic and eager to help you.&lt;/p&gt;
&lt;p&gt;Also, ask to speak at a meetup or submit to a conference. You&amp;#39;d be surprised how many people sometimes aren&amp;#39;t experts on the topics they share (I&amp;#39;ve been there for sure). You can share the pain points you experienced learning a technology and offer your unique perspective on what you love about it. Then, you can inspire and empower other newcomers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I might be a little biased because I work for Test Double, but you should interview &lt;a href=&quot;https://twitter.com/searls&quot;&gt;Justin Searls&lt;/a&gt;. He speaks a lot about testing, and his insight is something the JavaScript world would greatly benefit from. He maintains our awesome test double library &lt;a href=&quot;https://github.com/testdouble/testdouble.js&quot;&gt;testdouble.js&lt;/a&gt;, which has transformed how I think about mocking in tests.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Jeremy! &lt;em&gt;redux-saga-test-plan&lt;/em&gt; seems to complement &lt;em&gt;redux-saga&lt;/em&gt; well.&lt;/p&gt;
&lt;p&gt;You can learn more from &lt;a href=&quot;http://redux-saga-test-plan.jeremyfairbank.com/&quot;&gt;the redux-saga-test-plan site&lt;/a&gt; and &lt;a href=&quot;https://github.com/jfairbank/redux-saga-test-plan&quot;&gt;redux-saga-test-plan GitHub page&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Redux Form - The best way to manage your form state in Redux - Interview with Erik Rasmussen</title><id>areduxformthebestwaytomanageyourformstateinreduxinterviewwitherikrasmussen2017-12-11t00:00:00z</id><link href="https://survivejs.com/blog/redux-form-interview/"></link><updated>2017-12-11T00:00:00Z</updated><content type="html">&lt;p&gt;Forms are a frequent topic in web development as we saw in &lt;a href=&quot;https://survivejs.com/blog/a-plus-interview&quot;&gt;the earlier interview about a-plus-forms&lt;/a&gt;. This time around, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/erikras&quot;&gt;Erik Rasmussen&lt;/a&gt; about a popular option, Redux Form.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Erik has published a library agnostic successor to Redux Form. See &lt;a href=&quot;https://github.com/final-form/final-form&quot;&gt;Final Form&lt;/a&gt; to learn more.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/7e86f7e41168df55b65e30cdda423e10?s=200&quot; alt=&quot;Erik Rasmussen&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m originally from North Carolina, but I hadn&amp;#39;t lived in the US since late 2001, when I moved to Birmingham, England. I was there for four and a half years, and now I live in northern Spain with my Spanish wife and two bilingual kids. I&amp;#39;m a transatlantic telecommuter, working from home in Spain for my employer in the US.
&lt;/p&gt;

&lt;p&gt;I began using React immediately after it was open sourced in 2013, building side projects and ran into all of the state management problems that Flux was introduced to solve. I was active on the Reactiflux Slack channel as Redux was taking shape before its announcement in 2015, back when what is now called &lt;em&gt;reducers&lt;/em&gt; were still called &lt;em&gt;stores&lt;/em&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-form-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-redux-form-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Redux Form&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-form-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web forms have a &lt;em&gt;lot&lt;/em&gt; of state involved with them. It might seem like all you have to keep track of is the value of each field, but there is &lt;em&gt;so&lt;/em&gt; much more. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which field currently has focus?&lt;/li&gt;
&lt;li&gt;Are all the fields valid?&lt;/li&gt;
&lt;li&gt;Which fields have errors?&lt;/li&gt;
&lt;li&gt;Are we currently submitting the form?&lt;/li&gt;
&lt;li&gt;Are we currently doing some sort of async validation as the user is filling out the form?&lt;/li&gt;
&lt;li&gt;Which fields has the user &lt;em&gt;visited&lt;/em&gt; (focused on)?&lt;/li&gt;
&lt;li&gt;Which fields has the user &lt;em&gt;touched&lt;/em&gt; (focused on and then left)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Redux Form&lt;/em&gt; manages &lt;em&gt;all&lt;/em&gt; of that state for you, providing each field with what it needs to render: its &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt;, &lt;code&gt;onBlur&lt;/code&gt;, &lt;code&gt;onFocus&lt;/code&gt;, etc. props.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-redux-form-work-&quot; id=&quot;how-does-redux-form-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Redux Form&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-redux-form-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React prefers unidirectional data flow where a container component holds state and passes down the state and callbacks for its children to modify the state. Redux fits this model like a glove, keeping state globally and allowing mutations through dispatched actions. &lt;em&gt;Redux Form&lt;/em&gt; dispatches actions for every event in your form, and updates the global state accordingly, rerendering &lt;em&gt;only&lt;/em&gt; the components that need to be rerendered.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-redux-form-differ-from-other-solutions-&quot; id=&quot;how-does-redux-form-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Redux Form&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-redux-form-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most significant difference is that it uses Redux. Some other solutions also use Redux, but many do not. Like everything in engineering, this has its pros and cons. The main two benefits are: you can watch all of your state mutations go by in Redux Dev Tools and that you can listen to Redux Form actions in other reducers of your application, e.g., potentially updating some canonical local record when your form submission has succeeded.&lt;/p&gt;
&lt;p&gt;The primary drawback is that you might not be using Redux at all in your application, but to use &lt;em&gt;Redux Form&lt;/em&gt; as your form solution, you will be forced to use it. However, Redux is so prevalent in the React community, the chance that you are already using it to manage state is pretty good.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-form-&quot; id=&quot;why-did-you-develop-redux-form-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Redux Form&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-form-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I was building an app that had several long forms. I asked Dan Abramov in the Reactiflux Slack channel, &amp;quot;Redux isn&amp;#39;t fast enough so that I could dispatch an action on &lt;em&gt;every single keypress&lt;/em&gt; in a form, right?&amp;quot; He responded something along the lines of, &amp;quot;I don&amp;#39;t see why not? Try it!&amp;quot; And &lt;em&gt;Redux Form&lt;/em&gt; was born.&lt;/p&gt;
&lt;p&gt;I had published a few tiny niche libraries before but had never been The Maintainer of an open source project. The community was very supportive, and I worked hard with them to sculpt &lt;em&gt;Redux Form&lt;/em&gt; into what it is today. It has been a lot of work, but also fun and rewarding.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking into account all that I have learned in maintaining &lt;em&gt;Redux Form&lt;/em&gt;, I have recently created and released what I think might be the next generation of form state management. The solution does not depend on Redux or even React. It is a library that could potentially also be used by our brethren in the Angular, Ember, Preact, and Vue communities.&lt;/p&gt;
&lt;p&gt;The library is called &lt;a href=&quot;https://github.com/erikras/final-form#-final-form&quot;&gt;🏁 Final Form&lt;/a&gt;, and it&amp;#39;s based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer pattern&lt;/a&gt;, where different form elements on the page &lt;em&gt;subscribe&lt;/em&gt; to different parts of the form state, and only update themselves when they need to. I would encourage your readers to check it out.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-redux-form-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-redux-form-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Redux Form&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-redux-form-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The npm download charts for React, Redux, and &lt;em&gt;Redux Form&lt;/em&gt; look very similar: &lt;strong&gt;GROWTH&lt;/strong&gt;. 📈&lt;/p&gt;
&lt;p&gt;According to the npm download stats for October 2017, 46% of projects using React are using &lt;em&gt;react-redux&lt;/em&gt;, and 24% of those are using Redux Form. That&amp;#39;s &lt;strong&gt;11.2% of React projects that are using &lt;em&gt;Redux Form&lt;/em&gt;&lt;/strong&gt;. There are &lt;a href=&quot;https://www.npmjs.com/browse/depended/redux-form&quot;&gt;&lt;strong&gt;&lt;em&gt;1.6 million&lt;/em&gt;&lt;/strong&gt; projects&lt;/a&gt; on npm that depend on &lt;em&gt;Redux Form&lt;/em&gt;. &lt;em&gt;Redux Form&lt;/em&gt; is here to stay.&lt;/p&gt;
&lt;p&gt;As for web development in general, I think the declarative &amp;quot;UI as a function of State&amp;quot; paradigm that React has popularized is here to stay. From what I can tell, most of the frontline battles being fought today are attempting to drive a stake into the heart of CSS once and for all. Web Components and WebAssembly seem like promising future tech but aren&amp;#39;t worth learning yet unless you lust for the bleeding edge.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the author of &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;react-redux-universal-hot-example&lt;/a&gt;, one of the more popular early React, Redux, Webpack, Hot Reloading, Server-side Rendering boilerplate repositories, I have a pretty solid understanding of the immense learning curve just to get a React app off the ground.&lt;/p&gt;
&lt;p&gt;Luckily, it&amp;#39;s not 2015 anymore, and now we have projects like &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt; and &lt;a href=&quot;https://github.com/zeit/next.js&quot;&gt;Next.js&lt;/a&gt; that make it orders of magnitude easier to get started with React.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also old enough to remember the barbaric days of programming without StackOverflow, but now it&amp;#39;s &lt;em&gt;exceedingly&lt;/em&gt; rare that programmers, even expert ones, run into a problem that someone has not already asked about, and gotten an answer for, on StackOverflow.&lt;/p&gt;
&lt;p&gt;You just have to build something and ask questions when you run into problems, which you will. But the thrill of solving them and getting your thing to work, even if it&amp;#39;s just a silly spinning &amp;quot;Hello World&amp;quot; text, is the fire that keeps us all going.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think the person I&amp;#39;d most like to see gain exposure from a site like this is &lt;a href=&quot;https://twitter.com/coderberry&quot;&gt;Eric Berry&lt;/a&gt;, the creator of &lt;a href=&quot;https://codesponsor.io&quot;&gt;Code Sponsor&lt;/a&gt;, he&amp;#39;s valiantly attempting to do the impossible: make open source sustainable and avoid developer burnout.&lt;/p&gt;
&lt;p&gt;How much money would companies have to invest to update their code base if the sole developer of a popular OSS library were to quit and walk away? Thousands upon thousands of dollars worldwide.&lt;/p&gt;
&lt;p&gt;And how much are they paying to use these libraries? Zero.&lt;/p&gt;
&lt;p&gt;Donate buttons aren&amp;#39;t worth the pixels they&amp;#39;re rendered with. There are &lt;em&gt;some&lt;/em&gt; efforts, like OpenCollective, which are beginning to address this problem, but it&amp;#39;s still a huge problem.&lt;/p&gt;
&lt;p&gt;It never occurred to me that having such a popular library could be monetized through tasteful, subtle ads on the documentation pages.&lt;/p&gt;
&lt;p&gt;How many hours a day do we coders spend looking at documentation pages? And how valuable are our eyes to get ads in front of?&lt;/p&gt;
&lt;p&gt;If you have a product that plugs into the production stack at any place or even a product that you want to advertise to people with healthy salaries, library documentation is a great place to advertise. Anyone with an open source library with even a few dozen monthly downloads should look into CodeSponsor. &lt;code&gt;$3/month &amp;gt; $0/month&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Erik! If you are using Redux, it&amp;#39;s hard to avoid using Redux Form. It&amp;#39;s so handy.&lt;/p&gt;
&lt;p&gt;To learn more, &lt;a href=&quot;https://redux-form.com/&quot;&gt;check out Redux Form site&lt;/a&gt; and &lt;a href=&quot;https://github.com/erikras/redux-form&quot;&gt;Redux Form GitHub page&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Redux Zero - Single Store, No Reducers - Interview with Matheus Lima</title><id>areduxzerosinglestorenoreducersinterviewwithmatheuslima2017-12-04t00:00:00z</id><link href="https://survivejs.com/blog/redux-zero-interview/"></link><updated>2017-12-04T00:00:00Z</updated><content type="html">&lt;p&gt;Although using Redux is straight-forward once you understand the approach and its nuances, after a while it gets repetitive. It&amp;#39;s easy to end up with a lot of &amp;quot;boilerplate&amp;quot; code that wires all the logic together. For this reason, multiple solutions addressing the issue have appeared.&lt;/p&gt;
&lt;p&gt;In this interview, we&amp;#39;ll learn about &lt;a href=&quot;https://github.com/concretesolutions/redux-zero&quot;&gt;Redux Zero&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/matheusml&quot;&gt;Matheus Lima&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://survivejs.com/blog/kea-interview/&quot;&gt;See also the Kea interview&lt;/a&gt; for another approach and &lt;a href=&quot;https://survivejs.com/blog/redux-interview&quot;&gt;the original Redux interview&lt;/a&gt; to learn more about the approach from its creator.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/28e8097c124eb53f98ca4bbae484ce4a.jpg&quot; alt=&quot;Matheus Lima&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Matheus Lima&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I am Matheus Lima, a JavaScript lead developer at Concrete Solutions.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-_redux-zero_-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-_redux-zero_-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Redux Zero&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-_redux-zero_-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Redux Zero is a library which offers a simple way to handle state in modern applications. It&amp;#39;s lightweight, easy to learn and already works with React, React Native, Preact and Svelte. We have plans to add Angular and Vue.js bindings as well.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-_redux-zero_-work-&quot; id=&quot;how-does-_redux-zero_-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Redux Zero&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-_redux-zero_-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s simple.&lt;/p&gt;
&lt;p&gt;First, create a store. The application state will live here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; createStore &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redux-zero&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; initialState &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;initialState&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, create some actions to change the state of your store:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;actions&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; store &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  increment&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  decrement&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the actions are bound to the store, they are just pure functions.&lt;/p&gt;
&lt;p&gt;Now create your component. With &lt;em&gt;Redux Zero&lt;/em&gt; your component can focus 100% on the UI and just call the actions to update the state:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; connect &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redux-zero/react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; actions &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./actions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;mapToProps&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; count &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; count &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;mapToProps&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; actions&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; increment&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; decrement &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;decrement&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;decrement&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;increment&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;increment&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last but not least, plug the whole thing in your index file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; render &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; Provider &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redux-zero/react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; store &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./store&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; Counter &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./Counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Provider&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;store&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;Provider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-_redux-zero_-differ-from-other-solutions-&quot; id=&quot;how-does-_redux-zero_-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Redux Zero&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-_redux-zero_-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Redux&lt;/em&gt; is great, but in some cases, it&amp;#39;s way too much. Maybe you don’t want to add all of that boilerplate to your project. Or perhaps the learning curve is too steep, and you just want something simpler to work with.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Redux Zero&lt;/em&gt;, on the other hand, is very simple. You don&amp;#39;t have to learn about dispatchers and reducers (that&amp;#39;s why the name is &lt;em&gt;Redux Zero&lt;/em&gt; - because there are zero reducers).&lt;/p&gt;
&lt;p&gt;With &lt;em&gt;Redux Zero&lt;/em&gt; you just have a store and some actions.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-_redux-zero_-&quot; id=&quot;why-did-you-develop-_redux-zero_-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Redux Zero&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-_redux-zero_-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of our developers here at &lt;a href=&quot;https://concrete.com.br/&quot;&gt;Concrete&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/miguel_albernaz&quot;&gt;Miguel Albernaz&lt;/a&gt;, was using &lt;a href=&quot;https://gist.github.com/developit/55c48d294abab13a146eac236bae3219&quot;&gt;this gist&lt;/a&gt; as a state management solution instead of Redux. The project was going so well that I decided to extract the code, modify it a little bit and open source it to give back to the community.&lt;/p&gt;
&lt;p&gt;What I did not expect was this huge success in less than a month.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Right now we have three things in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve the documentation&lt;/li&gt;
&lt;li&gt;Add a middleware&lt;/li&gt;
&lt;li&gt;Add Angular and Vue.js bindings (&lt;a href=&quot;https://github.com/concretesolutions/redux-zero/issues&quot;&gt;we need your help&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-_redux-zero_-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-_redux-zero_-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Redux Zero&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-_redux-zero_-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a really hard question. Everything is moving so fast in web development that&amp;#39;s hard to make predictions. That said, I think that web components and state management tools are here to stay.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Study the basics. React, and Angular are probably going to die, but JavaScript and CSS won&amp;#39;t.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/_developit&quot;&gt;Jason Miller&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Try to be kind to open source maintainers. Most of them are not getting paid to develop the tools that you&amp;#39;re using for free.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Matheus! Redux Zero is one of the lightest state management solutions I&amp;#39;ve seen so far.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/concretesolutions/redux-zero&quot;&gt;Check out Redux Zero in GitHub&lt;/a&gt; or &lt;a href=&quot;https://medium.com/@matheusml/introducing-redux-zero-bea42214c7ee&quot;&gt;learn more in an introduction to Redux Zero&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Flow Runtime - A runtime type system for JavaScript with full Flow compatibility - Interview with Charles Pick</title><id>aflowruntimearuntimetypesystemforjavascriptwithfullflowcompatibilityinterviewwithcharlespick2017-11-26t00:00:00z</id><link href="https://survivejs.com/blog/flow-runtime-interview/"></link><updated>2017-11-26T00:00:00Z</updated><content type="html">&lt;p&gt;As &lt;a href=&quot;https://survivejs.com/maintenance/code-quality/typing/&quot;&gt;discussed in the maintenance book&lt;/a&gt;, typing your code can be valuable in many ways. In part, it&amp;#39;s about communication. Having the type information available makes it easier to develop tools that make it easier to manipulate code (think refactoring, intelligent parameters).&lt;/p&gt;
&lt;p&gt;To understand the topic more in-depth, this time around I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/codemixers&quot;&gt;Charles Pick&lt;/a&gt;, the author of &lt;a href=&quot;https://github.com/codemix/flow-runtime&quot;&gt;Flow Runtime&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/7f6a5e0c29577f724ad28bea4c577139?s=200&quot; alt=&quot;Charles Pick&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m Charles, and I run a JavaScript consultancy called &lt;a href=&quot;https://codemix.com&quot;&gt;codemix&lt;/a&gt;, I live in the countryside with my wife and kids near York, UK.
&lt;/p&gt;

&lt;p&gt;My first exposure to programming was with BASIC on the BBC Micro at school when I was seven, ever since then I&amp;#39;ve been hooked. I worked as a nightclub DJ before becoming a full-time web developer about twelve years ago.&lt;/p&gt;
&lt;p&gt;Since 2013 I&amp;#39;ve been entirely focused on JavaScript, and I love it. I&amp;#39;m interested in how to make JavaScript faster, safer, less error-prone and more comfortable to refactor.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-flow-runtime-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-flow-runtime-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Flow Runtime&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-flow-runtime-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s a type system for JavaScript that works while the application is running, not at compile time like TypeScript or Flow do. The core idea is that types become first-class values that you can reference and pass around like any other.&lt;/p&gt;
&lt;p&gt;Flow Runtime can represent the type of any possible JavaScript value; numbers, objects, classes, functions, etc. and verifies that the input your program receives in reality matches what you were expecting when you wrote it.&lt;/p&gt;
&lt;p&gt;The goal is to be 100% compatible with Flow - Flow catches errors at compile time, Flow Runtime catches errors when your code interacts with untyped code or user input.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-flow-runtime-work-&quot; id=&quot;how-does-flow-runtime-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Flow Runtime&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-flow-runtime-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are two main packages:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flow-runtime&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/flow-runtime&quot;&gt;flow-runtime&lt;/a&gt; represents types and does the actual verification. It provides a simple, composable API for defining types and matching values against them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; t &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;flow-runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; stringOrNumber &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;union&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

stringOrNumber&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
stringOrNumber&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;this is fine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
stringOrNumber&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// throws an error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use this standalone and as well as type checking it enables some pretty cool stuff, like &lt;a href=&quot;https://codemix.github.io/flow-runtime/#/docs/pattern-matching&quot;&gt;pattern matching&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;babel-plugin-flow-runtime&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-flow-runtime&quot;&gt;babel-plugin-flow-runtime&lt;/a&gt; takes code written with Flow annotations and turns those annotations into flow-runtime API calls.&lt;/p&gt;
&lt;p&gt;So when you write code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;type Thing &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  id&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; widget&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Thing &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  id&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Widget&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the plugin produces this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; t &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;flow-runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Thing &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Thing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;property&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;property&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; widget &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; Thing&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  id&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Widget&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can try this out in &lt;a href=&quot;https://codemix.github.io/flow-runtime/#/try&quot;&gt;the online demo&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-flow-runtime-differ-from-other-solutions-&quot; id=&quot;how-does-flow-runtime-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Flow Runtime&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-flow-runtime-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The vast majority of JS validation libraries have a focus on validating user input of one kind or another, whereas Flow Runtime is all about program correctness. To do this, we have to be able to represent the type of any possible JavaScript value, e.g., the shape of a class, or whether a generator function yields the right type of object.&lt;/p&gt;
&lt;p&gt;Most popular validation libraries don&amp;#39;t handle these kinds of scenarios, the closest alternative is &lt;a href=&quot;https://github.com/gcanti/tcomb&quot;&gt;tcomb&lt;/a&gt; by Giulio Canti, it&amp;#39;s a vast library but pre-dates Flow and therefore can&amp;#39;t handle some complicated cases.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-flow-runtime-&quot; id=&quot;why-did-you-develop-flow-runtime-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Flow Runtime&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-flow-runtime-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We were modernizing a pretty large, sprawling JavaScript codebase for one of our customers back in 2014 when Facebook launched Flow, and after a bit of experimentation we were sold entirely - it&amp;#39;s an excellent technology. However, at the time it was still pretty rough around the edges and didn&amp;#39;t support a lot of the newer ES6 features we were using.&lt;/p&gt;
&lt;p&gt;We also found introducing a type system to an existing project pretty challenging. You have to make a lot of assumptions about the untyped code, and you don&amp;#39;t start seeing the benefit until the overwhelming majority of the codebase is converted.&lt;/p&gt;
&lt;p&gt;The core problem is that your nice, newly typed codebase touches untyped code so often that static analysis is defeated - it&amp;#39;s entirely possible to write fully annotated code that Flow happily accepts and is completely wrong because the real-world input does not match your expectations. So if we can&amp;#39;t find these problems at compile time, the only way to find them is at runtime.&lt;/p&gt;
&lt;p&gt;Out of this idea came my first effort - &lt;a href=&quot;https://github.com/codemix/babel-plugin-typecheck&quot;&gt;babel-plugin-typecheck&lt;/a&gt; which compiles Flow type annotations into type checks. It generates all the code inline which makes it very hard to develop for and maintain. As Flow matured and continued getting better, it became clear that we needed a different approach if we were ever going to be compatible, and so flow-runtime was born.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d like to produce a webpack plugin to make it easier to work with external type definitions. Right now you have to use a separate package called &lt;code&gt;flow-runtime-cli&lt;/code&gt; which generates a file that you can later import, and it&amp;#39;s all a bit messy. I also want to simplify some of the internals to make it easier for people to contribute.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-flow-runtime-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-flow-runtime-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Flow Runtime&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-flow-runtime-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In general, I think we&amp;#39;re going to see TypeScript and Flow become more and more popular, the benefits of optional static typing are pretty clear at this point. I&amp;#39;d like to see the ecosystem around Flow mature, I think it&amp;#39;s the technically superior option but TypeScript offers a lot better tooling at the moment.&lt;/p&gt;
&lt;p&gt;Eventually, I think we&amp;#39;ll see Flow&amp;#39;s type information start being incorporated into other projects, which will enable a lot of cool things. If that information were available directly to Babel, webpack or uglify, etc. it would be possible to generate much faster safely, smaller production builds.&lt;/p&gt;
&lt;p&gt;Now that Babel supports TypeScript it is possible to support TypeScript in flow-runtime. I&amp;#39;m pretty excited to try that out.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Take every prescriptive blog post or article you read with a pinch of salt and be particularly suspicious of anyone who tells you to always/never do X, Y or Z.&lt;/p&gt;
&lt;p&gt;Stick with well-established tools at first and don&amp;#39;t worry about keeping up with the cutting edge - excellent documentation and support matter most.&lt;/p&gt;
&lt;p&gt;Seek out and work closely with people smarter and more experienced than you, but remember that those intelligent people are still going to be wrong a lot of the time.&lt;/p&gt;
&lt;p&gt;Comment your code, for your future benefit and because you&amp;#39;ll spot a bunch of lurking bugs in the process.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think &lt;a href=&quot;https://github.com/benjamingr&quot;&gt;Benjamin Gruenbaum&lt;/a&gt; is an unsung hero in the Open Source JavaScript community. Benjamin contributes to so many projects and discussions that it&amp;#39;s hard to keep up, he&amp;#39;s one of those people that is always there, helping people on Stack Overflow, supporting other developers in GitHub issues, being pragmatic and helping keep discussions productive.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Charles! I think your work complements &lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt; well and will allow people using it already to get more out of the approach.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://codemix.github.io/flow-runtime/&quot;&gt;flow-runtime site to learn more&lt;/a&gt;. See &lt;a href=&quot;https://github.com/codemix/flow-runtime&quot;&gt;the project in GitHub&lt;/a&gt; as well.&lt;/p&gt;
</content></entry><entry><title>a-plus-forms - A+ forms. Would use again - Interview with Nikolay Nemshilov</title><id>aaplusformsaformswoulduseagaininterviewwithnikolaynemshilov2017-11-20t00:00:00z</id><link href="https://survivejs.com/blog/a-plus-interview/"></link><updated>2017-11-20T00:00:00Z</updated><content type="html">&lt;p&gt;If you think about it, a lot of web development has something to do with forms. Every time you capture information, you most likely require a form. It&amp;#39;s one of the basic skills for a front-end developer.&lt;/p&gt;
&lt;p&gt;There are plenty of options for React and I&amp;#39;ve &lt;a href=&quot;https://presentations.survivejs.com/forms-in-react/&quot;&gt;reviewed the directions briefly on my slides&lt;/a&gt;. To get a better idea of one of them, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/nemshilov&quot;&gt;Nikolay Nemshilov&lt;/a&gt; about A+ forms.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;I met Nikolay over the internet roughly a decade ago while I was writing my first bigger web application. I used his RightJS library there. It was sort of an alternative for jQuery at the time. It has been fun to see both of our careers evolve since those days.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/e950e05c2a6b18cf53ac12d8d2c73e7c?s=200&quot; alt=&quot;Nikolay Nemshilov&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Well, over the years of trying to answer this question, I narrowed it down to the following: Hi, I&amp;#39;m Nikolay, I&amp;#39;m here to help.
&lt;/p&gt;

&lt;p&gt;That&amp;#39;s usually enough to start. But, I suppose you want something more tangible in this case. Well, I&amp;#39;m a software engineer, I think. And I&amp;#39;ve been doing this long enough to start feeling a bit awkward about it. I guess my &amp;quot;career&amp;quot; as a software engineer began when IE4 was the tip of the spear and I still had my hands on the keyboard every single day.&lt;/p&gt;
&lt;p&gt;Recently, however, I&amp;#39;ve been more focused on building teams of software engineers at my day job. I see this as just another way to create software. I suppose it&amp;#39;s a natural outcome of attempts to realize more extensive and more significant projects.&lt;/p&gt;
&lt;p&gt;Ok, I admit, this was a bit vague. Don&amp;#39;t get me wrong; I am not trying to dodge the question. But I feel like a personal story of a Siberian born, working-class nerd who lives in Australia is going to be a bit confusing and besides the point.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-a-plus-forms-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-a-plus-forms-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;a-plus-forms&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-a-plus-forms-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A+ forms is a React forms library that helps you not cry yourself to sleep every time your boss asks you to build a twelve-field form. It solves tedious problems like state management, validation, and data transformation in a predictable manner with minimal configuration.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-do-a-plus-forms-work-&quot; id=&quot;how-do-a-plus-forms-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How do &lt;em&gt;a-plus-forms&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-do-a-plus-forms-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think this question can be answered from multiple perspectives: how it works internally, what it exposes externally, and how it works in the context of an engineering team.&lt;/p&gt;
&lt;p&gt;It primarily revolves around the concept of an input field. I started with the familiar idea of an HTML input tag with its &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, and &lt;code&gt;onchange&lt;/code&gt; attributes and then applied these to all fields. Fields may also have sub-fields. In some cases, a form is one large field.&lt;/p&gt;
&lt;p&gt;The big idea here is to work with the grain of engineers&amp;#39; understanding of forms. Engineers think of forms as a bucket of input fields that spits out a blob of data which we then retrieve and send to the server. A+ forms provide this the type of developer experience. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; Form&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; TextInput&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; PasswordInput &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;a-plus-forms&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

cosnt &lt;span class=&quot;token function-variable function&quot; &gt;sendToServer&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; password &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;Form onSubmit&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;sendToServer&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;TextInput name&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;username&quot;&lt;/span&gt; label&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Username&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;PasswordInput name&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;password&quot;&lt;/span&gt; label&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;Password&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button type&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Sign In&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;Form&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above is just a simple example that doesn&amp;#39;t do justice to the level of complexity A+ forms can handle. But it demonstrates the principle behind the library:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here are my fields. Please give me the data entered into them, because I don&amp;#39;t care about anything else at the moment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This mentality is shared by engineers and teams. It&amp;#39;s a universal truth of forms if you will. All you want is data.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-do-a-plus-forms-differ-from-other-solutions-&quot; id=&quot;how-do-a-plus-forms-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How do &lt;em&gt;a-plus-forms&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-do-a-plus-forms-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, let&amp;#39;s get this straight. I&amp;#39;m not going to say anything negative about other solutions - I&amp;#39;m not here to bash other people&amp;#39;s work. Besides, given enough determination, most problems can be solved with any tool available. Instead, I&amp;#39;ll explain what&amp;#39;s important to me.&lt;/p&gt;
&lt;p&gt;As the technology matures, we humans try to use it to solve increasingly complex problems. Which in turn requires increasingly sophisticated solutions. Over time this complexity starts accumulating until we forget what we were doing in the first place.&lt;/p&gt;
&lt;p&gt;Most solutions on the market address the complexity of the task with increased complexity. Over time this inevitably becomes taxing. A+ forms differ here by attempting to keeping the task of creating and maintaining complex forms simple.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-a-plus-forms-&quot; id=&quot;why-did-you-develop-a-plus-forms-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;a-plus-forms&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-a-plus-forms-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To become rich and famous and achieve world domination, naturally. But seriously, I think I have little patience for wasting time in my work. I don&amp;#39;t know about you, but I&amp;#39;m easily distracted and discouraged when things are not going smoothly. There are so many awesome things waiting to be built in the world, and spending time dealing with mundane problems that have already been solved is unproductive.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s the same principle why you use React. You could devote yourself to vanilla JavaScript and DOM. But after ten times of writing the same repetitive boilerplate code and dealing with browser inconsistencies, you probably just want to focus on building the actual app, not figuring out why &lt;code&gt;change&lt;/code&gt; events are not triggered on a range input in IE 10.&lt;/p&gt;
&lt;p&gt;I built A+ forms for the same reason, so my engineers and I don&amp;#39;t have to solve this problem over and over again and can focus on making what we want to develop.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m glad you&amp;#39;ve asked. A+ forms itself represents just the data handling core. All the components are just standard HTML-looking abstractions, which depending on a context, can be implemented in all sorts of things. Those &lt;em&gt;&amp;quot;all sorts of things&amp;quot;&lt;/em&gt; is the next step in my view.&lt;/p&gt;
&lt;p&gt;Here are the next extensions that I&amp;#39;m planning to build:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) Bootstrap-tailored fields&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;A+ forms have a bunch of standard fields out of the box, but they&amp;#39;re not tied to any particular UI component implementation. I want to create an extension that will convert those fields into standard Bootstrap fields as a means to simplify adoption further.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;This has been done. See &lt;a href=&quot;https://www.npmjs.com/package/a-plus-forms-bootstrap&quot;&gt;a-plus-forms-bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) React Native fields&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This one is my favorite. Form management in native mobile apps is alien to us web developers. But it doesn&amp;#39;t have to be like this. If we re-implement those fields in React Native components, then engineers could have the same developer experience between web and native apps. Heck, they could even finally share their forms code between them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) HTML5 props validator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At my day job, we&amp;#39;re using JSON Schema as a way to validate forms, but it&amp;#39;s a bit overkill for more straightforward cases. I want to build an extension that will read standard validation props like &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt; on the input fields and set validation rules accordingly.&lt;/p&gt;
&lt;p&gt;The goal is to make A+ forms into a sort of &amp;quot;Barbie doll&amp;quot;, where the community can build extensions and extra accessories for it and share their solutions with each other.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-a-plus-forms-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-a-plus-forms-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;a-plus-forms&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-a-plus-forms-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you ask my opinion, I think we should stop calling it &amp;quot;web development&amp;quot; and instead just use the term &amp;quot;development&amp;quot;. From first-hand experience since almost the beginning of widespread adoption of the web, I can say one thing: engineers tend to be overprotective of their reputation, to the point of being real jerks.&lt;/p&gt;
&lt;p&gt;When I started my career, the word &amp;quot;web developer&amp;quot; was an oxymoron. The older generation didn&amp;#39;t even want to call us &amp;quot;developers&amp;quot;, they called us &amp;quot;webmasters&amp;quot; as a way to distance themselves from us. They saw themselves as &amp;quot;real engineers&amp;quot;, where we were just playing with toys.&lt;/p&gt;
&lt;p&gt;If you joined the bandwagon a bit later, you might have seen web developers belittled as not being &amp;quot;real programmers&amp;quot;. Humans do nasty stuff to each other now and then.&lt;/p&gt;
&lt;p&gt;But, by now techniques developed for the &amp;quot;web&amp;quot; have become pretty much the standard practice in most areas of software. For example, the process for building UIs we&amp;#39;ve developed for the &amp;quot;web&amp;quot; beats the traditional &amp;quot;native&amp;quot; UI practices. The same goes for building APIs. Node.js based microservices, Serverless, load balancing, high-efficiency networking, and so on all grew out of the &amp;quot;web&amp;quot;.&lt;/p&gt;
&lt;p&gt;The child has grown into an adult and feels strong. Now that adult just needs to learn how to act like an adult. That will be a trend in the near future.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tread without fear, my friends. The &amp;quot;web&amp;quot; is here to stay. Don&amp;#39;t listen to anyone who tells you it&amp;#39;s not &amp;quot;real software engineering&amp;quot;.&lt;/p&gt;
&lt;p&gt;Also, a bit of a downer: 99% of your time won&amp;#39;t be about &amp;quot;writing clever algorithms&amp;quot;. The sooner you accept that the better off you will be. It&amp;#39;s just a fairy tale that has nothing to do with reality. It&amp;#39;s called &amp;quot;development&amp;quot;, not &amp;quot;slinging out code&amp;quot; for a reason. It&amp;#39;s really about building things, not showing how smart you are. Because guess what, everyone else is just as bright :)&lt;/p&gt;
&lt;p&gt;This observation brings us to the third and last piece of advice. Learn how business works. I know, business, ewww! But it will help you to make better decisions and understand how other people see your role in a company. Most importantly, this will help you to keep hassle to a minimum and get back to doing what you love - creating things.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ooh, I love this! Okay, so, anyone really from Thinkmill, Envato or Buildkite. They are all strong technically, and most of them are outstanding people.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Don&amp;#39;t forget to eat well, get enough sunlight, and, if you&amp;#39;re an introvert, don&amp;#39;t forget to give yourself plenty of downtime cuddling with a book to recharge your batteries. The world is an exhausting place, but it has pancakes in it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Nikolay! A+ forms looks like a solid form handling solution for React.&lt;/p&gt;
&lt;p&gt;You can learn more about &lt;a href=&quot;https://github.com/MadRabbit/a-plus-forms&quot;&gt;A+ forms at GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>“SurviveJS — Webpack” v2.1 and “SurviveJS — Maintenance” v0.9</title><id>asurvivejswebpackv21andsurvivejsmaintenancev092017-11-17t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-and-maintenance/"></link><updated>2017-11-17T00:00:00Z</updated><content type="html">&lt;p&gt;What do you do when you realize a book has become too big? You split it of course. The &lt;a href=&quot;https://survivejs.com/webpack/&quot;&gt;webpack book&lt;/a&gt; began to feel this way after &lt;a href=&quot;https://survivejs.com/survivejs-webpack-20/&quot;&gt;the previous release&lt;/a&gt; and this is the reason why I started to write &lt;a href=&quot;https://survivejs.com/maintenance/&quot;&gt;a new book about maintenance&lt;/a&gt; with &lt;a href=&quot;https://github.com/sapegin&quot;&gt;Artem Sapegin&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been collaborating with Artem since I wrote my first React book and he was the ideal collaborator for the new effort as we both have experience with maintaining and developing JavaScript projects of different sizes. Writing the book has been a chance for us to gather our knowledge into one place and learn in the process.&lt;/p&gt;
&lt;p&gt;Maintenance feels like an undervalued topic, and it&amp;#39;s one of the main reasons why we decided to write the book in the first place. It&amp;#39;s easy to start a project but how can you ensure its success? Normally a project spends most of its lifetime in maintenance mode so putting the focus on this topic has value.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-survivejs-webpack-v2-1&quot; id=&quot;book-improvements-survivejs-webpack-v2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements — “SurviveJS - Webpack” v2.1&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-survivejs-webpack-v2-1&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We began writing the book by moving secondary topics to the maintenance book from the webpack one. This cleaned up the structure of the book and allowed me to make it easier to approach.&lt;/p&gt;
&lt;p&gt;The webpack book is more to the point now although it&amp;#39;s still a long book (~370 pages). I am happy with the results, though, as now it feels like the book can be extended again.&lt;/p&gt;
&lt;p&gt;During this process, I&amp;#39;ve applied simplifications based on my &lt;a href=&quot;https://survivejs.com/training/&quot;&gt;training experiences&lt;/a&gt; this year. I updated the book to webpack 3 and added tons of small tips and tricks here and there. A few editorial tweaks have been made to ensure the book reads well and fits the PDF format nicely.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve listed the main changes below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Packages&lt;/em&gt; part has been eliminated. The chapter focused on consuming packages remains in the book while the rest of the content has been moved to the maintenance book.&lt;/li&gt;
&lt;li&gt;The code has been formatted using Prettier. There are still trailing commas to keep the diffs simple.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Automatic Browser Refresh&lt;/em&gt; chapter has been renamed as &lt;a href=&quot;https://survivejs.com/webpack/developing/webpack-dev-server/&quot;&gt;webpack-dev-server&lt;/a&gt; to reflect its content better.&lt;/li&gt;
&lt;li&gt;The linting chapters have been rewritten and moved to the maintenance book.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Analyzing Build Statistics&lt;/em&gt; chapter has been renamed as &lt;a href=&quot;https://survivejs.com/webpack/optimizing/build-analysis/&quot;&gt;Build Analysis&lt;/a&gt; chapter.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Bundling Libraries&lt;/em&gt; chapter has been reworked and moved to the maintenance book.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Library Output&lt;/em&gt; chapter has been dropped as webpack documentation and the maintenance book cover the topic well.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://survivejs.com/maintenance/appendices/customizing-eslint/&quot;&gt;Customizing ESLint&lt;/a&gt; appendix has been moved to the maintenance book.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Hot Module Replacement with React&lt;/em&gt; appendix has been dropped as the official documentation covers the topic well.&lt;/li&gt;
&lt;li&gt;The CSS Modules portions have been moved to an appendix as it&amp;#39;s secondary content.&lt;/li&gt;
&lt;li&gt;The book structure has been simplified and streamlined where possible so it&amp;#39;s easier to get into the topic. At the same time I added more tips and tricks where it makes sense.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I still have content planned for the webpack book, but even in its current state, it&amp;#39;s better, and more focused, than the old one. If you have ideas on what specific topics to cover, &lt;a href=&quot;https://github.com/survivejs/webpack-book/issues&quot;&gt;let me know at GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In total 309 commits went to the book since the last release. You can find the &lt;a href=&quot;https://github.com/survivejs/webpack-book/compare/v2.0.22...v2.1.0&quot;&gt;changes at GitHub&lt;/a&gt;. Remember to use the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;p&gt;You can find the book below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://survivejs.com/webpack/preface/&quot;&gt;“SurviveJS — Webpack” - Free online edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/survivejs-webpack/&quot;&gt;“SurviveJS — Webpack” - Leanpub edition (digital)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. I support his work this way given mine builds on top of his. Literally, most of the income goes to webpack developers now!&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#new-book-survivejs-maintenance-v0-9&quot; id=&quot;new-book-survivejs-maintenance-v0-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;New Book - “SurviveJS — Maintenance” v0.9&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#new-book-survivejs-maintenance-v0-9&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://survivejs.com/maintenance&quot;&gt;The maintenance book&lt;/a&gt; has roughly 150 pages in its current state, and it covers topics including packaging, code quality, infrastructure, documentation, and future. It&amp;#39;s a light, inspirational read and it contains plenty of techniques you can apply in your daily work.&lt;/p&gt;
&lt;p&gt;Given a large part of the content was split from the webpack book, &lt;a href=&quot;https://leanpub.com/survivejs-maintenance&quot;&gt;the Leanpub edition of the maintenance book&lt;/a&gt; will be provided for free to those that bought the previous (v2.0) version of the webpack book or earlier.&lt;/p&gt;
&lt;p&gt;The current version of the book is missing some content, and the book is still shaping up. For this reason, it is important that you &lt;a href=&quot;https://github.com/survivejs/maintenance-book/issues&quot;&gt;give feedback on the GitHub issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the book below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://survivejs.com/maintenance/preface/&quot;&gt;“SurviveJS — Maintenance” - Free online edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/survivejs-maintenance/&quot;&gt;“SurviveJS — Maintenance” - Leanpub edition (digital)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;The book profit is split between Artem and me. We use the funds to develop further content based on demand.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I want to push the maintenance book to a content complete state and produce a paperback version of it. The book price will go up gradually as it gets closer to completion.&lt;/p&gt;
&lt;p&gt;I have a set of tweaks planned for the webpack book, and there&amp;#39;s a &lt;a href=&quot;https://survivejs.com/react/&quot;&gt;React book&lt;/a&gt; to update as well.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Given I am based in Vienna these days, this has meant it&amp;#39;s easy for me to do &lt;a href=&quot;https://survivejs.com/training/&quot;&gt;JavaScript training&lt;/a&gt; across Europe. I also consult occasionally so contact me if you are interested in either offering.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy the new book and find the webpack book improvements useful! It took a lot of work to get here, and there&amp;#39;s still more to come. Thank you for your support!&lt;/p&gt;
&lt;p&gt;Both books have specific chat channels at Gitter if you want to discuss the topics directly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gitter.im/survivejs/maintenance&quot;&gt;Maintenance book Gitter channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;Webpack book Gitter channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also &lt;a href=&quot;https://github.com/survivejs/ama/issues&quot;&gt;ask questions at my AmA&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;We will arrange &lt;a href=&quot;https://react-finland.fi/&quot;&gt;a React conference in Finland (end of April, 2018)&lt;/a&gt;. Perhaps I will see some of you there!&lt;/blockquote&gt;</content></entry><entry><title>Cabbie - WebDriver for the masses - Interview with Forbes Lindesay</title><id>acabbiewebdriverforthemassesinterviewwithforbeslindesay2017-11-13t00:00:00z</id><link href="https://survivejs.com/blog/cabbie-interview/"></link><updated>2017-11-13T00:00:00Z</updated><content type="html">&lt;p&gt;Testing is a lasting topic in software development. There are lots of tools, especially for JavaScript. In this interview, you&amp;#39;ll learn about Cabbie, a WebDriver based browser automation library by &lt;a href=&quot;https://twitter.com/ForbesLindesay&quot;&gt;Forbes Lindesay&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
 &lt;img src=&quot;https://www.gravatar.com/avatar/eb3e104452d654350a5d1a65caa2e49e?s=200&quot; alt=&quot;Forbes Lindesay&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I got interested in open source and JavaScript while I was at university. It was fascinating to see people using the software I built to build their things. I worked at Facebook as a front-end engineer for a couple of years and learned a lot about the challenges in scaling vast JavaScript applications.
&lt;/p&gt;

&lt;p&gt;Now I&amp;#39;m working on a startup called Changepage, which is a tool for sharing feature announcements and bug fixes. I&amp;#39;m also running training workshops on React and Node.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-cabbie-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-cabbie-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Cabbie&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-cabbie-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cabbie is a JavaScript library for automating browsers. The primary use case is end to end testing, but you can use it for any task that you would usually do by hand in a browser, and you want to automate. It lets you do all the things you would typically do by hand, but using JavaScript.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-cabbie-work-&quot; id=&quot;how-does-cabbie-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Cabbie&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-cabbie-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cabbie uses the &lt;a href=&quot;http://www.seleniumhq.org/projects/webdriver/&quot;&gt;WebDriver&lt;/a&gt; protocol to control browsers. It&amp;#39;s a standard that all major browsers support that lets you interact with them via HTTP requests.&lt;/p&gt;
&lt;p&gt;There are two versions of Cabbie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/cabbie-async&quot;&gt;cabbie-async&lt;/a&gt; is a &lt;code&gt;Promise&lt;/code&gt; based async library. &lt;code&gt;cabbie-sync&lt;/code&gt; is automatically generated from the same source code by removing all the &lt;code&gt;await&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt;. It uses the &lt;code&gt;spawnSync&lt;/code&gt; API in Node to make the same library, but synchronous.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/cabbie-sync&quot;&gt;cabbie-sync&lt;/a&gt; is the synchronous version which is much easier to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-cabbie-differ-from-other-solutions-&quot; id=&quot;how-does-cabbie-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Cabbie&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-cabbie-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are several different webdriver clients for Node. What differentiates Cabbie from most is that it has a synchronous mode, with the same API as the async mode. Normally when you&amp;#39;re writing JavaScript, it&amp;#39;s a bad idea to write synchronous IO, but for tests, it doesn&amp;#39;t usually matter. Writing and debugging synchronous code is more comfortable.&lt;/p&gt;
&lt;p&gt;The async mode can also be useful though when you&amp;#39;re trying to run many tests in parallel. If you use Cabbie in async mode, you can run multiple tests in parallel in a single Node process. If you use it in sync mode, you need multiple Node processes to run multiple tests in parallel.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://webdriver.io/&quot;&gt;webdriver.io&lt;/a&gt;, an another solution, also has a synchronous mode, but it works a little differently. To use the synchronous mode, you have to use their entire test framework. Because Cabbie is just a library, you can use your choice of the test framework. It works equally well with Jest as it does with Mocha.&lt;/p&gt;
&lt;p&gt;Cabbie also has a real focus on developer experience. For example, if you use an online service like Sauce Labs or BrowserStack to run your end to end tests, you can configure Cabbie to use that service just by passing &lt;code&gt;cabbie(&amp;quot;saucelabs&amp;quot;)&lt;/code&gt; or &lt;code&gt;cabbie(&amp;quot;browserstack&amp;quot;)&lt;/code&gt; when constructing the driver.&lt;/p&gt;
&lt;p&gt;We also normalize the methods for selecting a specific browser across all the major cloud platforms (see &lt;a href=&quot;https://cabbiejs.org/browsers/&quot;&gt;Cabbie documentation on this&lt;/a&gt;) so you don&amp;#39;t have as much to remember or as much to change if you switch providers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-cabbie-&quot; id=&quot;why-did-you-develop-cabbie-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Cabbie&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-cabbie-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was developing a large web app, and we needed a way to check that everything worked when we put it together. Unit tests are great, but it&amp;#39;s tough to keep the coverage high enough to catch every bug. With an end to end test, one test can cover a considerable portion of your app. It&amp;#39;s also almost impossible to check that your frontend code and backend code works together without end to end testing.&lt;/p&gt;
&lt;p&gt;I tried webdriver.io and loved how they let you write synchronous end to end tests - it made things way more relaxed. At the time I needed it to work on Windows though because not all the developers I was working with were on apple. Once I dug into making it work on Windows, I found there were lots of other things I wanted to change and tweak the API.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the difficulties in writing end to end tests can be the cryptic error messages you get back. The other thing is that it&amp;#39;s straightforward to rely on your tests running quickly accidentally. What I&amp;#39;m starting to do with Cabbie is add detection for standard errors, and print more helpful error messages that provide suggested next actions for how to fix these problems. I&amp;#39;m also adding automated retries/timeouts to most of the methods as this makes it much easier to write stable, reliable tests.&lt;/p&gt;
&lt;p&gt;The next big project will be a test runner, similar to Jest but with features to make it easier to run tests in parallel across many browsers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-cabbie-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-cabbie-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Cabbie&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-cabbie-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I see a lot of renewed interest in testing and static type checking. I think this is exciting. For the web to succeed, we need web apps to be reliable. I&amp;#39;ve seen tremendous benefits from TypeScript and Flow, and the competition is helping to improve both tools. Jest has transformed what we feel able to expect from testing frameworks. I think end to end testing is the next thing that needs a big kick in this area.&lt;/p&gt;
&lt;p&gt;The other big thing I think is improving is state management. We&amp;#39;ve just started to see the real problems that techniques like Flux and Redux cause, so the return to component-local state using &lt;code&gt;this.setState&lt;/code&gt; and the upsurge of tools like GraphQL, Relay and Bicycle are changing things for the better.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think if you&amp;#39;re just starting out, the amount of stuff it seems like you need to learn about can be overwhelming. My advice would be to minimise what you learn from your first couple of apps. Just look for solutions to problems that you&amp;#39;ve experienced, and ignore the people saying you &lt;em&gt;need&lt;/em&gt; to learn about this new technology or that new technology.&lt;/p&gt;
&lt;p&gt;The other piece of advice that I&amp;#39;ve found useful is try to deploy to production on day one of any new project. It&amp;#39;s much easier to deploy an app that is just a blank &amp;quot;hello world&amp;quot; than it is a full complex application with databases and authentication and so on. If you are continuously deploying things to production, you are always ready to start promoting your idea, as soon as you&amp;#39;re happy for people to start using it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Erik Rasmussen created the Redux Form project. Handling form input well is a deceptively complex problem, and I think Erik has done an awe-inspiring job of understanding those issues and building a sound API for dealing with them. I&amp;#39;d also be interested to hear from Jared Palmer who&amp;#39;s been doing similar work with the Formik project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Forbes! Cabbie looks like a fantastic alternative for end to end testing.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://cabbiejs.org/&quot;&gt;learn more about Cabbie at its site&lt;/a&gt;. See also &lt;a href=&quot;https://github.com/ForbesLindesay/cabbie&quot;&gt;Cabbie on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>react-lite - Implementation of React optimized for small size - Interview with Jade</title><id>areactliteimplementationofreactoptimizedforsmallsizeinterviewwithjade2017-11-06t00:00:00z</id><link href="https://survivejs.com/blog/react-lite-interview/"></link><updated>2017-11-06T00:00:00Z</updated><content type="html">&lt;p&gt;Even though React API is small, the implementation is quite sizable due to all the work it does behind the façade. For this reason, people have developed solutions that implement the API with different trade-offs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;react-lite&lt;/em&gt; by &lt;a href=&quot;https://twitter.com/guyingjie129&quot;&gt;Jade&lt;/a&gt; is one of these solutions.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To learn about a related solution, &lt;a href=&quot;https://survivejs.com/blog/inferno-interview/&quot;&gt;read the Inferno interview&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/0d2218b14f25799ed87e0cbf5a787085.jpg&quot; alt=&quot;Jade&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Jade&lt;/figcaption&gt;&lt;/figure&gt;

  My Chinese name is GuYingjie (古映杰), and people call me Jade in English. I live in Shanghai and work for Ctrip as a front-end architect. I am the author of &lt;em&gt;react-lite&lt;/em&gt;.
&lt;/p&gt;

&lt;p&gt;At Ctrip, we are big fans of React. We use React and React Native in many projects. My primary job is to improve the toolchain and infrastructure around React so that our engineers can develop a web app using React more productively and happily.&lt;/p&gt;
&lt;p&gt;I like being a part of the open source community. &lt;em&gt;react-lite&lt;/em&gt; is one of my open source projects, and there are also other exciting projects in my GitHub, such as &lt;a href=&quot;https://github.com/Lucifier129/factor-network&quot;&gt;factor-network&lt;/a&gt;, which is two machine learning algorithms implemented in less than 400 lines code of JavaScript. It works well-playing flappy-bird and recognizing MNIST handwritten digit database.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-lite-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-lite-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;react-lite&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-lite-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;react-lite&lt;/em&gt; is a subset of React - just like &lt;em&gt;zepto&lt;/em&gt; to &lt;em&gt;jquery&lt;/em&gt;. If your &lt;em&gt;react app&lt;/em&gt; follows best practices of React, it&amp;#39;s easy to use &lt;em&gt;react-lite&lt;/em&gt; to replace React in &lt;a href=&quot;https://github.com/Lucifier129/react-lite/blob/master/README.md#usage&quot;&gt;a comfortable and safe way&lt;/a&gt;. Everything should just work and reduce your JS bundle size by 100 kB+.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-react-lite-work-&quot; id=&quot;how-does-react-lite-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;react-lite&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-react-lite-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;People often ask me a question: How much code you had to drop from React source code to make &lt;em&gt;react-lite&lt;/em&gt; so small?&lt;/p&gt;
&lt;p&gt;In fact, &lt;em&gt;react-lite&lt;/em&gt; is not a fork of React repository. It&amp;#39;s a re-implementation of the same React Public API using ES2015. It ignored the old browsers (such like IE8) to keep itself cleaner and smaller. We don&amp;#39;t need to build a complex custom event-system as React does.&lt;/p&gt;
&lt;p&gt;We simply follow the &lt;em&gt;W3C Event&lt;/em&gt; which has been implemented in all modern browsers natively. It also made &lt;em&gt;React.PropType&lt;/em&gt; to be noop (empty function). It doesn&amp;#39;t implement &lt;em&gt;ReactDOM.renderToString&lt;/em&gt; and other React features which are not expected to run in production.&lt;/p&gt;
&lt;p&gt;I cherry-picked about 178 unit test suite from React GitHub repository (these are all about React Public API) to make sure &lt;em&gt;react-lite&lt;/em&gt; can do the same thing. I created an independent repository(&lt;a href=&quot;https://github.com/Lucifier129/react-core-unit-testing&quot;&gt;react-core-unit-testing&lt;/a&gt; to share the unit test suite.&lt;/p&gt;
&lt;p&gt;Anyone can use the test suite to implement their own &lt;em&gt;react-lite&lt;/em&gt; or to check compatibility with official React. It will be great if React officially shares the Public API unit test suite in an independent repository one day.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-react-lite-differ-from-other-solutions-&quot; id=&quot;how-does-react-lite-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;react-lite&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-react-lite-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Honestly speaking, &lt;em&gt;react-lite&lt;/em&gt; is slower than &lt;em&gt;inferno&lt;/em&gt; and bigger than &lt;em&gt;preact&lt;/em&gt;. But, for now, &lt;em&gt;react-lite&lt;/em&gt; may be more &lt;em&gt;compatible&lt;/em&gt;. Both &lt;em&gt;inferno-compat&lt;/em&gt; and &lt;em&gt;preact-compat&lt;/em&gt; did not follow the same unit test suite of React Public API, and &lt;em&gt;react-lite&lt;/em&gt; now has the best performance in react-core-unit-testing mentioned above.&lt;/p&gt;
&lt;p&gt;As we know, &lt;em&gt;inferno&lt;/em&gt; and &lt;em&gt;preact&lt;/em&gt; are not built for compat, they just have a compat version. It may be hard for them if their custom features cannot keep up the compatibility with React API, or their current implementation can&amp;#39;t simulate the new features of React. For &lt;em&gt;react-lite&lt;/em&gt;, that is not a problem as it doesn&amp;#39;t contain any custom features and therefore can be refactored anytime if needed without breaking.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-lite-&quot; id=&quot;why-did-you-develop-react-lite-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;react-lite&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-lite-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In 2015/10, I saw some articles explaining how virtual-dom works. I thought I could do it better, so I created a repository named &lt;em&gt;esnext-react&lt;/em&gt;, tried to implement a simple React using ES2015, and ran the &lt;a href=&quot;http://lucifier129.github.io/react-motion-with-react-lite/index.html&quot;&gt;react-motion demo&lt;/a&gt; successfully. I felt great when it worked. It&amp;#39;s a very smooth animation written using the good old React API that we know of but running on &lt;em&gt;esnext-react&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In 2015/12, I shared the experience of &lt;em&gt;esnext-react&lt;/em&gt; to some people in the Shanghai office of &lt;a href=&quot;https://www.strikingly.com/&quot;&gt;Strikingly&lt;/a&gt;. The audience, include &lt;a href=&quot;https://twitter.com/dfguo&quot;&gt;Dafeng&lt;/a&gt; - the CTO of Strikingly, all think that making a smaller React runtime implementation is a worthwhile thing to do. It can help people who are hesitant to choose React on the mobile web due to the large script size.&lt;/p&gt;
&lt;p&gt;Then I renamed &lt;em&gt;esnext-react&lt;/em&gt; to &lt;em&gt;react-lite&lt;/em&gt;, and started to improve it and bring it into real projects in Ctrip. Now, &lt;em&gt;react-lite&lt;/em&gt; is heavily adopted inside the company.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now I am focusing on Isomorphic Web App development. As a result, I have developed the following solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Lucifier129/relite&quot;&gt;relite&lt;/a&gt; is a Redux-like library for managing state with a more straightforward API) for state management.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Lucifier129/create-app&quot;&gt;create-app&lt;/a&gt; is meant to be configured once. It renders both client and server for a router and allows integrating them with Node.js, React, Isomorphic-fetch, js-cookie, querystring and other isomorphic libraries into react-imvc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lucifier129/react-imvc&quot;&gt;react-imvc&lt;/a&gt; is similar to &lt;a href=&quot;https://github.com/zeit/next.js&quot;&gt;next.js&lt;/a&gt; as it helps people to build isomorphic/universal web app more easily. But &lt;em&gt;react-imvc&lt;/em&gt; has a different idea, which I call &lt;em&gt;Next generation of Front End MVC Architecture&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The architecture comprises of React/React-lite as the View of MVC, redux-like/relite (state + actions) as the Model of MVC, and ES2015 class as the isomorphic Controller. All the parts of MVC are isomorphic by design. Our web app can do Server-Side-Rendering in Node.js (for SEO and faster initial screen load time) and do Client-Side-Rendering in the browser (for fast user interaction).&lt;/p&gt;
&lt;p&gt;Unfortunately, react-imvc documentation is written only in Chinese. I&amp;#39;m planning to translate it into English in the future.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-lite-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-lite-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;react-lite&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-lite-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;react-lite&lt;/em&gt; does not support React 16 yet because React Fiber is not stable enough. &lt;em&gt;reducing the scripts size&lt;/em&gt; is also a plan of React Core Team. React 16 is already much smaller than React 15 is. Maybe it&amp;#39;s not necessary to write a smaller runtime library of React anymore, or perhaps it&amp;#39;s impossible to implement the react-fiber-architecture with less code than React has.&lt;/p&gt;
&lt;p&gt;So the future of &lt;em&gt;react-lite&lt;/em&gt; is uncertain. It depended on the evolution of React. Anyway, &lt;em&gt;react-lite&lt;/em&gt; is still an excellent choice for a mobile site that is following the best practices of React 15 and wants to reduce the bundle size of the js file.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web development moves faster than you and me. No one can learn everything. But luckily, for most of the libraries or frameworks, we can learn it in a few days.&lt;/p&gt;
&lt;p&gt;Since there are too many things to learn, we must prioritize of our learning. For example, between ES2015/TypeScript and React/Vue/Angular, which to learn first? In my opinion, the answer is ES2015/TypeScript. The essential program language features have higher learning priority than libraries/frameworks written using the language.&lt;/p&gt;
&lt;p&gt;I also believe in learning by doing, learning by coding, learning by building, and learning by making. The source code of React is complicated, but the original idea of React is quite simple and elegant. Implementing your own React (or any other things you are learning) in an MVP (Minimum Viable Product) way can help us understand them more deeply and clearly, even if the code we had written will never run in production.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In China, there are many excellent front-end developers. I recommend some of them below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leeluolee&quot;&gt;ZhengHaibo&lt;/a&gt;, author of &lt;a href=&quot;https://github.com/regularjs/regular&quot;&gt;regularjs&lt;/a&gt;, now works for Netease.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hax&quot;&gt;HeShiJun&lt;/a&gt;, a evangelist of JavaScript/ECMAScript and Web Standard in China.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yuanyan&quot;&gt;yuanyan&lt;/a&gt;, author of &lt;a href=&quot;https://github.com/alibaba/rax&quot;&gt;rax&lt;/a&gt;, now works for Alibaba.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kener&quot;&gt;linfeng&lt;/a&gt;, author of &lt;a href=&quot;https://github.com/ecomfe/echarts&quot;&gt;echarts&lt;/a&gt;, now works for Alibaba.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sorrycc&quot;&gt;chencheng&lt;/a&gt;, author of &lt;a href=&quot;https://github.com/dvajs/dva&quot;&gt;dva&lt;/a&gt;, now works for Alibaba.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aui&quot;&gt;aui&lt;/a&gt;, author of &lt;a href=&quot;https://github.com/aui/art-template&quot;&gt;art-template&lt;/a&gt; and &lt;a href=&quot;https://github.com/aui/artDialog&quot;&gt;artDialog&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The language gap between Chinese developers and English developer will become smaller, and I am glad to see we can learn from each other more in the future.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Jade! It was great that you dared to develop &lt;em&gt;react-lite&lt;/em&gt; as a light replacement for React. We&amp;#39;ll see how it goes with React 16.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/Lucifier129/react-lite&quot;&gt;learn more about react-lite at GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>React Day Berlin - Fully Packed Day of Your Favorite React Content - Interview with Robert Haritonov</title><id>areactdayberlinfullypackeddayofyourfavoritereactcontentinterviewwithrobertharitonov2017-10-17t00:00:00z</id><link href="https://survivejs.com/blog/react-day-berlin-interview/"></link><updated>2017-10-17T00:00:00Z</updated><content type="html">&lt;p&gt;There are a lot of React events out there these days and it seems a new one appears every week somewhere around the world.&lt;/p&gt;
&lt;p&gt;To continue on the theme, this time I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/operatino&quot;&gt;Robert Haritonov&lt;/a&gt; of &lt;a href=&quot;https://reactday.berlin/&quot;&gt;React Day Berlin&lt;/a&gt; organized early December.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://survivejs.com/blog/react-alicante-interview/&quot;&gt;Read the interview about React Alicante&lt;/a&gt; to gain more perspective on conferences.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/bad3e55f0b96b80bc4ffb40d1c1414dc?s=200&quot; alt=&quot;Robert Haritonov&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Originally I&amp;#39;m from Riga, Latvia, and since around three years living in Amsterdam. Been doing JavaScript development since roughly 7-8 years, when jQuery was the (only) thing, and IE6 tricks been pleasing my first sleepless nights as a freelancer.
&lt;/p&gt;

&lt;p&gt;After going through few stages of being an active speaker in Russian speaking community, open source maintainer of &lt;a href=&quot;https://sourcejs.com&quot;&gt;SourceJS&lt;/a&gt;, last years I&amp;#39;ve settled as a Tech Lead in Full-stack teams developing React and Node.js based applications.&lt;/p&gt;
&lt;p&gt;Next to my day job, starting from late 2015 I&amp;#39;ve started to actively be involved in local meetup organization, and build large international conferences in Europe.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#which-community-events-are-you-organizing-now-&quot; id=&quot;which-community-events-are-you-organizing-now-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Which community events are you organizing now?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#which-community-events-are-you-organizing-now-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Together with colleagues and friends, I&amp;#39;m currently behind &lt;a href=&quot;https://www.meetup.com/preview/React-Amsterdam&quot;&gt;React Amsterdam&lt;/a&gt;, &lt;a href=&quot;https://www.meetup.com/preview/AmsterdamJS&quot;&gt;AmsterdamJS&lt;/a&gt; and &lt;a href=&quot;https://www.meetup.com/preview/React-Open-Source&quot;&gt;React Open Source&lt;/a&gt; meetups and also conferences named by the same groups plus most recent - &lt;a href=&quot;https://reactday.berlin&quot;&gt;React Day Berlin&lt;/a&gt; event.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-day-berlin-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-day-berlin-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;React Day Berlin&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-day-berlin-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each event we do has its unique feeling and vibe. Whereas React Amsterdam is a massive event, for React Day Berlin we&amp;#39;re building a more personal, cozy atmosphere with a right balance of talks touching various parts of the ecosystem.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s going to be an intense learning day for everybody into React, and a great place to network with other developers from Germany, as well as with international open source enthusiasts and great software engineers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-react-day-berlin-offer-&quot; id=&quot;what-does-react-day-berlin-offer-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does &lt;em&gt;React Day Berlin&lt;/em&gt; offer?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-react-day-berlin-offer-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We offer a fully-packed line-up of talks about React (obviously), React Native, GraphQL/Apollo, case studies from world known projects and major open source initiatives like Storybook.&lt;/p&gt;
&lt;p&gt;Consider this as a mini-festival, coming to the center of Europe to celebrate all things React and concentrate the learning experience together with inspiration from your peers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-decide-to-arrange-react-day-berlin-&quot; id=&quot;why-did-you-decide-to-arrange-react-day-berlin-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you decide to arrange &lt;em&gt;React Day Berlin&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-decide-to-arrange-react-day-berlin-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Doing side-projects, like in this case, event organization, it&amp;#39;s important to challenge yourself with new ideas and formats. We&amp;#39;ve been looking for an option to fill the season start with a balanced conference format, and Berlin turned out to be a great place to host such event.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a vibrant community, with lot&amp;#39;s of great software developers and a big React fan base, that deserves a tremendous local conference with international vibes.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Meanwhile, we&amp;#39;ve reached the capacity with some events and focusing on amplifying the best parts of our events and fixing bottlenecks of previously organized. We see lots of opportunities to build great communities, and that&amp;#39;s what we love the most.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Try more things, stay open-minded and don&amp;#39;t follow the hype everywhere it leads you. Choose what works best in your case, and set your way based on what works better for your product and team.&lt;/p&gt;
&lt;p&gt;JavaScript development is hard nowadays, but at the same time, the community provides a great variety of opportunities either you want to build a Web App, or a Desktop application with Electron.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It would be great to hear more from popular open source project maintainers. It&amp;#39;s sad that open source is so hard our days, with people demanding too much from contributors doing their thing in free time for public availability.&lt;/p&gt;
&lt;p&gt;The more we hear from developers behind the projects we use, the better community will be able to understand the efforts people put into open source.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Robert! I will be most likely participating in &lt;a href=&quot;https://reactday.berlin&quot;&gt;React Day Berlin&lt;/a&gt; myself. It&amp;#39;s a good place for a conference like this.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can get a &lt;a href=&quot;https://www.eventbrite.com/e/react-day-berlin-2017-tickets-37159994544?discount=SurviveJS&quot;&gt;15% discount to the conference ticket through this link&lt;/a&gt;.&lt;/blockquote&gt;</content></entry><entry><title>unexpected-react - Test Full Virtual DOM - Interview with Dave Brotherstone</title><id>aunexpectedreacttestfullvirtualdominterviewwithdavebrotherstone2017-09-29t00:00:00z</id><link href="https://survivejs.com/blog/unexpected-react-interview/"></link><updated>2017-09-29T00:00:00Z</updated><content type="html">&lt;p&gt;Testing React components is a constant topic. You can test through solutions like Jest or Enzyme. Or you could try something else like &lt;em&gt;unexpected-react&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The solution by &lt;a href=&quot;https://twitter.com/bruderstein&quot;&gt;Dave Brotherstone&lt;/a&gt; builds on top of another testing library, Unexpected.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://survivejs.com/blog/unexpected-interview&quot;&gt;Read the interview with Sune Simonsen to understand the ideas behind Unexpected better&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/4e1901d31a973187070a14522b55b47b?s=200&quot; alt=&quot;Dave Brotherstone&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m originally from the UK, but I&amp;#39;ve lived in Germany for the last seven years or so with my girlfriend, Tina. We were originally planning to come for two or three years, but I love it so much we&amp;#39;ve no plans to return now. I work for SoundCloud in Berlin where I get to work on a bunch of interesting problems with some amazingly talented people.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-unexpected-react-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-unexpected-react-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;unexpected-react&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-unexpected-react-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to write tests for your React components, you can use &lt;em&gt;unexpected-react&lt;/em&gt; to validate that the components render what they should, and respond to events in the right way. It&amp;#39;s based on JSX, so you assert that a component renders to a certain JSX template, and any differences are highlighted in a JSX diff. You can render using the shallow renderer, render to the DOM or render using the test renderer - the assertions stay the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A simple example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;MyButtonComponent &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;to render as&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example uses the &lt;a href=&quot;https://reactjs.org/docs/shallow-renderer.html&quot;&gt;React shallow renderer&lt;/a&gt; to render the &lt;code&gt;MyButtonComponent&lt;/code&gt; and compares the output to &lt;code&gt;&amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;&lt;/code&gt;. If the output is different, you&amp;#39;ll see something like the following as output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;btn&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;Click me&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt;Click me
&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, it ignores extra props and extra child elements, so your test still passes as your component functionality expands (unless of course, you break something!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A more complex example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;MyApp &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;when deeply rendered&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;with event&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;change&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    target&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;foo&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;on&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;input &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;with event&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;on&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;to contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;LoadingSpinner &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test renders the component to the DOM, triggers a &lt;code&gt;change&lt;/code&gt; event with an argument on the &lt;code&gt;input&lt;/code&gt; component, then clicks the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with the text &lt;code&gt;Submit&lt;/code&gt;, and finally checks that the resulting render contains a component called &lt;code&gt;LoadingSpinner&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That last assertion highlights one of my favorite features of unexpected-react, which is that when you use the DOM renderer, you can assert on the full virtual DOM (the same tree you see in the &lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;React Developer Tools&lt;/a&gt;), with all the HTML elements and all your custom components.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-unexpected-react-work-&quot; id=&quot;how-does-unexpected-react-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;unexpected-react&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-unexpected-react-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s a plugin for the &lt;a href=&quot;http://unexpected.js.org&quot;&gt;unexpected&lt;/a&gt; assertion library, which is known for its great output and diffs. Most of the real work happens in a library called &lt;a href=&quot;https://github.com/bruderstein/unexpected-htmllike&quot;&gt;unexpected-htmllike&lt;/a&gt; which is a library that can perform diffing on any HTML-like structure.&lt;/p&gt;
&lt;p&gt;You give it the actual value and the expected value, and two &lt;em&gt;adapters&lt;/em&gt;, which are simple objects that can read the name, attributes, and children of the actual and expected values respectively, and it returns a whether there were any differences and the diff of the tree in object form. This diff can then be passed back to another method in &lt;em&gt;unexpected-htmllike&lt;/em&gt; which can output the diff in syntax highlighted JSX form.&lt;/p&gt;
&lt;p&gt;The diffing algorithm is, in fact, a bit more complicated than the React algorithm, as it optimizes for best output. For example, it uses heuristics to work out if an element is just a wrapper element and can be ignored. This property can be beneficial if you&amp;#39;re testing components wrapped in (possibly multiple) layers of higher order components - &lt;em&gt;unexpected-react&lt;/em&gt; will just see the higher order components as wrappers and gray them out in the output.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;unexpected-react&lt;/em&gt; itself is mostly just a set of assertions based on calling the diffing algorithm in various ways and presenting the output to the user. Doing this has the significant advantage that it can be adapted to new targets with minimal effort - I&amp;#39;ve recently released &lt;a href=&quot;https://www.npmjs.com/package/unexpected-preact&quot;&gt;unexpected-preact&lt;/a&gt; for example, which has the same set of assertions for &lt;a href=&quot;https://preactjs.com&quot;&gt;Preact&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-unexpected-react-differ-from-the-other-solutions-&quot; id=&quot;how-does-unexpected-react-differ-from-the-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;unexpected-react&lt;/em&gt; differ from the other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-unexpected-react-differ-from-the-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main advantages are the JSX based syntax, so there&amp;#39;s no big API to learn, and excellent output if something doesn&amp;#39;t match. For instance, the &lt;code&gt;to contain&lt;/code&gt; assertion, if it doesn&amp;#39;t find a match, it will show you the closest match so you can probably go straight to solving the issue (maybe just a single class was missing).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think this is a vast improvement over Enzyme, where you&amp;#39;d typically end up with an &lt;code&gt;expected false to equal true&lt;/code&gt; output if the output wasn&amp;#39;t found.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When running Jest, it also supports &lt;a href=&quot;https://facebook.github.io/jest/docs/en/snapshot-testing.html&quot;&gt;snapshot tests&lt;/a&gt;, but unlike Jest&amp;#39;s native snapshot tests, the diffs are based on real objects not just string representations of the JSX.&lt;/p&gt;
&lt;p&gt;Doing this means that if for example, a class is missing, the missing class will be named, rather than just highlighting the diffed line. If the classes appear in a different order, the test will still pass under &lt;em&gt;unexpected-react&lt;/em&gt; as it understands classes, but fail under Jest. You can also snapshot out of the box using any of the renderers without any special add-ons.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-unexpected-react-&quot; id=&quot;why-did-you-develop-unexpected-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;unexpected-react&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-unexpected-react-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back in 2015 the shallow renderer came out, and I was using it to write some tests, but asserting it was hard. You&amp;#39;d have to navigate your way through the children, and end up with assertions like &lt;code&gt;expect(component.props.children[0].props.children[1].props.className).toEqual(&amp;#39;foo&amp;#39;)&lt;/code&gt;. I&amp;#39;d seen a lightning talk from &lt;a href=&quot;https://github.com/munter&quot;&gt;Peter Müller&lt;/a&gt; as JSUnconf in Hamburg on unexpected and had started to play around with it.&lt;/p&gt;
&lt;p&gt;I was impressed with the output and began to use Peter&amp;#39;s plugin &lt;a href=&quot;https://github.com/munter/unexpected-dom&quot;&gt;unexpected-dom&lt;/a&gt; to assert properties on the DOM.  One weekend I thought I might be able to adapt &lt;em&gt;unexpected-dom&lt;/em&gt; to diff JSX trees, and so &lt;em&gt;unexpected-react-shallow&lt;/em&gt; was born.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;unexpected-react&lt;/em&gt; came a bit later when I realized how I could access the full virtual DOM by hooking into the devtools hooks, and how to separate the logic of diffing a XML-like tree from the actual objects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I expect we&amp;#39;ll add support for &lt;a href=&quot;https://infernojs.org/&quot;&gt;inferno&lt;/a&gt; soon.  I&amp;#39;m also working on a bigger task to make &lt;em&gt;unexpected-htmllike&lt;/em&gt; a bit smarter, so when it outputs diffs, it can skip sections of your render where there are no changes and only show the relevant differences.&lt;/p&gt;
&lt;p&gt;There are also some incredible things being worked on in the &lt;a href=&quot;http://unexpected.js.org&quot;&gt;unexpected&lt;/a&gt; project - I don&amp;#39;t want to say too much because they&amp;#39;re very experimental at this stage, but I&amp;#39;m excited about the possibilities, especially when combined with &lt;em&gt;unexpected-react&lt;/em&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-unexpected-react-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-unexpected-react-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;unexpected-react&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-unexpected-react-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think there&amp;#39;s a bright future as it&amp;#39;s the kind of project that once you&amp;#39;ve used it and got the output in your workflow, you can&amp;#39;t ever go back to having to debug a test or open a browser to see where the problem lies.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a great trend, which I think Angular started, that the view layer is testable and writing unit-tests for views is both achievable and useful. I believe that we&amp;#39;ll see view level tests becoming more commonplace as they have for the other parts of applications.&lt;/p&gt;
&lt;p&gt;It wouldn&amp;#39;t surprise me if there were some advances in browsers to support some fundamentals of the React model of just rendering from a given state, and let &lt;em&gt;the platform&lt;/em&gt; perform the necessary mutations. For me, this is the game changer with React - it speeds development time, reduces bugs, and makes testing easy.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d say to learn JavaScript as a language - for me, it was a couple of good books and a whole lot of experimentation, and then go to meetups if they&amp;#39;re available in your area. Don&amp;#39;t make the mistake of thinking &amp;quot;I need to know more before I can go&amp;quot;. I started going to an Angular meetup before I knew pretty much anything about modern web development, and I always managed to learn something or meet people that could answer my questions.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lauren Macarthy from p5.js - I&amp;#39;ve not done much with the project but she&amp;#39;s managed to create a great inclusive community, and I&amp;#39;d love to know more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re using Enzyme for testing your React components, you should take a quick look at &lt;a href=&quot;https://medium.com/@bruderstein/enzyme-vs-unexpected-react-ee9cb099d12b&quot;&gt;my medium article comparing the tests and output in from the two libraries&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Dave! &lt;em&gt;unexpected-react&lt;/em&gt; looks like a step to the right direction and the API feels intuitive to me.&lt;/p&gt;
&lt;p&gt;To learn more, &lt;a href=&quot;https://bruderstein.github.io/unexpected-react/&quot;&gt;study unexpected-react site&lt;/a&gt; and &lt;a href=&quot;https://github.com/bruderstein/unexpected-react&quot;&gt;unexpected-react on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Experiences on WebExpo 2017</title><id>aexperiencesonwebexpo20172017-09-24t00:00:00z</id><link href="https://survivejs.com/blog/webexpo-2017/"></link><updated>2017-09-24T00:00:00Z</updated><content type="html">&lt;p&gt;I was invited to &lt;a href=&quot;https://www.webexpo.net/&quot;&gt;WebExpo 2017&lt;/a&gt; to discuss how I bootstrapped my business. Prague is one of the favorite cities of mine, so it was hard to say no. I&amp;#39;m happy I went there, and I picked up a few lessons while at it.&lt;/p&gt;
&lt;p&gt;The tenth anniversary of the event was full of content (four tracks!), and there were afterparties where you could meet people. Most of the attendees were local, and specific sessions were in Czech only.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#tour-of-prague&quot; id=&quot;tour-of-prague&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Tour of Prague&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#tour-of-prague&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/60c8ac378c17a37f9d19a228463daba2.jpg&quot; alt=&quot;Opening ceremonies of WebExpo&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Opening ceremonies of WebExpo&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Like in &lt;a href=&quot;https://survivejs.com/blog/react-next-2017/&quot;&gt;React Next 2017&lt;/a&gt;, the organizers had something special in mind for the speakers. We spent time exploring the city and ended up having a nice lunch (self-paid). Prague cuisine is particularly good if you don&amp;#39;t have a strict diet. If you do, then you might be in slight trouble, but you won&amp;#39;t starve.&lt;/p&gt;
&lt;p&gt;The center of Prague is compact although there are several sights, such as the Petrin tower (think mini-Eiffel tower), outside of it. In addition to the center, we saw the main bridge and castle.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/056370ce05ce96ebcf9e9674ccc3768d.jpg&quot; alt=&quot;At the subway with friends&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;At the subway with friends&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;During the way back, I made the mistake of stamping my subway ticket from the wrong end (I prefer perpetual tickets). Of course, there was a check after our brief ride, but I got away with a warning. Lesson learned, stamp the right end!&lt;/p&gt;
&lt;p&gt;I hope they consider making an additional trip to the &lt;a href=&quot;https://www.hrad-karlstejn.cz/&quot;&gt;Karlštejn castle&lt;/a&gt; and the nearby mines in the years to come. I went there once, and it&amp;#39;s one of the most nicer castles you can find in Europe. It&amp;#39;s no wonder they film movies there.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/487f78c121e9da8f489911649dc3fe3a.jpg&quot; alt=&quot;Visiting a Mucha museum&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Visiting a Mucha museum&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I did some exploring of my own during the day I arrived in Prague. Given I have a keen interest in the art of &lt;a href=&quot;https://en.wikipedia.org/wiki/Alphonse_Mucha&quot;&gt;Alphonse Mucha&lt;/a&gt; at the moment, I visited two museums featuring his art in the center of Prague. They were more focused on his commercial work, but I gained a few insights.&lt;/p&gt;
&lt;p&gt;Mucha mastered design and could use the line to his advantage in composition. You can also see his culture through his works. There&amp;#39;s something Czech about them. I wonder if his style ever actually goes out of fashion. There&amp;#39;s something timeless, and I felt a connection to &lt;a href=&quot;https://en.wikipedia.org/wiki/Antoni_Gaud%C3%AD&quot;&gt;Antoni Gaudí&lt;/a&gt;&amp;#39;s work.&lt;/p&gt;
&lt;p&gt;I have yet to see &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Slav_Epic&quot;&gt;the Slav Epic&lt;/a&gt;, Mucha&amp;#39;s masterwork, in &lt;a href=&quot;http://www.ngprague.cz/&quot;&gt;the National Gallery of Czech Republic&lt;/a&gt;. That trip alone would require several days. If you love museums, you won&amp;#39;t run out of things to do in Prague.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-event&quot; id=&quot;the-event&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Event&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-event&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/70a7a77dff0a2f363217ae75024a8ed2.jpg&quot; alt=&quot;A conference speaker&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;A conference speaker&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The event itself took three days. During the first two days there were up to four tracks to choose from, and occasionally there was a workshop running on the side. The third day was devoted to a single workshop, and I skipped it as it was added to the program after I had done my travel plans.&lt;/p&gt;
&lt;p&gt;The challenge of a conference like this is how to provide value for every attendee. Lack of singular focus means sometimes you may have to compromise. But it&amp;#39;s also good as then you can get insights on topics you might otherwise miss.&lt;/p&gt;
&lt;p&gt;Overall, the quality of the presentations felt decent, and I confirmed a few of my hunches as a result. Particularly Joe MacLeod&amp;#39;s, Mike Amundsen&amp;#39;s, and the final session by Anton and Irene were worth it for me.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/758e674f65cd768f8a7dcc7bfb7d2620.jpg&quot; alt=&quot;Conference visitors&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Conference visitors&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I was expecting to see more people at the conference as it was marketed to have two thousand people. In the end, there was perhaps half of that, and the spaces were half-empty. I don&amp;#39;t know if it has been this way during the earlier years and I&amp;#39;m not complaining as I prefer smaller amounts of people (a cultural thing).&lt;/p&gt;
&lt;p&gt;The conference space was split within a shopping mall. Although unorthodox, it worked quite well. I enjoyed the cinema in particular, and I was lucky enough to be able to give my presentation there.&lt;/p&gt;
&lt;p&gt;The main hall had too much echo for my tastes, and it made it slightly annoying to follow the presentations. I don&amp;#39;t know if that&amp;#39;s something the organizers could have fixed, though, and it might be my personal preference to have less echo.&lt;/p&gt;
&lt;p&gt;Despite these issues, I will likely revisit the event if it fits my schedule. Each day, and the day before the conference had an afterparty. I am not at my best at those, but it&amp;#39;s still fun to meet new people and try to improve this weakness if nothing else. Prague seems to be the ideal place for these sort of things.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#case-survivejs-bootstrapping-a-personal-lifestyle-business&quot; id=&quot;case-survivejs-bootstrapping-a-personal-lifestyle-business&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Case SurviveJS - Bootstrapping a Personal Lifestyle Business&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#case-survivejs-bootstrapping-a-personal-lifestyle-business&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/f1848811a7628c485d30224eee6a1320.jpg&quot; alt=&quot;Conference bar&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Conference bar&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;My presentation, &lt;a href=&quot;https://presentations.survivejs.com/bootstrapping-a-personal-lifestyle-business/&quot;&gt;Case SurviveJS - Bootstrapping a Personal Lifestyle Business&lt;/a&gt;, was about how I bootstrapped my business and changed my life as a result. Although it was on the development track, it probably should have been on the business track instead.&lt;/p&gt;
&lt;p&gt;It was more of an inspirational talk rather than straight to the point &amp;quot;this is how to achieve the same technically&amp;quot;. The problem is that there&amp;#39;s no single right way and you have to learn your lessons.&lt;/p&gt;
&lt;p&gt;I felt I could use the available time quite effectively and there was time for a few questions in the end. I might have focused too much on the business aspects, and I would balance the talk differently now if I gave it again. Even in its current form, I think there&amp;#39;s still some wisdom in it people might be able to use.&lt;/p&gt;
&lt;p&gt;I concluded the presentation with a simple quote: &amp;quot;Dare to dream, dare to try, and never give up too easily&amp;quot;. Without dreams and willingness to push not a lot can be achieved. Sometimes you can nudge your life to the direction you want.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was nice for me to return to Prague. Even though I&amp;#39;ve seen the main sights of the city, it seems there&amp;#39;s more to discover. I even found a secret bar no tourist knows. It seems like Prague has an underground world I have to discover.&lt;/p&gt;
&lt;p&gt;The event itself was worthwhile and &lt;a href=&quot;https://www.webexpo.net/prague2018/&quot;&gt;WebExpo will return in 2018&lt;/a&gt;. If you want to Prague while enjoying a cross-cutting event like this, WebExpo is a good pick.&lt;/p&gt;
</content></entry><entry><title>Kea - High level abstraction between React and Redux - Interview with Marius Andra</title><id>akeahighlevelabstractionbetweenreactandreduxinterviewwithmariusandra2017-09-18t00:00:00z</id><link href="https://survivejs.com/blog/kea-interview/"></link><updated>2017-09-18T00:00:00Z</updated><content type="html">&lt;p&gt;Redux took the React world by a storm when it was introduced. The simple idea provided a guideline for the community and &amp;quot;solved&amp;quot; state management for a lot of different kinds of applications.&lt;/p&gt;
&lt;p&gt;That said, Redux comes with a certain amount of wiring. For this reason, people have begun to explore abstractions on top of it to make it more comfortable to use without sacrificing the core benefits provided by the library.&lt;/p&gt;
&lt;p&gt;Kea by &lt;a href=&quot;https://twitter.com/mariusandra&quot;&gt;Marius Andra&lt;/a&gt; is one of these solutions. It provides a high-level abstraction between React and Redux.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To learn more about Redux, &lt;a href=&quot;https://survivejs.com/blog/redux-interview&quot;&gt;read the interview of Dan Abramov&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/6b918f21a04da6c562766a3be2626ef7?s=200&quot; alt=&quot;Marius Andra&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Sure! I&amp;#39;m Marius. I was born in Estonia and now live in Belgium. I work as the CTO of &lt;a href=&quot;https://www.apprentus.com&quot;&gt;Apprentus&lt;/a&gt;, a private lessons marketplace which I co-founded. I sometimes write about life on &lt;a href=&quot;https://mariusandra.com/blog/&quot;&gt;my blog&lt;/a&gt; and about coding on &lt;a href=&quot;https://medium.com/@mariusandra&quot;&gt;Medium&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;I started programming in QBASIC at the ripe old age of 8 and have been hooked ever since. From BASIC I moved to C and C++ (for &lt;a href=&quot;https://web.archive.org/web/20110727142308/http://cone3d.gamedev.net:80/cgi-bin/index.pl&quot;&gt;2D and 3D game development&lt;/a&gt;), Perl (&lt;a href=&quot;http://amzn.to/2xlJzTS&quot;&gt;cgi-bin&lt;/a&gt; web development) and Java (when I had to build a client-server chat applet). In high school, I wrote a lot of PHP, in university a lot of Java/JSP. Eventually, I moved to Ruby, and it was my language of choice... until ES6 came out.&lt;/p&gt;
&lt;p&gt;During my PHP years, I wrote vanilla JavaScript (AJAX!). Later I went with Prototype and then jQuery. I completely skipped the Angular train. When Apprentus&amp;#39;s jQuery spaghetti-code was no longer maintainable, I bet hard on Ember, rewriting most of the frontend in it. Unfortunately, I traded one set of problems for another... and frustrated a lot of mobile users with the 10sec load times. I&amp;#39;ll spare you the rant!&lt;/p&gt;
&lt;p&gt;In November of 2015, after a month-long vacation in New Zealand, I started learning React as part of a freelance gig. That&amp;#39;s where the story of Kea begins.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-kea-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-kea-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Kea&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-kea-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kea is an &lt;a href=&quot;https://www.youtube.com/results?search_query=kea+parrot&quot;&gt;extremely smart mountain parrot&lt;/a&gt; from New Zealand.&lt;/p&gt;
&lt;p&gt;Kea is also an extremely smart abstraction between &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;, &lt;a href=&quot;https://redux-saga.js.org/&quot;&gt;Redux-Saga&lt;/a&gt; and &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt;. You may think of it either as &lt;em&gt;redux without the boilerplate&lt;/em&gt; or &lt;em&gt;the ease of &lt;code&gt;setState&lt;/code&gt; with the connectivity of Redux&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, React handles your views, Kea handles your logic.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-kea-work-&quot; id=&quot;how-does-kea-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Kea&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-kea-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Almost everything you do in Kea is done with the &lt;code&gt;kea&lt;/code&gt; function. You use it to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create new logic stores (the place where your logic and data live).&lt;/li&gt;
&lt;li&gt;Pull in data or actions from existing logic stores.&lt;/li&gt;
&lt;li&gt;Connect logic stores to your React components.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;#39;s look at the simplest example: a counter that can be incremented and decremented with the push of a button.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s built in the &amp;quot;inline kea&amp;quot; style, where we create a logic store and immediately attach it to a React component. I&amp;#39;m using ES decorators here for extra smoothness, but you don&amp;#39;t necessarily have to use them.&lt;/p&gt;
&lt;p&gt;I will assume you&amp;#39;re familiar with the concepts in Redux. If not, please check out &lt;a href=&quot;https://survivejs.com/blog/redux-interview/&quot;&gt;the interview with Dan Abramov&lt;/a&gt; for some much-needed context... although you&amp;#39;ll surely understand the code without it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; PropTypes &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;prop-types&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; kea &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;kea&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

@&lt;span class=&quot;token function&quot; &gt;kea&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  actions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    increment&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; amount &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    decrement&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; amount &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  reducers&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; actions &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    counter&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;increment&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        state &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;amount
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;decrement&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        state &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;amount
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Counter&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; counter &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; increment&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; decrement &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;kea-counter&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Count&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;counter&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Increment&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;decrement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Decrement&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s all very &lt;em&gt;Reduxy&lt;/em&gt;. You have actions and reducers. Both are pure functions. The code is very readable, and there&amp;#39;s a clear separation of concerns.&lt;/p&gt;
&lt;p&gt;Compare this to a standard Redux-based approach:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;constants/counter.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; INCREMENT &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;INCREMENT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; DECREMENT &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;DECREMENT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;actions/counter.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; INCREMENT&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; DECREMENT &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;../constants/counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;increment&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; INCREMENT&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      amount&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; amount
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;decrement&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; DECREMENT&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    payload&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      amount&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; amount
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;reducers/counter.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; INCREMENT&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; DECREMENT &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;../constants/counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;counter&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-switch&quot; &gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; INCREMENT&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; DECREMENT&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;containers/counter.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; connect &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; increment&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; decrement &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;../actions/counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; Counter &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;../components/counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;mapStateToProps&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    counter&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;counter
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;mapDispatchToProps&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; dispatch &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    increment&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; amount &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot; &gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    decrement&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; amount &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot; &gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;decrement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  mapStateToProps&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  mapDispatchToProps
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;Counter&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;components/counter.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Counter&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; increment&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; decrement &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;kea-counter&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Count&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;counter&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Increment&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;decrement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Decrement&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;store.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// I&apos;ll spare you this part...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the amount of boilerplate you save is HUGE! No more &lt;code&gt;mapStateToProps&lt;/code&gt;. No more &lt;code&gt;export const INCREMENT = &amp;#39;INCREMENT&amp;#39;&lt;/code&gt;. You just write code that matters while retaining the clear functional approach that makes Redux so powerful.&lt;/p&gt;
&lt;p&gt;Now, an example of this complexity can easily be written with React&amp;#39;s own &lt;code&gt;setState&lt;/code&gt;... but what if your specs change and you need access to this data from a different component? Move the state up and pass around a million props? That&amp;#39;s not elegant enough for my taste.&lt;/p&gt;
&lt;p&gt;With Kea, assuming you also need to display the value of &lt;code&gt;counter&lt;/code&gt; in your header, you would do as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;logic.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; PropTypes &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;prop-types&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; kea &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;kea&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// no change to the code below&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;kea&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  actions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    increment&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; amount &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    decrement&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; amount &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  reducers&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; actions &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    counter&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;increment&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        state &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;amount
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;decrement&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        state &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;amount
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; connect &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;kea&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; counterLogic &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./logic&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// pull in actions and props from logic stores&lt;/span&gt;
@&lt;span class=&quot;token function&quot; &gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  actions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
    counterLogic&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot; &gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot; &gt;&apos;decrement&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
    counterLogic&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot; &gt;&apos;counter&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Counter&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// nothing changes here&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; counter &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; increment&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; decrement &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;kea-counter&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Count&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;counter&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Increment&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;decrement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Decrement&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;header.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; connect &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;kea&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; counterLogic &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./logic&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

@&lt;span class=&quot;token function&quot; &gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
    counterLogic&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot; &gt;&apos;counter&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Counter&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; counter &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;header&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;strong&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Kea is awesome&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;strong&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;Count&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;counter&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;header&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This magical &lt;code&gt;@connect(options)&lt;/code&gt; helper is actually just a shorthand for &lt;code&gt;@kea({ connect: options })&lt;/code&gt;. By replacing &lt;code&gt;@connect&lt;/code&gt; with &lt;code&gt;@kea&lt;/code&gt;, you can also define new actions and reducers while pulling in existing ones.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#selectors-and-side-effects-in-kea&quot; id=&quot;selectors-and-side-effects-in-kea&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Selectors and Side Effects in Kea&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#selectors-and-side-effects-in-kea&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Kea has two other notable features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, you may use selectors (through Reselect) to re-calculate values only when the input changes.&lt;/li&gt;
&lt;li&gt;Second, you may use sagas for side-effects. Please read the documentation for &lt;a href=&quot;https://redux-saga.js.org&quot;&gt;redux-saga&lt;/a&gt; to learn more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://kea.js.org/guide/github&quot;&gt;Github API&lt;/a&gt; example is a good demonstration of both features:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; githubLogic &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;kea&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  actions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    setUsername&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;username&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; username &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    setRepositories&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;repositories&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; repositories &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  reducers&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; actions &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    username&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;keajs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;setUsername&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;username
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    repositories&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;setUsername&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;setRepositories&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        payload&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;repositories
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  selectors&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; selectors &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// this will only be updated if &quot;repositories&quot; change.&lt;/span&gt;
    sortedRepositories&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;selectors&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;repositories&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;repositories&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; repositories&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;stargazers_count &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;stargazers_count
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      PropTypes&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;array
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// every time a &quot;setUsername&quot; action is called,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// run the &quot;fetchRepositories&quot; worker&lt;/span&gt;
  takeLatest&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; actions&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; workers &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;setUsername&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; workers&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;fetchRepositories
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  workers&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchRepositories&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; setRepositories &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; username &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// debounce for 100ms&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;API_URL&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;/users/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;username&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;/repos?per_page=250`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; json &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;setRepositories&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;json&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Please dive into the &lt;a href=&quot;https://kea.js.org&quot;&gt;Kea documentation&lt;/a&gt; to learn more!&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-kea-differ-from-other-solutions-&quot; id=&quot;how-does-kea-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Kea&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-kea-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wrote an &lt;a href=&quot;https://medium.com/@mariusandra/kea-vs-setstate-redux-mobx-dva-jumpstate-apollo-etc-4aa26ea11d02&quot;&gt;article on Medium describing how Kea differs from Redux&lt;/a&gt;, MobX, DVA and other state management solutions. Please check it out for details! :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-kea-&quot; id=&quot;why-did-you-develop-kea-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Kea&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-kea-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In late 2015 I got a freelance gig, where my job was to code part of a fleet tracking solution. I was told to use React and Redux and given free reign over what other libraries I would use, how I would structure the code, etc. My employer tasked me with finding the best combination of React and Redux. The solution needed to be extremely verbose and maintainable since I would not stay on the project forever.&lt;/p&gt;
&lt;p&gt;So I started looking, reading, experimenting, rewriting and inventing. There was scarce documentation on how to structure a React and Redux application. Most guides recommended the &lt;code&gt;actions/counter.js&lt;/code&gt;, &lt;code&gt;constants/counter.js&lt;/code&gt;, &lt;code&gt;reducers/counter.js&lt;/code&gt;, etc. approach. I knew from my Ember days that this is a disaster and strongly preferred a features-based approach (&lt;code&gt;counter/actions.js&lt;/code&gt;, &lt;code&gt;counter/constants.js&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;p&gt;I tried and replaced many libraries, until I ended up with a combination of redux, reselect, redux-act and redux-saga... The resulting folder structure combined better ideas from the ducks approach and a &lt;code&gt;scenes&lt;/code&gt; folder from the &lt;a href=&quot;https://tonyhb.gitbooks.io/redux-without-profanity/content/hard_and_fast_rules_for_apps.html&quot;&gt;Redux without Profanity&lt;/a&gt; book.&lt;/p&gt;
&lt;p&gt;I wrote several helper functions to group actions, reducers and selectors into what I called &amp;quot;logic stores&amp;quot; and built glue to connect them to react components. I also wrote helpers that added sagas to the mix.&lt;/p&gt;
&lt;p&gt;Eventually, I released all of it under the name &lt;code&gt;Kea&lt;/code&gt; with no fanfare. The developers who knew it were hooked and quickly adopted it in their projects, but nobody else knew about it.&lt;/p&gt;
&lt;p&gt;Since Kea turned out to be so useful for us, I decided to write documentation, develop tests and add features necessary for a proper release. And here we are!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For Kea, the near-term goal is to develop an extension system, which would let one choose between sagas with &lt;code&gt;redux-saga&lt;/code&gt; and epics with &lt;code&gt;redux-observable&lt;/code&gt; for side effects or even let you use both at the same time (&lt;a href=&quot;https://github.com/keajs/kea/issues/40&quot;&gt;Issue #40&lt;/a&gt;). Of course, such a plugin system would open up other possibilities.&lt;/p&gt;
&lt;p&gt;The ultimate goal is to stabilize the API for a 1.0 release. For this, we need as many people to test things as possible. So please try it out and send feedback! :)&lt;/p&gt;
&lt;p&gt;For myself, once Kea hits a stable 1.0, I plan to shift my open source efforts to &lt;a href=&quot;https://github.com/mariusandra/insights&quot;&gt;Insights&lt;/a&gt;, a &amp;quot;Desktop and Self-Hosted SQL-not-required data analytics and visualization tool&amp;quot;. I have big plans for it but had to neglect it for a few months in favor of Kea.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-kea-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-kea-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Kea&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-kea-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been wrong before with my technological predictions (JSP and Makumba are the new Ruby on Rails! Ember 4 ever!), so I&amp;#39;m hesitant to make bold claims.&lt;/p&gt;
&lt;p&gt;That said, based on my experience moving from Ember to React and Redux, it felt like a whole new world opened before my eyes. Switching from an imperative paradigm to a functional one was counter-intuitive at first, but worth it. Who would have guessed that by limiting a number of operations I&amp;#39;m allowed to perform on my data, my code becomes simpler to read and mostly bug-free!&lt;/p&gt;
&lt;p&gt;Functional programming has been around for a very long time, but it was never as mainstream as it is now. When you get into functional programming, you become a better programmer, no matter the language or paradigm. React brought this to the masses. In my mind, this will be its greatest legacy.&lt;/p&gt;
&lt;p&gt;The difference between functional and imperative in frontend development is analogous to what &lt;a href=&quot;http://www.paulgraham.com/avg.html&quot;&gt;Paul Graham said about Lisp&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;During the years we worked on Viaweb, I read a lot of job descriptions. A new competitor seemed to emerge out of the woodwork every month or so. The first thing I would do, after checking to see if they had a live online demo, was look at their job listings. After a couple of years of this, I could tell which companies to worry about and which not to. The more of an IT flavor the job descriptions had, the less dangerous the company was. The safest kind were the ones that wanted Oracle experience. You never had to worry about those. You were also safe if they said they wanted C++ or Java developers. If they wanted Perl or Python programmers, that would be a bit frightening - that&amp;#39;s starting to sound like a company where the technical side, at least, is run by real hackers. If I had ever seen a job posting looking for Lisp hackers, I would have been really worried.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Writing frontend code with React and Kea feels like writing Lisp when all of your competitors are stuck with Java.&lt;/p&gt;
&lt;p&gt;I expect this trend towards functional programming to continue.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would show them the example of &lt;a href=&quot;https://jenniferdewalt.com/&quot;&gt;Jennifer Dewalt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One summer morning, four years ago, I stumbled upon a post in HN titled &amp;quot;&lt;a href=&quot;http://blog.jenniferdewalt.com/post/56319597560/im-learning-to-code-by-building-180-websites-in&quot;&gt;I’m learning to code by building 180 websites in 180 days. Today is day 115&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s an amazing story. The author started with no skills in web development and went on to build &lt;a href=&quot;https://jenniferdewalt.com/algae_tank/board&quot;&gt;amazing&lt;/a&gt; &lt;a href=&quot;https://jenniferdewalt.com/minesweeper/game&quot;&gt;examples&lt;/a&gt; all because she stuck with it and didn&amp;#39;t give up.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s been demonstrated that the main difference between people who make it and people who don&amp;#39;t is grit (&lt;a href=&quot;http://amzn.to/2wgAsEK&quot;&gt;read the book!&lt;/a&gt;). This is the willingness to push through no matter what.&lt;/p&gt;
&lt;p&gt;Combine grit with deliberate practice and &lt;a href=&quot;https://mariusandra.com/blog/2014/01/how-to-be-productive/&quot;&gt;compound effects&lt;/a&gt; and you&amp;#39;ll be unstoppable!&lt;/p&gt;
&lt;p&gt;So my advice for you is this: learn a bit, but learn often. Make a plan that for every day for the next 30 days, you will read 15 min of any programming tutorial, listen to 15 min of &lt;a href=&quot;https://changelog.com/&quot;&gt;the changelog&lt;/a&gt; or a watch 15 min of a good screencast.&lt;/p&gt;
&lt;p&gt;Once you&amp;#39;re done for the day, draw a big red X in your calendar. Continue like this for 30 days and set up a system that makes it &lt;a href=&quot;https://mariusandra.com/blog/2012/05/make-your-success-inevitable-and-lose-weight/&quot;&gt;inevitable&lt;/a&gt; that you succeed. For example, tell a friend that every day in the next 30 days you skip your 15 min of coding, you&amp;#39;ll pay them 50 €.&lt;/p&gt;
&lt;p&gt;You won&amp;#39;t skip a day, and after 30 days, the habit of daily coding will be so ingrained, it will be hard to break. And you will have grown a lot!&lt;/p&gt;
&lt;p&gt;That&amp;#39;s my advice.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone I thought about has already been interviewed! :).&lt;/p&gt;
&lt;p&gt;Perhaps &lt;a href=&quot;https://twitter.com/_developit&quot;&gt;Jason Miller&lt;/a&gt;, the guy behind Preact?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please try out &lt;a href=&quot;https://kea.js.org&quot;&gt;Kea&lt;/a&gt; and help make the React+Redux world a better place!&lt;/p&gt;
&lt;p&gt;Oh, and if you found any of this useful, don&amp;#39;t forget to &lt;a href=&quot;https://github.com/keajs/kea&quot;&gt;give kea a star on Github&lt;/a&gt;! It would mean a lot to me!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Marius! Kea seems to hit a nice balance in API design. You can get the power of Redux without all the wiring.&lt;/p&gt;
&lt;p&gt;To learn more, &lt;a href=&quot;https://kea.js.org/&quot;&gt;head to Kea site&lt;/a&gt;, see also &lt;a href=&quot;https://github.com/keajs/kea/&quot;&gt;Kea on GitHub&lt;/a&gt;. Marius also wrote &lt;a href=&quot;https://medium.com/@mariusandra/kea-vs-setstate-redux-mobx-dva-jumpstate-apollo-etc-4aa26ea11d02&quot;&gt;a comparison between Kea and alternatives&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Experiences on React Next 2017</title><id>aexperiencesonreactnext20172017-09-15t00:00:00z</id><link href="https://survivejs.com/blog/react-next-2017/"></link><updated>2017-09-15T00:00:00Z</updated><content type="html">&lt;p&gt;I had the privilege to participate in &lt;a href=&quot;http://react-next.com/&quot;&gt;React Next 2017&lt;/a&gt; as an invited speaker. Participation gave me a good chance to learn more about Israel and also a good excuse to showcase webpack to a wider audience. I also gave a surprise talk about my site generator before the event and even sponsored it a bit.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#surprise-meetup&quot; id=&quot;surprise-meetup&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Surprise Meetup&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#surprise-meetup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We arranged a small &lt;a href=&quot;https://www.meetup.com/React-IL/events/243139610/&quot;&gt;surprise meetup&lt;/a&gt; before the event. In addition to &lt;a href=&quot;https://presentations.survivejs.com/antwar-site-generator/&quot;&gt;my presentation about Antwar&lt;/a&gt;, the plan was to have Kyle present &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;. Sadly he had problems with his flight, and we ended up having only my presentation and a QA with another speaker in the end.&lt;/p&gt;
&lt;p&gt;I tried to keep the talk simple, but in the end, it was likely too technical for most people. If I ever get to present it again, I&amp;#39;ll reduce the difficulty level a notch and show how to build an entire site using it. The main problem is that I didn&amp;#39;t design it usability in mind. It&amp;#39;s more about flexibility.&lt;/p&gt;
&lt;p&gt;Developing something like &lt;strong&gt;create-react-site&lt;/strong&gt; on top of Antwar would likely alleviate this problem, but I don&amp;#39;t want to maintain something like that as it could become famous.&lt;/p&gt;
&lt;p&gt;To be honest, I would look into alternatives like &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; and &lt;a href=&quot;https://phenomic.io/&quot;&gt;Phenomic&lt;/a&gt; over Antwar. I designed Antwar around my use cases, and there&amp;#39;s no community around it. I prefer the current situation, though, as maintaining a popular tool becomes a chore soon.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#tour-of-israel&quot; id=&quot;tour-of-israel&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Tour of Israel&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#tour-of-israel&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/22396f0b55e860aabcf990b455241263.jpg&quot; alt=&quot;Jerusalem&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Jerusalem&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;All the speakers were invited to a &lt;a href=&quot;http://react-next.com/tour/&quot;&gt;two-day tour of Israel&lt;/a&gt;. We spent time in the old city of Jerusalem first. After that, we headed to a &amp;quot;bedouin camp&amp;quot; where we rode camels and slept through the night.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Unless you prefer excitement, &lt;strong&gt;don&amp;#39;t&lt;/strong&gt; ride the first camel.&lt;/blockquote&gt;&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/33d20a098886215d1cb465bfc0343228.jpg&quot; alt=&quot;Sunrise at the desert&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Sunrise at the desert&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Especially the sunset and sunrise were magical. I happened to wake up early enough to enjoy a short morning run. That was truly a unique experience and one of the highlights of the entire trip for me. Sometimes you find the best things outside of the official program.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/05ff66b0586a95463cace9fce2ef8650.jpg&quot; alt=&quot;Masada&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Masada&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We spent the second day of the tour exploring the fortress at Masada. Once you get there, you realize whey they built one there roughly two thousand years ago. The visit was again one of those memorable experiences that will remain with me.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/dd94f57518e22f8a7b6319a126513a5d.jpg&quot; alt=&quot;Masada&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Masada&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After visiting the fortress, we headed to the Dead Sea. It was nice to see but to be honest, it wasn&amp;#39;t my favorite place. That said, now I can say I&amp;#39;ve gone there and done that.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/d296c4183d2456013e2b735daf38f7ee.jpg&quot; alt=&quot;Tel Aviv art museum&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Tel Aviv art museum&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I did touring of my own after the main event. Especially the art museum is a treat if you like modern architecture combined with nice exhibitions ranging from modern art to classics.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-event&quot; id=&quot;the-event&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Event&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-event&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/b4c521a6df50e14f05a288fa3b8ada6f.jpg&quot; alt=&quot;React Next 2017&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;React Next 2017&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://react-next.com/schedule/&quot;&gt;The event itself&lt;/a&gt; was professionally organized. There were roughly 700 people this year, and the atmosphere was amazing. The two tracks were filled with speakers from all around the world with primarily React related topics. Overall the quality of the talks was high although I skipped most.&lt;/p&gt;
&lt;p&gt;My talk, &lt;a href=&quot;https://presentations.survivejs.com/webpack-the-react-parts/&quot;&gt;Webpack - The React Parts&lt;/a&gt;, was a bit of a challenge for me. I tried to condense as many little techniques within the thirty minutes I had, and I like to think I succeeded to some extent in this goal. My only gripe is that I ruined the last topic, &lt;strong&gt;Universal Apps&lt;/strong&gt;, slightly due to time pressure.&lt;/p&gt;
&lt;p&gt;The live coding portion of the presentation went mostly smoothly although I had to &lt;code&gt;npm install&lt;/code&gt; at a certain point. That&amp;#39;s scary to do while on stage.&lt;/p&gt;
&lt;p&gt;I also managed to sneak in a couple of dry jokes in the presentation. I don&amp;#39;t know how I do it. I try my best to be as unfunny as possible, yet this always happens.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/survivejs-demos/webpack-the-react-parts&quot;&gt;The presentation demo&lt;/a&gt; could be pushed further by moving the code to use Preact and using a CDN. There&amp;#39;s also potential for smarter code splits.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think the trip was a success overall. I was given a chance to see a strange new country and perhaps make some new friends. I have a greater appreciation for a cool climate now at least, and I can see Israel in a more realistic light than before. Perhaps I will travel back there one day!&lt;/p&gt;
</content></entry><entry><title>FrintJS - Build reactive applications with React and RxJS - Interview with Fahad Ibnay Heylaal</title><id>afrintjsbuildreactiveapplicationswithreactandrxjsinterviewwithfahadibnayheylaal2017-09-06t00:00:00z</id><link href="https://survivejs.com/blog/frint-interview/"></link><updated>2017-09-06T00:00:00Z</updated><content type="html">&lt;p&gt;React gives a lot of freedom by default. You can choose which libraries to use to complement it. Freedom comes with responsibility, though. Now you are responsible for your decisions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://frint.js.org/&quot;&gt;FrintJS&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/fahad19&quot;&gt;Fahad Ibnay Heylaal&lt;/a&gt; and his company has developed a framework that brings certain opinions around React and helps to alleviate some of the problem.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/19a3655e6ba9e5a496ee690ba03f2180?s=200&quot; alt=&quot;Fahad Ibnay Heylaal&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Currently living in Amsterdam and working as a software engineer at &lt;a href=&quot;https://www.travix.com/&quot;&gt;Travix&lt;/a&gt;. For the last few years, I have been focusing on JavaScript a lot. And never felt bored for a single day since!
&lt;/p&gt;

&lt;p&gt;I enjoy being involved with Open Source activities. Not just the coding part, but all the other opportunities it brings along with it too. I feel a lot of good things have happened in my life because of the people I got to know through Open Source. And whenever I can, I try to contribute meaningfully back to the community that&amp;#39;s giving us all so much on a regular basis.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-frint-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-frint-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Frint&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-frint-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://frint.js.org&quot;&gt;FrintJS&lt;/a&gt; is ultimately a collection of packages that help you build reactive applications in a scalable way. It is modular by nature and helps provide your application structure. If you look at our &lt;a href=&quot;https://github.com/Travix-International/frint&quot;&gt;monorepo&lt;/a&gt;, everything is broken down into small packages. You use only the packages you need to build your application - either in the &lt;a href=&quot;https://frint.js.org/docs/packages/frint-react/&quot;&gt;browser&lt;/a&gt;, &lt;a href=&quot;https://frint.js.org/docs/packages/frint-react-server/&quot;&gt;server&lt;/a&gt; or &lt;a href=&quot;https://frint.js.org/docs/packages/frint-cli/&quot;&gt;CLI&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-frint-work-&quot; id=&quot;how-does-frint-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Frint&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-frint-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;FrintJS has this concept of &lt;a href=&quot;https://frint.js.org/guides/apps/&quot;&gt;Apps&lt;/a&gt;. Everything is contained within an App. And Apps can contain various things in the form of &lt;a href=&quot;https://frint.js.org/guides/providers/&quot;&gt;Providers&lt;/a&gt;, which is backed by a dependency injection system.&lt;/p&gt;
&lt;p&gt;There has to be a single Root App, and then there can be multiple Child Apps registering themselves to the Root one:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c46e6de0598e9807cd5fc39899cd7e66.png&quot; alt=&quot;FrintJS apps&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;FrintJS apps&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;If they are meant for rendering, they can also pass options for targeting different &lt;a href=&quot;https://frint.js.org/guides/regions/&quot;&gt;Regions&lt;/a&gt; (areas where Apps are expected to be mounted) during registration.&lt;/p&gt;
&lt;p&gt;Code splitting is another primary thing we needed to tackle, and you can see here how different Apps can be loaded targeting different regions, which are coming from separate bundles:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/6ee4aec0aaece8c61c0a7512e69217db.png&quot; alt=&quot;FrintJS regions&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;FrintJS regions&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It has a flexible dependency injection system, and rendering is entirely an optional thing. We use React, that&amp;#39;s why we built &lt;a href=&quot;https://frint.js.org/docs/packages/frint-react/&quot;&gt;&lt;code&gt;frint-react&lt;/code&gt;&lt;/a&gt; too in our monorepo so that we can connect our Apps with React nicely.&lt;/p&gt;
&lt;p&gt;If someone wants to use a different library for rendering, they are completely free to do so. We tried hard not to lock ourselves in.&lt;/p&gt;
&lt;p&gt;In fact, I recently released &lt;a href=&quot;https://github.com/frintjs/frint-vue&quot;&gt;&lt;code&gt;frint-vue&lt;/code&gt;&lt;/a&gt; for Vue.js integration with Frint.&lt;/p&gt;
&lt;p&gt;If you are working with components, then FrintJS encourages you to keep the logic outside of your components as much as possible, and only pass the props as a stream to it, so the component is only responsible for rendering and nothing else.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/96aa65c7c17b2c54413f4114ea9f3a1a.png&quot; alt=&quot;props-stream&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;props-stream&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://medium.com/@fahad19/using-rxjs-with-react-js-part-i-introduction-4d027ef55aa6&quot;&gt;You can read a blog series about RxJS and React to learn more.&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-frint-differ-from-the-other-solutions-&quot; id=&quot;how-does-frint-differ-from-the-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Frint&lt;/em&gt; differ from the other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-frint-differ-from-the-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s hard to compare with any other solutions since FrintJS takes a simple and unique approach. It is not a full featured framework like AngularJS or EmberJS, but rather gives you a set of solid building blocks that you can grow your application up on. FrintJS provides tools that help you break your large applications into smaller apps, that you can assemble on demand.&lt;/p&gt;
&lt;p&gt;You can say that it differs mainly from other frameworks, by not locking itself into any specific rendering or templating library. And also by not targeting any specific platform: browser, server or CLI. It just works everywhere.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-frint-&quot; id=&quot;why-did-you-develop-frint-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Frint&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-frint-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Travix, we already have our front-end application built with React. We were one of the early adopters of React, and things have grown big over the years.&lt;/p&gt;
&lt;p&gt;There are multiple teams continuously working on the same repository, and it has resulted in a pretty large monolith over time.&lt;/p&gt;
&lt;p&gt;We realized we have a scaling issue. Regarding distributing the work to individual teams, and also performance-wise when it comes to bundling the whole application in our CI-server in one go.&lt;/p&gt;
&lt;p&gt;We did some proof-of-concepts for solving the various issues we had, and one of them ended up becoming FrintJS. Now that we have this concept of &lt;a href=&quot;https://frint.js.org/guides/apps/&quot;&gt;Apps&lt;/a&gt;, each team can maintain their app in their repository. And from the server&amp;#39;s perspective, we can load only the apps we want (targeting URLs, etc.) and render them in the browser.&lt;/p&gt;
&lt;p&gt;There was also a need for control over what dependencies become available to all the teams. We want to ship as less code as possible to the browser, and we wanted to put a constraint on us by limiting ourselves to using FrintJS only. Besides Frint packages, we currently have a hard dependency on &lt;code&gt;lodash&lt;/code&gt;, &lt;code&gt;react&lt;/code&gt;, and &lt;code&gt;rxjs&lt;/code&gt; only.&lt;/p&gt;
&lt;p&gt;This control also gives us an advantage over backwards compatibility, and we do take it seriously. Whenever we make changes, we move the removed features to &lt;code&gt;frint-compat&lt;/code&gt; package, and they are supported with deprecated warnings for at least one quarter. Doing this gives our teams enough time to migrate.&lt;/p&gt;
&lt;p&gt;A lot of our particular problems have been solved by FrintJS for us, but we always made sure that we addressed them in as generic way as possible. So that it doesn&amp;#39;t just help us in one single project, but in as many other projects by us and others outside of Travix too.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It has been almost a year that we are running FrintJS in production. The project has evolved a lot based on our learnings from production experience. And it will continue to grow as we face new challenges. Since the release of v1.0 earlier this year, we consider the project to be stable enough, and now we are building new packages around the core of the framework as we need them.&lt;/p&gt;
&lt;p&gt;Besides that, we feel that it could do better if others find out about it too, and give it a go. That way, it will help us make the project even better with fresh new ideas.&lt;/p&gt;
&lt;p&gt;We always try to communicate what&amp;#39;s coming next on our &lt;a href=&quot;https://github.com/Travix-International/frint/wiki/Roadmap&quot;&gt;Roadmap&lt;/a&gt; publicly.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-frint-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-frint-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Frint&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-frint-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;FrintJS is young, and so far it has mostly been guided forward by the production needs of Travix. But I feel as more people find out about it, it will continue to grow even stronger and build a community alongside the current group of &lt;a href=&quot;https://github.com/Travix-International/frint/graphs/contributors&quot;&gt;contributors&lt;/a&gt; too. Then things will happen that may even surprise us, positively :)&lt;/p&gt;
&lt;p&gt;As for web development in general, it has never looked more exciting than now. And it just keeps on getting more and more exciting over time.&lt;/p&gt;
&lt;p&gt;Currently, React, and its ecosystem seems to be winning. And it has done an excellent job at advertising functional programming more positively to a wider audience. But it is the ecosystem around it that excites me even more. So many experiments are being done by everyone, that just pushes the norm even harder every day, forcing us to think differently. And that&amp;#39;s just amazing.&lt;/p&gt;
&lt;p&gt;We are a big fan of reactive programming at Travix, and I feel RxJS could get a bit more boost from more influential developers in the community. We bet big on RxJS with FrintJS ourselves, and a lot of hard problems have become easier for us to solve once we started thinking reactively. And I think the next big shift we will see in web development is a majority of the developers adopting RxJS or similar libraries for doing reactive programming.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web development has evolved a lot over the last 4-5 years. And it really can be overwhelming for anyone new going into it for the first time and trying to figure out what is happening at the moment.&lt;/p&gt;
&lt;p&gt;My first advice would be to stay patient. You don&amp;#39;t have to learn everything in one go. There are so many things to learn. The best way is to find something to build and enjoy doing it. Figure out what you need to learn to build it along the way. It can be a blog, a todo list, or a two-column layout. It can be anything, no matter how big or small, as long as you enjoy building it.&lt;/p&gt;
&lt;p&gt;I have seen many suggest to newcomers to always focus on learning the basics first, then get into frameworks and advanced libraries to build stuff. While this is a pretty good advice, I think this can also bore away some newcomers.&lt;/p&gt;
&lt;p&gt;If you are learning from absolute zero, and want to feel and stay motivated, you would want to reward yourself quickly with visible results too. Otherwise, you may just stop with all your efforts.&lt;/p&gt;
&lt;p&gt;This is where I feel things like &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt;, and online code editors like &lt;a href=&quot;http://codesandbox.io/&quot;&gt;CodeSandbox&lt;/a&gt;, etc. are doing a great job at least in the JavaScript scene.&lt;/p&gt;
&lt;p&gt;These tools enable you to get started with advanced stuff, without having to spend too much time in just setting things up if you are only interested in trying things out. Newcomers would do better if they find out about these tools early on.&lt;/p&gt;
&lt;p&gt;One advice that I received myself from others is to find influential developers in the community, and follow them on Twitter, read their blogs, and see what they are up to. Doing this has worked wonders for me myself at least. It&amp;#39;s a great way to feel inspired every day and stay motivated by keeping track of the cool stuff they are talking about.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been using &lt;a href=&quot;https://github.com/wooorm/alex&quot;&gt;alex&lt;/a&gt;, by &lt;a href=&quot;https://github.com/wooorm&quot;&gt;wooorm&lt;/a&gt; in FrintJS for helping us write better documentation by catching insensitive words early in an automated way. He has been working on some other natural language processing tools too with JavaScript. I would be curious to know more about his latest work.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I must mention and thank all the &lt;a href=&quot;https://github.com/Travix-International/frint/graphs/contributors&quot;&gt;contributors&lt;/a&gt; who helped grow this project, and the teams working at Travix who are not on the GitHub contributors list directly but still kept providing valuable feedback to guide this project towards a better direction continuously. Because of those teams, FrintJS as an Open Source project had the good fortune of having production users from day one.&lt;/p&gt;
&lt;p&gt;If you have any questions or feedback, feel free to &lt;a href=&quot;http://fahad19.com&quot;&gt;contact me directly&lt;/a&gt;, and am pleased to hear what you have to say about FrintJS.&lt;/p&gt;
&lt;p&gt;And many thanks to Juho for organizing this, and helping spread the word about &lt;a href=&quot;https://frint.js.org&quot;&gt;FrintJS&lt;/a&gt;!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Fahad! I hope people find FrintJS and perhaps even adopt it in their work.&lt;/p&gt;
&lt;p&gt;You can learn more at &lt;a href=&quot;https://frint.js.org/&quot;&gt;FrintJS site&lt;/a&gt;. See also &lt;a href=&quot;https://github.com/Travix-International/frint&quot;&gt;FrintJS GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Neutrino - Create modern JavaScript applications with minimal configuration - Interview with Eli Perelman</title><id>aneutrinocreatemodernjavascriptapplicationswithminimalconfigurationinterviewwitheliperelman2017-08-28t00:00:00z</id><link href="https://survivejs.com/blog/neutrino-interview/"></link><updated>2017-08-28T00:00:00Z</updated><content type="html">&lt;p&gt;Setting up a project can require a significant amount of effort if you want to control every single detail. This might be one reason why there are so many boilerplates out there as people tend to have different tastes.&lt;/p&gt;
&lt;p&gt;To make things easier, &lt;a href=&quot;https://twitter.com/eliperelman&quot;&gt;Eli Perelman&lt;/a&gt; has developed a solution on top of webpack.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/8dc4af17fcbc9d8c1919462680e46c5a?s=200&quot; alt=&quot;Neutrino&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I started learning to program when I was 13 or 14, back in 1996. And yes, JavaScript was the first language I ever learned. It sparked a love of the web and development that continues to this day. All in all, I&amp;#39;ve been doing professional development for about 12 years.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-neutrino-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-neutrino-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Neutrino&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-neutrino-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Neutrino is a tool that helps you build modern JavaScript applications without having to go through the initial configuration work of setting up webpack. You can install it along with a relevant preset and start writing an app or tool, but you can still customize your build process completely when the need arises.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-neutrino-work-&quot; id=&quot;how-does-neutrino-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Neutrino&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-neutrino-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Neutrino utilizes webpack under the hood for building projects by augmenting it with knowledge about &lt;em&gt;build middleware&lt;/em&gt;. Neutrino middleware are discrete pieces of webpack configuration that use a custom configuration API. You can compose many of these middleware together into custom presets, and each will modify the build accordingly.&lt;/p&gt;
&lt;p&gt;Take Neutrino&amp;#39;s &lt;a href=&quot;https://www.npmjs.com/package/neutrino-preset-react&quot;&gt;React preset&lt;/a&gt; as an example. This preset glues together
several other pieces of Neutrino middleware that do things like perform Babel compilation, Hot Module Replacement, add loaders for many different file types, development servers, and minification, just to name a few.&lt;/p&gt;
&lt;p&gt;Each piece of middleware illuminates part of the possibilities inherent in a project based on the React preset. Additionally, anyone can augment the preset with their middleware, presets, and custom configuration to suit their tastes.&lt;/p&gt;
&lt;p&gt;Getting started with Neutrino is easy, using either Yarn or npm. As an example, here&amp;#39;s a quickstart for a React project (using Yarn for brevity):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;yarn add react react-dom
yarn add --dev neutrino neutrino-preset-react

&lt;span class=&quot;token keyword keyword-echo&quot; &gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;import React from &quot;react&quot;;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;gt;&amp;gt;&lt;/span&gt; src/index.js
&lt;span class=&quot;token keyword keyword-echo&quot; &gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;import { render } from &quot;react-dom&quot;;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;gt;&amp;gt;&lt;/span&gt; src/index.js
&lt;span class=&quot;token keyword keyword-echo&quot; &gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;render(&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;, document.getElementById(&quot;root&quot;));&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;gt;&amp;gt;&lt;/span&gt; src/index.js

yarn neutrino -- start --use neutrino-preset-react

  ✔ Development server running on: http://localhost:5000
  ✔ Build completed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open a browser to localhost:5000, and you are ready to go!&lt;/p&gt;
&lt;p&gt;To make some of this possible, we had to create our webpack configuration API, called &lt;a href=&quot;https://github.com/mozilla-neutrino/webpack-chain&quot;&gt;webpack-chain&lt;/a&gt;. As you may know, webpack exposes a low-level configuration format, but this format isn&amp;#39;t well-suited for merging configuration deterministically across middleware, or even across many projects. With webpack-chain, we expose a chainable or fluent API for aggregating a webpack configuration which is much more deterministic.&lt;/p&gt;
&lt;p&gt;The above can be done by accessing the Neutrino API from a &lt;code&gt;.neutrinorc.js&lt;/code&gt; file, which Neutrino can pick up automatically. You can also move the middleware Neutrino &lt;code&gt;use&lt;/code&gt;s to this file to shorten up your command to &lt;code&gt;neutrino start&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// .neutrinorc.js&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  use&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;neutrino-preset-react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Override the page title&lt;/span&gt;
      html&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        title&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Enterprise 2.0&apos;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

      &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Override the Babel configuration for the React preset&lt;/span&gt;
      babel&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        presets&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
          &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;babel-preset-env&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
            targets&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
              browsers&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
                &lt;span class=&quot;token string&quot; &gt;&apos;last 1 Chrome versions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
                &lt;span class=&quot;token string&quot; &gt;&apos;last 1 Firefox versions&apos;&lt;/span&gt;
              &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
          &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Even completely override the webpack configuration&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// using the webpack-chain API&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;neutrino&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      neutrino&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;config
        &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;entry&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;vendor&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;react-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you can start your app using &lt;code&gt;neutrino start&lt;/code&gt; or add a script to your &lt;code&gt;package.json&lt;/code&gt; to be able to more easily run it from your command line.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s easy to add linting and testing to your project that also can consume Neutrino middleware and presets:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;yarn add --dev neutrino-preset-airbnb-base neutrino-preset-jest
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// .neutrinorc.js&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  use&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot; &gt;&apos;neutrino-preset-airbnb-base&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;neutrino-preset-react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      html&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        title&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Enterprise 2.0&apos;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot; &gt;&apos;neutrino-preset-jest&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When running &lt;code&gt;neutrino start&lt;/code&gt;, you&amp;#39;ll see linting errors, with no upfront configuration. If you create some tests, you can run those with &lt;code&gt;neutrino test&lt;/code&gt; and they will be run using the same configuration, using the test middleware you have chosen. With &lt;code&gt;neutrino build&lt;/code&gt; you can output compiled static assets for production deployment.&lt;/p&gt;
&lt;p&gt;For advanced cases, Neutrino even supports running custom commands that can consume the same configuration that webpack does. It has proven for us to be a pretty robust solution.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-neutrino-differ-from-other-solutions-&quot; id=&quot;how-does-neutrino-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Neutrino&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-neutrino-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I compare Neutrino to other tools, I usually break them down into either boilerplates or CLI tools, and I would like to contrast them separately.&lt;/p&gt;
&lt;p&gt;First, while boilerplates are great for getting a project up and running quickly, over time, you may run into difficulties with the build system being tightly coupled to the application repository. As you make commits to your project, it is often hard or impossible to apply updates from the upstream boilerplate, which could include crucial bug fixes.&lt;/p&gt;
&lt;p&gt;Every new project you start means you need to copy the build configuration from existing projects, and eventually, this becomes tough to maintain. We experienced this pain first-hand with several Mozilla projects.&lt;/p&gt;
&lt;p&gt;Second, there are some fantastic projects out there like Create React App, preact-cli, nwb, and much more that avoid the boilerplate problem but at the expense of some other tradeoffs. Your configuration could be black-boxed and not able to be modified. They could force you to eject your configuration, making maintenance of the entire build dependency tree and configuration your responsibility again, and also preclude future configuration updates.&lt;/p&gt;
&lt;p&gt;Each separate type of project needs its build configuration, and therefore you may need to install a different CLI tool for several different types of frameworks. The configuration you make for one type of project may not be usable in a different kind of project, leaving you to maintain these separately. Not to mention, creating a common and shareable configuration for all of these projects is not possible.&lt;/p&gt;
&lt;p&gt;At Mozilla, we started down this route too and ran into these same problems. In the original implementation, I had created something &lt;em&gt;very&lt;/em&gt; similar to Create React App, but found configuration very messy, and by putting dependencies like React behind our dependency, users couldn&amp;#39;t update React without also updating our CLI tool.&lt;/p&gt;
&lt;p&gt;Neutrino attempts to address all of these problems with minimal tradeoffs. Couple this with the fact that Neutrino is project &lt;em&gt;and&lt;/em&gt; target agnostic, i.e. you can build web apps, libraries, and even Node.js projects with it, you hopefully can see its potential to solve many headaches some of us have been fighting against.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-neutrino-&quot; id=&quot;why-did-you-develop-neutrino-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Neutrino&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-neutrino-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I alluded to, creating some of our front-end projects as Mozilla ran into some problems. We wanted to use a modern JavaScript feature set and build toolchain across many projects, but webpack didn&amp;#39;t easily allow us to share this across those projects while still allowing individual configuration along the way. At least this was not achievable in a very deterministic way.&lt;/p&gt;
&lt;p&gt;Our first attempt at solving this ended up with a project that worked well enough for starting new React projects, but fell flat when integrating into existing projects, or if you wanted to keep its underlying dependencies up to date.&lt;/p&gt;
&lt;p&gt;We had tightly-coupled the application dependencies along with those of our build chain, which seemed OK at first, but led to upgrading issues later. Neutrino was born out of this mistake, and manifests one of our core tenets: &lt;em&gt;don&amp;#39;t mix application dependencies with those of the build system.&lt;/em&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;webpack development moves quickly, and we want to keep up with that in Neutrino as well. We are moving to release v7 soon which will support webpack v3 and its improvements. We continue to refine our configuration API to make one-off changes and middleware easier for anyone to create and publish.&lt;/p&gt;
&lt;p&gt;I also want to work more with some of the framework authors and contributors out there to see if Neutrino can be a good fit for their users, and reduce the proliferation of boilerplates and CLI tools into something more universal and reusable for everyone.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-neutrino-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-neutrino-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Neutrino&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-neutrino-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think web development is in a fascinating place right now. The Web is trying to compete with native applications, and this is a battle I believe the Web will &lt;em&gt;eventually&lt;/em&gt; win. The rise of new JavaScript libraries and frameworks are pushing us into another period of discovery of what is and isn&amp;#39;t possible for the Web right now.&lt;/p&gt;
&lt;p&gt;I believe the work being done on Progressive Web Apps is shedding light here, and clarifying that the platform in incomplete but getting better. I also see WebAssembly as the long-term future of web development.&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t predict the future of development, but I do believe that webpack and Neutrino are on the right course for a while to come. As long as developers want to use cutting edge features, integrated development workflows, and need a fully-featured build toolchain for the Web, I think webpack and Neutrino are well-suited to tackle these obstacles.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My spark in web development came when I found it fascinating that I could write some text and control my computer with it. If you have a passion for these technologies as well, build something. Anything. Tinker with the Web, with JavaScript, and see what you can create.&lt;/p&gt;
&lt;p&gt;Don&amp;#39;t let the complexity get to you. Don&amp;#39;t let the vast breadth of content get to you. These things will come with time. What&amp;#39;s important is to get your feet wet and learn. I try and learn something new every day, and as long as you strive to continue learning, you can only grow from here.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think Guillermo Rauch would be a great person to interview. His work with Zeit, Next.js, now, and past projects is epic.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thank you for taking the time to read through my opinions and comments. I appreciate everyone in our community and hope I can push the Web forward, while it pushes me too.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Eli! I think a lot of people share the same pain of configuration as you and Mozilla and Neutrino definitely seems like one way to solve it.&lt;/p&gt;
&lt;p&gt;To learn more, &lt;a href=&quot;https://neutrino.js.org/&quot;&gt;check out Neutrino site&lt;/a&gt; and &lt;a href=&quot;https://github.com/mozilla-neutrino/neutrino-dev&quot;&gt;Neutrino GitHub page&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Idyll - Narratives for the web - Interview with Matthew Conlen</title><id>aidyllnarrativesforthewebinterviewwithmatthewconlen2017-08-21t00:00:00z</id><link href="https://survivejs.com/blog/idyll-interview/"></link><updated>2017-08-21T00:00:00Z</updated><content type="html">&lt;p&gt;Since the early days of the web, people have wanted to visualize data to share with others. Even though the platform provides something basic for these purposes (i.e., tables, images), typically some amount of programming has been required.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://idyll-lang.github.io/&quot;&gt;Idyll&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/mathisonian&quot;&gt;Matthew Conlen&lt;/a&gt; is a tool designed to make data visualization in documents easier.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/e7129cf31550559f7eb9757cfbeea1d1?s=200&quot; alt=&quot;Matthew Conlen&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m currently working on my Ph.D. with &lt;a href=&quot;https://homes.cs.washington.edu/~jheer/&quot;&gt;Jeffrey Heer&lt;/a&gt; at the &lt;a href=&quot;https://idl.cs.washington.edu/&quot;&gt;Interactive Data Lab&lt;/a&gt; at the University of Washington. Prior to grad school I worked on data visualization tools and interactive stories at &lt;a href=&quot;http://fivethirtyeight.com/&quot;&gt;FiveThirtyEight&lt;/a&gt;, helped &lt;a href=&quot;https://www.janelia.org/our-research/former-labs/freeman-lab&quot;&gt;the Freeman Lab&lt;/a&gt; build open-source tools for computational neuroscience, developed digital tools for journalists at &lt;a href=&quot;http://www.huffingtonpost.com/&quot;&gt;The Huffington Post&lt;/a&gt;, and was the senior developer at &lt;a href=&quot;http://rhizome.org/&quot;&gt;Rhizome&lt;/a&gt;.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-idyll-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-idyll-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Idyll&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-idyll-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Idyll is a markup language for creating and publishing interactive narratives — think posts on websites like &lt;a href=&quot;https://distill.pub/&quot;&gt;&lt;em&gt;Distill&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.nytimes.com/section/upshot&quot;&gt;&lt;em&gt;The Upshot&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://fivethirtyeight.com&quot;&gt;&lt;em&gt;FiveThirtyEight&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&quot;https://pudding.cool/&quot;&gt;&lt;em&gt;The Pudding&lt;/em&gt;&lt;/a&gt;. With Idyll you write markup in a text file, which is then compiled into an interactive webpage. Idyll takes a lot of inspiration (and borrows a lot of syntax) from &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, while trying to extend these ideas beyond static text.&lt;/p&gt;
&lt;p&gt;One of the main points of Idyll is to make it very easy to embed JavaScript components inline with your text, and even have these components responsively update based on a reader&amp;#39;s actions or scrolls. For example, a short Idyll file might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-markdown&quot;&gt;&lt;span class=&quot;token title important&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;#&lt;/span&gt; This is my title&lt;/span&gt;
&lt;span class=&quot;token title important&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;###&lt;/span&gt; This is my subheading&lt;/span&gt;

This is the main body of my article. Here is a scatter plot, rendered with JavaScript:

[data name:&quot;exampleData&quot; source:&quot;example-data.csv&quot; /]
[Chart type:&quot;scatter&quot; data:exampleData /]

And here is some more text after the chart.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Markdown will be converted to HTML&lt;/li&gt;
&lt;li&gt;a dataset will be read from the &lt;code&gt;example-data.csv&lt;/code&gt; file using the &lt;code&gt;[data /]&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;[Chart /]&lt;/code&gt; component will call out to JavaScript to render the contents of the CSV in a scatter plot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Idyll ships with a &lt;a href=&quot;https://idyll-lang.github.io/components-built-in&quot;&gt;set of standard components&lt;/a&gt; that can be invoked in the markup. Because Idyll is built on top of &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, any React component can be installed from &lt;code&gt;npm&lt;/code&gt; and used without any additional configuration. It is also straightforward for users to write their own &lt;a href=&quot;https://idyll-lang.github.io/components-custom&quot;&gt;custom components&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Everything in Idyll is reactive, so when anything changes the document automatically updates. For example, if we wanted to have a chart toggle between a scatter and a line plot, we could add a variable that changes when a button is pressed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-markdown&quot;&gt;[var name:&quot;showScatter&quot; value:true /]

[Chart type:&lt;span class=&quot;token code keyword&quot; &gt;`showScatter ? &quot;scatter&quot; : &quot;line&quot;`&lt;/span&gt; data:exampleData /]

[Button onClick:&lt;span class=&quot;token code keyword&quot; &gt;`showScatter = !showScatter`&lt;/span&gt;] Toggle Scatter [/Button]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-idyll-work-&quot; id=&quot;how-does-idyll-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Idyll&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-idyll-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As is typical with any programming language, Idyll starts with a compiler that does lexing and parsing of the input file. We rely heavily on existing open-source tools to help with this task, namely &lt;a href=&quot;https://github.com/aaditmshah/lexer&quot;&gt;lex&lt;/a&gt; for the lexing and &lt;a href=&quot;https://github.com/Hardmath123/nearley&quot;&gt;nearley&lt;/a&gt; to do the parsing. The compiler then spits out an &lt;em&gt;abstract syntax tree&lt;/em&gt; (AST) that represents the hierarchy of elements that belong in the document.&lt;/p&gt;
&lt;p&gt;Once the AST is created, Idyll processes it to see which components are used and uses Browserify to create a JavaScript bundle that can be executed in a web browser. This JavaScript bundle includes a React component that will dynamically map the nodes in the AST to React components and render those components as its children.&lt;/p&gt;
&lt;p&gt;Part of this mapping process involves generating and executing some JavaScript code to make sure that Idyll&amp;#39;s reactive variables work and the document is always re-rendered properly as those variables change.&lt;/p&gt;
&lt;p&gt;One cool thing is that because Idyll&amp;#39;s compiler is written in JavaScript, we can &lt;a href=&quot;https://idyll-lang.github.io/editor/&quot;&gt;execute this whole build process in the browser&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-idyll-differ-from-other-solutions-&quot; id=&quot;how-does-idyll-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Idyll&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-idyll-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The typical process for creating interactive documents or &lt;a href=&quot;http://explorabl.es/&quot;&gt;explorable explanations&lt;/a&gt; involves hand-writing a lot of custom JavaScript and HTML. It can quickly become tedious balancing the narrative portion of the project with the nitty-gritty details of the code. To this end, the New York Times developed &lt;a href=&quot;http://archieml.org/&quot;&gt;ArchieML&lt;/a&gt;, a markup language designed to make it easy to pull text into JavaScript code.&lt;/p&gt;
&lt;p&gt;A core idea with ArchieML is that code and text should be separated because they deal with very different concerns. Text needs to be edited for content and clarity, often by someone who doesn&amp;#39;t care to look at the code. Developers will need to integrate that text with their code at some point but typically aren&amp;#39;t concerned with grammar while they are writing JavaScript.&lt;/p&gt;
&lt;p&gt;In some ways, Idyll takes the opposite approach to ArchieML. Instead of making it easy to pull text into code, Idyll makes it easy to include JavaScript components in a text. With this approach, the relationship between code and text becomes much easier to reason about from an editorial perspective, and it becomes feasible to make nuanced changes to where components appear in the text, and how they interact with the page. In this way, the process of including an interactive component becomes much closer to, say, using a CMS to embed an image in a post.&lt;/p&gt;
&lt;p&gt;Another project that addresses combining code and data with text is &lt;a href=&quot;https://stenci.la/&quot;&gt;Stencila&lt;/a&gt;. Stencila borrows ideas from the &amp;quot;code notebook&amp;quot; world and focuses on embedding executable code with text. My understanding is that the project is focused on reproducible research, whereas Idyll is focused on streamlining the connection between prose and JavaScript to build interactive narratives.&lt;/p&gt;
&lt;p&gt;There are lots of projects that make it easy to publish Markdown documents online (&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, for example), but none of these allow JavaScript to be tightly integrated with the text.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-idyll-&quot; id=&quot;why-did-you-develop-idyll-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Idyll&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-idyll-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I developed Idyll as a way to automate away an entire class of hardships that authors face when they want to publish documents with interactivity. The project is a synthesis of a lot of ideas and lessons learned from developing these sorts of projects at FiveThirtyEight and elsewhere.&lt;/p&gt;
&lt;p&gt;Because Idyll has a fairly specific use-case, it can encapsulate some best practices. For example, it enables server-side rendering and other performance optimizations by default and allows the developer to avoid the headache of setting up a JavaScript build system and HTML templates.&lt;/p&gt;
&lt;p&gt;I believe that the web is a great platform for communication and we are only now starting to see some of the potential of moving beyond static text. With Idyll I hope to make it easier for other people to express their ideas in a dynamic and engaging way and publish them online. The project also has implications beyond just blog posts and news articles, such as providing a new entry point into the authorship of interactive textbooks.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll continue to focus on Idyll&amp;#39;s user friendliness and expanding the online examples that serve as a reference for new projects. I&amp;#39;m also interested in improving the authorship experience for interactive and data heavy websites in general, so you can expect to see continued work in this area specifically.&lt;/p&gt;
&lt;p&gt;Regarding new features for Idyll, one big item on the roadmap is enabling custom transformations that operate on the AST. Doing this would allow new possibilities such as writing components that call out to another program at compile-time to generate new static output, for example, calling &lt;code&gt;graphviz&lt;/code&gt; to produce an image of a graph.&lt;/p&gt;
&lt;p&gt;We may also add some syntactic sugar to make certain common tasks even easier. In addition to that, we&amp;#39;ve been working hard to modularize the individual components of Idyll to make it easier for others to work with Idyll in their projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-idyll-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-idyll-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Idyll&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-idyll-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is an exciting time for web development. The number of powerful technologies at developers&amp;#39; disposal continues to increase. I would expect that the JavaScript developer&amp;#39;s toolkit for building and deploying code will continue improving in sophistication and optimization. I&amp;#39;m optimistic that build tools will become easier to set up and use once more consensus has been established within the community around certain features.&lt;/p&gt;
&lt;p&gt;Thanks to the persistence of the open-source community, the amount, and quality of web tooling continue to rise. I&amp;#39;m excited to see further development and advancing maturity of these tools that empower creation.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Focus on solving a problem that is interesting to you instead of wading through tutorials. Learn to use Google to solve problems as they come up. Use things like &lt;a href=&quot;https://github.com/mattdesl/budo&quot;&gt;budo&lt;/a&gt; to get up and running quickly and don&amp;#39;t bother listening to people who argue about tools online. Don&amp;#39;t use a framework until you can articulate why you need a framework.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s lots of interesting work being done in the WebGL / 3D graphics space. &lt;a href=&quot;https://github.com/mikolalysenko&quot;&gt;Mikola Lysenko&lt;/a&gt; is doing great work with &lt;a href=&quot;https://github.com/regl-project/regl&quot;&gt;regl&lt;/a&gt;, and &lt;a href=&quot;http://rickyreusser.com/&quot;&gt;Ricky Reusser&lt;/a&gt; has been using it to make some excellent &lt;a href=&quot;https://github.com/rreusser/demos#regl&quot;&gt;data visualizations&lt;/a&gt;. &lt;a href=&quot;https://stardustjs.github.io/&quot;&gt;Stardust.js&lt;/a&gt; is also an exciting project for using WebGL to visualize data.&lt;/p&gt;
&lt;p&gt;The work on decentralization from folks working on projects like &lt;a href=&quot;https://github.com/beakerbrowser/beaker&quot;&gt;Beaker Browser&lt;/a&gt; and &lt;a href=&quot;https://datproject.org/&quot;&gt;Dat&lt;/a&gt; is also exciting.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Idyll folks are usually hanging out in a &lt;a href=&quot;https://gitter.im/idyll-lang/Lobby&quot;&gt;chatroom on gitter&lt;/a&gt;. It&amp;#39;s easy to join, and we&amp;#39;re always happy when people say &amp;quot;Hi&amp;quot; or ask questions about the project. I&amp;#39;d also like to call out &lt;a href=&quot;https://benclinkinbeard.com/&quot;&gt;Ben Clinkinbeard&lt;/a&gt; for all the hard work he has done on the development of Idyll.&lt;/p&gt;
&lt;p&gt;Thanks for having me! ✨&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Matthew! I love the fact how Idyll makes it easier for people from different domains to collaborate.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://idyll-lang.github.io/&quot;&gt;Learn more about on their site&lt;/a&gt;. &lt;a href=&quot;https://github.com/idyll-lang/idyll&quot;&gt;Check out Idyll GitHub page&lt;/a&gt; as well.&lt;/p&gt;
</content></entry><entry><title>Motorcycle.js - A statically-typed, functional and reactive framework for modern browsers - Interview with Tylor Steinberger</title><id>amotorcyclejsastaticallytypedfunctionalandreactiveframeworkformodernbrowsersinterviewwithtylorsteinberger2017-08-18t00:00:00z</id><link href="https://survivejs.com/blog/motorcycle-interview/"></link><updated>2017-08-18T00:00:00Z</updated><content type="html">&lt;p&gt;Functional reactive programming allows us to think carefully about state and side effects. The question is, how to do that in JavaScript?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/motorcyclejs/motorcyclejs&quot;&gt;Motorcycle.js&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/TylorS167&quot;&gt;Tylor Steinberger&lt;/a&gt; is one solution to this problem.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/8e82cfdc051e96e55ade3ccb870edeff?s=200&quot; alt=&quot;Tylor Steinberger&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m a software engineer at a company called PokerJuice, where I mostly work on the front-end using Motorcycle and domain-driven design. I&amp;#39;m a self-taught developer with almost two years of open-source contributions and 1.5 years professional experience.
&lt;/p&gt;

&lt;p&gt;Besides my work on Motorcycle, I&amp;#39;m also a core Most.js contributor. My professional and open-source work have both been primarily focused on functional and reactive programming in TypeScript.&lt;/p&gt;
&lt;p&gt;Away from a keyboard, music festivals are my home away from home. I love to create, play, and experience music as much as I can. Traveling is a newly discovered interest of mine, and I&amp;#39;m trying to increase my ability to travel as much as possible in the future.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To learn more about Most.js, &lt;a href=&quot;https://survivejs.com/blog/most-interview&quot;&gt;read the Most.js interview&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-motorcycle-js-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-motorcycle-js-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Motorcycle.js&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-motorcycle-js-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Motorcycle is a type-safe functional and reactive framework for modern browsers. In large part, it is an architectural pattern for building highly interactive applications with Most.js.&lt;/p&gt;
&lt;p&gt;Given that the base is built with Most.js, Motorcycle is fully reactive. Being reactive solves many challenges such as handling events, errors, and any other asynchronous calls you may need to make.&lt;/p&gt;
&lt;p&gt;Motorcycle is &lt;em&gt;functional&lt;/em&gt;. Large applications can be written using only functions which make them extremely testable. You&amp;#39;ll never need to use the &lt;code&gt;this&lt;/code&gt; keyword or make imperative function calls. Paired with a library like Ramda you may never have to see &lt;code&gt;foo.bar&lt;/code&gt; or &lt;code&gt;foo[&amp;#39;bar&amp;#39;]&lt;/code&gt; notations again!&lt;/p&gt;
&lt;p&gt;Motorcycle is programmed as a function over time given it&amp;#39;s most functional and reactive.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-motorcycle-js-work-&quot; id=&quot;how-does-motorcycle-js-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Motorcycle.js&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-motorcycle-js-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to better understand how Motorcycle works, it&amp;#39;s important to understand what it achieves first. Motorcycle itself is just a single function named &lt;code&gt;run&lt;/code&gt;. Using &lt;code&gt;run&lt;/code&gt; requires two functions. We call these two functions &lt;code&gt;Main&lt;/code&gt; and &lt;code&gt;Effects&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/e9442cd1f94b3f5a75367416154772a9.png&quot; alt=&quot;Motorcycle run diagram&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Motorcycle run diagram&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As you may be able to tell from the diagram above, the &lt;code&gt;run&lt;/code&gt; function effectively operates like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; sinks &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;sources&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; sources &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Effects&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;sinks&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above may seem impossible to do at first glance, but is 100% possible! Using a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;
we can solve this problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Create a Proxy which dynamically adds key-value entries&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// as they are accessed from Effects&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; proxySinks &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; property&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;target&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;property&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      target&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;property&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;createNewStream&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;property&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Call Effects with our Proxy&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; sources &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Effects&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;proxySinks&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Call Main to get our *real* Sinks&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; sinks &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;sources&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Replicate the values from *real* Sinks to the proxySinks&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// This is what &quot;closes&quot; the loop to make a reactive cycle&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-for&quot; &gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; sinkName &lt;span class=&quot;token keyword keyword-in&quot; &gt;in&lt;/span&gt; sinks&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  sinks&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;sinkName&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;proxySinks&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;sinkName&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above is an abbreviated version of how the real thing works, for those interested in how it works in practice, &lt;a href=&quot;https://github.com/motorcyclejs/motorcyclejs/tree/master/run&quot;&gt;the source code can be found online&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-motorcycle-js-differ-from-other-solutions-&quot; id=&quot;how-does-motorcycle-js-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Motorcycle.js&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-motorcycle-js-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Motorcycle tries to push the boundaries of how applications can be written. Countless hours have been spent to write the best TypeScript typings imaginable. In an editor like Visual Studio Code, you&amp;#39;ll get autocompletion for everything, making spelling errors nearly impossible.&lt;/p&gt;
&lt;p&gt;When you query for a click event, Motorcycle already knows you&amp;#39;re going to get a &lt;code&gt;MouseEvent&lt;/code&gt; back, not just an &lt;code&gt;Event&lt;/code&gt;. When you want to change the color of a font, you&amp;#39;ll even get autocompletion for values like &lt;code&gt;&amp;#39;darkturquoise&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;lightsteelblue&amp;#39;&lt;/code&gt;. I&amp;#39;m not aware of any other framework that has aimed to achieve this quality of developer experience.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-motorcycle-js-&quot; id=&quot;why-did-you-develop-motorcycle-js-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Motorcycle.js&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-motorcycle-js-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Motorcycle started as a sister project to &lt;a href=&quot;https://github.com/cyclejs/cyclejs&quot;&gt;Cycle.js&lt;/a&gt;. The original goal was to squeeze as much performance out of the ideas that André Staltz introduced in Cycle.js.&lt;/p&gt;
&lt;p&gt;At the time Cycle.js still made exclusive use of RxJS 4 and a &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;virtual-dom&lt;/a&gt;, so first attempts to make Motorcycle as fast as possible involved integrating &lt;a href=&quot;https://github.com/cujojs/most&quot;&gt;Most.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/snabbdom/snabbdom&quot;&gt;snabbdom&lt;/a&gt; in an untouched version of Cycle.&lt;/p&gt;
&lt;p&gt;Only in the past year have I reduced my activity on Cycle.js and begun to focus more of my time elsewhere, Motorcycle taking on a slightly different API and semantics. In particular, Motorcycle now requires a browser that supports the ES2015 &lt;code&gt;Proxy&lt;/code&gt;. The changes that have been made since dropping support for IE have opened many doors for us, especially for architecting large applications.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Motorcycle has become stable over the past two years. The next venture in Motorcycle will be to upgrade to depend on &lt;a href=&quot;https://github.com/mostjs/core&quot;&gt;&lt;code&gt;@most/core&lt;/code&gt;&lt;/a&gt; which is a large improvement over the current version of Most.js. Doing this shouldn&amp;#39;t take too long after a v1.0.0 release.&lt;/p&gt;
&lt;p&gt;Spoiler: I plan to rebrand Motorcycle.js to Motorcycle.ts to further emphasize our commitment to having the best TypeScript typings the language allows. We&amp;#39;re also looking to improve documentation, split existing packages up into smaller pieces, and providing a great deal more testing utilities and commonly used functions. Mainly, we want to foster the community around the project and continue to grow.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-motorcycle-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-motorcycle-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Motorcycle.js&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-motorcycle-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think functional and reactive programming is creeping more and more into mainstream web development, and we&amp;#39;ll be seeing more and more ideas exploring them. Motorcycle will continue to support this trend and bring these programming styles more into the limelight.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being self-taught, all the advice I can give is to find a project that piques your curiosity, join their community, and work hard to contribute regardless of your skill level. I found Cycle.js in August 2015, joined the community, and just tried making things, almost none of which anyone uses today.&lt;/p&gt;
&lt;p&gt;The people active in those days would ask questions, do code reviews, and provide all kinds of tips to learn and grow. Ask questions, be curious, and never stop asking yourself and others how you can improve your skills at and away from a keyboard.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think it&amp;#39;d be great to interview André Staltz. He&amp;#39;s doing some awesome work to free people from large companies exploiting our privacy for profits.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://survivejs.com/blog/cycle-interview&quot;&gt;I interviewed André earlier about Cycle.js&lt;/a&gt;. Perhaps we can find another topic to cover!&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d like to thank everyone from the early Cycle.js days: &lt;a href=&quot;https://github.com/staltz&quot;&gt;André Staltz&lt;/a&gt;, &lt;a href=&quot;https://github.com/widdershin&quot;&gt;Nick Johnstone&lt;/a&gt; &lt;a href=&quot;https://github.com/frikki&quot;&gt;Frederik Krautwald&lt;/a&gt; and &lt;a href=&quot;https://github.com/axefrog&quot;&gt;Nathan Ridley&lt;/a&gt;. I&amp;#39;d also really like to thank the Most.js core team: &lt;a href=&quot;https://github.com/briancavalier&quot;&gt;Brian Cavalier&lt;/a&gt; and &lt;a href=&quot;https://github.com/davidchase&quot;&gt;David Chase&lt;/a&gt;. Without these people and others along the way, I&amp;#39;d still work 50+ hours a week in a coffee shop. I can&amp;#39;t thank them enough!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Tylor!&lt;/p&gt;
&lt;p&gt;To learn more about the approach, study &lt;a href=&quot;https://github.com/motorcyclejs/motorcyclejs&quot;&gt;Motorcycle.js GitHub page&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Next.js - Framework for server-rendered React apps - Interview with Arunoda Susiripala</title><id>anextjsframeworkforserverrenderedreactappsinterviewwitharunodasusiripala2017-08-15t00:00:00z</id><link href="https://survivejs.com/blog/nextjs-interview/"></link><updated>2017-08-15T00:00:00Z</updated><content type="html">&lt;p&gt;Building universal web applications combining server side rendering with front-end is popular these days. The approach is not without its problems, though. Now you have the extra challenge of managing code so that it works on the both sides. Due to the differences between them, you will run into a series of problems.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zeit/next.js/&quot;&gt;next.js&lt;/a&gt; was developed to handle these concerns for React. To understand the approach, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;Arunoda Susiripala&lt;/a&gt; this time.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/ab13df38843556b57f7d2f6fe78003cf?s=200&quot; alt=&quot;Arunoda Susiripala&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I started working with JavaScript while I was studying at university. After this I had my first introduction to open source - I got involved with Joomla and Status.net as a part of Google Summer of Code.
&lt;/p&gt;

&lt;p&gt;My work started to turn towards Meteor-related projects next, and I founded kadira.io, a performance monitoring solution for Meteor. At Kadira, I started React Storybook with my colleagues, but eventually, we needed to shut down Kadira.&lt;/p&gt;
&lt;p&gt;In late 2016, I discovered Next.js and started contributing to it. After Kadira&amp;#39;s shutdown, I joined ZEIT to maintain Next.js and take it further.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-next-js-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-next-js-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Next.js&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-next-js-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think everyone is familiar with the concept of JavaScript fatigue. Creating a web app with JavaScript is often hard with all of the packages and options that we have today. React, webpack, Redux, React Router and many more libraries and tools are often used and require effort to learn.&lt;/p&gt;
&lt;p&gt;In comparison, writing a simple PHP app can be as easy as just creating some files and deploying them.&lt;/p&gt;
&lt;p&gt;With Next.js we enable developers to build JavaScript web apps with more straightforward workflow like in the PHP example. Just create some files that export React components and deploy your app. No need to set up webpack or do any special routing or state management.&lt;/p&gt;
&lt;p&gt;Next.js also does server side rendering by default, among many other performance optimizations.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-next-js-work-&quot; id=&quot;how-does-next-js-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Next.js&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-next-js-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let me show you with an example.&lt;/p&gt;
&lt;p&gt;We first create our project and initialize an npm package.json:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;token function&quot; &gt;mkdir&lt;/span&gt; hello-next
&lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; hello-next
&lt;span class=&quot;token function&quot; &gt;npm&lt;/span&gt; init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we install &lt;em&gt;Next.js&lt;/em&gt; and the React dependencies and create a &lt;code&gt;pages&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;token function&quot; &gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;install&lt;/span&gt; --save next react react-dom
&lt;span class=&quot;token function&quot; &gt;mkdir&lt;/span&gt; pages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the pages directory, we create a file at &lt;code&gt;pages/index.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; Link &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;next/link&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Welcome&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt; is the home page&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;/about&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;About Page&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;Link&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also make a file called &lt;code&gt;pages/about.js&lt;/code&gt; containing this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;This is the about page&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We add a script for the development server to the &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot; &gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;next&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we run that script to start the development server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;token function&quot; &gt;npm&lt;/span&gt; run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The app will be started on &lt;code&gt;https://localhost:3000&lt;/code&gt;. Any changes to pages and content will be updated instantly in the browser by webpack&amp;#39;s Hot Module Replacement (HMR).&lt;/p&gt;
&lt;p&gt;Above is just the beginning. You can do a lot with &lt;em&gt;Next.js&lt;/em&gt;. You can even customize the base webpack and Babel configuration too.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;I suggest visiting the &lt;a href=&quot;https://github.com/zeit/next.js&quot;&gt;Next.js repo&lt;/a&gt; for more info.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-next-js-differ-from-other-solutions-&quot; id=&quot;how-does-next-js-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Next.js&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-next-js-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here I&amp;#39;ll focus on comparing &lt;em&gt;Next.js&lt;/em&gt; with two other solutions for building React apps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Custom webpack and Babel setup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here you need to maintain your configurations and update them for new versions of your dependencies. If you manage multiple apps, upgrading the dependencies and updating all configurations everywhere will be a real problem.&lt;/p&gt;
&lt;p&gt;If you use Next.js, you don&amp;#39;t need to worry about these configurations. It comes along with sane defaults but also allows you to customize as needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Create React App (CRA)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create React App is Facebook&amp;#39;s official solution for building React apps without build configuration. It works well for what it does. It doesn&amp;#39;t, however, deal with routing, so you need to handle this on your own. Furthermore, you can&amp;#39;t customize as much of the webpack and Babel configurations. Server side rendering is also complicated to do.&lt;/p&gt;
&lt;p&gt;For some apps, Create React App is a good solution.&lt;/p&gt;
&lt;p&gt;With Next.js, you&amp;#39;ll get server side rendering for free and no need to worry about routing. The built-in routing system is file system-based, and custom routes can be set up for dynamic pages.&lt;/p&gt;
&lt;p&gt;Since the routing is built into the framework, we can do very cool things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server side rendering by default&lt;/li&gt;
&lt;li&gt;Automatic code splitting&lt;/li&gt;
&lt;li&gt;Simple data fetching solution for pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can build a decent web app without worrying about configuration, routing and state management.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-next-js-&quot; id=&quot;why-did-you-develop-next-js-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Next.js&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-next-js-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&amp;#39;t work at ZEIT at the time it was built - it was primarily developed by &lt;a href=&quot;https://twitter.com/nkzawa&quot;&gt;@nkzawa&lt;/a&gt; to develop &lt;a href=&quot;https://zeit.co&quot;&gt;ZEIT&amp;#39;s web app&lt;/a&gt;. Because it was a success, ZEIT released it as an open source project.&lt;/p&gt;
&lt;p&gt;Since then, features are developed when they are needed to continue building &lt;a href=&quot;https://zeit.co&quot;&gt;https://zeit.co&lt;/a&gt;, and the community helps by fixing bugs and requesting and developing new features.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We try to keep &lt;em&gt;Next.js&lt;/em&gt; as simple and lean as possible. We avoid implementing too many features. Instead, we aim to build a robust infrastructure and encourage reuse of existing libraries and frameworks on top of Next.js.&lt;/p&gt;
&lt;p&gt;We just released &lt;em&gt;Next.js&lt;/em&gt; 3.0 with dynamic imports and static HTML exporting support. The next topics we will focus on are improving overall stability and reducing the dev and production build time of the app.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-next-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-next-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Next.js&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-next-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think we&amp;#39;ll see more rich web apps in the future thanks to recent performance improvements in browsers. Web Assembly will have an enormous impact on the industry. Solid tooling will allow development of web apps available for both desktops and servers. Effects like these will lead to web apps to completely obsoleting desktop apps.&lt;/p&gt;
&lt;p&gt;Our goal with Next.js will always be to allow developers to build fast web apps without too much hassle with different APIs and configurations.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, learn the basics well. For example, with front-end web development, learn the ins and outs of HTML, CSS, and JavaScript. Then focus on a couple of frameworks you like and develop a career on top of them.&lt;/p&gt;
&lt;p&gt;The industry is changing very rapidly, so always look for what&amp;#39;s new and stay updated.&lt;/p&gt;
&lt;p&gt;Don&amp;#39;t switch frameworks because there&amp;#39;s something new and cool. Only do that if your current framework doesn&amp;#39;t work well or if the new one increases your job opportunities.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript has a huge ecosystem. I don&amp;#39;t have a specific person to mention. The GitHub trending page may have some interesting people to interview.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a project maintainer on GitHub, I appreciate it when developers search the web and the existing issues before creating new issues. If it&amp;#39;s a new issue, always provide a way to reproduce the issue (often better as a GitHub repo).&lt;/p&gt;
&lt;p&gt;That saves us a ton of time so that we can fix legitimate problems and still add new features.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Arunoda! I think it&amp;#39;s great to see projects like Next.js pushing the envelope and finding better ways to develop universal web applications.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/zeit/next.js/&quot;&gt;next.js GitHub&lt;/a&gt; and &lt;a href=&quot;https://learnnextjs.com/&quot;&gt;Learn Next.js&lt;/a&gt; to understand the topic better.&lt;/p&gt;
</content></entry><entry><title>Rekit - Toolkit for building scalable React applications - Interview with Nate Wang</title><id>arekittoolkitforbuildingscalablereactapplicationsinterviewwithnatewang2017-08-09t00:00:00z</id><link href="https://survivejs.com/blog/rekit-interview/"></link><updated>2017-08-09T00:00:00Z</updated><content type="html">&lt;p&gt;Perhaps the greatest thing about React is how flexible it is. It contains some opinions but not too many. You still have plenty of freedom. Sometimes this is a blessing, but it can also be a curse.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/webows&quot;&gt;Nate Wang&lt;/a&gt; realized the same, and as a result, he developed &lt;a href=&quot;http://rekit.js.org/&quot;&gt;Rekit&lt;/a&gt;, a toolkit, around React, Redux, and other related technologies.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/9645266baa7fbac0823eee7dae06bbe4?s=200&quot; alt=&quot;Nate Wang&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

My name is Nate Wang, and I live in Shanghai, China. I started writing JavaScript more than ten years ago and now enjoy my job building UIs for enterprise applications. I have created iOS apps, published books, and talked about React at QCon.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rekit-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-rekit-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Rekit&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rekit-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can think of &lt;em&gt;Rekit&lt;/em&gt; as an advanced &lt;em&gt;create-react-app&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It defines an opinionated approach to creating scalable web apps using React, Redux and React Router.&lt;/li&gt;
&lt;li&gt;It provides a powerful CLI and web-based interface to make sure the app always follows the Rekit way.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rekit-work-&quot; id=&quot;how-does-rekit-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rekit&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rekit-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When starting a project, the first thing is to create a project folder structure and plan how to scale it when adding more features. &lt;em&gt;Rekit&lt;/em&gt; can help to create such a project which scales well, following a &lt;a href=&quot;https://medium.com/@nate_wang/feature-oriented-architecture-for-web-applications-2b48e358afb0&quot;&gt;feature oriented architecture&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/24ebea30cf6ec9b29c08e053c50713d0.png&quot; alt=&quot;Rekit architecture&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Rekit architecture&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After creating the project and installing dependencies, you can use the powerful Rekit tools to manage the project and generate boilerplate code. Rekit portal, a web-based tool shipped with Rekit 2.0, works as an IDE for React development. Components, actions, and routes can all be created, moved and deleted by the Rekit portal.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/a396f31f459c8f6fc74a869310aa17ec.png&quot; alt=&quot;Rekit portal&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Rekit portal&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;a href=&quot;http://rekit-portal.herokuapp.com/&quot;&gt;You can find a live demo of Rekit portal online.&lt;/a&gt;&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rekit-differ-from-other-solutions-&quot; id=&quot;how-does-rekit-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rekit&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rekit-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There have been many boilerplates and scaffolding tools for React apps. Rekit may be the most complete solution, the key differences being:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It provides a production ready solution rather than a starter kit.&lt;/li&gt;
&lt;li&gt;It provides powerful tools like the command line interface and the web interfaces to manage the project.&lt;/li&gt;
&lt;li&gt;It may be the first tool that enables renaming and deletion of Redux actions, which is important for code refactoring.&lt;/li&gt;
&lt;li&gt;It supports the latest versions of dependencies like React 15.6, webpack 3, React Router 4 and so on and will stay up to date.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rekit-&quot; id=&quot;why-did-you-develop-rekit-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Rekit&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rekit-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I like to create tools to automate my daily work. Rekit was originally a toolset for helping create boilerplates for another project, the goal being boilerplate reuse in other projects. I realized that it might be useful to share this with others and so I created Rekit. It helped my team a lot.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d like to make Rekit more robust by adding more test cases. The docs can also be improved, and more tutorials can be written. It would be nice if Rekit could become more popular and be acknowledged by more people. I would like to create more Rekit plugins to add new capabilities to Rekit, such as support for React Native, server-side rendering, etc.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rekit-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-rekit-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Rekit&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rekit-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think &amp;quot;JavaScript/frontend fatigue&amp;quot; is still the main pain point for web development. There are too many options and best practices, and it&amp;#39;s hard to make decisions about which are better.&lt;/p&gt;
&lt;p&gt;Rekit is just a toolkit through which we share our best practices for creating web apps using React, Redux and React Router. We hope more people can benefit from it just like we do. To be honest, I can&amp;#39;t see any particular trends, but I believe React will be the final winner.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Read specifications first, especially ECMAScript. It won&amp;#39;t take long, and it&amp;#39;s beneficial for understanding the foundations of web development. If you understand the specifications, you can know how React, Angular and any other library work. There is no magic behind them.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/afc163&quot;&gt;afc163&lt;/a&gt; if possible. He is one of the leading developers of &lt;a href=&quot;https://ant.design&quot;&gt;Ant Design&lt;/a&gt; which I think is the best UI library for React.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to those who contribute to Rekit by reporting issues, asking questions and recommending Rekit to others! You all help to make Rekit better.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Nate! It&amp;#39;s nice to see solutions like this appear around React as they address specific pain points the community has.&lt;/p&gt;
&lt;p&gt;Learn more about the project at &lt;a href=&quot;http://rekit.js.org/&quot;&gt;Rekit site&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Redux-First Router - Just dispatch actions - Interview with James Gillmore</title><id>areduxfirstrouterjustdispatchactionsinterviewwithjamesgillmore2017-08-07t00:00:00z</id><link href="https://survivejs.com/blog/redux-first-router-interview/"></link><updated>2017-08-07T00:00:00Z</updated><content type="html">&lt;p&gt;Routing is one of those classic topics that comes up again and again. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;HTML5 History API&lt;/a&gt; itself is quite simple, but there are different opinions on how to apply the idea of routing on web applications and sites.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/faceyspacey&quot;&gt;James Gillmore&lt;/a&gt; decided to tackle the problem particularly for React and Redux in his &lt;a href=&quot;https://github.com/faceyspacey/redux-first-router&quot;&gt;Redux-First Router&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot;&gt;
    &lt;img src=&quot;https://avatars2.githubusercontent.com/u/154732?v=4&amp;s=460&quot; alt=&quot;James Gillmore&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
  &lt;/span&gt;

I&amp;#39;ve tried to stay quiet and keep it to the code rather than myself. But perhaps now is a good time to say a few words about my story.
&lt;/p&gt;

&lt;p&gt;I started 12 years ago (2005) by hiring other developers to build things. I worked at a music studio in Times Square, NYC and hired developers to build websites for our clients. Eventually, I even got into the MySpace spamming thing. I had been doing a lot of audio engineering, but soon realized that my talents were best more directly applied to technology. My dreams of becoming a famous beat-maker never came true.&lt;/p&gt;
&lt;p&gt;So I jumped ship, started my boutique web development agency, &lt;a href=&quot;http://www.faceyspacey.com&quot;&gt;FaceySpacey Technologies&lt;/a&gt; (2007), got myself into trouble completing products on time for clients, and became a coder as a matter of necessity (2010). The rest is history - a very long history of self-mastery (both in programming and the real world).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-first-router-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-redux-first-router-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Redux-First Router&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-first-router-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Redux-First Router is something that should have existed long ago, but because the React community at the time was caught up in throwing out so much ancient wisdom, it was skipped over. Redux-First Router completes the triumvirate of the MVC (Model-View-Controller), adding the C to the equation (where Redux is the M and React the V). It was as if nobody wanted to hear the letters MVC again. It&amp;#39;s anathema to me too, but it is what it is.&lt;/p&gt;
&lt;p&gt;It also kills the &amp;quot;everything is a component&amp;quot; concept when it comes to routes. Redux-First Router follows the philosophy that &amp;quot;everything is state&amp;quot; and routes are 100% in sync with actions to trigger that state. The components that make up your view layer just render from the state as they should.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-redux-first-router-work-&quot; id=&quot;how-does-redux-first-router-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Redux-First Router&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-redux-first-router-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With Redux-First Router, actions are dispatched as a result of visiting URLs and conversely, the address bar is updated in response to matching actions.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s significant and special about it is something that was never done before: the actions dispatched have unique &lt;code&gt;type&lt;/code&gt;s that only the given kind of URL has. This is unique because previous attempts at Redux routing (such as &lt;em&gt;redux-little-router&lt;/em&gt;) dispatch actions that all have the same type: the equivalent of &lt;code&gt;LOCATION_CHANGED&lt;/code&gt;. Then you have to dig through lots of information nested in that action to figure out what happened. It wasn&amp;#39;t conducive to switching over types as is idiomatic in reducers.&lt;/p&gt;
&lt;p&gt;As obvious as it sounds, having a &lt;code&gt;type&lt;/code&gt; that is as informative as actions you manually dispatch is the key ingredient that finally makes routing seamless for Redux apps.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-redux-first-router-differ-from-other-solutions-&quot; id=&quot;how-does-redux-first-router-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Redux-First Router&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-redux-first-router-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#no-route-components&quot; id=&quot;no-route-components&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;No &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; components&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#no-route-components&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initial attempts at Redux routing followed the React Router approach that &lt;em&gt;&amp;quot;everything is a component&amp;quot;&lt;/em&gt;. As &lt;a href=&quot;https://github.com/kmcclosk&quot;&gt;one of our initial users&lt;/a&gt; put it, &lt;em&gt;&amp;quot;cargo culting the same React Router stuff as everyone else just didn&amp;#39;t feel right, felt leaky, felt hacky&amp;quot;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The fact of the matter is that keeping any state (especially URL state) in the view layer has been an anti-pattern for a long time now, yet somehow React convinced us that it was the exception. It makes sense when you &lt;em&gt;don&amp;#39;t&lt;/em&gt; have Redux (or another data store). But when you do, a lot more compelling opportunities unveil themselves to you.&lt;/p&gt;
&lt;p&gt;Redux-First Router avoids using the same misplaced &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; components from React Router and similar packages. These packages promoted their version of &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt;, rather than take advantage of how Redux removes the state from the view layer.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; is for developers for whom Redux is still out of reach. Contrary to how easy seasoned developers may feel Redux is, it&amp;#39;s difficult for the novice and even intermediate developers. So I think &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; still makes sense for a broad category of users, but for power users, Redux-First Router kills the &lt;code&gt;&amp;lt;Route /&amp;gt;&lt;/code&gt; component as well as the &amp;quot;state-within-the-view-layer&amp;quot; anti-pattern.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-redux-philosophy&quot; id=&quot;the-redux-philosophy&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Redux philosophy&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-redux-philosophy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Everything you do with Redux-First Router mirrors the terminology and thinking of Redux itself. The primary example is the &lt;code&gt;thunk&lt;/code&gt; option attached to routes - it has the same API as used with &lt;code&gt;redux-thunk&lt;/code&gt;, i.e. the &lt;code&gt;dispatch&lt;/code&gt; and &lt;code&gt;getState&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;Also, it&amp;#39;s about what Redux-First Router stands for. The fact that from the start you are encouraged to get the most out of Redux is a meaningful thing. Philosophy is useful. The same way all the contracts Dan Abramov enforced on us have made our lives easier.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#further-unique-features&quot; id=&quot;further-unique-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Further unique features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#further-unique-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#39;s a quick list of more of the unique and powerful things you can do with Redux-First Router:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;route-triggered data-fetching&lt;/li&gt;
&lt;li&gt;Prefetching of (both chunks + data!)&lt;/li&gt;
&lt;li&gt;React Native support (Android BackHandler, Deep Linking, Push Notifications)&lt;/li&gt;
&lt;li&gt;Sick stuff to make React Navigation &lt;em&gt;actually&lt;/em&gt; work with Redux (this is our best stuff which you&amp;#39;ll be hearing about soon)&lt;/li&gt;
&lt;li&gt;Top notch server-side rendering idioms&lt;/li&gt;
&lt;li&gt;Everything you&amp;#39;d expect (redirects, 404s, scroll restoration, &lt;Link /&gt; components, automatic document.title management, page-leave confirmations, dynamic route adding for code-splitting, history entries state, the list goes on.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most attempts at Redux-specific routing have been pretty bare bones and never got around to polishing enough to make them a full-featured solution. While there&amp;#39;s always some feature that will need to be added, Redux-First Router is something I&amp;#39;ve committed to for the community. So no expense has been spared!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-first-router-&quot; id=&quot;why-did-you-develop-redux-first-router-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Redux-First Router&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-first-router-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s what I haven&amp;#39;t told anyone and SurviveJS are the first to hear it: I am a relative newcomer to React (December 2015). I decided to skip straight to React Native (so I could skip mastering webpack and all the related choices). I had a client project I had to build with a deadline.&lt;/p&gt;
&lt;p&gt;I jumped right in and built it using Redux. Near the end of the app, I had to add deep linking and push notifications. So I wanted to find a way to make the app URL-driven without changing much code. I began looking into other redux routing solutions for RN, and since those weren&amp;#39;t doing the trick, I decided to check out what they were doing on the plain web.&lt;/p&gt;
&lt;p&gt;I then realized there wasn&amp;#39;t anything anywhere that allowed you to build your Redux app in a &lt;em&gt;URL-independent way&lt;/em&gt;, yet while still having support for URLs. At that point, it occurred to me that the obvious solution was to make your regular flux standard actions somehow be representative of URLs.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s where the whole &amp;quot;action types as paths&amp;quot; concept was born. I built the router and had to change almost no code. Since all my actions were Flux Standard Actions with payload objects, it was only a matter of setting up the routing config and then doing a few changes in reducers.&lt;/p&gt;
&lt;p&gt;It was not all that complicated to do, so I was surprised that nobody had taken that route yet.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#tell-us-more-about-not-having-to-change-your-code&quot; id=&quot;tell-us-more-about-not-having-to-change-your-code&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Tell us more about not having to change your code&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#tell-us-more-about-not-having-to-change-your-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, the point is that you have fewer actions when using &lt;em&gt;Redux-First Router&lt;/em&gt;. Having fewer actions is a good, given how the number of actions can get out of control.&lt;/p&gt;
&lt;p&gt;Instead of having one &lt;em&gt;setter-style&lt;/em&gt; action to show a drawer, and another &lt;em&gt;setter-style&lt;/em&gt; action to close it (e.g. &lt;code&gt;&amp;#39;OPEN_DRAWER&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;CLOSE_DRAWER&amp;#39;&lt;/code&gt;), you simply have &lt;code&gt;&amp;#39;FEED&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;NOTIFICATIONS&amp;#39;&lt;/code&gt; which you&amp;#39;ll need anyway. Then in the reducers, you must add some &amp;quot;tear down&amp;quot; code to open and close the drawer when you visit these routes. For instance, when you visit &lt;code&gt;&amp;#39;NOTIFICATIONS&amp;#39;&lt;/code&gt; the &lt;code&gt;drawerOpen&lt;/code&gt; state is &lt;code&gt;true&lt;/code&gt; and when you visit &lt;code&gt;&amp;#39;FEED&amp;#39;&lt;/code&gt;, &lt;code&gt;drawerOpen&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s an example taken from the &lt;a href=&quot;https://medium.com/faceyspacey/redux-first-router-data-fetching-solving-the-80-use-case-for-async-middleware-14529606c262&quot;&gt;Redux-First Router solving the 80% use-case for Middleware article&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old approach with many setter actions&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;sidebarOpen&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; action &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-switch&quot; &gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;SIDEBAR_CLOSED&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;SIDEBAR_OPEN&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; sidebarOpen&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;New approach with fewer actions and smarter / fatter reducers:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;sidebarOpen&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; action &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-switch&quot; &gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;HOME&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;LIST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;VIDEO&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;LOGIN&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-case&quot; &gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;SETTINGS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; sidebarOpen&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that&amp;#39;s all I had to do - change my reducers, remove unnecessary actions being dispatched, make my reducers respond intelligently to a wider variety of actions, and voilà! In record time I now had URLs and could deep link into my app.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been working on completing my &lt;em&gt;Universal&lt;/em&gt; product line. That will have some exciting connections to Redux-First Router. The hint is the word &amp;quot;prefetching&amp;quot;. My overall main priority has been building &amp;quot;Next.js for the rest of us&amp;quot;. Put another way, the frameworkless approach to the best features from Next.js.&lt;/p&gt;
&lt;p&gt;Next.js is great, but very few power users want to get locked in their walled garden. So by the time I&amp;#39;m done with my initial vision, the only reasons to use Next.js will be that webpack configuration is either too much for you or just something you would rather not deal with.&lt;/p&gt;
&lt;p&gt;For truly professional apps, I can&amp;#39;t see how seasoned developers would want it any other way. If you&amp;#39;re aiming for the top spot in your given market, you want complete customization available to you.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-redux-first-router-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-redux-first-router-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;redux-first-router&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-redux-first-router-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Simultaneous server-side rendering (SSR) and code splitting will become significant. It&amp;#39;s been a gritty, time-consuming problem and nobody has wanted to solve it. My view is that the single page application is dead, and if you&amp;#39;re not simultaneously SSRing and splitting you&amp;#39;re doing it &amp;quot;wrong.&amp;quot;&lt;/p&gt;
&lt;p&gt;Traffic from Google is the biggest driver for many businesses. It is a key component of basically anything online and to go without SSR is a mistake. Given the tools we are using are so heavy regarding bytes, it is also a mistake not to split your code. Both need to be done together.&lt;/p&gt;
&lt;p&gt;By the way, not splitting doesn&amp;#39;t just increase bounce rates, it also compounds the &lt;em&gt;Google problem&lt;/em&gt;, since Google likes fast sites.&lt;/p&gt;
&lt;p&gt;Until &lt;a href=&quot;https://medium.com/@faceyspacey/code-cracked-for-code-splitting-ssr-in-reactlandia-react-loadable-webpack-flush-chunks-and-1a6b0112a8b8&quot;&gt;now&lt;/a&gt;, doing both SSR and code splitting has been a hair-pulling experience. Most people just gave up. I won&amp;#39;t get into the nitty gritty of what the challenge is today. But you can read my &lt;a href=&quot;https://medium.com/@faceyspacey/code-cracked-for-code-splitting-ssr-in-reactlandia-react-loadable-webpack-flush-chunks-and-1a6b0112a8b8&quot;&gt;code cracked for SSR + Splitting article&lt;/a&gt; and the recent &lt;a href=&quot;https://medium.com/faceyspacey/announcing-react-universal-component-2-0-babel-plugin-universal-import-5702d59ec1f4&quot;&gt;React Universal Component 2.0 launch article&lt;/a&gt; to learn why.&lt;/p&gt;
&lt;p&gt;Oh, and by the way, SSR with Redux-First Router is the most idiomatic Redux has ever been on the server. And due to the way my &lt;strong&gt;Universal&lt;/strong&gt; product line works regardless of which router you use, simultaneous SSR and code splitting is a dream with Redux-First Router. There is still some stuff left to do, and if you&amp;#39;ve heard that splitting isn&amp;#39;t related to routing, you&amp;#39;ve been misled. To do it at the highest level, you need to do prefetching.&lt;/p&gt;
&lt;p&gt;So the connection between the router and splitting is a simple interface to specify which route to prefetch. That&amp;#39;s all. Redux-First Router is the first solution that does this. Next.js has &lt;code&gt;&amp;lt;Link prefetch /&amp;gt;&lt;/code&gt;, but Redux-First Router has something far more powerful: automatic pre-fetching based on your current state, such as the current page a user is on, as recorded in Redux state. There&amp;#39;s a one-time setup, but once it&amp;#39;s working, potential next routes will be pre-fetched.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s one final thing to know about how Redux-First Router prefetching works: not just the &amp;quot;chunk&amp;quot; is prefetched, but the data from your route thunks as well!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Question your intentions before you do anything. You&amp;#39;ll waste your time doing the wrong thing with intentions that are likely to shift and evolve.&lt;/p&gt;
&lt;p&gt;The paradox is that it takes a long time to reach the sort of maturity where your intentions become &amp;quot;better&amp;quot;. I started out in the game, not as a developer, but an entrepreneur wanting to build an empire. Reality has long since kicked my ass as I forced myself to become a coder to dig myself out of a hole. That is to say, &lt;em&gt;a long, VERY LONG, history&lt;/em&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#it-s-not-about-passion-it-s-about-crafstmanship&quot; id=&quot;it-s-not-about-passion-it-s-about-crafstmanship&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;It&amp;#39;s Not About Passion, It&amp;#39;s About Crafstmanship&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#it-s-not-about-passion-it-s-about-crafstmanship&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Mastering this craft is time-consuming. And it&amp;#39;s not about passion. I like to think of myself as a straight-shooter cowboy type with a clarity of vision. Sure I have a passion for software, but it&amp;#39;s more about the natural enthusiasm for creation and conception in general.&lt;/p&gt;
&lt;p&gt;The truth is I enjoy other things outside of staring at a screen far more. For me, it&amp;#39;s about being a craftsman as a matter of maturity and integrity. To pay the bills, create value, and make real the stuff that only exists in my mind as I&amp;#39;m innately compelled to do.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve built the open source stuff I&amp;#39;ve built primarily because I refused to go another project without these boxes checked.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#don-t-focus-on-open-source&quot; id=&quot;don-t-focus-on-open-source&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Don&amp;#39;t Focus on Open Source&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#don-t-focus-on-open-source&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Also, don&amp;#39;t focus on open source. If you do, make sure that your intentions are truly pure and that it makes sense for the juncture where you happen to be. For me, I have things I plan to create, and for the time being, I have the luxury to go the long first-principled route, which happens to align with open source contribution. After all, getting your creations in front of the most people is what it&amp;#39;s all about.&lt;/p&gt;
&lt;p&gt;But before anything else, get out in the real world. It&amp;#39;s too easy to waste our lives a way in front of a computer. You&amp;#39;ll miss everything. So with that thought, who has time for willy-nilly open source projects? Not me. If you do open source, make it count financially in one way or another.&lt;/p&gt;
&lt;p&gt;There are better places you can &amp;quot;give&amp;quot; and interact outside the digital realm. Programming is a business tool, a means to an end. No shame in that. Be about your business. Don&amp;#39;t hide behind technology, whether that&amp;#39;s your phone or immersing yourself in work. Learn people, follow what truly excites you.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#empire-building-is-fool-s-gold&quot; id=&quot;empire-building-is-fool-s-gold&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Empire Building is Fool&amp;#39;s Gold&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#empire-building-is-fool-s-gold&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And if your intention is to build an empire and &lt;em&gt;&amp;quot;change the world!&amp;quot;&lt;/em&gt;, I sincerely ask you to question what that is &lt;em&gt;really about&lt;/em&gt; for you. Most of the things we&amp;#39;re building, someone else will build in a matter of time. The world doesn&amp;#39;t need you to change it, and you&amp;#39;re going to go through a lot of unnecessary pain trying. That&amp;#39;s all I&amp;#39;ll say about that for now.&lt;/p&gt;
&lt;p&gt;Doing what&amp;#39;s natural for you is the most important thing. Forcing anything will lead to bad results. But we&amp;#39;re only human, and &lt;em&gt;forcing&lt;/em&gt; is more often than not a core aspect of our journey--to getting somewhere where we no longer force things.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#force-yourself-to-become-a-better-programmer&quot; id=&quot;force-yourself-to-become-a-better-programmer&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Force Yourself to Become a Better Programmer&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#force-yourself-to-become-a-better-programmer&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So my advice to new programmers is: skip college lol, get yourself into a jam (or 2 or 3 or more lol) where you have to complete a product, and &lt;strong&gt;&lt;em&gt;force&lt;/em&gt;&lt;/strong&gt; yourself to become a better a programmer as the only option you perceive you have. Then after you know a thing or two with conviction, build something only you have the unique insights to build.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Interview someone who&amp;#39;s leading the serverless charge when it comes to React. That&amp;#39;s another trend that will explode soon as a few more puzzle pieces come together. Perhaps the &lt;a href=&quot;https://github.com/dawson-org/dawson-cli&quot;&gt;Dawson&lt;/a&gt; guys. I haven&amp;#39;t tried it yet, but I&amp;#39;d love to see serverless made stupid simple for the React crowd, and they seem to be on that path.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s someone else who you should interview: &lt;a href=&quot;https://github.com/nchanged&quot;&gt;@nchanged&lt;/a&gt; from &lt;a href=&quot;https://github.com/fuse-box/fuse-box&quot;&gt;FuseBox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Perhaps I have an addiction to debunking stale solutions. Even though I get a tremendous amount of value from webpack, I&amp;#39;d love to see it built from the ground up, and everything made a lot simpler while still being flexible. I know I&amp;#39;m not alone in that feeling. FuseBox seems to show promise of being able to do that, but perhaps it&amp;#39;s easier said than done. Webpack is also getting easier by the day, so it may be unnecessary.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve ever felt Redux deserved a routing solution native to its workflow, give Redux-First Router a try :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview James! Redux-First Router seems like a great addition to the ecosystem!&lt;/p&gt;
&lt;p&gt;Below you have a chronological history of how my James&amp;#39; product lines have been progressing thus far:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redux-First Router:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@faceyspacey/pre-release-redux-first-router-a-step-beyond-redux-little-router-cd2716576aea&quot;&gt;Release Article -- Everything Doesn&amp;#39;t Need To Be A Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/faceyspacey/redux-first-router-lookin-sexy-on-code-sandbox-d9d9bea15053&quot;&gt;The &amp;quot;Sexy&amp;quot; On CodeSandBox Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/faceyspacey/redux-first-router-data-fetching-solving-the-80-use-case-for-async-middleware-14529606c262&quot;&gt;The 80% Use Case Article: Data-Fetching + Middleware Debunking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Universal:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@faceyspacey/code-cracked-for-code-splitting-ssr-in-reactlandia-react-loadable-webpack-flush-chunks-and-1a6b0112a8b8&quot;&gt;&amp;quot;Code Cracked&amp;quot;--The Article That Started It All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@faceyspacey/how-to-use-webpacks-new-magic-comment-feature-with-react-universal-component-ssr-a38fd3e296a&quot;&gt;The &amp;quot;Magic Comments&amp;quot; Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/faceyspacey/webpacks-import-will-soon-fetch-js-css-here-s-how-you-do-it-today-4eb5b4929852&quot;&gt;An Accidentally Popular Article On Importing Both JS + CSS (&amp;quot;dual imports&amp;quot;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/faceyspacey/announcing-react-universal-component-2-0-babel-plugin-universal-import-5702d59ec1f4&quot;&gt;Announcing: React Universal Component 2.0 &amp;amp; babel-plugin-universal-import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Repositories:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/faceyspacey/redux-first-router&quot;&gt;redux-first-router&lt;/a&gt; 🚀&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/faceyspacey/react-universal-component&quot;&gt;react-universal-component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/faceyspacey/webpack-flush-chunks&quot;&gt;webpack-flush-chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/faceyspacey/extract-css-chunks-webpack-plugin&quot;&gt;extract-css-chunks-webpack-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/faceyspacey/babel-plugin-universal-import&quot;&gt;babel-plugin-universal-import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, if you&amp;#39;d like to give Redux-First Router a try, you can do so right here:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/github/faceyspacey/redux-first-router-codesandbox/tree/master/?module=%2FroutesMap.js&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; sandbox=&quot;allow-modals allow-forms allow-popups allow-scripts allow-same-origin&quot;&gt;&lt;/iframe&gt;
</content></entry><entry><title>documentation.js - The documentation system for modern JavaScript - Interview with Tom MacWright</title><id>adocumentationjsthedocumentationsystemformodernjavascriptinterviewwithtommacwright2017-07-31t00:00:00z</id><link href="https://survivejs.com/blog/documentationjs-interview/"></link><updated>2017-07-31T00:00:00Z</updated><content type="html">&lt;p&gt;When you are using a library seriously, you will spend a lot of time with its documentation. It&amp;#39;s one of those things that sets good libraries apart from the rest. Even a fantastic idea can go overlooked if it&amp;#39;s too difficult to get into and understand.&lt;/p&gt;
&lt;p&gt;Writing good documentation isn&amp;#39;t easy. &lt;a href=&quot;https://twitter.com/tmcw&quot;&gt;Tom MacWright&lt;/a&gt; has developed &lt;a href=&quot;http://documentation.js.org/&quot;&gt;documentation.js&lt;/a&gt; to help exactly with this.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/69a180136f3c237769452a4af0bbb9a1?s=200&quot; alt=&quot;Tom MacWright&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

At work, I&amp;#39;m a software engineer but also spend a lot of time writing, designing products, and so on. Until recently, that was in the mapping space at &lt;a href=&quot;https://mapbox.com/&quot;&gt;Mapbox&lt;/a&gt;. I wrote lots of libraries that sliced and diced geospatial data, showed it on screens, and helped people design maps.
&lt;/p&gt;

&lt;p&gt;The last big project I worked on there was &lt;a href=&quot;https://www.mapbox.com/mapbox-studio/&quot;&gt;Mapbox Studio&lt;/a&gt;. There are enough hard problems in the world of maps to spend a lifetime trying to solve them, but I decided to try out some new domains. I&amp;#39;ve been taking a few months off to relax, so recently I&amp;#39;ve been spending more time training a few bonsai trees and maintaining open source projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-documentation-js-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-documentation-js-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;documentation.js&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-documentation-js-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;documentation.js&lt;/em&gt; is a program that generates documentation from the source code of other programs. The documentation is a combination of things that you write, like paragraphs, explaining what a function does, and things that &lt;em&gt;documentation.js&lt;/em&gt; itself can infer, like the types of parameters and return values.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-documentation-js-work-&quot; id=&quot;how-does-documentation-js-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;documentation.js&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-documentation-js-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To infer facts about source code, we stand on the shoulders of a giant, which in this case is named &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt;. That project has an excellent JavaScript parser called &lt;a href=&quot;https://github.com/babel/babylon&quot;&gt;Babylon&lt;/a&gt;, as well as lots of other tools for interacting with parsed JavaScript structures. Using these helpers, we can, for instance, find all functions declared in a file, ask them for parameter types, names, return values, and lots more.&lt;/p&gt;
&lt;p&gt;Then there&amp;#39;s the trickiest step: combining that automatically-derived documentation with explicit documentation, things that people write themselves as source code comments. That&amp;#39;s all done by merging tree data-structures and so on, and is one of the parts I most want to refactor!&lt;/p&gt;
&lt;p&gt;Then, finally, it has a significant output system that can generate JSON, Markdown, and HTML documentation. I want the output to be &lt;em&gt;great&lt;/em&gt; as a carrot for people to write documentation, so the project itself is responsible for at least the official theme.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-documentation-js-differ-from-other-solutions-&quot; id=&quot;how-does-documentation-js-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;documentation.js&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-documentation-js-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Documentation is a crowded space! There are lots of documentation generators out there, which is why I maintain a big list of them on a wiki page called &lt;a href=&quot;https://github.com/documentationjs/documentation/wiki/See-also&quot;&gt;See Also&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The biggest player out there is &lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc&lt;/a&gt;, so I&amp;#39;ll describe how &lt;em&gt;documentation.js&lt;/em&gt; is different than it. First off, &lt;em&gt;documentation.js&lt;/em&gt; has a system for automatically figuring out which files to document - doing the same trick as webpack or browserify to figure out what requires what and which functions are exported. I wanted that, so that code itself would be the authority that tells us what is a public interface and what is private.&lt;/p&gt;
&lt;p&gt;The other big difference is that &lt;em&gt;documentation.js&lt;/em&gt; aims to be universal and modern. We want to support new JavaScript features shortly after they&amp;#39;re announced, and to use &lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt; types as information for automatic documentation. I was seeing so much information that previously fit into documentation, like property types, instead of fitting into type systems like Flow, and I want to embrace that trend by leveraging that type information for documentation too.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-documentation-js-&quot; id=&quot;why-did-you-develop-documentation-js-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;documentation.js&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-documentation-js-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was using JSDoc quite a bit - first for the &lt;a href=&quot;http://turfjs.org/&quot;&gt;Turf&lt;/a&gt; project, and then for &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/&quot;&gt;Mapbox GL JS documentation&lt;/a&gt;. JSDoc is a great tool and still in many ways better and more robust than &lt;em&gt;documentation.js&lt;/em&gt;. But it&amp;#39;s in a place where lots of people rely on its stability, and the JavaScript ecosystem has changed so much since it was designed. My thought was that building something from scratch could make new styles of documentation possible.&lt;/p&gt;
&lt;p&gt;Plus, it&amp;#39;s a lot of fun. Documentation generation might seem bland at first glance, but it&amp;#39;s an adventure through parsing, generation, static analysis, and so much more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My highest priority is to grow the &lt;em&gt;documentation.js&lt;/em&gt; community. I have lots of strategies for doing this, but nothing has worked so far. That&amp;#39;s the most important thing to me, and I also think to most maintainers of large projects.&lt;/p&gt;
&lt;p&gt;The other thing is learning from other projects. I&amp;#39;ve been amazed by the progress being made by projects like &lt;a href=&quot;https://esdoc.org/&quot;&gt;ESDoc&lt;/a&gt; and always think there are better ways I could structure &lt;em&gt;documentation.js&lt;/em&gt;. Plus, there&amp;#39;s an unending list of tasks that just entail keeping up with JavaScript itself: there are still some features like decorators that we don&amp;#39;t support yet.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-documentation-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-documentation-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;documentation.js&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-documentation-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s bright but uncertain: I love where the project is currently, but it&amp;#39;s substantial and has many areas that could use their owners. In a perfect world we&amp;#39;d have a team of 4 or 5 and, for an example of the ownership, support for TypeScript could be &amp;quot;owned&amp;quot; by someone who needed and used that support on a daily basis. As it stands right now, I&amp;#39;m pumped when another project or company adopts the module, but the ratio of work to contributors continues to increase.&lt;/p&gt;
&lt;p&gt;Web development is weird and crazy right now. I think the biggest, most exciting development we&amp;#39;ll see in the next year is the effect of the bleeding-edge tech that was introduced two years ago becoming standard in all browsers. Native support for ES6 modules, for instance, will change the landscape.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, stay patient. Coding is challenging and frustrating, and the single most reliable sign I&amp;#39;ve noticed of whether people will succeed is their ability to cope with frustration. You might need to laugh at yourself, or stop and breathe, or take a walk. But find something that works, because the feeling of being fooled by a program that &lt;em&gt;should&lt;/em&gt; work will never end.&lt;/p&gt;
&lt;p&gt;Secondly, you can get far by only working on the surface level, but you really shouldn&amp;#39;t. Dig in, learn what&amp;#39;s under the hood, read the code, and you&amp;#39;ll get better, faster.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wooorm&quot;&gt;Titus Wormer&lt;/a&gt; has been doing for natural language what Babel has done for JavaScript. &lt;a href=&quot;https://twitter.com/LeaVerou&quot;&gt;Lea Verou&lt;/a&gt;&amp;#39;s &lt;a href=&quot;https://mavo.io/&quot;&gt;mavo&lt;/a&gt; project is incredibly fascinating. &lt;a href=&quot;https://github.com/maryrosecook&quot;&gt;Mary Rose Cook&lt;/a&gt;&amp;#39;s projects about gaming, programming languages, and entry points for new people to tech are amazing.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for having me! Stay chill, and remember: the open source community is just some people, and it could be you too. Only you can fight maintainer burnout by being friendly and contributing code, documentation, or even just love to your favorite projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Tom! I hope people find your tool and we get enhanced documentation as a result.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;http://documentation.js.org/&quot;&gt;documentation.js site&lt;/a&gt; and &lt;a href=&quot;https://github.com/documentationjs/documentation&quot;&gt;documentation.js GitHub page&lt;/a&gt; to learn more about the project.&lt;/p&gt;
</content></entry><entry><title>Rill - Universal web application framework - Interview with Dylan Piercey</title><id>arilluniversalwebapplicationframeworkinterviewwithdylanpiercey2017-07-28t00:00:00z</id><link href="https://survivejs.com/blog/rill-interview/"></link><updated>2017-07-28T00:00:00Z</updated><content type="html">&lt;p&gt;There&amp;#39;s a lot of talk about universal web applications but developing them tends to be harder than it might sound. You will have to worry about the differences between environments, and you will find problems you might not have anticipated.&lt;/p&gt;
&lt;p&gt;To understand the topic better, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/dylan_piercey&quot;&gt;Dylan Piercey&lt;/a&gt;, the author of &lt;a href=&quot;https://rill.site/&quot;&gt;Rill&lt;/a&gt;, a framework designed to address this particular problem.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/b61015f2b07ed0be4478713bed9348ef?s=200&quot; alt=&quot;Dylan Piercey&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I like to tinker. As a kid, I enjoyed modding video games and got into programming when I was 12 years old. I&amp;#39;ve programmed professionally for about four years now and fell in love with the massive community behind web development.
&lt;/p&gt;

&lt;p&gt;Open source software has been my peaceful haven since I learned git. For me, programming is fun, especially on my terms, and FOSS is exactly that.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rill-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-rill-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Rill&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rill-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; is my two-year-old baby. In JavaScript terms that means it&amp;#39;s just turned 21. Jokes aside &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; is a tool that allows you to learn fewer tools. It is &lt;a href=&quot;https://github.com/koajs/koa&quot;&gt;Koa&lt;/a&gt; designed and optimized from the ground up to work in the browser.&lt;/p&gt;
&lt;p&gt;So how does this help? Well, first of all, you get one router for both the browser and Node, meaning you &lt;em&gt;can&lt;/em&gt; drop react-router and &lt;a href=&quot;https://github.com/koajs/koa&quot;&gt;Koa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, you also get to think of building web applications as if you have a &lt;em&gt;zero latency node server&lt;/em&gt; in every user&amp;#39;s browser. With this, you can quickly create fault-tolerant, progressively-enhanced websites with minimal effort.&lt;/p&gt;
&lt;p&gt;Finally, it is a flexible abstraction, just like it is on the server-side already in &lt;a href=&quot;https://github.com/expressjs/express&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;https://github.com/koajs/koa&quot;&gt;Koa&lt;/a&gt;. With &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; I have been able to replace many tools including Redux. It also supports many different rendering engines with more on the way. &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; also plays nicely with all of the other libraries making upgrading a bit easier.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rill-work-&quot; id=&quot;how-does-rill-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rill&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rill-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depends on where you look. &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; on the server-side is more or less a rip-off of &lt;a href=&quot;https://github.com/koajs/koa&quot;&gt;Koa&lt;/a&gt; with some careful forethought, but in the browser things get interesting.&lt;/p&gt;
&lt;p&gt;In the browser, &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; works by intercepting all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; clicks and &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; submissions and pumping them through a browser-side router with the same API as on the server-side. It supports pretty much anything you can think of including cookies, redirects and &lt;a href=&quot;https://github.com/rill-js/session&quot;&gt;sessions&lt;/a&gt;, all isomorphically implemented (i.e. on both the server and browser).&lt;/p&gt;
&lt;p&gt;There are a few huge wins here. For instance, you don&amp;#39;t have to use any particular &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; tags or similar and you aren&amp;#39;t tied to &lt;a href=&quot;https://facebook.github.io/react&quot;&gt;React&lt;/a&gt;. The server-side also doesn&amp;#39;t need to do anything fancy to handle links and forms. Lastly, you already know how links and forms work, so just use them.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;d like to take a look at Rill&amp;#39;s link/form hijacking logic it has been separated out into &lt;a href=&quot;https://github.com/rill-js/http/blob/master/adapter/document.js&quot;&gt;@rill/http&lt;/a&gt;, making the main &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; repository completely universal!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rill-differ-from-other-solutions-&quot; id=&quot;how-does-rill-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rill&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rill-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It provides a unified router. While developing universal applications, I often found myself writing routes twice. As if that wasn&amp;#39;t bad enough the syntax for the routers were often vastly different - try comparing &lt;a href=&quot;https://github.com/ReactTraining/react-router&quot;&gt;react-router&lt;/a&gt; with &lt;a href=&quot;https://github.com/expressjs/express&quot;&gt;Express&lt;/a&gt; and you&amp;#39;ll see what I mean.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; aims to simplify that and provides a consistent routing interface between the server and browser. It also works perfectly fine as a standalone router in either one.&lt;/p&gt;
&lt;p&gt;Take for instance the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; rill &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;rill&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; bodyMiddleware &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;@rill/body&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; reactMiddleware &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;@rill/react&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Setup app.&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;rill&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Use isomomorphic React renderer.&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;reactMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Use an isomorphic form-data / body parser.&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;bodyMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Register our form page route as normal.&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/my-form-page&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; res &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
 res&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;MyForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Setup our post route.&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/my-form-submit&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; res &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Analyze the response body (works in node and the browser).&lt;/span&gt;
  req&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//-&amp;gt; { email: ... }&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Perform the business logic (typically calling some api).&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;...&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Finally, take the user somewhere meaningful.&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;redirect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/thank-you&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Start app.&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; port&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3000&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Simple full page react component with a form.&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;MyForm&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;My App&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;action&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;/my-form-submit&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;POST&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          Email&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;submit&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Subscribe&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

        &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;/app.js&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how similar this looks to the server only code. You get to use middleware and routing in a way you probably already know. However, the above example when compiled with &lt;a href=&quot;https://webpack.js.org&quot;&gt;webpack&lt;/a&gt;, &lt;a href=&quot;https://rollupjs.org&quot;&gt;Rollup&lt;/a&gt;, or &lt;a href=&quot;http://browserify.org&quot;&gt;Browserify&lt;/a&gt; will also work in the browser!&lt;/p&gt;
&lt;p&gt;For a more detailed example check out the &lt;a href=&quot;https://github.com/rill-js/todomvc&quot;&gt;TodoMVC&lt;/a&gt; implementation with &lt;a href=&quot;https://facebook.github.io/react&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rill-&quot; id=&quot;why-did-you-develop-rill-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Rill&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rill-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve built 20+ websites and applications all of which needed strong SEO and proper fallbacks for our users using legacy browsers. It became a constant struggle to enhance content for modern browsers while maintaining support for older ones.&lt;/p&gt;
&lt;p&gt;Rather than building a server-side solution and then rebuilding a client side solution my goal was to make a framework that allowed me to do both at once. It was originally inspired by &lt;a href=&quot;https://github.com/kentjs/koa-client&quot;&gt;koa-client&lt;/a&gt; and &lt;a href=&quot;https://github.com/matthewwithanm/monorouter&quot;&gt;monorouter&lt;/a&gt;, and it turned out to be a robust solution.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, that&amp;#39;s largely up to what I build next and what the community requires.
&lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; has been pretty stable for the past year. Most of the major work has caused no breaking changes.&lt;/p&gt;
&lt;p&gt;One of the more recent changes is that &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; is now able to run in a service worker, which I think could be interesting for offloading the router to another thread.&lt;/p&gt;
&lt;p&gt;Another thing that I have meant to explore is a creating a &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; middleware that works similarly to &lt;a href=&quot;http://pixelscommander.github.io/Viral.JS/#.WW5GmsYZNP0&quot;&gt;ViralJS&lt;/a&gt; allowing for distributed rendering of applications.&lt;/p&gt;
&lt;p&gt;Something that&amp;#39;s been in the back of my head for a while now is making &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; work on other platforms. The code has been formatted in such a way that the document logic has all been extracted into a single file, but I have limited experience with native applications and need a kick to get me going on this front.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rill-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-rill-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Rill&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rill-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; the future is hard to see. I&amp;#39;ve mentioned some obvious features above, but the point of it, as with any router, is to be flexible. &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; in my eyes is a foundation for isomorphic/universal apps and what I&amp;#39;ve built with it so far is only the tip of the iceberg.&lt;/p&gt;
&lt;p&gt;In general, I think that things are going to get simpler, faster and smaller. It never seems that way while I&amp;#39;m riding the wave of JavaScript frameworks, but at the same time things are constantly popping up like &lt;a href=&quot;https://svelte.technology&quot;&gt;svelte&lt;/a&gt; and &lt;a href=&quot;https://choo.io&quot;&gt;choo&lt;/a&gt;, which are all considerably simpler than their predecessors and also faster and smaller.&lt;/p&gt;
&lt;p&gt;However, the main reason I think this is the case is that the web will eventually bake in much more of the functionality that is needed for modern applications such as web components. I think the abstractions will get lighter and lighter until they fade away.&lt;/p&gt;
&lt;p&gt;At least I hope this trend continues. 😜&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Make a GitHub/Twitter account and follow everyone who&amp;#39;s doing something cool. You have teachers all around you, and excellent open source software sets a standard to which you can eventually live up to.&lt;/p&gt;
&lt;p&gt;Don&amp;#39;t sweat the stuff you don&amp;#39;t know but try to be aware of it. Learn things when you need them and actively search out new solutions when you find that yours are lacking.&lt;/p&gt;
&lt;p&gt;Find something fun to build. It&amp;#39;s far too easy for your day job to ruin programming for you. Try to find genuinely interesting and fun things and work on them when you have time.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d love to hear more from &lt;a href=&quot;https://github.com/patrick-steele-idem&quot;&gt;Patrick Steele-Idem&lt;/a&gt; on all of the crazy optimizations available with &lt;a href=&quot;https://github.com/marko-js/marko&quot;&gt;MarkoJS&lt;/a&gt; and where the team thinks it&amp;#39;s going. I hope a stable &lt;a href=&quot;https://github.com/rill-js/marko&quot;&gt;Rill integration&lt;/a&gt; is coming soon. 😄&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also constantly impressed by the quality of modules pumped out by &lt;a href=&quot;https://github.com/yoshuawuyts&quot;&gt;Yoshua Wuyts&lt;/a&gt; and would be interested in his approach to building them.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill&lt;/a&gt; is a lesser-known tool and I am always eager to receive community feedback. If anyone has any questions or just wants to chat, you can always find me on the &lt;a href=&quot;https://gitter.im/rill-js/rill&quot;&gt;gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks SurviveJS for the interview and &lt;a href=&quot;https://twitter.com/Rich_Harris&quot;&gt;Rich Harris&lt;/a&gt; for the recommendation.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Dylan! The approach Rill uses is refreshing and I hope people find it.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://rill.site/&quot;&gt;Rill site&lt;/a&gt; and &lt;a href=&quot;https://github.com/rill-js/rill&quot;&gt;Rill GitHub page&lt;/a&gt; to learn more about it.&lt;/p&gt;
</content></entry><entry><title>d-l-l - Easy, automatic, optimized DLL config handler for webpack - Interview with James Wiens</title><id>adlleasyautomaticoptimizeddllconfighandlerforwebpackinterviewwithjameswiens2017-07-24t00:00:00z</id><link href="https://survivejs.com/blog/dll-interview/"></link><updated>2017-07-24T00:00:00Z</updated><content type="html">&lt;p&gt;Perhaps one of my favorite &lt;a href=&quot;https://survivejs.com/webpack/optimizing/performance/&quot;&gt;webpack performance related tricks&lt;/a&gt; is setting up DLLs so that you &lt;em&gt;avoid work&lt;/em&gt;. The problem is that maintaining the setup requires time and effort. What if there was a better way?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/aretecode&quot;&gt;James Wiens&lt;/a&gt; has been exploring a  better solution with &lt;a href=&quot;https://www.npmjs.com/package/d-l-l&quot;&gt;d-l-l&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/ab0f2e5163119f3aeaaf52fe1739a655.jpg&quot; alt=&quot;James Wiens&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;James Wiens&lt;/figcaption&gt;&lt;/figure&gt;

  👋 I&amp;#39;m a flow state enthusiast and crafting code is my life&amp;#39;s passion. I&amp;#39;m from Vancouver, Canada, eh.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-d-l-l-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-d-l-l-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;d-l-l&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-d-l-l-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;d-l-l&lt;/em&gt; makes your webpack build faster in just a few lines, without having to waste time on the slow manual configuration steps required to use the &lt;a href=&quot;https://webpack.js.org/plugins/dll-plugin&quot;&gt;DllPlugin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The DllPlugin lets you pre-build the parts of your code that don&amp;#39;t often change (such as library code). This means when you change the parts that do change more often, webpack only needs to build these parts, which makes builds exponentially faster.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;d-l-l&lt;/em&gt; adds some helpful utilities for finding and adding dependencies and files that do not often change.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/478e8b8cdb937e6ffe9cfa542e31c42d.jpg&quot; alt=&quot;Webpack dinosaurs&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Webpack dinosaurs&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-s-a-minimal-example-using-d-l-l-&quot; id=&quot;what-s-a-minimal-example-using-d-l-l-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What&amp;#39;s a minimal example using &lt;em&gt;d-l-l&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-s-a-minimal-example-using-d-l-l-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; dll &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;d-l-l&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; dll
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Directory to resolve paths from&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Pass in webpack config&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Filter to only use non-dev dependencies&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;pkgDeps&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;deps&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; dev&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; all&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; deps&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Find all src files&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&apos;src&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/**/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;js&lt;span class=&quot;token operator&quot; &gt;|&lt;/span&gt;jsx&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&apos;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Filter to files last modified at least a day ago&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;lastModifiedFilter&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;days&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Return an array of webpack configurations&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;toConfig&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-d-l-l-work-&quot; id=&quot;how-does-d-l-l-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;d-l-l&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-d-l-l-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/d148142889188dfb43fec3401e51ada6.jpg&quot; alt=&quot;What if I told you that you could make a webpack build go from 1 minute to 1 second?&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;What if I told you that you could make a webpack build go from 1 minute to 1 second?&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;d-l-l&lt;/em&gt; creates an array of webpack configuration consisting of a DLL-only webpack config followed by the existing config from your webpack.config.js.&lt;/p&gt;
&lt;p&gt;Cache files are created in a &lt;code&gt;.fliphub&lt;/code&gt; folder, which allows some smart-ish checks such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Analysis of your webpack config&lt;/li&gt;
&lt;li&gt;Extraction of essential parts from it, such as the output path&lt;/li&gt;
&lt;li&gt;Usage of the configuration passed via &lt;code&gt;.config()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The cache files also allow &lt;em&gt;d-l-l&lt;/em&gt; to add the decorated dll config if no cache folder or files exist or if there are no manifest files showing what was built and where.&lt;/p&gt;
&lt;p&gt;When the cache should be cleared is configurable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when &lt;a href=&quot;https://github.com/fliphub/d-l-l/wiki/%F0%9F%8C%90-api#cachebustingfiles&quot;&gt;cache-busting-files&lt;/a&gt; are modified&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fliphub/d-l-l/wiki/%F0%9F%8C%90-api#everyx&quot;&gt;every X (default 33) builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fliphub/d-l-l/wiki/%F0%9F%8C%90-api#staletime&quot;&gt;a day or more has passed since the last build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-example&quot; id=&quot;advanced-example&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Example&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#39;ve covered a bit of background, an advanced use case should be more understandable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; dll &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;d-l-l&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; configs &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; dll
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Verbose debugging&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Force building of DLL&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;shouldBeUsed&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Return original config, makes it easy to swap side-effect free&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;og&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Same as in the simple example above&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Provide resolved dependency paths manually&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;deps&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;lodash&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;inferno&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;dep &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; require&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;dep&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Filter dependencies in package.json&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;pkgDeps&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;deps&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; devDeps&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; allDeps&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Ignore dependencies that have `dev` in them.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Development tools are one example.&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; deps&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;dep &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;&lt;span class=&quot;token regex&quot; &gt;/dev/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;dep&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Find files matching a glob&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&apos;src&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/**/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;js&lt;span class=&quot;token operator&quot; &gt;|&lt;/span&gt;jsx&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&apos;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;lastModifiedFilter&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;days&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Return an array of webpack configurations&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;toConfig&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-d-l-l-differ-from-other-solutions-&quot; id=&quot;how-does-d-l-l-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;d-l-l&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-d-l-l-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are no other solutions. The only other option is do everything &lt;em&gt;d-l-l&lt;/em&gt; does yourself manually. Doing this means maintaining the additional DLL configuration and referencing it in your code. The point of &lt;em&gt;d-l-l&lt;/em&gt; is to avoid this complexity.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; &lt;a href=&quot;https://www.npmjs.com/package/autodll-webpack-plugin&quot;&gt;autodll-webpack-plugin&lt;/a&gt; is a comparable plugin based solution.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-d-l-l-&quot; id=&quot;why-did-you-develop-d-l-l-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;d-l-l&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-d-l-l-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was developing &lt;a href=&quot;https://github.com/fliphub/fliphub&quot;&gt;fliphub&lt;/a&gt; and found there was no webpack documentation for the &lt;a href=&quot;https://webpack.js.org/plugins/dll-plugin&quot;&gt;DllPlugin&lt;/a&gt;. As I researched and experimented with the plugin, I discovered how powerful it was but how clunky it was to configure it.&lt;/p&gt;
&lt;p&gt;To expand on what I mean by clunky, the DllPlugin requires two separate webpack configurations! The order is important - the DLL config has to be built before the normal config. If the normal config uses the &lt;a href=&quot;https://webpack.js.org/plugins/dll-plugin&quot;&gt;DLLReferencePlugin&lt;/a&gt; before the DLL config has been built, the build will fail.&lt;/p&gt;
&lt;p&gt;Adding even more commands to the build process wasn&amp;#39;t going to happen, so &lt;em&gt;d-l-l&lt;/em&gt; was born.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;d-l-l&lt;/em&gt; will be updated with more features. In an ideal future, the core solution it provides would be integrated into webpack core.&lt;/p&gt;
&lt;p&gt;The minimum, most effective plan to integrate it into the core would involve the following changes for &lt;em&gt;d-l-l&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trim down dependencies&lt;/li&gt;
&lt;li&gt;Improve focus in logic and the code domain&lt;/li&gt;
&lt;li&gt;Extract features enabling ease of use&lt;/li&gt;
&lt;li&gt;Cover edge cases with air-tight tests&lt;/li&gt;
&lt;li&gt;Merge to webpack core&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once that would be done, the whole community could benefit from the functionality.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#chain-able&quot; id=&quot;chain-able&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;chain-able&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#chain-able&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All of the libraries I create use &lt;a href=&quot;https://github.com/fluents/chain-able&quot;&gt;chain-able&lt;/a&gt;, which enables me to easily create interfaces that describe their intentions and make simple solutions for complex problems.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-wrap&quot; id=&quot;webpack-wrap&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;webpack-wrap&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-wrap&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I plan to create a wrapper library around webpack (webpack-wrap), allowing easy and smart configuration by following this plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract the &lt;a href=&quot;https://github.com/fliphub/d-l-l&quot;&gt;d-l-l&lt;/a&gt; wrapper&lt;/li&gt;
&lt;li&gt;Simplify splitting with the &lt;a href=&quot;https://github.com/aretecode/webpack-plugin-split&quot;&gt;webpack-split-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enable webpack merging using &lt;a href=&quot;https://github.com/mozilla-neutrino/neutrino-dev&quot;&gt;neutrino&lt;/a&gt; presets in your webpack config&lt;/li&gt;
&lt;li&gt;Finish &lt;a href=&quot;https://www.npmjs.com/package/happypack2&quot;&gt;happypack2&lt;/a&gt; and &lt;a href=&quot;https://github.com/fluents/chain-able-webpack&quot;&gt;chain-able-webpack&lt;/a&gt; which allows for:&lt;ul&gt;
&lt;li&gt;Automatic wrapping of configs in a similar fashion&lt;/li&gt;
&lt;li&gt;Automatic traversable path resolving (resolving all relative paths in your config)&lt;/li&gt;
&lt;li&gt;Integration with &lt;a href=&quot;https://github.com/webpack/webpack-cli&quot;&gt;webpack-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hints for common misconfigurations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tools and language support can be improved. Developers want to use the coolest hottest sugar syntax which sometimes still needs advanced skills.&lt;/li&gt;
&lt;li&gt;Companies competing in open source for developers will promote their particular flavor of the latest and greatest tech.&lt;/li&gt;
&lt;li&gt;Artificial intelligence will be easier to use and more widespread in both open source and private code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I couldn&amp;#39;t fit it reasonably in this block, so I made it into a repo: &lt;a href=&quot;https://github.com/aretecode/awesome-advice&quot;&gt;awesome-advice&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15-minute rule (proverbial)&lt;ul&gt;
&lt;li&gt;If you ask for help on a problem before doing at least 15 minutes of work researching, debugging, and defining your problem, you&amp;#39;re doing the other person a disservice.&lt;/li&gt;
&lt;li&gt;If you wait longer than 45 minutes and you are stuck, you are doing yourself a disservice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The three essential skills in programming:&lt;ul&gt;
&lt;li&gt;#1. how to research&lt;/li&gt;
&lt;li&gt;#2. how to research&lt;/li&gt;
&lt;li&gt;#3. how to research&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The better the problem is defined, the better the solution will be&lt;/li&gt;
&lt;li&gt;Have &lt;a href=&quot;https://twitter.com/svensauleau/status/856424137493008384&quot;&gt;variable names describe their intention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Premature optimization is the root of all evil&lt;/li&gt;
&lt;li&gt;Make it debuggable&lt;/li&gt;
&lt;li&gt;Join the community and contribute&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eliperelman&quot;&gt;Eli Perelman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nchanged&quot;&gt;nchanged&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview James! I hope this work eventually finds its way to webpack proper. That would make the approach more approachable to a lot of people.&lt;/p&gt;
&lt;p&gt;You can find &lt;a href=&quot;https://github.com/fliphub/d-l-l&quot;&gt;d-l-l on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also the following resources for further information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/dll&quot;&gt;Official webpack DLL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://robertknight.me.uk/posts/webpack-dll-plugins/&quot;&gt;Robert Knight&amp;#39;s article on the DllPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://engineering.invisionapp.com/post/optimizing-webpack/&quot;&gt;InVision on optimizing webpack builds with the DllPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/connect-the-dots/caching-assets-long-term-with-webpack-5ad24a4c39bd&quot;&gt;Caching assets long term with the DllPlugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/36986460/selecting-webpack-dll-bundle-via-scope-mode&quot;&gt;DllPlugin question and answer on Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Material-UI - React Components that Implement Google&apos;s Material Design - Interview with Olivier Tassinari</title><id>amaterialuireactcomponentsthatimplementgoogle39smaterialdesigninterviewwitholiviertassinari2017-07-21t00:00:00z</id><link href="https://survivejs.com/blog/material-ui-interview/"></link><updated>2017-07-21T00:00:00Z</updated><content type="html">&lt;p&gt;Design is difficult as you have to come up with a set of rules to describe it – a system. You don&amp;#39;t always have to devise one yourself, and &lt;a href=&quot;https://material.io/&quot;&gt;Material Design&lt;/a&gt; by Google is one starting point.&lt;/p&gt;
&lt;p&gt;To understand the topic better, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/olivtassinari&quot;&gt;Olivier Tassinari&lt;/a&gt;, one of the authors of &lt;a href=&quot;https://github.com/callemall/material-ui&quot;&gt;Material UI&lt;/a&gt;. It&amp;#39;s a collection of React components which implement the system.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/e2b3127c877367bce1892635ffe153d0?s=200&quot; alt=&quot;Olivier Tassinari&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I spent my childhood mastering LEGO, but I ended up as a software engineer. I started with web development back in 2008. I went on to graduate from one of the most prestigious and selective &lt;em&gt;grandes écoles&lt;/em&gt; in France with a Master&amp;#39;s Degree in computer science.
&lt;/p&gt;

&lt;p&gt;Sometime later I worked at Doctolib, the leading booking platform, and management software provider for doctors in France.&lt;/p&gt;
&lt;p&gt;Besides coding I love sports, swimming, running and from time to time climbing.
I&amp;#39;m training to beat my 10k record next year.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-material-ui-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-material-ui-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Material-UI&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-material-ui-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/callemall/material-ui&quot;&gt;Material-UI&lt;/a&gt; provides user interface components which can be reused in different contexts. That&amp;#39;s our core mission - we are a UI library.&lt;/p&gt;
&lt;p&gt;The React, Angular, Vue, Ember and Polymer ecosystems all have the concept of components.
We have chosen to implement the &lt;a href=&quot;https://material.io/guidelines/&quot;&gt;Material Design Specification&lt;/a&gt; in &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; components.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say you want to display a nice button, all you need to do is the following (example for Material-UI v1):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; Button &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;material-ui/Button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;MyApp&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;Button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;I Will Survive&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;Button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; MyApp&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; This would be a good chance to use &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-transform-imports&quot;&gt;babel-plugin-transform-imports&lt;/a&gt; as it can rewrite &lt;code&gt;import { Button } from &amp;#39;material-ui&amp;#39;;&lt;/code&gt; to above while still pulling the same amount of code to the project.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-material-ui-work-&quot; id=&quot;how-does-material-ui-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Material-UI&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-material-ui-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most of the heavy lifting in &lt;em&gt;Material-UI&lt;/em&gt; is done by React and &lt;a href=&quot;https://github.com/cssinjs/jss&quot;&gt;JSS&lt;/a&gt;.
While we bet on React early in 2014 and have stuck with it,
we are already at our &lt;strong&gt;third iteration&lt;/strong&gt; on our choice of a styling solution.
We started with Less, tried inline styles, and now are switching to &lt;strong&gt;CSS in JS&lt;/strong&gt; thanks to JSS.&lt;/p&gt;
&lt;p&gt;One of the first things people ask when they find out about the library is how to customize the style of it.
In the past our answer to that question was not ideal, but it&amp;#39;s improving now.
Through the evolution of components in different contexts, we have identified and addressed four types of customization going (ordered from most specific to most generic):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://material-ui-1dab0.firebaseapp.com/customization/overrides#1-specific-variation-for-a-one-time-situation&quot;&gt;Specific variation for a one-time situation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://material-ui-1dab0.firebaseapp.com/customization/overrides#2-specific-variation-of-a-component&quot;&gt;Specific variation of a component made by a user and used in different contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://material-ui-1dab0.firebaseapp.com/customization/overrides#3-material-design-variations&quot;&gt;Material Design variations like with the buttons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://material-ui-1dab0.firebaseapp.com/customization/overrides#4-user-global-theme-variation&quot;&gt;User global theme variation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To learn more about JSS, see &lt;a href=&quot;https://survivejs.com/blog/jss-interview/&quot;&gt;the interview of Oleg Slobodskoi&lt;/a&gt;, the author of the tool.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-material-ui-differ-from-other-solutions-&quot; id=&quot;how-does-material-ui-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Material-UI&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-material-ui-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It helps to understand the tradeoffs we have made.
At some point when building a UI library or even a presentational component, one aspect will need to be prioritized over another.
So let&amp;#39;s see what we have prioritized and what we have not.&lt;/p&gt;
&lt;p&gt;I believe that &lt;strong&gt;most of the value of using a UI library comes from the API contract it provides&lt;/strong&gt;. But at the same time, API design is one of the hardest things to do when building a UI library.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We want the API to be consistent. We want to reduce the cognitive overhead of learning our API. Doing this is prioritized over an API tuned for specific contexts.&lt;/li&gt;
&lt;li&gt;We want the API to be low-level. By low-level, we mean close to the DOM elements.
&lt;strong&gt;It&amp;#39;s simpler to work with no abstraction than the wrong abstraction&lt;/strong&gt; and low-level APIs more easily allow composition. We encourage users to build on top of it. If they create something that is helpful for more users, it can be integrated into the library. We have prioritized these things over a higher-level API.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, sometimes we have to trade consistency and level of abstraction to have a good enough implementation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We want our components to work in isolation as much as possible.
For instance, we consider global styles an anti-pattern, not to mention their implications for code splitting.
Also, developers should be able to use only one of our components without paying a large overhead.&lt;/li&gt;
&lt;li&gt;We want the implementation to be performant.&lt;/li&gt;
&lt;li&gt;We want our components to be easily customizable from the outside.&lt;/li&gt;
&lt;li&gt;We want our components to be accessible.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, we would rather support fewer use-cases well and allow people to build on top of the library than supporting more use-cases poorly.
You can read further in our &lt;a href=&quot;https://material-ui-1dab0.firebaseapp.com/discover-more/vision#material-ui-s-vision&quot;&gt;vision for the project&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-material-ui-&quot; id=&quot;why-did-you-develop-material-ui-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Material-UI&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-material-ui-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The credit for creating &lt;em&gt;Material-UI&lt;/em&gt; goes to &lt;a href=&quot;https://twitter.com/haicea&quot;&gt;Hai Nguyen&lt;/a&gt;.
I have been contributing since six months after the first release.&lt;/p&gt;
&lt;p&gt;Ironically, my original motivation for choosing &lt;em&gt;Material-UI&lt;/em&gt; for a &lt;a href=&quot;https://github.com/oliviertassinari/SplitMe&quot;&gt;fun-side project&lt;/a&gt; (to save time by using an existing React implementation of Material Design) is at odds with the effort I put in as a maintainer now. I have spent a lot of time improving the library.&lt;/p&gt;
&lt;p&gt;But I don&amp;#39;t regret it as I have learned a lot in the process, ranging from how to conduct social interactions in a community to the ins and outs of the web stack, API design, &lt;a href=&quot;https://www.argos-ci.com/callemall/material-ui&quot;&gt;visual testing&lt;/a&gt; and more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-comes-next-&quot; id=&quot;what-comes-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What comes next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-comes-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are going to try to follow this plan:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Publish the first beta releases.&lt;/li&gt;
&lt;li&gt;Fix the last API inconsistencies (in beta we will still make breaking changes).&lt;/li&gt;
&lt;li&gt;Merge the beta branch into master.&lt;/li&gt;
&lt;li&gt;Publish the first pre-releases and fix any issues that come up.&lt;/li&gt;
&lt;li&gt;Publish v1! 🎉&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At that point, some features and components from v0.x will be missing in v1.
So, what about them?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both versions can be used at the same time, meaning projects can progressively migrate to the new version, one component at the time.&lt;/li&gt;
&lt;li&gt;Over time and with help from the community, more and more components will be implemented in v1.&lt;/li&gt;
&lt;li&gt;Finally, in alignment with our vision, we would rather support fewer use-cases which may mean that some features and components will not be in the v1 core.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the plans above are in &lt;a href=&quot;https://github.com/callemall/material-ui/blob/master/ROADMAP.md&quot;&gt;our roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-material-ui-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-material-ui-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Material-UI&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-material-ui-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Material-UI&lt;/em&gt; is popular in the React ecosystem, but Google recently changed their strategy with &lt;a href=&quot;https://github.com/material-components/material-components-web&quot;&gt;material-components-web&lt;/a&gt;.
Depending on how well &lt;code&gt;material-components-web&lt;/code&gt; solves the problem, &lt;em&gt;Material-UI&lt;/em&gt; &lt;a href=&quot;https://github.com/callemall/material-ui/issues/6799&quot;&gt;might use it internally&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But at the same time, &lt;em&gt;Material-UI&lt;/em&gt;&amp;#39;s goal goes further than just providing an elegant implementation of the Material Design guidelines.
The Material Design specification sets the bar quite high, and developers should be able to benefit from that while easily customizing it for their needs.&lt;/p&gt;
&lt;p&gt;This customization work is what I have been collaborating on lately at work.
We have been taking advantage of &lt;em&gt;Material-UI&lt;/em&gt;&amp;#39;s customization power to implement a brand-specific UI far from the Material Design specification. You can think of it as a Bootstrap theme. I believe this can be a useful strategy for other developers too.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn to focus on what matters. It&amp;#39;s so easy to lose focus and work on the wrong thing.&lt;/li&gt;
&lt;li&gt;Learn the ins and outs of the abstractions you use.&lt;/li&gt;
&lt;li&gt;Keep the big picture in mind.&lt;/li&gt;
&lt;li&gt;Be curious about the details. In a codebase, nothing exists by chance. Learn and understand the &amp;quot;why&amp;quot; behind things.&lt;/li&gt;
&lt;li&gt;Sleep well.&lt;/li&gt;
&lt;li&gt;Stay active with something like sports. It&amp;#39;s always how I get my best ideas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;Arunoda Susiripala&lt;/a&gt; for the awesome work he has been doing with the &lt;strong&gt;ZEIT&lt;/strong&gt; team on &lt;a href=&quot;https://github.com/zeit/next.js&quot;&gt;Next.js&lt;/a&gt;.
React was the last JavaScript project that I was as excited about as I am about Next.js. The user experience and developer experience is way beyond anything I have used before.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Special thanks to the core &lt;em&gt;Material-UI&lt;/em&gt; team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/haicea&quot;&gt;Hai Nguyen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/randomtechdude&quot;&gt;Matt Brookes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nathanmarks&quot;&gt;Nathan Marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/rosskevin&quot;&gt;Kevin Ross&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you &lt;a href=&quot;https://twitter.com/oleg008&quot;&gt;Oleg Slobodskoi&lt;/a&gt; for open sourcing JSS.&lt;/p&gt;
&lt;p&gt;And thanks for having me on the blog!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Olivier! It&amp;#39;s great to see solid UI libraries for React as that has been traditionally a little weak point but looks like the situation is improving.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material UI site&lt;/a&gt; and &lt;a href=&quot;https://github.com/callemall/material-ui&quot;&gt;Material UI GitHub&lt;/a&gt; to learn more about the project.&lt;/p&gt;
</content></entry><entry><title>Fall Tour - Vienna Clinics, ReactNext, WebExpo, ReactiveConf</title><id>afalltourviennaclinicsreactnextwebexporeactiveconf2017-07-19t00:00:00z</id><link href="https://survivejs.com/blog/fall-tour/"></link><updated>2017-07-19T00:00:00Z</updated><content type="html">&lt;p&gt;Even though I have traveled a lot this year already, it looks like more travel is in store. The travels so far have been valuable regarding experience. I&amp;#39;ve seen more places in this year than during my previous year alone. And I like to think it has made me better rounded as a person. Getting outside of your comfort zone can be a good thing even if it is a little painful.&lt;/p&gt;
&lt;p&gt;As a result of my travels, I&amp;#39;ve gained a better insight on what to do next. And perhaps surprisingly I&amp;#39;ve won more good excuses to venture. Actions tend to generate reactions. Opportunities follow the brave ones and so on.&lt;/p&gt;
&lt;p&gt;I have some clear steps ahead of me. There are still blanks, but it&amp;#39;s not a bad thing!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-vienna-austria-23-7-26-8-&quot; id=&quot;-vienna-austria-23-7-26-8-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;Vienna, Austria - 23.7-26.8&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-vienna-austria-23-7-26-8-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll begin this trip from Vienna. To slow down a bit, I&amp;#39;ll stay there an entire month. I like the city a lot, and there seem to be business opportunities available if you know where to find them. One advantage is that this also allows me to reach most of the central Europe quickly if some business comes up.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll be running &lt;a href=&quot;https://survivejs.com/clinic/&quot;&gt;clinics&lt;/a&gt; during my time in Vienna. They are three-hour sessions focused on webpack. I have &lt;a href=&quot;https://presentations.survivejs.com/webpack-the-good-parts/&quot;&gt;a particular set of slides&lt;/a&gt; to guide the discussion. Also, discussion over React is possible. The point of a clinic is to provide as much value as I can in two hours, and it can be adapted based on your needs.&lt;/p&gt;
&lt;p&gt;A clinic session of two hours costs 500 euros (VAT 0) for a company. I offer the same for individual developers for the price of 150 euros (capped to four developers per session). 20% of the income goes to Tobias Koppers as I want to support his efforts on webpack. You&amp;#39;ll also have a chance to ask questions from him at the end of the session. I&amp;#39;ll get the answers to you afterwards.&lt;/p&gt;
&lt;p&gt;I can also organize &lt;a href=&quot;https://survivejs.com/workshop/&quot;&gt;full day workshops&lt;/a&gt; in Vienna and nearby cities, even further. If you are interested, get in touch, and we&amp;#39;ll make the schedule work.&lt;/p&gt;
&lt;p&gt;My schedule for Vienna is relaxed, and it gives me time to do certain technical work that has been pending a while. It&amp;#39;s also an excellent opportunity to write and prepare two presentations!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-tel-aviv-israel-reactnext-6-9-12-9-&quot; id=&quot;-tel-aviv-israel-reactnext-6-9-12-9-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;Tel Aviv, Israel - ReactNext - 6.9-12.9&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-tel-aviv-israel-reactnext-6-9-12-9-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was invited to participate in &lt;a href=&quot;http://react-next.com/&quot;&gt;ReactNext&lt;/a&gt; this year. I&amp;#39;ll be talking about how to use webpack, particularly with React. I think it won&amp;#39;t be a slide show and I hope to pull off something practical! So live coding might be in store with a high probability.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-prague-czech-republic-webexpo-19-25-9-&quot; id=&quot;-prague-czech-republic-webexpo-19-25-9-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;Prague, Czech Republic - WebExpo - 19-25.9&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-prague-czech-republic-webexpo-19-25-9-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will give a presentation discussing how I built my business at &lt;a href=&quot;https://www.webexpo.net/&quot;&gt;WebExpo&lt;/a&gt;. It&amp;#39;s going to be a mix of business, technical, and personal bits. A good time for a retrospective.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-bratislava-slovakia-reactiveconf-25-27-10-&quot; id=&quot;-bratislava-slovakia-reactiveconf-25-27-10-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;Bratislava, Slovakia - ReactiveConf - 25-27.10&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-bratislava-slovakia-reactiveconf-25-27-10-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You&amp;#39;ll see me in &lt;a href=&quot;https://reactiveconf.com/&quot;&gt;ReactiveConf&lt;/a&gt; this year as well. I don&amp;#39;t have a presentation scheduled, but we&amp;#39;ll do a webpack workshop on the third day.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It looks like this will be travel filled year for me. It has been one of those personal growth years for me, and it has shaped the direction of the next years for sure. It is possible this isn&amp;#39;t the last year of travel for me.&lt;/p&gt;
&lt;p&gt;Note that I have plenty of room in my schedule. So if you want to see me in your meetup or conference and are willing to cover my costs while providing me a chance to turn a profit, it might be difficult for me to say no! I&amp;#39;m especially open to opportunities available in Europe, and I may be able to bring some other developers with me.&lt;/p&gt;
</content></entry><entry><title>dont-break - Check if you break dependents - Interview with Gleb Bahmutov</title><id>adontbreakcheckifyoubreakdependentsinterviewwithglebbahmutov2017-07-17t00:00:00z</id><link href="https://survivejs.com/blog/dont-break-interview/"></link><updated>2017-07-17T00:00:00Z</updated><content type="html">&lt;p&gt;Releasing new versions of npm modules is an &lt;code&gt;npm publish&lt;/code&gt; away. But how do you make sure you don&amp;#39;t accidentally break a dependent project? Even if you are careful and test your module well, someone may be depending on a behavior you are not testing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/dont-break&quot;&gt;dont-break&lt;/a&gt;, a tool by &lt;a href=&quot;https://twitter.com/bahmutov&quot;&gt;Gleb Bahmutov&lt;/a&gt;, was designed to address this problem.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/4ca757a644d8fa2518f6308c6dfe6b24?s=200&quot; alt=&quot;Gleb Bahmutov&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I have a degree in computer vision. I did panorama stitching and 3D scanners for a while which meant heavy duty C++ programming. At a certain point, I wanted to expand the areas of the business that I worked in: beyond image acquisition and processing. I also wanted to show results and make them useful to the users, for which I needed JavaScript. Now I mostly do Node.js and JS hacks.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-dont-break-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-dont-break-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;dont-break&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-dont-break-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is the problem with software development today: there are &lt;del&gt;thousands&lt;/del&gt; millions of software modules in the world, and every language has its own public registry: Maven for Java, npm for JavaScript, and so on. Each module has multiple versions. Your module probably depends on some modules (upstream dependencies) and other modules may depend on your module (downstream dependencies).&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#updating-upstream-dependencies&quot; id=&quot;updating-upstream-dependencies&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Updating Upstream Dependencies&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#updating-upstream-dependencies&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If there are new versions of upstream dependencies, you should probably upgrade versions carefully. I wrote &lt;a href=&quot;https://github.com/bahmutov/next-update&quot;&gt;next-update&lt;/a&gt;, a CLI tool that tries each new version of an upstream dependency, runs your tests and if the tests pass, upgrades the dependencies to their new versions.&lt;/p&gt;
&lt;p&gt;There are services that automate this, like GreenKeeper and &lt;a href=&quot;https://www.npmjs.com/package/renovate&quot;&gt;renovate&lt;/a&gt;. The feedback loop is pretty quick: the tool installs a new version of an upstream dependency, runs your tests and displays the result given the new version is compatible or breaks your module.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; &lt;a href=&quot;https://survivejs.com/blog/renovate-interview/&quot;&gt;Read the interview about renovate&lt;/a&gt; to learn more about it.&lt;/blockquote&gt;&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-problem-of-downstream-dependencies&quot; id=&quot;the-problem-of-downstream-dependencies&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Problem of Downstream Dependencies&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-problem-of-downstream-dependencies&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;However, this does not address issues in downstream dependencies caused by new versions of your module. Maybe you changed the API or released a bug with the new version, and the downstream dependencies cannot upgrade without breaking their tests.&lt;/p&gt;
&lt;p&gt;The feedback loop is super long - you publish a new version, a while later maintainers of a downstream dependency try to upgrade to the new version, their tests fail, and finally a bug is opened in your project (if they feel generous).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bahmutov/dont-break&quot;&gt;dont-break&lt;/a&gt; turns the tables - you can test downstream dependencies with new, unpublished versions of your module to see if the new code breaks them or not.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-dont-break-work-&quot; id=&quot;how-does-dont-break-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;dont-break&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-dont-break-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;dont-break&lt;/em&gt; is a CLI tool that can find and test downstream dependencies of your npm module. Here&amp;#39;s the basic algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For each downstream dependency, firstly the repository will be found and cloned.&lt;/li&gt;
&lt;li&gt;To ensure the dependency&amp;#39;s tests run from a new clone, the tests will be run once using &lt;em&gt;the dependency&amp;#39;s version of your module&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If they pass, the new, unpublished version of your module will be copied into the dependency&amp;#39;s &lt;code&gt;node_modules&lt;/code&gt; directory, and the tests run again.&lt;/li&gt;
&lt;li&gt;If the tests also pass with your unpublished version, this dependency can be considered functional with your new version.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This can be done for as many downstream dependencies as you&amp;#39;d like, and if no relevant issues are found, the new version of your module can be safely published.&lt;/p&gt;
&lt;p&gt;A good example is &lt;a href=&quot;https://github.com/bahmutov/snap-shot-core&quot;&gt;snap-shot-core&lt;/a&gt;, which is checked against its downstream dependencies &lt;em&gt;snap-shot&lt;/em&gt; and &lt;em&gt;schema-shot&lt;/em&gt;, among others. The project &lt;em&gt;snap-shot&lt;/em&gt; is in turn checked against its downstream dependencies &lt;em&gt;snap-shot-jest-test&lt;/em&gt;, &lt;em&gt;snap-shot-ava-test&lt;/em&gt;, etc. In diagram form it looks like this:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c7224d21bb861fb849db26d952073c1a.png&quot; alt=&quot;snap-shot in a diagram form&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;snap-shot in a diagram form&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The above slide is from my presentation that I highly recommend to anyone working in the npm ecosystem: &lt;a href=&quot;https://slides.com/bahmutov/self-improving-software-node-week&quot;&gt;Self Improving Software&lt;/a&gt;. It demonstrates &lt;em&gt;dont-break&lt;/em&gt; via the &lt;em&gt;dont-crack&lt;/em&gt; wrapper (see below).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-dont-break-differ-from-other-solutions-&quot; id=&quot;how-does-dont-break-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;dont-break&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-dont-break-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As far as I know, there are no similar tools. Few people like publishing new versions of their modules that are compatible with previously published ones as much as I do (just kidding). Hopefully, in the near future, each project will always stay up to date and will be carefully tested against existing &amp;quot;users&amp;quot; (downstream dependencies) before releasing a patch version for example.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-dont-break-&quot; id=&quot;why-did-you-develop-dont-break-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;dont-break&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-dont-break-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I love, love, love writing new software (you can find links to my open source projects at &lt;a href=&quot;https://glebbahmutov.com/&quot;&gt;https://glebbahmutov.com/&lt;/a&gt;), but I am lazy too. In my opinion, the easiest way to produce a lot of useful software is to do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use existing modules rather than writing your own&lt;/li&gt;
&lt;li&gt;Keep dependencies up to date to benefit from new features and bug fixes written by others&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After publishing some modules, I noticed that I would routinely set up a lot of the same tools for each of them, so I &lt;a href=&quot;https://glebbahmutov.com/blog/quick-solid-module/&quot;&gt;automated my project setup&lt;/a&gt;. By using &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;semantic-release&lt;/a&gt;, I also achieved an automated publishing process.&lt;/p&gt;
&lt;p&gt;The problem was that I still had to write tests to make sure minor and patch releases didn&amp;#39;t cause issues for existing &amp;quot;users&amp;quot; (downstream dependencies). To avoid extra testing work, I started cloning downstream projects, copying my new code into those folders and running the tests. Bingo! The idea was born: why don&amp;#39;t I automate this?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have two things planned for the future (well, one is well under way, the other is still just a vague idea).&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-dont-crack-&quot; id=&quot;-dont-crack-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;em&gt;dont-crack&lt;/em&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-dont-crack-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a &lt;em&gt;semantic-release&lt;/em&gt; plugin I wrote called &lt;a href=&quot;https://github.com/bahmutov/dont-crack&quot;&gt;dont-crack&lt;/a&gt; that wraps &lt;em&gt;dont-break&lt;/em&gt; to avoid having to run it locally. My Continuous Integration setup looks at the commits since the last release, and if it decides that it should publish a new &lt;code&gt;minor&lt;/code&gt; or &lt;code&gt;patch&lt;/code&gt; version (meaning, there should be no breaking API changes), it runs &lt;em&gt;dont-break&lt;/em&gt; to confirm that downstream dependencies do not break.&lt;/p&gt;
&lt;p&gt;If a downstream dependency does break, that means our change was &lt;em&gt;incompatible&lt;/em&gt;, and it should be published as a &lt;em&gt;breaking major&lt;/em&gt; change. Doing this lets the downstream maintainers know there is an update, but it will require some work. Otherwise, we are all good and can safely publish a &lt;code&gt;minor&lt;/code&gt; or &lt;code&gt;patch&lt;/code&gt; version.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#sending-reports-back-to-other-projects&quot; id=&quot;sending-reports-back-to-other-projects&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Sending Reports Back to Other Projects&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#sending-reports-back-to-other-projects&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am interested in how to send good bug reports back to your module if one of the downstream dependencies suddenly breaks. Imagine a new version of your module is breaking someone else&amp;#39;s module. Do I just see a stack trace from their module - a project I do not maintain or know? Or can we somehow show precisely &lt;em&gt;what behaves differently&lt;/em&gt; between the previous version of your module and the latest code?&lt;/p&gt;
&lt;p&gt;Solving the second problem will finally enable large source code monorepos to be split up. Working on an individual component and being able to test it against its dependencies in a nice, fast and useful way would be huge!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-trends-do-you-see-in-the-future-what-advice-would-you-give-to-someone-starting-with-web-development-&quot; id=&quot;what-trends-do-you-see-in-the-future-what-advice-would-you-give-to-someone-starting-with-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What trends do you see in the future? What advice would you give to someone starting with web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-trends-do-you-see-in-the-future-what-advice-would-you-give-to-someone-starting-with-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I see a huge push towards immutable &lt;em&gt;everything&lt;/em&gt;. I see this in data structures (you cannot modify an object because someone else relies on it), deployment (Docker, immutable infrastructure) and the npm registry (cannot unpublish a version already there).&lt;/p&gt;
&lt;p&gt;The concept of &amp;quot;this artifact is permanent and is not going to disappear&amp;quot; is nice. Thus my advice would be to learn how to update objects without mutating the original ones, find out how to deploy many times per day and learn about deploying a new system instead of &lt;em&gt;tinkering with a running system&lt;/em&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please, please interview my coworker, &lt;a href=&quot;https://twitter.com/be_mann&quot;&gt;Brian Mann&lt;/a&gt; the founder of &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress.io&lt;/a&gt;. Of course, it is a shameless plug, since we work together on the fantastic E2E testing tool (it is going to be open sourced soon, I promise). He has a good sense of what makes web application feature testing hard and why existing solutions like Selenium are not enough. Also, I disagree with Brian a lot, but love hearing his take on things!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Gleb! I think if the community adopted tools like &lt;em&gt;dont-break&lt;/em&gt;, that would be one step forward in solving the npm package quality problem. Perhaps some of these problems could be pushed to a service level to help people improve the quality of their work while enhancing the ecosystem.&lt;/p&gt;
&lt;p&gt;To learn more about &lt;em&gt;dont-break&lt;/em&gt;, &lt;a href=&quot;https://github.com/bahmutov/dont-break&quot;&gt;check out the GitHub project&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Rollup - Next-generation ES6 module bundler - Interview with Rich Harris</title><id>arollupnextgenerationes6modulebundlerinterviewwithrichharris2017-07-10t00:00:00z</id><link href="https://survivejs.com/blog/rollup-interview/"></link><updated>2017-07-10T00:00:00Z</updated><content type="html">&lt;p&gt;Given JavaScript application source cannot be consumed easily through the browser &amp;quot;as is&amp;quot; just yet, the process of &lt;strong&gt;bundling&lt;/strong&gt; is needed. The point is to convert the source into a form the browser can understand. This is the reason why bundlers, such as Browserify, Rollup, or webpack exist.&lt;/p&gt;
&lt;p&gt;To dig deeper into the topic, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/Rich_Harris&quot;&gt;Rich Harris&lt;/a&gt;, the author of Rollup.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;I &lt;a href=&quot;https://survivejs.com/blog/svelte-interview/&quot;&gt;interviewed Rich earlier about Svelte&lt;/a&gt;, a UI framework of his.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/329f9d32fe20b186838ee237d3eb2d43?s=200&quot; alt=&quot;Rich Harris&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;
I&amp;#39;m a graphics editor at the New York Times, working on the investigations team — part journalist, part developer. Before that I did a similar job at the Guardian. Part of my role historically has been to build tools that allow us to create and deploy projects at the speed of news, which can be pretty aggressive — &lt;a href=&quot;https://rollupjs.org&quot;&gt;Rollup&lt;/a&gt;, &lt;a href=&quot;https://buble.surge.sh&quot;&gt;Bublé&lt;/a&gt; and &lt;a href=&quot;https://svelte.technology&quot;&gt;Svelte&lt;/a&gt;, among others, are all products of that.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rollup-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-rollup-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Rollup&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rollup-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rollup is a module bundler. Basically, it concatenates JavaScript files, except you don&amp;#39;t have to manually specify the order of them or worry about variable names in one file conflicting with names in another. Under the hood it&amp;#39;s a bit more sophisticated than that, but in essence that&amp;#39;s all it&amp;#39;s doing — concatenating.&lt;/p&gt;
&lt;p&gt;The reason you&amp;#39;d use it is so that you can write software in a modular way — which is better for your sanity for lots of reasons — using the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; keywords that were added to the language in ES2015. Since browsers and Node.js don&amp;#39;t yet support ES2015 modules (ESM) natively, we have to bundle our modules in order to run them.&lt;/p&gt;
&lt;p&gt;Rollup can create self-executing &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; files, AMD modules, Node-friendly CommonJS modules, UMD modules (which are a combination of all three), or even ESM bundles that can be used in &lt;em&gt;other&lt;/em&gt; projects.&lt;/p&gt;
&lt;p&gt;Which is ideal for libraries. In fact, most major JavaScript libraries that I can think of — React, Vue, Angular, Glimmer, D3, Three.js, PouchDB, Moment, Most.js, Preact, Redux, etc — are built with Rollup.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rollup-work-&quot; id=&quot;how-does-rollup-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rollup&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rollup-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You give it an entry point — let&amp;#39;s say &lt;code&gt;index.js&lt;/code&gt;. Rollup will read that file and parse it using Acorn — this gives us something called an abstract syntax tree (AST). Once you have the AST you can discover lots of things about the code, such as which &lt;code&gt;import&lt;/code&gt; declarations it contains.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say &lt;code&gt;index.js&lt;/code&gt; has this line at the top:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; foo &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./foo.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That means that Rollup needs to resolve &lt;code&gt;./foo.js&lt;/code&gt; relative to &lt;code&gt;index.js&lt;/code&gt;, load it, parse it, analyse it, lather, rinse and repeat until there are no more modules to import. Crucially, all these steps are pluggable, so you can augment Rollup with the ability to import from &lt;code&gt;node_modules&lt;/code&gt; or compile ES2015 to ES5 in a sourcemap-aware way, for example.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rollup-differ-from-other-solutions-&quot; id=&quot;how-does-rollup-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rollup&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rollup-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Firstly, there&amp;#39;s zero overhead. The traditional approach to bundling is to wrap every module in a function, put those functions in an array, and implement a &lt;code&gt;require&lt;/code&gt; function that plucks those functions out of the array and executes them on demand. It turns out &lt;a href=&quot;https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/&quot;&gt;this is terrible&lt;/a&gt; for both bundle size and startup time.&lt;/p&gt;
&lt;p&gt;Instead, Rollup essentially just concatenates your code — there&amp;#39;s no waste, and the resulting bundle minifies better. Some people call this &amp;#39;scope hoisting&amp;#39;.&lt;/p&gt;
&lt;p&gt;Secondly, it removes unused code from the modules you import, which is called &amp;#39;treeshaking&amp;#39; for reasons that no-one is certain of.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s worth noting that webpack implements a form of scope hoisting and treeshaking in the most recent version, so it&amp;#39;s catching up to Rollup in terms of bundle size and startup time (though we&amp;#39;re still ahead!). Webpack is generally considered the better option if you&amp;#39;re building an app rather than a library, since it has a lot of features that Rollup doesn&amp;#39;t — code splitting, dynamic imports and so-on.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To understand the difference between the tools, &lt;a href=&quot;https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c&quot;&gt;read &amp;quot;Webpack and Rollup: the same but different&amp;quot;&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rollup-&quot; id=&quot;why-did-you-develop-rollup-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Rollup&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rollup-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Necessity. None of the existing tools were good enough.&lt;/p&gt;
&lt;p&gt;A few years ago, I was working on a project called &lt;a href=&quot;https://ractive.js.org&quot;&gt;Ractive&lt;/a&gt;, and I was frustrated with our build process. The more we split the codebase up into modules, the larger the build got, because of the overhead I described earlier. We were effectively being penalised for doing the right thing.&lt;/p&gt;
&lt;p&gt;So I wrote a module bundler called Esperanto and released it as a separate open source project. Lo and behold, our builds shrank. But I wasn&amp;#39;t satisfied, because I&amp;#39;d read something &lt;a href=&quot;https://twitter.com/jo_liss&quot;&gt;Jo Liss&lt;/a&gt; had written about how ESM — being designed with static analysis in mind — would allow us to do treeshaking. Esperanto didn&amp;#39;t have that ability.&lt;/p&gt;
&lt;p&gt;Adding treeshaking to Esperanto would have been very difficult, so I burned it all and started over with Rollup.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To learn more about ESM, &lt;a href=&quot;https://survivejs.com/blog/es-modules-interview/&quot;&gt;read the interview of Bradley Farias&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would love to get Rollup to a place where we can call it &amp;#39;done&amp;#39;, so that I don&amp;#39;t have to think about it any more. It&amp;#39;s not an exciting project to work on, since module bundling is an incredibly boring subject. It&amp;#39;s basically just plumbing — essential but unglamorous.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a fair distance to go before we get there though. And I feel a certain responsibility to keep the community looked after, since I&amp;#39;ve been such a vocal advocate for ESM.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re getting to an exciting place though — browsers are just starting to add native module support, and now that webpack has scope hoisting, there are very tangible benefits to using ESM everywhere. So we&amp;#39;ll hopefully see ESM take over from CommonJS modules very soon. (If you&amp;#39;re still writing CommonJS, stop! You&amp;#39;re just creating technical debt.)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rollup-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-rollup-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Rollup&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rollup-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For one thing, Rollup will become increasingly obsolete. Once browsers support modules natively, there&amp;#39;ll be a large class of applications for which bundling (and everything that goes with it — compiling, minifying and so on) will just be an optional performance optimisation, as opposed to a necessity. That&amp;#39;s going to be &lt;em&gt;huge&lt;/em&gt;, particularly for newcomers to web development.&lt;/p&gt;
&lt;p&gt;But at the same time we&amp;#39;re increasingly using our build processes to add sophisticated capabilities to our applications. I&amp;#39;m a proponent of that — &lt;a href=&quot;https://svelte.technology&quot;&gt;Svelte&lt;/a&gt; is a compiler that essentially writes your app for you from a declarative template — and it&amp;#39;s only going to get more intense with the advent of WASM and other things.&lt;/p&gt;
&lt;p&gt;So we have these two seemingly contradictory trends happening simultaneously, and it&amp;#39;ll be fascinating to see how they play out.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Watch other programmers over their shoulders. Read source code. Develop taste by building things, and being proud of them but never satisifed. Learn the fundamentals, because all abstractions are leaky. Learn what &amp;#39;all abstractions are leaky&amp;#39; means. Turn your computer off and go outside, because most of your best programming will happen away from your keyboard.&lt;/p&gt;
&lt;p&gt;Most importantly, take programming advice with a pinch of salt. As soon as someone reaches the stage where people start asking them to offer advice, they forget what it was like to be a new developer. No-one knows anything anyway.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I really like following the work of people who straddle the line between JavaScript and disciplines like dataviz, WebGL, cartography and animation — people like &lt;a href=&quot;https://twitter.com/mourner&quot;&gt;Vladimir Agafonkin&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mathisonian&quot;&gt;Matthew Conlen&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sarah_edo&quot;&gt;Sarah Drasner&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/monfera&quot;&gt;Robert Monfera&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/tmcw&quot;&gt;Tom MacWright&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the web development front more generally, I&amp;#39;ve been enjoying playing around with &lt;a href=&quot;https://rill.site&quot;&gt;Rill&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/dylan_piercey&quot;&gt;Dylan Piercey&lt;/a&gt;. It&amp;#39;s a universal router that lets you write Express-style apps that also work in the browser, and it&amp;#39;s really well thought through. For me it hits the sweet spot between boosting productivity and not being overly opinionated.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rollup would love your help! It&amp;#39;s a fairly important part of the ecosystem nowadays, but I don&amp;#39;t have nearly enough time to give it the attention it deserves, and the same is true for all our contributors. If you&amp;#39;re interested in helping out with a tool that indirectly benefits millions (perhaps billions!) of web users, get in touch with us.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Rich! Rollup is an amazing tool and well worth learning especially for library authors. I hope we can skip the entire bundling step one day as that would make things simpler.&lt;/p&gt;
&lt;p&gt;To learn more about Rollup, &lt;a href=&quot;https://rollupjs.org/&quot;&gt;check out the online documentation&lt;/a&gt;. You can also &lt;a href=&quot;https://github.com/rollup/rollup&quot;&gt;find  the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>JSS - Author CSS Using JavaScript as a Host Language - Interview with Oleg Slobodskoi</title><id>ajssauthorcssusingjavascriptasahostlanguageinterviewwitholegslobodskoi2017-07-07t00:00:00z</id><link href="https://survivejs.com/blog/jss-interview/"></link><updated>2017-07-07T00:00:00Z</updated><content type="html">&lt;p&gt;If there&amp;#39;s one thing that divides web developers, it&amp;#39;s styling. A part of this has to do with the different requirements of websites and web applications. What is good in another domain, is an anti-pattern in another.&lt;/p&gt;
&lt;p&gt;To understand the topic better, I am interviewing &lt;a href=&quot;https://twitter.com/oleg008&quot;&gt;Oleg Slobodskoi&lt;/a&gt;, the author of &lt;a href=&quot;http://cssinjs.org&quot;&gt;JSS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://avatars1.githubusercontent.com/u/52824?v=3&amp;s=200&quot; alt=&quot;Oleg Slobodskoi&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Working on web UIs for over a decade, I have realized there are two significant challenges in frontend engineering: understanding the state and styling its representation. Unidirectional data flow has made managing state much easier, but styling components is still painful.
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To improve the situation, I started JSS back in 2014 and haven&amp;#39;t stopped learning and developing the project since. Currently, I am working at &lt;a href=&quot;https://www.chatgrape.com/&quot;&gt;Chatgrape&lt;/a&gt; where we are building a sophisticated client using NLP and deep services integration. All CSS is managed using JSS. Also, I try to talk at conferences from time to time, even if I know I suck at this haha.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-jss-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-jss-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe JSS to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-jss-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In general, &amp;quot;CSS in JS&amp;quot; libraries are authoring tools which allow you to generate CSS. The paradigm is similar to Sass, Less or Stylus in this regard, the difference being that the host language JavaScript is well-standardized.&lt;/p&gt;
&lt;p&gt;JSS is a set of libraries for writing CSS in JavaScript. They address a wide spectrum of issues. The most significant features are class names scoping, critical CSS extraction, significantly improved maintenance, code reuse and sharing, theming, co-location and state-driven styles.&lt;/p&gt;
&lt;p&gt;It is important to understand though that not every product has all of the issues that these features address, so not every developer can relate to them or even confirm that they are real. If you don&amp;#39;t get it - don&amp;#39;t worry, the time for you just hasn&amp;#39;t come yet.&lt;/p&gt;
&lt;p&gt;One general truth you could take away from this is that JSS is a more powerful abstraction over CSS, which is good and bad at the same time. Less powerful abstractions may be of benefit for less experienced developers because less can be done incorrectly, but they certainly have limitations.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-jss-work-&quot; id=&quot;how-does-jss-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does JSS work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-jss-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The essential libraries in JSS are core, React-JSS, and Styled-JSS. Low level and library-agnostic, the core is responsible for compilation and rendering of a stylesheet.&lt;/p&gt;
&lt;p&gt;The core is used by both React-JSS and Styled-JSS internally. React-JSS is a higher-order component providing an interface for React. Styled-JSS is an alternative interface for React which implements the styled primitives factory.&lt;/p&gt;
&lt;p&gt;Styled primitive or styled component is a component which has initial styles applied when created. There is no need to provide class names when you use it. It has been very actively promoted by the &lt;a href=&quot;https://www.styled-components.com&quot;&gt;Styled Components&lt;/a&gt; library and is worth looking into as an alternative to other interfaces. Our implementation, in fact, combines both styled primitives and a classes map in one solid interface.&lt;/p&gt;
&lt;p&gt;The general process goes like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Declaration: Styles are described by the user in JavaScript. By default we use &lt;a href=&quot;http://cssinjs.org/json-api&quot;&gt;JSON Syntax&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Processing: Styles are processed by JSS plugins. Plugins do vendor prefixing, implement syntactic sugar for user styles and can be made to do any other transformations, similar to PostCSS.&lt;/li&gt;
&lt;li&gt;Injection: Once you call the &lt;code&gt;.attach&lt;/code&gt; method, styles are compiled to a CSS string and injected into the DOM using a &lt;code&gt;style&lt;/code&gt; element.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#examples&quot; id=&quot;examples&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Examples&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#examples&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Example using the low level &lt;a href=&quot;https://github.com/cssinjs/jss&quot;&gt;core library&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; jss &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;jss&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; preset &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;jss-preset-default&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// One-time setup.&lt;/span&gt;
jss&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;setup&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;preset&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; styles &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  button&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;red&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Compile and render the styles.&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; classes &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; jss&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;createStyleSheet&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;styles&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;attach&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; `
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button &lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;${classes.button}&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    My Button
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example using &lt;a href=&quot;http://cssinjs.org/react-jss&quot;&gt;React-JSS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; injectSheet &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react-jss&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; styles &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  button&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;red&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;Button&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; classes &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;button className&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;classes&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;button&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    My Button
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Function injectSheet generates a HOC, which uses JSS and passes `classes` to the `Button`.&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; StyledButton &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;injectSheet&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;styles&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;Button&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example using &lt;a href=&quot;http://cssinjs.org/styled-jss&quot;&gt;Styled-JSS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; styled &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;styled-jss&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Produces a button which has the styles already applied.&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; MyButton &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;styled&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;red&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-jss-differ-from-other-solutions-&quot; id=&quot;how-does-jss-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does JSS differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-jss-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are too many differences to name them all. To name a few:&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#it-is-not-one-monolithic-library&quot; id=&quot;it-is-not-one-monolithic-library&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;It is not one monolithic library&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#it-is-not-one-monolithic-library&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JSS is a set of libraries, each designed to solve a specific set of tasks strongly decoupled from each other. As a result, the user enjoys greater flexibility and cleaner abstractions. For example, the core is not coupled to React, which means it can be used with any framework.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-plugin-api-http-cssinjs-org-plugins-&quot; id=&quot;-plugin-api-http-cssinjs-org-plugins-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;a href=&quot;http://cssinjs.org/plugins&quot;&gt;Plugin API&lt;/a&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-plugin-api-http-cssinjs-org-plugins-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The plugin API allows you to manipulate sheets, rules and react on updates. In fact, most features are implemented internally as plugins as well.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#focus-on-performance&quot; id=&quot;focus-on-performance&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Focus on performance&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#focus-on-performance&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Focus on performance has always been of the highest importance. JSS is one of the most performant libraries available. That said, it is hard to compare accurately because some features and implementation details differ a lot between libraries. We benchmark every possible small detail, and we track regressions for each change.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-function-values-http-cssinjs-org-json-api-v-v8-0-0-function-values-&quot; id=&quot;-function-values-http-cssinjs-org-json-api-v-v8-0-0-function-values-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;a href=&quot;http://cssinjs.org/json-api/?v=v8.0.0#function-values&quot;&gt;Function values&lt;/a&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-function-values-http-cssinjs-org-json-api-v-v8-0-0-function-values-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Function values are now widely supported by other CSS in JS libraries. However, JSS differs in that it allows for high-performance JavaScript controlled animations like in the &lt;a href=&quot;http://cssinjs.org/function-values&quot;&gt;function value example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is possible because JSS doesn&amp;#39;t generate new CSS rules for each animation step. It is updating CSS values, the same way it would be done using inline styles. I wrote &lt;a href=&quot;https://medium.com/dailyjs/high-performance-dynamic-styles-db28c873940&quot;&gt;an article to give you more implementation details&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#counter-based-class-names-generation-by-default&quot; id=&quot;counter-based-class-names-generation-by-default&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Counter based class names generation by default&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#counter-based-class-names-generation-by-default&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The main problem with auto-generated class names is that they need to be deterministic. In case you generate HTML and CSS from the server and then want to update both at runtime dynamically, you need to make sure the class names generated at runtime will always match those on the server.&lt;/p&gt;
&lt;p&gt;To solve these most libraries use hashes, though they have limitations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; To create a hash the CSS rule declaration needs to be stringified and a hashing algorithm run, incurring overhead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source order specificity:&lt;/strong&gt; A number of equal CSS rules will be generated with identical class names, which will override each other. The problem is that application logic might expect the CSS rules in a certain order in the case that one rule is designed to override another rule based on the order of occurrence in the source code. In this case, source order can&amp;#39;t be guaranteed and will result in rare but very unpleasant bugs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High-performance function values:&lt;/strong&gt; these wouldn&amp;#39;t be possible, because after update of any values, the hash would need to be recreated and the class name on the DOM node updated, leading to an unacceptable degradation in performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Payload:&lt;/strong&gt; Counter-based class names include a simple number which is incremented by each added rule. The number is the most compact, unique identifier available. Hashes are long and bloat the overall CSS size.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#no-inline-styles&quot; id=&quot;no-inline-styles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;No Inline Styles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#no-inline-styles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JSS does not use any inline styles. Inline styles are slow if you overuse them. They are particularly slow in React.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-jss-&quot; id=&quot;why-did-you-develop-jss-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop JSS?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-jss-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is funny because initially I just wanted to use JavaScript as a language to describe styles because I didn&amp;#39;t want to learn Sass. Secondly, I didn&amp;#39;t want to think how to name my classes in the global scope, because enforcing BEM is hard.&lt;/p&gt;
&lt;p&gt;Also, I wanted to eliminate the fear of changing any CSS and breaking unexpected things. Now it has become way more than that, but to put it in one sentence: it is the right abstraction for my tasks, and I enjoy using it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The foremost focus is on making the DX better: better documentation, auto-completion, syntax highlighting, React Native integration, a better CLI tool. The team has done a lot in the past, but a significant amount of work is still ahead of us, and we need highly skilled, motivated contributors to tackle all the challenges.&lt;/p&gt;
&lt;p&gt;I am trying to establish a distributed team of people responsible for different parts of this story. To give you an idea, consider the following contributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Styled-JSS was written mostly by &lt;a href=&quot;https://twitter.com/_lttb&quot;&gt;@_lttb&lt;/a&gt; and theming support is being added now by &lt;a href=&quot;https://twitter.com/iamstarkov&quot;&gt;@iamstarkov&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/wikiwi_io&quot;&gt;@wikiwi_io&lt;/a&gt; is working on the next version of our vendor prefixer and documentation site and the jss-expand plugin was developed by &lt;a href=&quot;https://twitter.com/typical001&quot;&gt;@typical001&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Our logo was created by &lt;a href=&quot;https://twitter.com/okonetchnikov&quot;&gt;@okonetchnikov&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would love to continue this with more people on board with more dedication. I am seeing all the time how much they struggle to find time to work on it. For this reason, we recently started &lt;a href=&quot;https://github.com/ossfriendly/open-source-sponsors&quot;&gt;open source sponsor initiative&lt;/a&gt; to shape our industry.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-jss-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-jss-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for JSS and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-jss-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One problem &lt;strong&gt;all&lt;/strong&gt; CSS solutions have in common but that is especially problematic for CSS in JS is the lack of interoperability between the libraries. All CSS in JS solutions use a slightly different DSL to express the styles, which means that the styles are tightly coupled with the library which can parse them.&lt;/p&gt;
&lt;p&gt;The big picture looks quite bad right now. Upon installation any package from npm which uses any CSS in JS library different than what&amp;#39;s used in the project already, one more library will be installed. Given the fact that currently there are 5-10 well-known CSS in JS solutions, the chances are good that your build will contain all of them at some point.&lt;/p&gt;
&lt;p&gt;To solve this, we started to work on &lt;a href=&quot;https://github.com/cssinjs/istf-spec&quot;&gt;the ISTF (Interoperable Styling Transfer Format) standard&lt;/a&gt;. The specification describes a CSS notation designed for high-performance parsing and will serve as an intermediate format for publishing. It is a layer between the consumer library and the authoring library/tool.&lt;/p&gt;
&lt;p&gt;Publishers will be able to transpile styles to this format before publishing a package to npm similar to what we do with Babel for ES6. Consumer libraries will then be able to use this format to render CSS most efficiently.&lt;/p&gt;
&lt;p&gt;I think this format is the future not only for all CSS in JS libraries but also for well-established languages like Sass. For the end-user, it means that they will be able to use any interface with any syntactic sugar they like to produce CSS, and the result can still be processed by just one library of their choice implementing ISTF, no matter whether it&amp;#39;s on the server or the client.&lt;/p&gt;
&lt;p&gt;To those who prefer static CSS, don&amp;#39;t worry, this case is on top of our priorities. We are not going to force you to generate CSS at runtime.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Take open source seriously. I learned 90% of what I know about computers and programming from it. Also, it is the best way to share the knowledge and become a better engineer and ultimately a better person. I am still learning and trying to become better. It is a lifelong process, so it is important to choose the way we do it wisely.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/iamstarkov&quot;&gt;@iamstarkov&lt;/a&gt; created a &lt;a href=&quot;https://github.com/iamstarkov/theming&quot;&gt;unified theming solution&lt;/a&gt; for React which will be soon used by all the key CSS in JS libraries.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/olivtassinari&quot;&gt;@olivtassinari&lt;/a&gt; is doing a great job persistently maintaining Material UI library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/_developit&quot;&gt;@_developit&lt;/a&gt; is pushing the boundaries of what is possible within 3Kb.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/iamsapegin&quot;&gt;@iamsapegin&lt;/a&gt; created a tool called &lt;a href=&quot;https://react-styleguidist.js.org/&quot;&gt;React Styleguidist&lt;/a&gt; which provides the best dev environment to write components.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; I &lt;a href=&quot;https://survivejs.com/blog/styleguidist-interview/&quot;&gt;interviewed Artem earlier about Styleguidist&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Oleg! I share your sense of design when it comes to plugin systems. Composition seems like a strong way to solve a lot of problems even if you get certain news in return.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/cssinjs/jss&quot;&gt;learn more about JSS in GitHub&lt;/a&gt; and &lt;a href=&quot;http://cssinjs.org/&quot;&gt;the official site of JSS&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>renovate - Keep npm dependencies up-to-date - Interview with Rhys Arkins</title><id>arenovatekeepnpmdependenciesuptodateinterviewwithrhysarkins2017-07-03t00:00:00z</id><link href="https://survivejs.com/blog/renovate-interview/"></link><updated>2017-07-03T00:00:00Z</updated><content type="html">&lt;p&gt;There&amp;#39;s one pain most JavaScript developers share - dependency management. More specifically, how to keep them up to date. Sometimes even one month is a long time as improvements keep coming and the dependencies changing.&lt;/p&gt;
&lt;p&gt;To understand a potential solution to this problem, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/rarkins&quot;&gt;Rhys Arkins&lt;/a&gt;, the author of &lt;a href=&quot;https://www.npmjs.com/package/renovate&quot;&gt;renovate&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/3cf3527d1ff144dd61717720c458802b?s=200&quot; alt=&quot;Rhys Arkins&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

For the past few years I&amp;#39;ve been building a rental information site in Singapore called &lt;a href=&quot;https://keylocation.sg&quot;&gt;Key Location&lt;/a&gt;. Prior to this I was lucky to catch the tail end of a great period in &amp;quot;telecoms&amp;quot; via a startup that IPO&amp;#39;d and was later acquired.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-renovate-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-renovate-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;renovate&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-renovate-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Renovate provides a way to automate the updating of &lt;code&gt;package.json&lt;/code&gt; dependencies within a project&amp;#39;s workflow via the use of branches, CI testing and pull requests.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-renovate-work-&quot; id=&quot;how-does-renovate-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;renovate&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-renovate-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Renovate scans each repository for all &lt;code&gt;package.json&lt;/code&gt; files, and checks with the npm registry if any existing dependencies have newer versions available.&lt;/p&gt;
&lt;p&gt;Once &lt;em&gt;renovate&lt;/em&gt; has a list of upgrade candidates, it creates branches in the repository for testing each upgrade individually, and can also open pull requests - either immediately after the branch is created or after tests have completed.&lt;/p&gt;
&lt;p&gt;By default it also separates major releases into their own branches / pull requests. For example, you might be testing a patch update to webpack 2.x while also seeing if / where webpack 3.0 breaks in your build.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s somewhat configurable and tries not to be too opinionated, so almost every step above could be accompanied with a &amp;quot;...unless you configure it to...&amp;quot; disclaimer.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-renovate-differ-from-other-solutions-&quot; id=&quot;how-does-renovate-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;renovate&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-renovate-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main alternative that many are familiar with is &lt;a href=&quot;https://greenkeeper.io/&quot;&gt;Greenkeeper&lt;/a&gt;, a commercial &lt;em&gt;service&lt;/em&gt; for a similar purpose that has deservedly become fairly well known and used.&lt;/p&gt;
&lt;p&gt;Philosophically, &lt;em&gt;renovate&lt;/em&gt; differs by being an &amp;quot;open source first&amp;quot; project where the primary aim is to allow people to run it themselves easily (e.g. with &lt;code&gt;npm i -g renovate&lt;/code&gt;). Existing commercial services had / have the approach of &amp;quot;telling you when updates to your dependencies break your software&amp;quot;.&lt;/p&gt;
&lt;p&gt;I prefer a default approach of locking down exactly what dependencies are present and not upgrading unless they pass tests. For instance, these other solutions pin dependency versions if something breaks, whereas I prefer to pin the versions by default, including using yarn or npm lock files.&lt;/p&gt;
&lt;p&gt;Technically, &lt;em&gt;renovate&lt;/em&gt; has a few nice features which I believe are currently unique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for both GitHub and GitLab&lt;/li&gt;
&lt;li&gt;Autodiscovery of all &lt;code&gt;package.json&lt;/code&gt; files in a monorepo&lt;/li&gt;
&lt;li&gt;Configurable options at global-, repository-, package file-, dependency &lt;em&gt;type&lt;/em&gt;- and package-level (including using regex matching patterns to group related updates)&lt;/li&gt;
&lt;li&gt;Fully configurable branch, commit and pull request strings, via handlebars templates&lt;/li&gt;
&lt;li&gt;Automatic generation of &lt;code&gt;yarn.lock&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt; files with any &lt;code&gt;package.json&lt;/code&gt; updates, if they already existed&lt;/li&gt;
&lt;li&gt;Policy-based automerge of dependencies (e.g. minor updates only, &lt;code&gt;devDependencies&lt;/code&gt;-only, etc) once they pass tests, to reduce human work&lt;/li&gt;
&lt;li&gt;Branch-only automerges: Automerges can also be done with branch commits or merge pushes - no pull request necessary - which greatly reduces the daily GitHub notifications &amp;quot;noise&amp;quot;&lt;/li&gt;
&lt;li&gt;Keeping dependencies versions in a &lt;code&gt;yarn.lock&lt;/code&gt; updated even if &lt;code&gt;package.json&lt;/code&gt; versions haven&amp;#39;t changed&lt;/li&gt;
&lt;li&gt;&lt;em&gt;renovate&lt;/em&gt; is itself stateless and bases its logic solely on the npm registry and whatever is in the &lt;code&gt;repository&lt;/code&gt;. So if there&amp;#39;s a crash or resumption, there is no need to rebuild anything or worry about duplicates.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-renovate-&quot; id=&quot;why-did-you-develop-renovate-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;renovate&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-renovate-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like many others, I had a personal itch to scratch.&lt;/p&gt;
&lt;p&gt;I previously had needed to &lt;em&gt;disable&lt;/em&gt; automatic dependency updates on my main website project because none of the existing services supported monorepo repository structures. After subsequently wasting half a day troubleshooting a browser issue which turned out to be caused and already fixed by a dependency I had missed updating, I decided I&amp;#39;d hack together a script to manage monorepo &lt;code&gt;package.json&lt;/code&gt; updates from the CLI.&lt;/p&gt;
&lt;p&gt;Once I found out that it could be done relatively elegantly using the GitHub REST API (not requiring any &lt;code&gt;git&lt;/code&gt; cloning), I decided to make it less hacky and open source it for others in a similar situation. So primarily this was driven by a technical need rather than any particular desire to build an open source version of something.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve recently added &lt;a href=&quot;https://github.com/apps/renovate&quot;&gt;renovate as a free GitHub app&lt;/a&gt;. Again, the code for this is completely open source and I was happy to find out how simple it was to add the integration. As simple as running the script is, I think a lot of people prefer not to maintain yet another server or cron job in their routines so this is another option.&lt;/p&gt;
&lt;p&gt;Functionality-wise, I&amp;#39;m looking into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improved traceability of logs, e.g. being able to filter to just a single dependency to work out why or why it wasn&amp;#39;t updated to X&lt;/li&gt;
&lt;li&gt;Native &amp;quot;semantic&amp;quot; commit message support. Currently users can edit/override templates as they wish, but it would be nice to automatically support Angular-style semantic commits out of the box, for instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-renovate-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-renovate-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;renovate&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-renovate-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The draw of open source continues to be strong, and not just for any philosophical reasons. I now feel hesitant to adopt any libraries where I can&amp;#39;t see the source and the issues or know what&amp;#39;s going on under the hood, even if I don&amp;#39;t intend to actively contribute. I was happy to see GitHub open source their Firebase JavaScript SDK recently, for example - a huge improvement on their previous approach which was closed in every way.&lt;/p&gt;
&lt;p&gt;One related trend I would &lt;em&gt;like&lt;/em&gt; to see is the end to &amp;quot;snippets&amp;quot; for embedding closed-source third party libraries into websites. Developers need to seize back more control in terms of bundling, loading timing and priority, etc. The whole &amp;quot;this won&amp;#39;t slow down your website&amp;quot; disclaimer that most use is obviously a load of bunk.&lt;/p&gt;
&lt;p&gt;There are few vendors supporting this approach so far (i.e. open sourcing their client JS code as an alternative to loading via snippet) and market forces would suggest this is because customer developers aren&amp;#39;t asking loud enough.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You would be surprised at how much experience and exposure you can get by contributing small patches and fixes to existing open source libraries.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you start noticing certain prolific open source authors, it&amp;#39;s like &lt;a href=&quot;https://www.inc.com/lee-colan/how-to-use-the-yellow-car-phenomenon.html&quot;&gt;the yellow car phenomenom&lt;/a&gt; and you start noticing the same people everywhere. &lt;a href=&quot;https://github.com/bahmutov&quot;&gt;Gleb Bahmutov&lt;/a&gt; is one of those for me, although I&amp;#39;m not sure if he could easily decide which of his libraries to make a focus of an interview.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Naturally I need to thank the hundreds of authors and maintainers of software I use every day, including as a part of &lt;em&gt;renovate&lt;/em&gt;. And thanks for having me on the blog!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Rhys! &lt;em&gt;renovate&lt;/em&gt; certainly looks like a solid solution to an important problem.&lt;/p&gt;
&lt;p&gt;Learn more about &lt;a href=&quot;https://github.com/singapore/renovate&quot;&gt;the project at GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Most.js - Monadic streams for reactive programming - Interview with Brian Cavalier</title><id>amostjsmonadicstreamsforreactiveprogramminginterviewwithbriancavalier2017-06-26t00:00:00z</id><link href="https://survivejs.com/blog/most-interview/"></link><updated>2017-06-26T00:00:00Z</updated><content type="html">&lt;p&gt;If there&amp;#39;s one trend that has been nice to notice, it&amp;#39;s the rise of reactive programming. You can see this in technologies like &lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;RxJS&lt;/a&gt; and &lt;a href=&quot;https://cycle.js.org/&quot;&gt;cycle.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about the topic, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/briancavalier&quot;&gt;Brian Cavalier&lt;/a&gt;, one of the authors of &lt;a href=&quot;https://github.com/cujojs/most&quot;&gt;Most.js&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/4835a1b9196924c966678610de051071.jpg&quot; alt=&quot;Brian Cavalier&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Brian Cavalier&lt;/figcaption&gt;&lt;/figure&gt;

I&amp;#39;m a software engineer at Yelp in Pittsburgh, PA, where I work on Node-based web services and distributed systems. I had done all kinds of stuff before I started writing JavaScript: Basic, Assembly, C, C++, Ruby, ML, and way more Java than I want to admit. Recently, I&amp;#39;ve done a decent amount of Haskell, and have been actively digging into Purescript, Rust, and Idris. I love learning about how to solve problems in different ways.
&lt;/p&gt;

&lt;p&gt;In 2007, I was working for a Pittsburgh startup as a Java server-side engineer. They wanted to create an ambitious web UI, and I ended up diving into the role of front-end JavaScript developer. A few years later, John Hann (unscriptable) and I created cujojs, and I became hooked on doing open source work.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-most-js-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-most-js-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Most.js&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-most-js-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most.js is a library for reactive programming. It helps you combine streams of events, like DOM Events, to create highly interactive applications. Asynchronous programming is hard because trying to reason about when things happen and in what order is hard. Most.js makes this easier by giving you a declarative DSL for explicitly describing how asynchronous events relate to each other.&lt;/p&gt;
&lt;p&gt;For example, if your goal is to log all the &lt;code&gt;mousemove&lt;/code&gt; events until the user clicks the mouse, you can declare that&amp;#39;s what you want:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; mousemove&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; click &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`@most/dom-event`&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;mousemove&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;until&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ability to describe &lt;em&gt;what&lt;/em&gt; the result should be, rather than having to try to detail all the steps of &lt;em&gt;how&lt;/em&gt; to achieve it, is a central idea of Most.js&amp;#39;s declarative functional API.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-most-js-work-&quot; id=&quot;how-does-most-js-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Most.js&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-most-js-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The primary architectural concept in Most.js is the &lt;code&gt;Stream&lt;/code&gt;, which represents an asynchronous sequence of discrete events, like mouse clicks, or WebSocket messages. Under the hood, a Most.js &lt;code&gt;Stream&lt;/code&gt; is a composition of two other important concepts: &lt;code&gt;Source&lt;/code&gt; and &lt;code&gt;Sink&lt;/code&gt;. A &lt;code&gt;Source&lt;/code&gt; produces events, and a &lt;code&gt;Sink&lt;/code&gt; consumes them.&lt;/p&gt;
&lt;p&gt;For example, a particular kind of &lt;code&gt;Source&lt;/code&gt; may represent DOM events, like &lt;code&gt;mousemove()&lt;/code&gt; and &lt;code&gt;click()&lt;/code&gt; above, which produce DOM &lt;code&gt;mousemove&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt; events on the &lt;code&gt;document&lt;/code&gt;. In contrast, &lt;code&gt;observe()&lt;/code&gt; is an example of a particular kind of &lt;code&gt;Sink&lt;/code&gt; that consumes events, and passes them to a function you provide.&lt;/p&gt;
&lt;p&gt;The vast majority of operations involve both a &lt;code&gt;Source&lt;/code&gt; and a &lt;code&gt;Sink&lt;/code&gt;. For example. &lt;code&gt;map()&lt;/code&gt;, which transforms all the events in a stream, acts as a &lt;code&gt;Sink&lt;/code&gt; by consuming events, and as a &lt;code&gt;Source&lt;/code&gt; then producing new event values after applying a function to them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token function&quot; &gt;mousemove&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;until&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;event &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;clientX&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;clientY&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, when you create and transform a Most.js &lt;code&gt;Stream&lt;/code&gt;, you&amp;#39;re building up a chain of &lt;code&gt;Sources&lt;/code&gt; and &lt;code&gt;Sinks&lt;/code&gt; that represent the behavior of the &lt;code&gt;Stream&lt;/code&gt;. However, Most.js &lt;code&gt;Streams&lt;/code&gt; are not active until you consume them, by using one of the &amp;quot;terminal&amp;quot; combinators, &lt;code&gt;observe&lt;/code&gt;, &lt;code&gt;drain&lt;/code&gt;, or &lt;code&gt;reduce&lt;/code&gt;. When you call one of those, the &lt;code&gt;Stream&lt;/code&gt; sends a signal to the &lt;code&gt;Source&lt;/code&gt;-&lt;code&gt;Sink&lt;/code&gt; chain to the &lt;code&gt;Source&lt;/code&gt; at the very beginning of the chain. That producer &lt;code&gt;Source&lt;/code&gt; will then begin producing events.&lt;/p&gt;
&lt;p&gt;Events are then propagated synchronously from the &lt;code&gt;Source&lt;/code&gt; through the &lt;code&gt;Source&lt;/code&gt;-&lt;code&gt;Sink&lt;/code&gt; chain by a simple method call. In the example above:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;mousemove&lt;/code&gt; producer &lt;code&gt;Source&lt;/code&gt; propagates a &lt;code&gt;mousemove&lt;/code&gt; DOM event by calling the &lt;code&gt;until&lt;/code&gt; Sink&amp;#39;s &lt;code&gt;event&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;If the mouse hasn&amp;#39;t yet been clicked on the &lt;code&gt;document&lt;/code&gt;, the &lt;code&gt;until&lt;/code&gt; Sink propagates an event to the &lt;code&gt;map&lt;/code&gt; &lt;code&gt;Sink&lt;/code&gt; by calling its &lt;code&gt;event&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;map&lt;/code&gt; &lt;code&gt;Sink&lt;/code&gt; then applies the mapping function to the event value and calls the &lt;code&gt;observe&lt;/code&gt; &lt;code&gt;Sink&lt;/code&gt;&amp;#39;s &lt;code&gt;event&lt;/code&gt; method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This direct synchronous method call event propagation model is one of the keys to Most.js&amp;#39;s simple and performant internal architecture.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Check out the &lt;a href=&quot;https://github.com/cujojs/most/wiki/Architecture&quot;&gt;Architecture wiki&lt;/a&gt;, to read more about the details of the Source-Sink chain, including how error handling works, and avoids having to &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; in every combinator.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-most-js-differ-from-other-solutions-&quot; id=&quot;how-does-most-js-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Most.js&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-most-js-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#performance&quot; id=&quot;performance&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Performance&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#performance&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I think many people know Most.js because of its performance characteristics, and that was certainly a goal from the beginning, along with modularity and a simple API. The simple call stack event propagation architecture, plus hoisting &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; out of combinator implementations were two of the earliest and biggest performance improvements.&lt;/p&gt;
&lt;p&gt;Most.js performs several other optimizations automatically, based on algebraic equivalences. A relatively well-known example is combining multiple &lt;code&gt;map&lt;/code&gt; operations, e.g. &lt;code&gt;map(g, map(f, stream))&lt;/code&gt;, into a single &lt;code&gt;map&lt;/code&gt; by doing function composition on &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The operation also combines multiple &lt;code&gt;filter&lt;/code&gt; operations, multiple &lt;code&gt;merge&lt;/code&gt; operations, multiple &lt;code&gt;take&lt;/code&gt; and &lt;code&gt;skip&lt;/code&gt;, among others. These optimizations reduce the number of method calls needed to propagate an event from producer to consumer.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#unapologetically-declarative&quot; id=&quot;unapologetically-declarative&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Unapologetically Declarative&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#unapologetically-declarative&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To me, though, Most.js&amp;#39;s more strict adherence to a smaller declarative API is even more important, and maybe even a bigger differentiator.&lt;/p&gt;
&lt;p&gt;Asynchronous programming is complicated in general. JavaScript programs often deal with many interleaving asynchronous events, and as programmers, we have to try to coordinate all of them. Using imperative approaches, especially those that rely on the developer to manage shared mutable state, to try to coordinate highly asynchronous systems is difficult because we have to think carefully about the operational semantics of the system.&lt;/p&gt;
&lt;p&gt;We have to look at our static code and execute it in our heads to figure out the order(s) in which things might happen. Then, we have to convince ourselves that our code is correct for each possible ordering.&lt;/p&gt;
&lt;p&gt;As one example, Most.js event streams&amp;#39; core API doesn&amp;#39;t provide an imperative &amp;quot;unsubscribe&amp;quot; function. Instead, you use combinators such as &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;takeWhile&lt;/code&gt;, and &lt;code&gt;skipAfter&lt;/code&gt; to declare, up front, the slice of an event stream you want. You declare what your intentions are, and Most.js takes care of the how and when.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-most-js-&quot; id=&quot;why-did-you-develop-most-js-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Most.js&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-most-js-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two big personal reasons are learning, and that reactive programming is the way I want to be building front-end JS apps.&lt;/p&gt;
&lt;p&gt;I believe in learning by doing. I wanted to find out more about reactive programming and Functional Reactive Programming (FRP) because they just seemed like such a great fit for front-end JS development. After I had discovered reactive programming concepts, I started reading all the papers and source code I could find. Finally, I decided that the best way to learn even more was to try to implement something. That&amp;#39;s basically how the project started.&lt;/p&gt;
&lt;p&gt;As for technical motivations, there were several. Performance, architectural and API simplicity, and modularity have been driving factors from the beginning.&lt;/p&gt;
&lt;p&gt;A while back, there was a GitHub issue asking why someone might pick Most.js over other reactive libs. I &lt;a href=&quot;https://github.com/cujojs/most/issues/96#issuecomment-77769425&quot;&gt;wrote a longer answer there&lt;/a&gt; with more detail about the technical reasons and differences with other libs. It&amp;#39;s still a good read and sums up my motivation pretty well.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-most-core&quot; id=&quot;-most-core&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;@most/core&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-most-core&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are a few exciting things on the horizon. The Most.js team is working on &lt;a href=&quot;https://github.com/mostjs/core&quot;&gt;&lt;code&gt;@most/core&lt;/code&gt;&lt;/a&gt;, where we&amp;#39;ve extracted a minimal core of the Most.js architecture and combinators. It&amp;#39;s a base reactive events package that has a strict focus on a lean, declarative API, and incorporates more functional programming concepts. For example, it has a functions-only API, where every function is curried, so you get partial application and function composition.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s also even more modular and exposes more pieces that other developers can use in building new event sources and combinators. For example, Most.js&amp;#39;s high-performance scheduler is available in the &lt;code&gt;@most/scheduler&lt;/code&gt; package. And we&amp;#39;re planning to expose many of Most.js&amp;#39;s internal testing tools as a part of &lt;code&gt;@most/core&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can &lt;code&gt;npm install --save @most/core&lt;/code&gt; to try it today. It&amp;#39;s not yet 1.0, and we have some work to do on documentation and examples, but they&amp;#39;re very usable.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#most-js-2-0&quot; id=&quot;most-js-2-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Most.js 2.0&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#most-js-2-0&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These new &lt;code&gt;@most/core&lt;/code&gt; packages will for the basis of Most.js 2.0. They&amp;#39;re a separate project at the moment, but once they hit 1.0, we&amp;#39;ll start the work of building Most.js 2.0 on top of them.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#experimental-packages&quot; id=&quot;experimental-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Experimental packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#experimental-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We&amp;#39;re also experimenting with a &lt;a href=&quot;https://www.npmjs.com/package/@briancavalier/most-behavior&quot;&gt;package of continuous values&lt;/a&gt;, aka &amp;quot;Behaviors&amp;quot; or &amp;quot;Properties&amp;quot;, values that vary over time, as a companion to Most.js&amp;#39;s discrete event streams. The notion of continuous values is quite common in FRP in other functional languages, like Haskell and PureScript, and a few other JS reactive libraries, such as &lt;a href=&quot;https://baconjs.github.io/&quot;&gt;Bacon.js&lt;/a&gt; and &lt;a href=&quot;https://rpominov.github.io/kefir/&quot;&gt;kefir&lt;/a&gt;, provide continuous them.&lt;/p&gt;
&lt;p&gt;Some things can be modeled more simply as values that vary over time rather than as discrete occurrences (events). For example, a mouse click is fairly clearly a thing that occurs, an event. However, the position of a spaceship in a game is a value. It varies over time as the ship moves but doesn&amp;#39;t &lt;em&gt;occur&lt;/em&gt; per se.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re very use case driven, and we love feedback, so we encourage folks to &lt;a href=&quot;https://www.npmjs.com/package/@briancavalier/most-behavior&quot;&gt;try it out&lt;/a&gt; and &lt;a href=&quot;https://gitter.im/cujojs/most&quot;&gt;give us feedback in gitter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-most-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-most-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Most.js&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-most-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I see a trend toward functional programming techniques in the JavaScript community. I think it&amp;#39;s fascinating how JavaScript, being such a flexible language, can support both OO and functional techniques fairly effectively. Declarative (vs. imperative) programming seems to be on the rise and fits real with the similar swell in reactive programming techniques.&lt;/p&gt;
&lt;p&gt;Typescript and Flow have also raised the awareness of the benefits of strong static type systems. I think we&amp;#39;ll continue to see more tooling around type checking: better IDE support, better type systems, code generators, tools for dealing with foreign data (like &lt;a href=&quot;https://pursuit.purescript.org/packages/purescript-foreign-generic/4.1.0/docs/Data.Foreign.Class&quot;&gt;PureScript&amp;#39;s foreign package&lt;/a&gt;). These technologies make everything safer by reducing the kinds of mistakes that can make it through to deployment.&lt;/p&gt;
&lt;p&gt;We plan to continue embracing these things in Most.js. For example, Most.js has a full set of TypeScript type definitions, and &lt;code&gt;@most/core&lt;/code&gt; has a complete set of &lt;em&gt;both&lt;/em&gt; TypeScript and Flow type definitions. We use type checking in the development of Most.js and &lt;code&gt;@more/core&lt;/code&gt;, and even type check our unit tests.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a few things that have become very important to me in every bit of programming I do now - that transcend any project, library, framework, or programming paradigm du jour.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#be-fearless-about-learning&quot; id=&quot;be-fearless-about-learning&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Be fearless about learning&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#be-fearless-about-learning&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first is learning by doing, or perhaps more accurately in my case, learning by trying and failing! One key has been learning that it&amp;#39;s ok to fail. It&amp;#39;s ok to read about a concept, or algorithm, or data structure in a blog or paper, and then write code solely to try to learn more about how the thing works. Make lots of mistakes trying to get the thing to work.&lt;/p&gt;
&lt;p&gt;Not everything has to become a long-lived project. If you learn something (even if its the best way &lt;em&gt;not&lt;/em&gt; to do something!), you can take that with you no matter what happens to the code.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#focus-on-simplicity&quot; id=&quot;focus-on-simplicity&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Focus on simplicity&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#focus-on-simplicity&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Simplicity has become the most important guiding principal in everything programming-related I do. Simplicity in code, API design, directory structure, project management, communicating with other team members ... everything.&lt;/p&gt;
&lt;p&gt;Simple is hard. It requires think time and sometimes trying and failing. Simple helps others. Sometimes it takes a while to reap the benefits of simple.&lt;/p&gt;
&lt;p&gt;On the other hand, &amp;quot;easy&amp;quot; may feel like it helps right now, but often lays a complexity land mine you (or someone else) will step on later. Often, you have to find a balance between the two. I always try to err on the side of simple when I can.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#be-kind&quot; id=&quot;be-kind&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Be kind&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#be-kind&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;#39;ve gotten way more from the open source web community than I&amp;#39;ve given to it. In many cases, that&amp;#39;s been due to interacting with and learning from other developers who have treated me with respect and kindness. I&amp;#39;m very thankful for the excellent people in the web community who help others.&lt;/p&gt;
&lt;p&gt;At some point, you&amp;#39;ll be the one who knows more than someone else. When it happens, be one of that kind, awesome people.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think an interview with &lt;a href=&quot;https://github.com/TylorS167&quot;&gt;Tylor Steinberger&lt;/a&gt;, creator of &lt;a href=&quot;https://github.com/motorcyclejs&quot;&gt;Motorcycle.js&lt;/a&gt;, and a Most.js contributor would be great. It&amp;#39;s amazing that he&amp;#39;s completely self-taught.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve become a huge fan of &lt;a href=&quot;https://rollupjs.org&quot;&gt;Rollup&lt;/a&gt;, and I think it&amp;#39;d be cool to interview &lt;a href=&quot;https://github.com/Rich-Harris&quot;&gt;Rich Harris&lt;/a&gt; about it, and about modern JavaScript build tooling in general.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; Brian suggested interviewing &lt;a href=&quot;https://github.com/paf31&quot;&gt;Phil Freeman&lt;/a&gt;, the author &lt;a href=&quot;http://www.purescript.org&quot;&gt;PureScript&lt;/a&gt;. As it happens, &lt;a href=&quot;https://survivejs.com/blog/purescript-interview/&quot;&gt;I interviewed him earlier&lt;/a&gt;. So go check out the interview.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I really want to thank the Most.js core team: &lt;a href=&quot;https://github.com/TylorS167&quot;&gt;Tylor Steinberger&lt;/a&gt;, &lt;a href=&quot;https://github.com/davidchase&quot;&gt;David Chase&lt;/a&gt;, and &lt;a href=&quot;https://github.com/frikki&quot;&gt;Frederik Krautwald&lt;/a&gt;. They&amp;#39;ve contributed a ton of ideas and code, and they proposed the idea of &lt;code&gt;@most/core&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given that Most.js started as a project to help me learn about reactive programming, I never expected it to become as popular as it has. Thanks to everyone who has supported it, who has sent a PR, and who is using it to build cool things!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Brian! It&amp;#39;s refreshing to see reactive approaches make their way to JavaScript. I feel a lot of these ideas are slowly but surely beginning to enter the mainstream as people discover their value. By changing your thinking you can forget about older problems while gaining more powerful constructs to use.&lt;/p&gt;
&lt;p&gt;To learn more about Most.js, head to &lt;a href=&quot;https://github.com/cujojs/most&quot;&gt;Most.js GitHub page&lt;/a&gt; and study especially the examples.&lt;/p&gt;
</content></entry><entry><title>React Alicante - The international React.js conference in Spain - Interview with Victoria Quirante</title><id>areactalicantetheinternationalreactjsconferenceinspaininterviewwithvictoriaquirante2017-06-23t00:00:00z</id><link href="https://survivejs.com/blog/react-alicante-interview/"></link><updated>2017-06-23T00:00:00Z</updated><content type="html">&lt;p&gt;There are plenty of events out there. What is it like to organize one? I know it&amp;#39;s hard work based on what I&amp;#39;ve seen.&lt;/p&gt;
&lt;p&gt;To get more perspective, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/vicqr&quot;&gt;Victoria Quirante&lt;/a&gt;, one of the organizers of &lt;a href=&quot;http://reactalicante.es/&quot;&gt;React Alicante&lt;/a&gt;, a new React conference organized late September in Spain.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/318e6153fb28db314d4ee01964e55f59?s=200&quot; alt=&quot;Victoria Quirante&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I’m a Telecom Engineer from Murcia, Spain. I graduated from the Polytechnic University of Catalonia, doing my master thesis in computer vision at the ETH, in Zurich.
&lt;/p&gt;

&lt;p&gt;I started as a web developer back in 2008 and founded &lt;a href=&quot;http://limenius.com/&quot;&gt;Limenius&lt;/a&gt; together with &lt;a href=&quot;http://twitter.com/nacmartin&quot;&gt;Nacho Martín&lt;/a&gt; in 2011. There we provide consulting, training and development services to other companies, working mainly with React, React Native, Elixir, and Symfony.&lt;/p&gt;
&lt;p&gt;Apart from coding, I love playing football (soccer), swimming outdoors, and reading. I have run a couple of half-marathons, and this summer I plan to kayak around the island of Menorca in eight days.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-alicante-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-alicante-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;React Alicante&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-alicante-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://reactalicante.es/&quot;&gt;React Alicante&lt;/a&gt; is an international conference focused on React.js and React Native hosted in sunny Alicante, Spain. Its first edition is going to take place on September 28-30, 2017. There will be one workshop day for beginners and two conference days with more advanced talks and case studies.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-react-alicante-offer-&quot; id=&quot;what-does-react-alicante-offer-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does &lt;em&gt;React Alicante&lt;/em&gt; offer?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-react-alicante-offer-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It offers the opportunity of spending a few days improving your developer skills, meeting people from around the world, and enjoying the food and warm weather from the Mediterranean coast of Spain.&lt;/p&gt;
&lt;p&gt;Regarding the content, the event will start with two workshops on Thursday, where participants will learn the fundamentals of React and React Native and code their first application in both technologies. The conference itself will take place on Friday and Saturday. It will be single-tracked, with 7-8 talks each day.&lt;/p&gt;
&lt;p&gt;The venue is a nice hotel (with a terrace pool!) close to Alicante’s port. Lunches and coffee breaks will be served at the hotel. We will also have refreshments at the end of each day, and a closing party on Saturday.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-react-alicante-differ-from-other-events-&quot; id=&quot;how-does-react-alicante-differ-from-other-events-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;React Alicante&lt;/em&gt; differ from other events?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-react-alicante-differ-from-other-events-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our idea is to make sure that the atmosphere is delightful for everyone. In my opinion, when organizing an event like this, there are two things that you need to care of: the quality of the talks and the quality of the networking opportunities.&lt;/p&gt;
&lt;p&gt;People attending want to learn, but they also want to have a good time and the chance to meet other developers. I think it is important to make that easy for them. If they finish the weekend not only with lots of new ideas but also with a few new friends, the experience is much more valuable.&lt;/p&gt;
&lt;p&gt;With that in mind, we are trying to attract people from as many different countries as possible. I honestly believe that things are more fun when you are surrounded by people from different places, and we are trying to create an event with an emphasis on that.&lt;/p&gt;
&lt;p&gt;Apart from that, three keywords: sun, beach, and paella. ;)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-decide-to-arrange-react-alicante-&quot; id=&quot;why-did-you-decide-to-arrange-react-alicante-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you decide to arrange &lt;em&gt;React Alicante&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-decide-to-arrange-react-alicante-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It has been a combination of a few things.&lt;/p&gt;
&lt;p&gt;After trying other front-end options in the past, we have been working with React already for a couple of years, and we are thrilled with it. We believe that both the React and the React Native developer communities should be growing in the next years, and we thought about helping a bit with that.&lt;/p&gt;
&lt;p&gt;On the other hand, in the last times, we have been attending a good amount of international conferences as speakers. Thanks to that, we have got a good picture of what other events offer, as well as an idea of what things work best for all parts involved: attendees, speakers, and sponsors.&lt;/p&gt;
&lt;p&gt;Finally, I think that in Spain there is room for an event like this and that Alicante is the perfect place to host it -because of the weather and the good connections by train and plane, thanks to being a popular tourist destination.&lt;/p&gt;
&lt;p&gt;To sum up, we thought that it was the right time and the right place to do it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The conference has just been announced, and the initial feedback has been really good, we are excited about it. But there is still a lot to do.&lt;/p&gt;
&lt;p&gt;We already have some confirmed speakers, and the &lt;a href=&quot;https://docs.google.com/forms/d/1iH4oHEsgoCcM-HNphjyCvPowp_vQ9hRxepkzt7j2bBk&quot;&gt;call for papers&lt;/a&gt; will be open until June 30th. We plan to announce the full program on July 4th. After that, we need to make sure that everything gets in place for this first edition.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-alicante-&quot; id=&quot;what-does-the-future-look-like-for-react-alicante-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;React Alicante&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-alicante-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We would like to turn it into a yearly event that many front-end developers out there want to attend.&lt;/p&gt;
&lt;p&gt;But of course, the first step is to focus on making this first edition a great experience for everyone attending and taking part.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do not get obsessed with just one technology or too focused on only a particular task. Specialization is good, but the web development world changes fast, and at the beginning, it is more important to get a good foundation, rather that to learn a few libraries by heart.&lt;/p&gt;
&lt;p&gt;My advice would be to start trying to understand how everything works from a high level, then be able to implement a simple back-end and front-end by yourself.&lt;/p&gt;
&lt;p&gt;Try a few different technologies, be open, and then start choosing what things you like most. Specialization should be the last step, not the first one. And being open to the changes and new things coming is key.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would suggest you interview &lt;a href=&quot;http://twitter.com/forbeslindesay&quot;&gt;Forbes Lindesay&lt;/a&gt;. He is the creator of &lt;a href=&quot;http://pugjs.org/api/getting-started.html&quot;&gt;pug&lt;/a&gt;, &lt;a href=&quot;http://cabbiejs.org/&quot;&gt;cabbie&lt;/a&gt; and &lt;a href=&quot;http://esdiscuss.org/&quot;&gt;ESDiscuss&lt;/a&gt;. He has been working on large-scale React applications on Facebook, and he will be giving the workshop “Introduction to React.js” at &lt;a href=&quot;http://reactalicante.es&quot;&gt;React Alicante 2017&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the most enjoyable things about being a software developer is to meet others like you, share your success and horror developer stories with them, and learn from each other. Attending events like React Alicante is one of the best ways of doing it. I hope to see you there! :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Victoria! I hope you get a lot of great people at React Alicante. Maybe I get to participate a React conference one day. :)&lt;/p&gt;
&lt;p&gt;To learn more about the conference, &lt;a href=&quot;http://reactalicante.es/&quot;&gt;go check React Alicante site&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Hard-cover Edition of the Webpack Book and Training</title><id>ahardcovereditionofthewebpackbookandtraining2017-06-22t00:00:00z</id><link href="https://survivejs.com/blog/hardcover-webpack-book/"></link><updated>2017-06-22T00:00:00Z</updated><content type="html">&lt;p&gt;Print on Demand services like &lt;a href=&quot;https://kdp.amazon.com/&quot;&gt;KDP&lt;/a&gt; are ideal for self-publishers like me as they take a lot of pain out of the process. You don&amp;#39;t have to worry about printing or distribution. It&amp;#39;s not free money as you still have to worry about marketing and getting your work noticed.&lt;/p&gt;
&lt;p&gt;To experiment with an option, I had a hard-cover edition of the &lt;a href=&quot;https://survivejs.com/webpack/&quot;&gt;webpack book&lt;/a&gt; made a while ago. Doing this gave me insight into the process and helped me to understand the cost structure, so it&amp;#39;s easier to repeat the process if it seems worthwhile.&lt;/p&gt;
&lt;p&gt;It is surprisingly expensive to get a thick book (499 pages) printed and delivered from a remote location like Finland. My trial run was 40 copies of the book, and I have twenty copies left to sell.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-to-get-a-copy-&quot; id=&quot;how-to-get-a-copy-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How to Get a Copy?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-to-get-a-copy-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To account for the logistics and &amp;quot;rarity&amp;quot;, I decided to price this edition at $100 per piece. You can get two for $150. To keep it fair, I include 30 minutes remote consulting in the price. Let me solve a hard problem for you or at least push you in the right direction.&lt;/p&gt;
&lt;p&gt;If you want one of the remaining copies, &lt;a href=&quot;https://survivejs.typeform.com/to/LUQK0T&quot;&gt;let me know&lt;/a&gt; and I&amp;#39;ll get one sent to you after payment has gone through.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Due to logistic issues, the books don&amp;#39;t come with a signature. But if we meet, I&amp;#39;ll be happy to sign the book for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-training&quot; id=&quot;webpack-training&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Training&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-training&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I&amp;#39;ve been completing &lt;a href=&quot;https://survivejs.com/blog/euro-summer-tour-2017/&quot;&gt;my second tour&lt;/a&gt;, this has been a good chance to improve my &lt;a href=&quot;https://survivejs.com/training/&quot;&gt;training offering&lt;/a&gt;. I&amp;#39;ve pushed it to include more exercises, and I also redid most of my React material. I also have a two-day version of the webpack material. One day can be too intense especially with a mixed group of people.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m organizing workshops in three places with the help of local partners. See the links below if you want to participate. The pricing depends on the location.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;webpack in Vienna, Austria - 100 euros or more for beginner workshop (full day), 200 euros or more for advanced workshop. I&amp;#39;m going to try kind of &amp;quot;pay what you want&amp;quot; pricing based on satisfaction here. Both take a full day.&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;https://ti.to/peerigon/webpack-workshop&quot;&gt;webpack in Augsburg, Germany&lt;/a&gt;&lt;/del&gt; - Prices for a full day begin from 399 euros. It is cheaper when you participate to both.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;https://skillsmatter.com/conferences/8264-fullstack-2017-the-conference-on-javascript-node-and-internet-of-things#program&quot;&gt;webpack in London, UK&lt;/a&gt;&lt;/del&gt; - Two-hour super-condensed workshop for FullStack 2017.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Let me know if you want a workshop in your city (preferably within Europe). Maybe we can organize something. We should also do a free meetup session then too.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-book-extras&quot; id=&quot;webpack-book-extras&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Book Extras&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-book-extras&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To reward the paying readers of my &lt;a href=&quot;https://survivejs.com/webpack/&quot;&gt;webpack book&lt;/a&gt;, I&amp;#39;ve added two extras to &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;Leanpub edition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first extra contains a two-page cheat sheet with the book essentials in a condensed format you can print out. I give signed copies to my workshop participants and random people I might encounter during my travels.&lt;/p&gt;
&lt;p&gt;I compiled the second extra based on QA sessions I&amp;#39;ve been running with Tobias. It&amp;#39;s a roughly twenty-page document full of answers to hard webpack questions.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is still more work for me to do (next book for instance) but things are rolling in a good direction. I hope to announce more in the next status update! Enjoy the extras.&lt;/p&gt;
</content></entry><entry><title>Working with Junior Developers - Interview with Aimee Knight</title><id>aworkingwithjuniordevelopersinterviewwithaimeeknight2017-06-20t00:00:00z</id><link href="https://survivejs.com/blog/junior-interview/"></link><updated>2017-06-20T00:00:00Z</updated><content type="html">&lt;p&gt;Even though software development is often seen from a technical perspective, there&amp;#39;s a softer side to it. It is hard to avoid not having to work with people unless you are a mythical programmer living in a cave somewhere in Finland.&lt;/p&gt;
&lt;p&gt;To understand the topic better, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/aimee_knight&quot;&gt;Aimee Knight&lt;/a&gt; about working with junior developers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://avatars1.githubusercontent.com/u/2165184?v=3&amp;s=460&quot; alt=&quot;Aimee Knight&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m a former competitive figure skater, graduate of the Nashville Software School, and software engineer at DramaFever, a subsidiary of Warner Bros.
&lt;/p&gt;

&lt;p&gt;Outside of work, I&amp;#39;m a weekly panelist on the JavaScript Jabber podcast, and I regularly participate in a variety others. In my spare time I love speaking at conferences, playing with new technology, running, working out, and trying new flavors of Kombucha!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-do-you-work-with-junior-developers-&quot; id=&quot;how-do-you-work-with-junior-developers-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How do you &lt;em&gt;work with junior developers&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-do-you-work-with-junior-developers-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My work with junior developers comes mostly in the form of mentorship. Indirectly, I also believe I&amp;#39;m able to reach juniors on a deep level by being a panelist on JavaScript Jabber and, through my conference talks and blog posts.&lt;/p&gt;
&lt;p&gt;As far as mentorship, I&amp;#39;ve worked one on one with developers in a more formal sense where we set up weekly chats, and I also devote a substantial amount of time each week making myself available for more one of conversations on the phone, through Twitter DM or email. I&amp;#39;ve found the latter to be the most common.&lt;/p&gt;
&lt;p&gt;In regards to JavaScript Jabber, I usually spend a bit of time prepping for each episode, and I always try to write down the questions that I initially have since I know others getting started will probably be in the same boat!&lt;/p&gt;
&lt;p&gt;For my conference talks, I spend a lot of time brainstorming ideas and organizing my content in a way that will make it approachable to newbies, but also valuable to someone who&amp;#39;s been programming for a decade. That is the most challenging aspect of speaking for me, but as someone newer, it&amp;#39;s essential to me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-working-with-junior-developers-differ-from-working-with-senior-developers-&quot; id=&quot;how-does-working-with-junior-developers-differ-from-working-with-senior-developers-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;working with junior developers&lt;/em&gt; differ from working with senior developers?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-working-with-junior-developers-differ-from-working-with-senior-developers-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Working with junior developers is only slightly different from working with a mid-level or senior developer in my opinion. With junior developers, it&amp;#39;s imperative to have a level of awareness in the situation.&lt;/p&gt;
&lt;p&gt;In other words, a lot of juniors feel intimidated, so it&amp;#39;s important to check in often and ask direct questions like, &amp;quot;does that make sense&amp;quot;? It&amp;#39;s far too common for newer developers to not speak up due to the intimidation factor. I also advise when pairing to resist the urge to take over and let the junior drive!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-to-work-with-junior-developers-&quot; id=&quot;why-to-work-with-junior-developers-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why to &lt;em&gt;work with junior developers&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-to-work-with-junior-developers-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hear senior developers express to me how valuable and thought to provoke it&amp;#39;s been for them when a junior presents them with carefully thought out questions. Statistically, it&amp;#39;s also precious for seniors to work with juniors. Mentors are six times more likely to be promoted, and 20% more likely to get a raise.&lt;/p&gt;
&lt;p&gt;Besides that, working with a junior can do wonders for burnout. Most juniors, especially those from boot camps are extremely hungry. The energy and passion they have for the field are contagious!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are so many things I could name, but personally, I&amp;#39;m most excited about PWA&amp;#39;s and AI! As far as PWA&amp;#39;s, I&amp;#39;ve always wanted to build for mobile, and even in web development, I think AI is going to have a huge impact.&lt;/p&gt;
&lt;p&gt;There are already things like &lt;a href=&quot;https://www.youtube.com/embed/aEfpARsP8Fg?rel=0#&quot;&gt;The Grid&lt;/a&gt; that use machine learning to build websites! I recently bought &lt;a href=&quot;https://www.manning.com/books/grokking-deep-learning&quot;&gt;Grokking Deep Learning&lt;/a&gt; and am excited to dive into it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My advice is to get comfortable being uncomfortable. I have a &lt;a href=&quot;https://youtu.be/B22o_yeDE_s&quot;&gt;talk&lt;/a&gt; on this... that&amp;#39;s how strongly I feel about it being the key to success. For me, some of the hardest obstacles in my journey have been with my self-doubt. If you&amp;#39;re aware of that though, you can shift your focus.&lt;/p&gt;
&lt;p&gt;We are all human, and we have a finite amount of mental energy. So, it&amp;#39;s important that you spend it wisely! If you can learn to become comfortable with the feeling of not knowing, you&amp;#39;re able to focus solely on the challenge at hand, and you&amp;#39;ll inevitably be able to tackle it that much faster!&lt;/p&gt;
&lt;p&gt;I also encourage juniors to try and find a mentor or programming buddy. If you can find a mentor, it&amp;#39;s probably the fastest way to progress. Developers who received mentoring were promoted five times more often than those who didn’t.&lt;/p&gt;
&lt;p&gt;If nothing else, you can try to work on some small open source projects and get mentorship in the form of code reviews there. &lt;a href=&quot;https://yourfirstpr.github.io/&quot;&gt;Your First PR&lt;/a&gt; is an excellent resource for finding newbie friendly projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m a huge fan of Kyle Simpson, so I&amp;#39;d be excited to see an interview with him next! I love his approach to learning vanilla JavaScript over focusing on a framework when you&amp;#39;re getting started, and his content is comprehensive while also being completely approachable!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My latest deep dive topic has been CSS and browser internals. I spent two years as a full-stack JavaScript developer and made the switch to front end last summer. Working for an affiliate of Warner Bros means that design implementation is critical! It wasn&amp;#39;t like the previous applications I&amp;#39;d worked on where the designs could be fudged a little. Applications for Warner Bros properties need to be pixel perfect!&lt;/p&gt;
&lt;p&gt;I quickly realized I struggled with debugging CSS in the same systematic way I debugged my JavaScript. So, whether you&amp;#39;re a newer developer or you&amp;#39;ve been programming a while you may be interested in a &lt;a href=&quot;http://www.aimeemarieknight.com/It&amp;#39;s-Not-Dark-Magic-Pulling-Back-the-Curtains-From-Your-Stylesheets/&quot;&gt;blog post&lt;/a&gt; I just finished all about this!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Aimee! I&amp;#39;ve found working with people from different backgrounds helps to give you perspective. Magic happens when you combine the views and find something new.&lt;/p&gt;
</content></entry><entry><title>vx - The Power of D3 with the Benefits of React - Interview with Harrison Shoff</title><id>avxthepowerofd3withthebenefitsofreactinterviewwithharrisonshoff2017-06-12t00:00:00z</id><link href="https://survivejs.com/blog/vx-interview/"></link><updated>2017-06-12T00:00:00Z</updated><content type="html">&lt;p&gt;Data visualization is a big topic itself. When it comes to the web, &lt;a href=&quot;https://d3js.org/&quot;&gt;D3&lt;/a&gt; is perhaps the most well-known solution. Even though you can wrap it with React quite quickly, there is value in having specific solutions.&lt;/p&gt;
&lt;p&gt;This is where &lt;a href=&quot;https://github.com/hshoff/vx&quot;&gt;vx&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/hshoff&quot;&gt;Harrison Shoff&lt;/a&gt; comes in.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/96383e1a07b37e9d5d0360416f81dbf9?s=200&quot; alt=&quot;Harrison Shoff&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;ve been doing frontend at Airbnb since 2010. Along the way, I&amp;#39;ve helped make &lt;a href=&quot;https://techcrunch.com/2012/06/27/airbnb-wish-lists-redesign/&quot;&gt;wish lists&lt;/a&gt;, &lt;a href=&quot;https://www.airbnb.com/help/article/1257/how-do-star-ratings-work&quot;&gt;reviews&lt;/a&gt;, &lt;a href=&quot;https://thenextweb.com/apps/2011/06/21/airbnbs-new-referral-program-could-double-its-member-base/#.tnw_aooztlbz&quot;&gt;referrals&lt;/a&gt;, &lt;a href=&quot;https://techcrunch.com/2014/05/16/airbnb-experiences/&quot;&gt;experience marketplace&lt;/a&gt;, the &lt;a href=&quot;https://thenextweb.com/apps/2011/10/06/airbnb-launches-its-photography-program-with-13000-verified-properties/#.tnw_ISpMS8RO&quot;&gt;professional photography tool&lt;/a&gt;, customer support chat, and the old m.airbnb.com.&lt;/p&gt;

&lt;p&gt;Regarding open source, I created the &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb JavaScript Style Guide&lt;/a&gt; and worked on &lt;a href=&quot;https://gigaom.com/2015/03/05/airbnb-open-sources-sql-tool-built-on-facebooks-presto-database/&quot;&gt;Airpal&lt;/a&gt; with Andy Kramolisch, and &lt;a href=&quot;https://techcrunch.com/2013/03/15/airbnb-open-sources-its-chronos-scheduler-a-more-flexible-cron-replacement-with-a-web-based-gui/&quot;&gt;Chronos&lt;/a&gt; with Florian Leibert and Andy again.&lt;/p&gt;
&lt;p&gt;Currently, I&amp;#39;m on the Observability team at Airbnb, working on monitoring tools, data visualization, and a new open source project called &lt;a href=&quot;https://github.com/hshoff/vx&quot;&gt;vx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Outside of work, I enjoy playing golf poorly, reading programming books I don&amp;#39;t understand, and going on adventures with my beautiful wife.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-vx-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-vx-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;vx&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-vx-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;vx&lt;/em&gt; is a library of low-level react components that can be used to build up reusable charts, those one-off requests, or that particular idea you had for a visualization that you’ve never seen done before.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;vx&lt;/em&gt; combines the power of &lt;a href=&quot;https://d3js.org/&quot;&gt;D3&lt;/a&gt; with the joy of &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. It&amp;#39;s mainly unopinionated, and the idea is that you build on top of it, keep your bundle sizes down and use only the packages you need. You don&amp;#39;t need to know D3 to use &lt;em&gt;vx&lt;/em&gt;, but it helps.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;vx&lt;/em&gt; stands for visualization components.&lt;/p&gt;
&lt;p&gt;Below is a flow diagram that illustrates how &lt;em&gt;vx&lt;/em&gt; could fit in at your organization:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c6d223916688e7e78408493593913390.png&quot; alt=&quot;vx flow diagram&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;vx flow diagram&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-vx-work-&quot; id=&quot;how-does-vx-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;vx&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-vx-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Under the hood, &lt;em&gt;vx&lt;/em&gt; is using D3 for the calculations and math. D3 is the visualization kernel used to generate the data that flows to your components. If you’re creating your chart library on top of &lt;em&gt;vx&lt;/em&gt;, it’s easy to create a component API that hides D3 entirely. Because of this you and your team could set up and share charts as quickly as using reusable React components.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-vx-differ-from-other-solutions-&quot; id=&quot;how-does-vx-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;vx&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-vx-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To create a complete charting library, you would need to anticipate the needs of every chart out there. Instead of doing that, you tell &lt;em&gt;vx&lt;/em&gt; what you want to make, and away you go. You only need to pull in the packages you need.&lt;/p&gt;
&lt;p&gt;No matter how you handle styling your components, how you store your state, or how you update your data, &lt;em&gt;vx&lt;/em&gt; should feel familiar in any React codebase.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-vx-&quot; id=&quot;why-did-you-develop-vx-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;vx&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-vx-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Charting libraries are great until they’re not. And mixing two mental models for updating the DOM is never a right time. Copy and pasting D3 code into &lt;code&gt;componentDidMount()&lt;/code&gt; is just that. The &lt;em&gt;vx&lt;/em&gt; collection of components lets you easily build your reusable visualization charts or library without having to learn d3.&lt;/p&gt;
&lt;p&gt;I wanted to make my D3 code feel at home in my react codebase, keep filesize down, and not predict all of the different charts I would have to make in the future.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#39;re on the road to a production ready &lt;code&gt;v1&lt;/code&gt; release, and it includes the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessibility.&lt;/li&gt;
&lt;li&gt;Increased browser support.&lt;/li&gt;
&lt;li&gt;More shapes.&lt;/li&gt;
&lt;li&gt;Animations and transitions.&lt;/li&gt;
&lt;li&gt;Easy interactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow our progress here: &lt;a href=&quot;https://github.com/hshoff/vx/projects/1&quot;&gt;https://github.com/hshoff/vx/projects/1&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-vx-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-vx-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;vx&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-vx-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For &lt;em&gt;vx&lt;/em&gt;: &lt;em&gt;vx&lt;/em&gt; should work on the web, native, vr, everywhere. The current implementation depends on react-dom which means it&amp;#39;s only available on the web. I&amp;#39;d like to explore using &lt;a href=&quot;https://github.com/lelandrichardson/react-primitives-art&quot;&gt;react-primitives-art&lt;/a&gt; for cross-platform support. Check out this talk by my colleague &lt;a href=&quot;https://twitter.com/intelligibabble&quot;&gt;Leland Richardson&lt;/a&gt; about &lt;a href=&quot;https://www.youtube.com/watch?v=hNwQPJy-XZY&quot;&gt;React as a Platform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In general: the world continues to shift towards browsing the internet on their phone. Most of the world isn&amp;#39;t on wi-fi and doesn&amp;#39;t have latest phone hardware. We should start to see more companies treat performance as a feature and not an afterthought.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s never been more exciting to be working on the frontend.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You don&amp;#39;t need a computer science degree.&lt;/p&gt;
&lt;p&gt;You&amp;#39;ll throw away 99% of the code you write over the first few years.&lt;/p&gt;
&lt;p&gt;There are no shortcuts. You just have to show up and put in the work.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a lot of fun.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My colleague &lt;a href=&quot;https://twitter.com/jongold&quot;&gt;Jon Gold&lt;/a&gt;! He&amp;#39;s working on the future of design tools at Airbnb. Check out his latest work &lt;a href=&quot;https://airbnb.design/painting-with-code/&quot;&gt;React Sketch.app&lt;/a&gt;. It melts minds. And it&amp;#39;s well made.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;vx stands on the shoulders of giants. Special thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/mbostock&quot;&gt;Mike Bostock&lt;/a&gt; + the d3 community and the react team + community for all of their lovely work!&lt;/li&gt;
&lt;li&gt;All of my colleagues at Airbnb for reviewing my code over the years!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shoutout to Issaquah, WA and the University of Washington.&lt;/p&gt;
&lt;p&gt;Thanks for having me on the blog!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Harrison! I have a soft spot for computer graphics due to my background and combining React with D3 through &lt;em&gt;vx&lt;/em&gt; seems like a fantastic idea to me.&lt;/p&gt;
&lt;p&gt;To learn more about the project, see &lt;a href=&quot;https://github.com/hshoff/vx&quot;&gt;vx GitHub page&lt;/a&gt; and &lt;a href=&quot;https://vx-demo.now.sh/&quot;&gt;study the online demos&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>unmarshaller - Toolbox for configuration - Interview with Sven Sauleau</title><id>aunmarshallertoolboxforconfigurationinterviewwithsvensauleau2017-06-05t00:00:00z</id><link href="https://survivejs.com/blog/unmarshaller-interview/"></link><updated>2017-06-05T00:00:00Z</updated><content type="html">&lt;p&gt;Serialization, or the process of transforming data from a shape to another, is a common problem you encounter eventually when programming. Perhaps you want to store some state to the hard drive from memory or restore it. Or you may want to share it across the wire and consume it somehow on the other end. That&amp;#39;s where a related concept, marshalling, comes in.&lt;/p&gt;
&lt;p&gt;In this interview you will learn more about the topic as &lt;a href=&quot;https://twitter.com/svensauleau&quot;&gt;Sven Sauleau&lt;/a&gt; discusses the ideas behind his library, &lt;a href=&quot;https://github.com/xtuc/unmarshaller&quot;&gt;unmarshaller&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Remember to check &lt;a href=&quot;https://survivejs.com/blog/async-reactor-interview&quot;&gt;Sven&amp;#39;s previous interview about async-reactor&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-unmarshaller-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-unmarshaller-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;unmarshaller&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-unmarshaller-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are not familiar with the term of marshalling, here is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Marshalling_%28computer_science%29&quot;&gt;excerpt from Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, marshalling [...] is the process of transforming the memory representation of an object to a data format suitable for storage or transmission, and it is typically used when data must be moved between different parts of a computer program or from one program to another. Marshalling is similar to serialization and is used to communicate to remote objects with an object, in this case, a serialized object. It simplifies complex communication, using custom/complex objects to communicate instead of primitives. [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you have a lot of configuration, it&amp;#39;s not easy to maintain or even to understand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;unmarshaller&lt;/em&gt; enables you to &lt;strong&gt;describe&lt;/strong&gt; your configuration in a &lt;strong&gt;flexible&lt;/strong&gt; way. It also provides tools to improve configuration usage.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-unmarshaller-work-&quot; id=&quot;how-does-unmarshaller-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;unmarshaller&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-unmarshaller-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To use &lt;em&gt;unmarshaller&lt;/em&gt;, you have to define lookups against your data. These can be custom, or you can use ones provided with &lt;em&gt;unmarshaller&lt;/em&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#lookup-function&quot; id=&quot;lookup-function&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Lookup Function&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#lookup-function&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;During the unmarshalling process the lookup &lt;code&gt;function&lt;/code&gt; will be called to get the value for a given key.&lt;/p&gt;
&lt;p&gt;If you want to extract values from an object the lookup will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;lookupFn&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; key &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; myObject&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to provide the values is up to you. You could get them from the URL, looking for DOM nodes, network requests, and so on.&lt;/p&gt;
&lt;p&gt;First, you need to declare your configuration in the unmarshaller object, here is an example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unmarshaller.js:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// The builder is a set of helper functions to build&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// the unmarshaller object.&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// It has the builtin types: `string`, `number`,&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// `boolean`, `object` and `holder` that is used to&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// nest configurations.&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; builder &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;unmarshaller&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; unmarshaller &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// `person_name` will be the key used as argument&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// in the lookup function&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;person_name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// `description` is used for documentation&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// generation&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Name of the person&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// If the lookup function didn&apos;t returned a value,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// the default value will be used instead&lt;/span&gt;
    defaultValue&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Sven&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  customProps&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;custom_props&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Custom properties&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    defaultValue&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  showAge&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;person_show_age&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Show age of the person&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    defaultValue&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  age&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;person_age&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Age of the person&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    defaultValue&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  backgroundColor&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;background_color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Background color of the card&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    defaultValue&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;#69b0dc&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  textColor&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;font_color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Font color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    defaultValue&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;black&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;index.js:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; unmarshal &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;unmarshaller&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// This is the unmarshaller object from the file above&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; unmarshaller&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./unmarshaller.js&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;lookupFn&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; myObject&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;unmarshal&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;lookupFn&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; unmarshaller&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// `config` is a regular JavaScript object containing your configuration:&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// {&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   name: ...,&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   backgroundColor: ...,&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//   textColor: ...,&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#custom-types&quot; id=&quot;custom-types&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Custom types&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#custom-types&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be able to use custom types you need to extend the default builder.&lt;/p&gt;
&lt;p&gt;Here is an example of a &lt;code&gt;color&lt;/code&gt; type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  builder &lt;span class=&quot;token keyword keyword-as&quot; &gt;as&lt;/span&gt; defaultBuilder
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;unmarshaller&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; builder &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;...&lt;/span&gt;defaultBuilder&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;

  color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    parser&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; parseColor&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// custom parser function&lt;/span&gt;
    type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;...&lt;/span&gt;options
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find more information about custom types in the documentation in &lt;a href=&quot;https://github.com/xtuc/unmarshaller&quot;&gt;the project repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#error-handling&quot; id=&quot;error-handling&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Error handling&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#error-handling&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the case of a casting error, &lt;code&gt;unmarshaller&lt;/code&gt; will always return the type you defined.&lt;/p&gt;
&lt;p&gt;For example, if you pass an invalid JSON string in &lt;code&gt;builder.object&lt;/code&gt; it will return &lt;code&gt;{}&lt;/code&gt; unless you have defined a &lt;code&gt;defaultValue&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-unmarshaller-differ-from-other-solutions-&quot; id=&quot;how-does-unmarshaller-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;unmarshaller&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-unmarshaller-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&amp;#39;t find an alternative solution to &lt;em&gt;unmarshaller&lt;/em&gt;. There are some libraries which also adopt the idea of declarative configuration, but they only focus on one usage.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://www.npmjs.com/package/ajv&quot;&gt;ajv&lt;/a&gt; uses a declarative configuration, but it doesn&amp;#39;t serve the same goal since it&amp;#39;s only for validations.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To understand ajv better, &lt;a href=&quot;https://survivejs.com/blog/ajv-interview/&quot;&gt;read the interview with Evgeny Poberezkin&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-unmarshaller-&quot; id=&quot;why-did-you-develop-unmarshaller-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;unmarshaller&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-unmarshaller-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I made &lt;em&gt;unmarshaller&lt;/em&gt; while I was working for a company. On some projects, we would use highly customizable React components (up to 70 different parameters). The configuration needed to be able to be set both by developers (passing props) and remotely by non-developers.&lt;/p&gt;
&lt;p&gt;Our &lt;em&gt;unmarshaller&lt;/em&gt; lookup function got the configuration either from query parameters in the URL or by calling a function in our proprietary SDK.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#better-syntax-&quot; id=&quot;better-syntax-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Better syntax?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#better-syntax-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;unmarshaller&lt;/code&gt; could also be JSX based (&lt;a href=&quot;https://webpack.js.org/concepts/configuration/#using-jsx&quot;&gt;example for Webpack&lt;/a&gt;).
The configuration could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;unmarshaller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot; &gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot; &gt;defaultValue&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;Sven&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot; &gt;description&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;Name of the person&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;holder&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;colors&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;color&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;background_color&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;defaultValue&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;#69b0dc&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;description&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;Background color&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;color&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;font_color&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;defaultValue&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;black&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;description&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;Font color&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;holder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;unmarshaller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#most-common-lookup-functions&quot; id=&quot;most-common-lookup-functions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Most common lookup functions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#most-common-lookup-functions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Provide standard &lt;code&gt;lookup functions&lt;/code&gt;, for example, to extract configuration values from URLs as this would allow users to use the functions that come with &lt;code&gt;unmarshaller&lt;/code&gt; instead of having to write them themselves.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#ahead-of-time-processing&quot; id=&quot;ahead-of-time-processing&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Ahead of time processing&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#ahead-of-time-processing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a Babel plugin to inline constant values in the &lt;em&gt;unmarshaller&lt;/em&gt; object to avoid doing this at runtime.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-unmarshaller-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-unmarshaller-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;unmarshaller&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-unmarshaller-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since &lt;em&gt;unmarshaller&lt;/em&gt; is flexible, I could imagine various tools built on top of it (for example, form validations).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have a few extra modules which are located in a second repository &lt;a href=&quot;https://github.com/xtuc/unmarshaller-extra&quot;&gt;unmarshaller-extra&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unmarshaller-generator-markdown&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generate markdown documentation from a given unmarshaller object, containing the name, type, default value and a description of each configuration.&lt;/p&gt;
&lt;p&gt;In our use case, we display the documentation of our React component on GitHub and in a panel in our Storybook.&lt;/p&gt;
&lt;p&gt;The documentation will look like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default value&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;background_color&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#69b0dc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Background color of the card&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;font_color&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;black&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Font color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sven&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of the person&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can find an example &lt;a href=&quot;https://github.com/xtuc/unmarshaller/tree/master/examples/component-config-readme&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unmarshaller-generator-storybook-knobs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generate Storybook &lt;a href=&quot;https://github.com/storybooks/storybook/tree/master/addons/knobs&quot;&gt;addons/knobs&lt;/a&gt; from the unmarshaller object.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;There&amp;#39;s an example showing how to do this &lt;a href=&quot;https://github.com/xtuc/unmarshaller/tree/master/examples/component-config-storybook-knobs&quot;&gt;in the repository&lt;/a&gt;.&lt;/blockquote&gt;&lt;p&gt;More extras to come soon. &lt;em&gt;unmarshaller&lt;/em&gt; is a flexible tool, I&amp;#39;m excited to see tools built on top of it soon.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Sven! &lt;em&gt;unmarshaller&lt;/em&gt; seems to handle the problem of marshalling admirably. To learn more about the project, see &lt;a href=&quot;https://github.com/xtuc/unmarshaller&quot;&gt;unmarshaller on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Popper.js - Easy Tooltips and Popovers - Interview with Federico Zivolo</title><id>apopperjseasytooltipsandpopoversinterviewwithfedericozivolo2017-05-29t00:00:00z</id><link href="https://survivejs.com/blog/popper-interview/"></link><updated>2017-05-29T00:00:00Z</updated><content type="html">&lt;p&gt;There are times when a vanilla &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;acronym&amp;gt;&lt;/code&gt; doesn&amp;#39;t cut it. What if you want to do something more complex?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://popper.js.org/&quot;&gt;Popper.js&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/FezVrasta&quot;&gt;Federico Zivolo&lt;/a&gt; achieves exactly this. Read on to learn more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/52648ca9bee250edf351385c1e87416c?s=200&quot; alt=&quot;Federico Zivolo&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;
I&amp;#39;m Federico (Fez) Zivolo, UI Specialist at Quid. Born in Italy, I live in Budapest now. I like to help with open source projects on GitHub and I maintain some created by me.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-popper-js-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-popper-js-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Popper.js&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-popper-js-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Popper.js is a library to help you position tooltips, popovers, dropdowns and any contextual element that should appear near a button or similar (I call them &amp;quot;poppers&amp;quot;).
In short, it&amp;#39;s a piece of code that saves you hours of work on any of your projects, since almost all of them end up featuring some &amp;quot;popper&amp;quot;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-popper-js-work-&quot; id=&quot;how-does-popper-js-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Popper.js&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-popper-js-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s a good question; I&amp;#39;m still trying to figure it out!&lt;/p&gt;
&lt;p&gt;Jokes apart, the principle is pretty straightforward. It takes a reference element (usually a button) and a popper element (any element you want to position), it finds out a common offset parent, computes the position of the reference element relative to such parent, and then generates a set of coordinates use to position the popper element.&lt;/p&gt;
&lt;p&gt;The hardest part is to consider a whole set of edge cases which range from cross browser compatibilities to box model capillarities, including taking care of the scrollable elements.&lt;/p&gt;
&lt;p&gt;The usage is simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Popper&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;referenceElement&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; popperElement&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code will position the &lt;code&gt;popperElement&lt;/code&gt; on the bottom of the provided &lt;code&gt;referenceElement&lt;/code&gt;. Also, you already have access to all the built-in features of the library.&lt;/p&gt;
&lt;p&gt;The line also achieves the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;referenceElement&lt;/code&gt; is too close to the bottom of the viewport, the &lt;code&gt;popperElement&lt;/code&gt; will be positioned on top of it instead.&lt;/li&gt;
&lt;li&gt;If the two elements are positioned in two different parents, Popper.js will take care of it and will still properly position the popper element correctly.&lt;/li&gt;
&lt;li&gt;It handles scrollable elements and page resizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-popper-js-differ-from-other-solutions-&quot; id=&quot;how-does-popper-js-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Popper.js&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-popper-js-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There aren&amp;#39;t a lot of available solutions and they all cover a small subset of cases that are instead adequately addressed by Popper.js. The main difference is in the fact that my library doesn&amp;#39;t need to manipulate the DOM directly to work.&lt;/p&gt;
&lt;p&gt;This fact leads to two strengths: it doesn&amp;#39;t have to move the popper node in a different context to properly work and can be integrated into frameworks and view libraries such as React and AngularJS with ease.&lt;/p&gt;
&lt;p&gt;You can easily do this to delegate the DOM manipulation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Popper&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;referenceElement&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; popperElement&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  modifiers&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    applyStyle&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; enabled&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    updateReactData&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      order&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;900&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token function&quot; &gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; data &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have disabled the built-in &lt;code&gt;applyStyle&lt;/code&gt; modifier (they are like middleware, and most of the functionalities provided by Popper.js are provided by them), and defined our custom modifier that only proxies the computed popper coordinates and information to our React component.&lt;/p&gt;
&lt;p&gt;Now that you have all the knowledge provided by Popper.js, you can do whatever you need to apply the needed styles to the popper element.&lt;/p&gt;
&lt;p&gt;You may have noticed that my custom modifier is returning the &lt;code&gt;data&lt;/code&gt; object at the end. This object is needed because other modifiers may run after it and read the &lt;code&gt;data&lt;/code&gt; object.
This chain-based approach makes Popper.js extensible; you can inject any custom function before or after any of the existing modifiers, disable the ones you don&amp;#39;t need, and alter the behavior of others simply modifying the data stored in the &lt;code&gt;data&lt;/code&gt; object.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-popper-js-&quot; id=&quot;why-did-you-develop-popper-js-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Popper.js&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-popper-js-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the time of the creation of Popper.js, I worked for a company which made large use of tooltips and popovers in their Ember.js application. We had an internal implementation of a positioning library similar to Popper.js, written mostly by two other team members and me. Its code was pretty messy because it had been developed just to work in our particular cases and it was deeply tied to the Ember.js internals.&lt;/p&gt;
&lt;p&gt;The time needed to maintain such library became a problem because we spent a significant portion of our time fixing bugs related to it.
We then decided to outsource it and use an existing open source library to do the job.&lt;/p&gt;
&lt;p&gt;I performed the investigations to find a suitable alternative; the only available choices were Tether and jQuery UI Position. The latter, after some quick tests, ended up being too basic to be used in our context. The only way to use it would have been to fork it and add the missing features.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#tether-was-promising-but-not-enough&quot; id=&quot;tether-was-promising-but-not-enough&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Tether Was Promising But Not Enough&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#tether-was-promising-but-not-enough&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tether was very promising, it supported a lot of features and performed quite well. But it had some pretty limiting constraints as the library arbitrarily moved our components away from their original DOM tree context to have them positioned as direct children of the &lt;code&gt;body&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;This fact was a major problem because it interfered with the way Ember handled the DOM. One of the problems I remember is that our tests couldn&amp;#39;t work because the testing environment of Ember looked for the DOM nodes only inside the root node of the Ember.js application.&lt;/p&gt;
&lt;p&gt;The other problem was the limited customizability of it; we couldn&amp;#39;t add any additional behavior or feature to it. For instance, we couldn&amp;#39;t make a tooltip switch from &amp;quot;right&amp;quot; to &amp;quot;bottom&amp;quot; in case there wasn&amp;#39;t enough space on its right. It only allowed &amp;quot;right - left&amp;quot; and &amp;quot;top - bottom&amp;quot;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#a-custom-library-was-needed&quot; id=&quot;a-custom-library-was-needed&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;A Custom Library Was Needed&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#a-custom-library-was-needed&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I wanted to use an existing solution because I just wanted to get the job done, but with these premises, the only viable solution I found was to write my library. My company didn&amp;#39;t have time to allocate to write it, so I ended up writing it during a weekend...&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Popper.js is getting adopted by more projects every day, and that&amp;#39;s cool.
My biggest &amp;quot;competitor&amp;quot; discontinued its library (Tether) and &lt;a href=&quot;https://github.com/HubSpot/tether/#rotating_light-project-status-rotating_light&quot;&gt;they now point to Popper.js&lt;/a&gt;, I hope to be able to serve their users as they deserve.&lt;/p&gt;
&lt;p&gt;Bootstrap &lt;a href=&quot;https://github.com/twbs/bootstrap/pull/22444&quot;&gt;recently merged a PR&lt;/a&gt; to use my library in their code base. I hope to see a larger number of contributions on my project as a result.&lt;/p&gt;
&lt;p&gt;Other great developers have developed &lt;a href=&quot;https://github.com/FezVrasta/popper.js/blob/master/MENTIONS.md#integration-in-frameworks-and-view-libraries&quot;&gt;integrations for Popper.js&lt;/a&gt; to use it in the most popular libraries such as React, Preact, and Vue.js; others are working to create one for Ember.js. Only Angular is behind and needs a proper integration.&lt;/p&gt;
&lt;p&gt;Certain outstanding issues that have to be fixed to handle all the edge cases. More tests have to be written to assure a high quality and reliability, and the API will probably need some makeover in the future.
There is a lot of work and not much time available, but I&amp;#39;ll do my best to maintain the library and improve it continuously. Some help would be very welcome. 😉&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-popper-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-popper-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Popper.js&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-popper-js-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most innovative idea behind Popper.js is the modularity of it, no other similar libraries let you completely de-opt from any DOM manipulation and delegate them to your code.
I think we may see more libraries follow this direction and make the life of other developers easier.&lt;/p&gt;
&lt;p&gt;Since the current front-end scenario is populated by a lot of different technologies, the library authors must adopt a model that allows the consumers to integrate them with the existing frameworks and libraries without compromises.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It may sound childish, a lot of folks will tell you that it&amp;#39;s a matter of preferences and blah blah... But I think the future of the web development is in the functional, data-driven, development as promoted by Facebook with React. The whole idea of state management &amp;quot;introduced&amp;quot; [1] by those guys saved my team and me hundreds of hours of development already.&lt;/p&gt;
&lt;p&gt;If you are getting into web development, first learn the basics of the web: HTML, JavaScript, and CSS. Then, move to any framework or library that follows the data driven and functional principles, if not React, anything wich shares the same idea. Doing this will set you a mindset that will help you to handle and resolve any situation.&lt;/p&gt;
&lt;p&gt;[1]: Necessary note, Facebook didn&amp;#39;t invent it, they simply promoted within the web development environment.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Travis Arnold (&lt;strong&gt;@souporserious&lt;/strong&gt;), he is working on some cool responsive components libraries and worked on react-popper, he knows better than anyone else how to integrate libraries into React.&lt;/li&gt;
&lt;li&gt;Gajus Kuizinas (&lt;strong&gt;@kuizinas&lt;/strong&gt;), he works on a lot of awesome stuff, but I especially like his ideas about CSS Modules vs. CSS in JS solutions.&lt;/li&gt;
&lt;li&gt;Nik Graf (&lt;strong&gt;@nikgraf&lt;/strong&gt;), for his work with React VR!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to be a great developer, remember to have fun along the way. 🙃&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Federico! If I need tooltips or popovers, I know where to look now.&lt;/p&gt;
&lt;p&gt;Remember to check &lt;a href=&quot;https://popper.js.org/&quot;&gt;Popper.js demos&lt;/a&gt; and &lt;a href=&quot;https://github.com/FezVrasta/popper.js&quot;&gt;Popper.js on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS Euro Summer Tour 2017</title><id>asurvivejseurosummertour20172017-05-28t00:00:00z</id><link href="https://survivejs.com/blog/euro-summer-tour-2017/"></link><updated>2017-05-28T00:00:00Z</updated><content type="html">&lt;p&gt;It&amp;#39;s time for another tour. This time around I&amp;#39;ll be focusing on &lt;a href=&quot;https://survivejs.com/training/&quot;&gt;training&lt;/a&gt;. I have material specifically for webpack and React and this will be a good excuse to improve my book offerings while at it. I&amp;#39;ve found working on training material forces you to think carefully and this work flows back to writing.&lt;/p&gt;
&lt;p&gt;This time around I&amp;#39;ll spend time particularly in Slovakia, Germany, Austria, and the United Kingdom. I&amp;#39;ll spend a few weeks at Vienna and there&amp;#39;s room in the schedule.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-31-5-12-6-ko-ice-slovakia-&quot; id=&quot;-31-5-12-6-ko-ice-slovakia-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;31.5-12.6 - Košice, Slovakia&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-31-5-12-6-ko-ice-slovakia-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll start the tour from Košice and I&amp;#39;ll be offering at least two sessions there, one of which will be public.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-12-6-14-6-prague-czech-republic-&quot; id=&quot;-12-6-14-6-prague-czech-republic-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;12.6-14.6 - Prague, Czech Republic&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-12-6-14-6-prague-czech-republic-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I get to spend a day at Prague, one of my favorite cities in Europe. I don&amp;#39;t have any specific plans yet but I might go and see some Mucha art.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-14-6-18-6-berlin-germany-&quot; id=&quot;-14-6-18-6-berlin-germany-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;14.6-18.6 - Berlin, Germany&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-14-6-18-6-berlin-germany-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most of my time in Berlin has been reserved by a client but I&amp;#39;ll have time especially on 14th, 17th, and 18th.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-18-6-2-7-vienna-austria-&quot; id=&quot;-18-6-2-7-vienna-austria-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;18.6-2.7 - Vienna, Austria&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-18-6-2-7-vienna-austria-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll spend most of my time in Vienna. This is actually a good time for you to book me as it&amp;#39;s easy to reach places from there. In the worst case I get some vacation time in a great city!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-2-7-10-7-augsburg-germany-&quot; id=&quot;-2-7-10-7-augsburg-germany-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;2.7-10.7 - Augsburg, Germany&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-2-7-10-7-augsburg-germany-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The purpose of the Augsburg week is to focus on training through a local partner.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-10-7-15-7-london-uk-&quot; id=&quot;-10-7-15-7-london-uk-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;10.7-15.7 - London, UK&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-10-7-15-7-london-uk-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll participate &lt;a href=&quot;https://skillsmatter.com/conferences/8264-fullstack-2017-the-conference-on-javascript-node-and-internet-of-things&quot;&gt;FullStack 2017&lt;/a&gt; as an invited speaker. I&amp;#39;ll have a short, two hour workshop on 14th based on &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; material.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/blog/euro-tour-2017-recap/&quot;&gt;the previous tour&lt;/a&gt; this one will be more relaxed and I&amp;#39;ll have more time available. The earlier experience will come in handy this time around and I&amp;#39;ll be open to opportunities!&lt;/p&gt;
&lt;p&gt;If you are interested in my services, please check out my &lt;a href=&quot;https://survivejs.com/training/&quot;&gt;training offering&lt;/a&gt;. You can also try to invite me to your meetup if we can find some interesting topic and you are willing to cover associated costs.&lt;/p&gt;
</content></entry><entry><title>ES Modules - Interview with Bradley Farias</title><id>aesmodulesinterviewwithbradleyfarias2017-05-22t00:00:00z</id><link href="https://survivejs.com/blog/es-modules-interview/"></link><updated>2017-05-22T00:00:00Z</updated><content type="html">&lt;p&gt;Even though ES6 (ES2015) brought modules to the language, it missed one important thing - a loading method. Proper support is &lt;a href=&quot;https://jakearchibald.com/2017/es-modules-in-browsers/&quot;&gt;currently being implemented for browsers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about the topic, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/bradleymeck&quot;&gt;Bradley Farias&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/0b22453288cedbe28d53e89e0e0b793d?s=200&quot; alt=&quot;Bradley Farias&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I am a Software Engineer at GoDaddy these days but have been at several startups before that. My childhood was mostly running around outside in the Texas heat and enjoying video games. At the end of high school, I started programming and have been doing it since then.
&lt;/p&gt;

&lt;p&gt;TiddlyWiki was the first open source project that I worked on in college. It was a single page wiki that could save to disk back in 2005. That is what got me interested in JavaScript. I spent many hours trying to recreate various things such as a spreadsheet editor and a polyfill for Range in IE6.&lt;/p&gt;
&lt;p&gt;After college I have worked at different companies, eventually seeing Node at the end of 2009 and joining Nodejitsu in 2011 through 2013. Since then I have bounced around between front-end development with a focus on accessibility and lots of backend tooling workflows.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; I used &lt;a href=&quot;http://tiddlywiki.com/&quot;&gt;TiddyWiki&lt;/a&gt; years ago as my personal wiki on a USB stick.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-es-modules-to-someone-who-has-never-heard-of-them-&quot; id=&quot;how-would-you-describe-es-modules-to-someone-who-has-never-heard-of-them-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;ES Modules&lt;/em&gt; to someone who has never heard of them?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-es-modules-to-someone-who-has-never-heard-of-them-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;They are a new mode of JavaScript code that allows you to link JavaScript variables between files. ES Modules are statically linked, meaning that when you import variables; the engine must link those variables before evaluating the module.&lt;/p&gt;
&lt;p&gt;The nature of if ES Modules are async or sync is unspecified in the JavaScript specification; so even though all environments are targeting making async module systems, someone could make a sync module system using them.&lt;/p&gt;
&lt;p&gt;Consider the example below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Request the `foo` variable from `./foo` be put into scope&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; foo &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;foo.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; foo &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Mark `foo` as being exported&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; foo  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-do-es-modules-work-&quot; id=&quot;how-do-es-modules-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How do &lt;em&gt;ES Modules&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-do-es-modules-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being a new mode of JavaScript, the first thing is that you have to get your environment to parse ES Modules. In ES2015 the plans for how to use ES Modules was in the specification. However, with no loading mechanism, there was no clear plan for browsers or servers as to how to load modules.&lt;/p&gt;
&lt;p&gt;It wasn&amp;#39;t until sometime later that WHATWG proposed &lt;code&gt;&amp;lt;script type=module&amp;gt;&lt;/code&gt; and Node proposed a new &lt;code&gt;.mjs&lt;/code&gt; file extension to clarify to the environment how modules are loaded.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#shared-variables-have-to-be-linked-together&quot; id=&quot;shared-variables-have-to-be-linked-together&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Shared Variables Have to Be Linked Together&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#shared-variables-have-to-be-linked-together&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After being loaded, the engine needs to link together all the variables that are shared between modules. That means, all the modules in the dependency graph need to be available. The engine recursively reads each source text for the modules and finds all of the dependencies of the modules until there are none left.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#throw-an-error-on-failure-or-proceed-and-hoist&quot; id=&quot;throw-an-error-on-failure-or-proceed-and-hoist&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Throw an Error on Failure or Proceed and Hoist&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#throw-an-error-on-failure-or-proceed-and-hoist&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If some modules cannot be found, the engine throws an error. Otherwise, it takes all variables marked with &lt;code&gt;export&lt;/code&gt; and puts read-only views of them in the modules that &lt;code&gt;import&lt;/code&gt; those exported variables.&lt;/p&gt;
&lt;p&gt;At this point, JavaScript&amp;#39;s hoisting takes place, and function declarations and variables are hoisted and allocated. These functions can be called before the module evaluating, but might encounter errors from other variables not being initialized.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linked-graph-will-be-evaluated&quot; id=&quot;linked-graph-will-be-evaluated&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linked Graph Will Be Evaluated&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linked-graph-will-be-evaluated&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that the module graph is linked, it is time to start evaluating it. The engine takes a depth-first traversal from the entry module in the order which the import declarations appear in the source text and starts evaluating. If any module throws an error while evaluating, the engine stops evaluating modules and leaves them in the current state of evaluation.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-do-es-modules-differ-from-other-solutions-&quot; id=&quot;how-do-es-modules-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How do &lt;em&gt;ES Modules&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-do-es-modules-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First and foremost, I need to preface this by stating transpilers don&amp;#39;t implement ES Modules. They implement a transform of ES Modules &lt;em&gt;syntax&lt;/em&gt; to CommonJS semantics and APIs. What I am talking about probably doesn&amp;#39;t work the same as a transpiler.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#new-parser-and-evaluation-system&quot; id=&quot;new-parser-and-evaluation-system&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;New Parser and Evaluation System&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#new-parser-and-evaluation-system&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ES Modules use a new parser and evaluation system in the JavaScript specification. They automatically make your code have the same rules as &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;, reserve &lt;code&gt;await&lt;/code&gt; as a keyword, and have some changes to how scoping works.&lt;/p&gt;
&lt;p&gt;ES Modules are a statically linked module system. Unlike CommonJS or AMD, all dependencies must be known and parsed before &lt;em&gt;any&lt;/em&gt; user code evaluating.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;Hello World!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Never evaluates&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./doesNotExist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Will error&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; doesNotExist &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./doesExist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Will error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#variable-bindings-not-value-bindings&quot; id=&quot;variable-bindings-not-value-bindings&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Variable Bindings, Not Value Bindings&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#variable-bindings-not-value-bindings&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ES Modules work with variable bindings, not values. Other module systems share values, ES Modules share variables. That means, if a variable is updated, all files sharing that variable see the update.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Every file will see `uptime` change over time&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-let&quot; &gt;let&lt;/span&gt; uptime &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot; &gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; uptime&lt;span class=&quot;token operator&quot; &gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ES Modules are being implemented as asynchronous. CommonJS is a synchronous module system that stops executing code while dependencies load.&lt;/p&gt;
&lt;p&gt;To be compatible with performance concerns on the web, ES Modules are asynchronous in all future implementations. Due to this, you can have code executing while loading a module graph. It also means that ES Module graphs can be loaded in parallel, even if they overlap.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#specifiers-are-url-based-strings&quot; id=&quot;specifiers-are-url-based-strings&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Specifiers are URL Based Strings&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#specifiers-are-url-based-strings&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ES Modules specifiers are being treated as URL based strings. In some module systems like CommonJS &lt;code&gt;./hello?world=earth&lt;/code&gt; would be treated as a file path. These are now always URLs.&lt;/p&gt;
&lt;p&gt;ES Modules always evaluate for each URL that is different. That means implementations would always load the file for &lt;code&gt;./hello&lt;/code&gt; but then add the query string to the file metadata. &lt;code&gt;./hello?world=moon&lt;/code&gt; would load a second time after &lt;code&gt;earth&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./echo?msg=hi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./echo?msg=there&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Prints:&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;gt; hi&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;gt; there&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ES Modules are idempotent. Within a given source text, &lt;code&gt;import { foo } from &amp;quot;./foo&amp;quot;;&lt;/code&gt; will &lt;em&gt;always&lt;/em&gt; return the same variable &lt;code&gt;foo&lt;/code&gt;. Tools can treat multiple imports are referring to the same variable and it also means that even if someone uses &lt;code&gt;import(&amp;#39;foo&amp;#39;);&lt;/code&gt; it will return the same set of variables every time.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-to-use-es-modules-&quot; id=&quot;why-to-use-es-modules-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why to use &lt;em&gt;ES Modules&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-to-use-es-modules-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Removing build steps. With ES Modules, people can write applications without needing to use a tool like &lt;strong&gt;webpack&lt;/strong&gt; or &lt;strong&gt;Browserify&lt;/strong&gt;. However, browsers are still figuring out how they want to import things like &lt;code&gt;import &amp;#39;react&amp;#39;;&lt;/code&gt;; for now, use relative or absolute paths.&lt;/p&gt;
&lt;p&gt;Code splitting. Having ES Modules be asynchronous and able to load in parallel, module graphs can have multiple entry points that only touch the parts of a codebase that are needed.&lt;/p&gt;
&lt;p&gt;Enhanced tooling capabilities. Tools like &lt;strong&gt;rollup&lt;/strong&gt; can combine ES Modules with a technique called &amp;quot;Tree Shaking&amp;quot; that removes unused code from a bundle&amp;#39;s output. Editors can check if a variable is exported when a developer uses an &lt;code&gt;import&lt;/code&gt; since  ES Modules use a new syntax.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import()&lt;/code&gt; is coming to both Module and Script modes of JavaScript and will allow Modules to be loaded dynamically.&lt;/li&gt;
&lt;li&gt;A way to get the URL of the Module for a source text &lt;a href=&quot;https://github.com/whatwg/html/issues/1013&quot;&gt;is being standardized&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Browsers are rolling out the &lt;code&gt;&amp;lt;script type=module&amp;gt;&lt;/code&gt; ES Module loader allowing people to start testing ES Modules and figuring out workflows.&lt;/li&gt;
&lt;li&gt;Tools are landing &lt;code&gt;.mjs&lt;/code&gt; support allowing interoperability with both Node and the web.&lt;/li&gt;
&lt;li&gt;Node is going to expose the &lt;code&gt;.mjs&lt;/code&gt; based ES Module loader allowing people to start testing ES Modules and figuring out workflows.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-es-modules-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-es-modules-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;ES Modules&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-es-modules-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It looks pretty exciting; there will be a definite transition time while bare URLs are figured out in the browser, and people start using &lt;code&gt;.mjs&lt;/code&gt;. I think that one day, we will have development servers that can run ES Modules without any build step, but it is probably ways away.&lt;/p&gt;
&lt;p&gt;Even in development, people may want to use code transforms for things like JSX or other templating. The web is moving towards a more tooling heavy ecosystem, and that has caused some difficulty.&lt;/p&gt;
&lt;p&gt;I think that this trend is likely to continue as things like WASM become integrated with JavaScript. Tools should be embraced so that they can be improved to the point where they are not thought about when using them.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do not despair! The web is one of the most challenging and complex programming environments out there. There are many ways to do things, so don&amp;#39;t be afraid of your code looks different from any other code. Make your code work and enjoy what you have done.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a bit of a rough one; I would say Caridy Patiño is a good choice. He has a lot of involvement in places like internationalization and TC39.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Try and stay true to yourself, whoever you are. People can get very heated on technical topics, but don&amp;#39;t let them pressure you into anything. Stay open to criticism, listen to others, and become stronger in your beliefs.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Bradley! I think we live in interesting times and pushing module loading to the browser level feels like one of the last missing bits. It will change the way people think about web development again.&lt;/p&gt;
</content></entry><entry><title>Blue Arrow Awards - Finnish Code Ambassador of 2017</title><id>abluearrowawardsfinnishcodeambassadorof20172017-05-21t00:00:00z</id><link href="https://survivejs.com/blog/blue-arrow-awards-winner-2017/"></link><updated>2017-05-21T00:00:00Z</updated><content type="html">&lt;p&gt;In the beginning, there was a swamp, a hoe, and Jussi. Originally a large part of Finland was swamp and life were hard, but as Jussi worked on the swamp, it paid off eventually.&lt;/p&gt;
&lt;p&gt;Interestingly you can still see the same pattern. You can always find a problem (your swamp) in which you apply a tool and determination. That seems to be the core of being a Finn and even entrepreneurship.&lt;/p&gt;
&lt;p&gt;I found my swamp in late 2014 as I commented on Christian Alfoni&amp;#39;s blog post about webpack. Since then a lot has changed, and no doubt will change still. The years since have been a period of personal growth, and I&amp;#39;m happy to announce that the efforts haven&amp;#39;t gone unnoticed.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#finnish-code-ambassador-of-2017&quot; id=&quot;finnish-code-ambassador-of-2017&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Finnish Code Ambassador of 2017&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#finnish-code-ambassador-of-2017&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was chosen as the &lt;a href=&quot;https://www.bluearrowawards.com/blog/chabla-winner-blue-arrow-award-2017/&quot;&gt;Finnish Code Ambassador of 2017 by Blue Arrow Awards&lt;/a&gt;. It&amp;#39;s an honorary title I carry with great pride. The win doesn&amp;#39;t mean the work is over; maybe it has only just begun.&lt;/p&gt;
&lt;p&gt;The contest itself is quite new, and it was arranged the second time in a row. Historically us Finns have been more of doers instead of tellers, but the culture appears to be changing.&lt;/p&gt;
&lt;p&gt;The win wouldn&amp;#39;t have been possible without you, the community. It&amp;#39;s the interaction and constant feedback that keeps the effort living. I want to especially thank my patient editors &lt;a href=&quot;https://github.com/foxandxss&quot;&gt;Jesús Rodríguez&lt;/a&gt;, &lt;a href=&quot;https://github.com/undistraction&quot;&gt;Pedr Browne&lt;/a&gt;, and &lt;a href=&quot;https://github.com/sapegin&quot;&gt;Artem Sapegin&lt;/a&gt; for help during tough times.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are still challenges ahead but it&amp;#39;s recognition like this that tells you, you might be on the right track. I hope to grow the effort further and live to my new title of code ambassador. It could be my chance to put Finland on the map.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a win I consider more of a community win instead of a personal one. During this process, &lt;a href=&quot;https://presentations.survivejs.com/re-imagining-webpack&quot;&gt;we helped a major web technology to emerge&lt;/a&gt; and perhaps we can go a bit further.&lt;/p&gt;
</content></entry><entry><title>async-reactor - Render Async Stateless Functional Components in React - Interview with Sven Sauleau</title><id>aasyncreactorrenderasyncstatelessfunctionalcomponentsinreactinterviewwithsvensauleau2017-05-15t00:00:00z</id><link href="https://survivejs.com/blog/async-reactor-interview/"></link><updated>2017-05-15T00:00:00Z</updated><content type="html">&lt;p&gt;One common way to deal with asynchronous concerns (fetching for example) in React is to push the problem to a state manager or handling it through life cycle methods. Sometimes that can feel a bit much, though, and a lighter solution would be nice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;async-reactor&lt;/strong&gt; by &lt;a href=&quot;https://twitter.com/svensauleau&quot;&gt;Sven Sauleau&lt;/a&gt; has been designed exactly for this purpose.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/414f1942b9cb139e430fa864c276646b?s=200&quot; alt=&quot;Sven Sauleau&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Hi, my name is Sven Sauleau, and I&amp;#39;m a French software engineer. OSS enthusiast and a member of the Babel team. I consider myself as a Vim master.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-async-reactor-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-async-reactor-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;async-reactor&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-async-reactor-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;async-reactor&lt;/strong&gt; gives you the possibility to render async functional component in React. It has simple and concise syntax using &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; as illustrated below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-await&quot; &gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;asyncA&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-await&quot; &gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;asyncB&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s useful at least in the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code splitting with the &lt;code&gt;import()&lt;/code&gt; function (&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;currently stage 3 of the TC39 process&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Requesting using the &lt;code&gt;window.fetch()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Waiting for DOM event (for example using &lt;a href=&quot;https://www.npmjs.com/package/p-event&quot;&gt;p-event&lt;/a&gt; by &lt;strong&gt;@sindresorhus&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Awaiting asynchronous browser APIs or your logic that returns a &lt;code&gt;Promise&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can find examples in the &lt;a href=&quot;https://github.com/xtuc/async-reactor&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-async-reactor-work-&quot; id=&quot;how-does-async-reactor-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;async-reactor&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-async-reactor-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;async-reactor is a small library for React implementing the API below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token function&quot; &gt;asyncReactor&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  component&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Function&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// The `async` component you want to render&lt;/span&gt;
  loader&lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Shown until the first component renders&lt;/span&gt;
  error&lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Component    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Shown when an error occurred&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Component
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For better user experience you can show a loading component while waiting for your main component to render and an error component when an error occurs.&lt;/p&gt;
&lt;p&gt;Components returned by async-reactor are just regular React components, you can use them across your app.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-async-reactor-differ-from-other-solutions-&quot; id=&quot;how-does-async-reactor-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;async-reactor&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-async-reactor-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&amp;#39;t find an alternative solution to async-reactor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@thejameskyle&lt;/strong&gt; made an excellent package named &lt;a href=&quot;https://www.npmjs.com/package/react-loadable&quot;&gt;react-loadable&lt;/a&gt;. It&amp;#39;s a higher order React component for remote loading components. You can have an equivalent behavior using async-reactor with a concise syntax and a simpler error handling:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; DynamicComponent &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-await&quot; &gt;await&lt;/span&gt; &lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./DynamicComponent.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;DynamicComponent &lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add a regular &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block around the import and a loader component using the async-reactor API.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-async-reactor-&quot; id=&quot;why-did-you-develop-async-reactor-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;async-reactor&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-async-reactor-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I mentioned the boilerplate code that I needed to write to handle an HTTP request. The first solution was a high order component, but it wasn&amp;#39;t simple to use.&lt;/p&gt;
&lt;p&gt;Here is an example of one of my project that I refactored to use async-reactor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; cloneElement &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;FetchIssues&lt;/span&gt; &lt;span class=&quot;token keyword keyword-extends&quot; &gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-super&quot; &gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; isLoading&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;componentWillMount&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; issues &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`../issues-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;LANG&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;.json`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    issues&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; isLoading&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; isLoading &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;isLoading&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;loader&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; data &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; cloneElement &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; FetchLoader &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./FetchLoader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; asyncReactor &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;async-reactor&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-async&quot; &gt;async&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-await&quot; &gt;await&lt;/span&gt; &lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`../issues-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;LANG&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;.json`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; data &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; FetchIssues &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;asyncReactor&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;Component&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; FetchLoader&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m using Preact a lot, and I would like to make an async-reactor version which would work out of the box with it.&lt;/p&gt;
&lt;p&gt;I was also asked to make a Vue.js version.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-async-reactor-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-async-reactor-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;async-reactor&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-async-reactor-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;async-reactor relies on the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax heavily. Major browsers support it already, and with the native support, transpilation and the overhead are not needed anymore. I expect the number of users will increase as the support increases.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&amp;#39;t learn development in school, I learned it by myself. The best advice I could give to a new developer is to read documentation about what they are using, reading books and watching conference videos.&lt;/p&gt;
&lt;p&gt;Contributing to an open source project is also an excellent way to improve your skills and learn new things. You can find issues for a beginner on &lt;a href=&quot;https://contributor.ninja&quot;&gt;contributor.ninja&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a few in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Federico Zivolo (&lt;strong&gt;@FezVr4sta&lt;/strong&gt;) develops a library called &lt;a href=&quot;https://www.npmjs.com/package/popper.js&quot;&gt;popper.js&lt;/a&gt;. Since recently Bootstrap uses his library for dropdown, tooltips or popover.&lt;/li&gt;
&lt;li&gt;Bradley Farias (&lt;strong&gt;@bradleymeck&lt;/strong&gt;) is the one pushing ES modules since over a year.&lt;/li&gt;
&lt;li&gt;Henry Zhu (&lt;strong&gt;@left_pad&lt;/strong&gt;) maintainer of Babel, he knows a lot about how OSS works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want, read more about &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-async-to-generator/&quot;&gt;async functions&lt;/a&gt; and the &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-async-to-generator/&quot;&gt;await operator&lt;/a&gt;. I recommend using Babel&amp;#39;s &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-async-to-generator/&quot;&gt;async-to-generator transformation&lt;/a&gt; if your platform is missing this syntax.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you are using &lt;a href=&quot;https://www.npmjs.com/package/babel-preset-env&quot;&gt;babel-preset-env&lt;/a&gt;, you are set.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Sven! &lt;strong&gt;async-reactor&lt;/strong&gt; looks almost too easy to use. It definitely cuts down the amount of boilerplate related to performing asynchronous operations on component level.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/xtuc/async-reactor&quot;&gt;GitHub project&lt;/a&gt; to learn more.&lt;/p&gt;
</content></entry><entry><title>WebpackBin - Webpack Code Sandbox - Interview with Christian Alfoni</title><id>awebpackbinwebpackcodesandboxinterviewwithchristianalfoni2017-05-09t00:00:00z</id><link href="https://survivejs.com/blog/webpackbin-interview/"></link><updated>2017-05-09T00:00:00Z</updated><content type="html">&lt;p&gt;Online tools are great for prototyping ideas and even workshops. You avoid the pain of setup while giving up some degree of control. Often this is a good trade-off, though.&lt;/p&gt;
&lt;p&gt;The interview series covered &lt;a href=&quot;https://survivejs.com/blog/codesandbox-interview&quot;&gt;CodeSandbox, an online React playground&lt;/a&gt; earlier. This time around it&amp;#39;s time to look into another alternative, WebpackBin by &lt;a href=&quot;https://twitter.com/christianalfoni&quot;&gt;Christian Alfoni&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you have been following the series, you might remember an earlier interview of Christian. That time around we &lt;a href=&quot;https://survivejs.com/blog/cerebral-interview&quot;&gt;discussed his state management solution, cerebral&lt;/a&gt;.&lt;/blockquote&gt;&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; WebpackBin isn&amp;#39;t online anymore. You can still read the blog post but don&amp;#39;t expect the service to work!&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/a3ec41be3805962e3c90ccdbbb8e32fb.jpg&quot; alt=&quot;Christian Alfoni&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Christian Alfoni&lt;/figcaption&gt;&lt;/figure&gt;

  For sure! :) I am a 33-year-old JavaScript hacker, developer, OSS enthusiast and due to that an emotional wreck. Living in Trondheim, Norway. I spend my days at Ducky, a startup I joined last year.
&lt;/p&gt;

&lt;p&gt;We are trying to save the planet, and my part in that is making technology choices and informally running a small development team to support the constant changes and ambitions of the company.&lt;/p&gt;
&lt;p&gt;Related to this I do a lot of open source. The &lt;a href=&quot;http://www.cerebraljs.com&quot;&gt;cerebral&lt;/a&gt; project, which we have talked about before, is about to hit 2.0 release and has been a great tool to handle the complexity and constant changes in our project.&lt;/p&gt;
&lt;p&gt;I also have other smaller projects, like &lt;a href=&quot;https://github.com/cerebral/marksy&quot;&gt;marksy&lt;/a&gt;, I write articles from time to time on &lt;a href=&quot;http://www.christianalfoni.com&quot;&gt;www.christianalfoni.com&lt;/a&gt;, and I have built a bin service that uses webpack bundling on the server side. My biggest project these days though is my six months year old daughter, Emma.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-webpackbin-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-webpackbin-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;WebpackBin&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-webpackbin-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You have probably heard about bin services like JSBin, Codepen, etc. These are certainly excellent services, but the way we write our code has changed a lot the last few years. We transpile pretty much everything we write.&lt;/p&gt;
&lt;p&gt;The JavaScript code itself to a more modern syntax, JSX, templates, CSS, etc. We do not add libraries as script tags anymore either; we install them from npm. Lastly, we bundle all this together using a build tool, like webpack, using a single entry point. Webpackbin does its best to be a bin service that gives you these features directly in the browser.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-webpackbin-work-&quot; id=&quot;how-does-webpackbin-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;WebpackBin&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-webpackbin-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Webpackbin is split up into different services.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Webpackbin Client&lt;/li&gt;
&lt;li&gt;webpack-sandbox&lt;/li&gt;
&lt;li&gt;webpack-dll&lt;/li&gt;
&lt;li&gt;webpack-packager&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpackbin-client&quot; id=&quot;webpackbin-client&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpackbin Client&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpackbin-client&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The client itself is just a JavaScript application that is served from Firebase and connects directly to it. It is built with Cerebral and Inferno. When the client loads up, it will contact the &lt;strong&gt;webpack-sandbox&lt;/strong&gt; service.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-sandbox&quot; id=&quot;webpack-sandbox&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;webpack-sandbox&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-sandbox&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The request contains information about the files, npm packages and Webpack loaders that have to be activated on the bin. The &lt;strong&gt;webpack-sandbox&lt;/strong&gt; will spin up a webpack middleware on your personal session based on these details, much like the webpack-dev-middleware. What is unique about this middleware though is that it runs entirely in memory.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-dll&quot; id=&quot;webpack-dll&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;webpack-dll&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-dll&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the request contains npm packages, the &lt;strong&gt;webpack-sandbox&lt;/strong&gt; service will make a request to &lt;strong&gt;webpack-dll&lt;/strong&gt;. The request is specifically for a &lt;em&gt;manifest.json&lt;/em&gt; file. If the compilation of packages has been requested before, this file is either returned by the CDN or the database of the &lt;strong&gt;wepback-dll&lt;/strong&gt; service. If it is a new compilation of packages &lt;strong&gt;webpack-dll&lt;/strong&gt; will contact one of multiple &lt;strong&gt;webpack-packager&lt;/strong&gt; instances.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-packager&quot; id=&quot;webpack-packager&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;webpack-packager&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-packager&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;webpack-packager&lt;/strong&gt; takes the list of packages, runs them with Yarn, uses Webpack to bundle up a DLL bundle, cleans up after itself and responds to the &lt;strong&gt;webpack-dll&lt;/strong&gt; service. The &lt;strong&gt;webpack-dll&lt;/strong&gt; service now puts the bundle into a database and also responds with the requested manifest.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;A DLL bundle is a JavaScript file that your app file can hook into to load modules, typically packages from npm.&lt;/blockquote&gt;&lt;p&gt;Now &lt;strong&gt;webpack-sandbox&lt;/strong&gt; has a manifest it bundles together with your middleware instance and any loaders configured. It responds with an OK, and the webpackbin client will now refresh an iframe also pointing to &lt;strong&gt;webpack-sandbox&lt;/strong&gt;, but now it is a get request.&lt;/p&gt;
&lt;p&gt;The session is picked up, points to the middleware, extracts the bundled files and injects a script in the &lt;em&gt;index.html&lt;/em&gt; to the &lt;em&gt;dll.js&lt;/em&gt; file related to the manifest that was requested earlier. The iframe loads the returned index.html which grabs the dll file, your particular bin app bundle and voilà your bin is displayed.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#design-the-hardest-part&quot; id=&quot;design-the-hardest-part&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Design - The Hardest Part&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#design-the-hardest-part&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now, it was not like I took a shower or woke up one night and had a clear picture of this. There have been many showers and many sleepless nights thinking about and tweaking this. And what I just explained now is the easy part. The hardest part will most certainly come as a surprise, and it is two-fold.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Webpack DLL bundles are not as straightforward as you might think&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They require the npm packages to be installed locally to resolve entrypoints, but there is no local install in the browser. So the way this is solved is by analyzing the npm packages and finding relevant entrypoints beforehand. These entry points are then defined as &lt;em&gt;externals&lt;/em&gt;, so your code grabs the correct module when asked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. npm packages are a complete mess&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It feels like every single npm package out there has their little tweak on &lt;strong&gt;package.json&lt;/strong&gt; property names, directory names, file names and what is included in the published npm package.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;webpack-packager&lt;/strong&gt; service has a lot of logic to figure out what should be included, mostly by figuring out what should &lt;strong&gt;not&lt;/strong&gt; be included. Doing this is still a challenge, but it is under control.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-webpackbin-differ-from-other-solutions-&quot; id=&quot;how-does-webpackbin-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;WebpackBin&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-webpackbin-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes to features, Webpackbin has a cool LIVE feature. You can just hit a button and share your URL and others can see your code live. You can give control to your participants, and the idea is to provide a teaching tool.&lt;/p&gt;
&lt;p&gt;Another beautiful thing is that you can download your BIN at any time as a zip file, ready to be npm installed and npm started. It includes the packages, loaders and a webpack config based on that.&lt;/p&gt;
&lt;p&gt;But where it is rather unique is its ability to configure Webpack loaders. Which means you can use css-modules, Vue templates, handlebars, etc. pretty much any loader that transpiles can be used.&lt;/p&gt;
&lt;p&gt;That said, this has to be pre-configured on the server, due to the nature of running it in-memory with middleware. But if you can not find your loader a PR is always welcomed.&lt;/p&gt;
&lt;p&gt;I am not sure about other bin services, but Webpackbin is &lt;a href=&quot;https://github.com/cerebral/webpackbin&quot;&gt;completely open source&lt;/a&gt;. All the parts of the architecture is up for grabs.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-webpackbin-&quot; id=&quot;why-did-you-develop-webpackbin-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;WebpackBin&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-webpackbin-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yeah... why did I... hm. First of all, it was a huge technical challenge, and I had somewhere to start, I had an idea, and the webpack-dev-middleware project would very likely help me produce a proof of concept, which it did.&lt;/p&gt;
&lt;p&gt;I do not have grand plans with the stuff I do, I just like to follow my obsessions and intuition, and in this case, it resulted in something that could help people... which is the ultimate reward for me.&lt;/p&gt;
&lt;p&gt;And working on these kinds of projects usually opens up new doors. Like the &lt;strong&gt;webpack-dll&lt;/strong&gt; and &lt;strong&gt;webpack-packager&lt;/strong&gt; service is now being used by Codesandbox.io as well, allowing me to meet and work together with a guy who is just as enthusiastic as me about open source, the community, creating things...&lt;/p&gt;
&lt;p&gt;Ives makes me feel incredibly old though. Can you believe he is like 20 years old and has built Codesandbox.io? It is pretty crazy. In my defense, and anyone else reading this who is also feeling old now, the web was pretty different 13 years ago.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I worked on a project a while back, using Cerebral, where I was able to record audio and interaction together in the browser allowing you to replay code interactions, pause it, change it, continue where it left off, etc.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpackbin-as-a-teaching-tool&quot; id=&quot;webpackbin-as-a-teaching-tool&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpackbin as a teaching tool&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpackbin-as-a-teaching-tool&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hope to find some time to implement this into Webpackbin, making it a teaching tool. You can just create a bin, hit the record button, start talking and coding. When opened by others it is completely transparent what is recorded and what you do as a user, I think that could be a powerful thing.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#npm-package-analysis&quot; id=&quot;npm-package-analysis&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;npm package analysis&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#npm-package-analysis&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Other than that Ives and I are tightening the screws on &lt;strong&gt;webpack-packager&lt;/strong&gt;, creating a webpage for &lt;strong&gt;webpack-dll&lt;/strong&gt; that shows the status of packagers, instructions to contribute or fire up your set of services, etc. We also want to build a service that analyzes your npm distribution, giving you hints about things you should not have there like tests, the source code, docs, benchmarks, etc. and also naming conventions, package.json properties etc.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; I hope npm can take the clue and integrate some of these features to npm client itself!&lt;/blockquote&gt;&lt;p&gt;We want to help to force some conventions on these things. We are also collaborating on other features that both our services can use. And who knows, maybe a path opens where we can combine forces on all parts of the stack.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-webpackbin-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-webpackbin-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;WebpackBin&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-webpackbin-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am a bit sick and tired of listening to: &amp;quot;Use a type system, prevent runtime exceptions&amp;quot;. &amp;quot;Use immutable data structures, prevent unwanted mutations&amp;quot;. These are not good arguments in my opinion.&lt;/p&gt;
&lt;p&gt;When I discovered that immutability gives you a history of state changes which could help me debug my app, or it allows you to verify with shallow checking to optimize rendering that is when immutability made sense.&lt;/p&gt;
&lt;p&gt;I think the same about type systems. Like runtime exceptions are not the problem. That is not what we spend time on. But I can see self-documenting, safe refactoring and enhanced IDE experience are good arguments for type systems.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#managing-increasing-complexity&quot; id=&quot;managing-increasing-complexity&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Managing Increasing Complexity&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#managing-increasing-complexity&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But my point is that these are not my primary pain points. What I think we struggle with is handling the increase of complexity in our applications. Compare what we did three years ago to what we do now, regarding animations, interaction, data and new technologies.&lt;/p&gt;
&lt;p&gt;To handle all this stuff we need abstractions. We need abstractions for UI, animations, state management, flow control, etc. Even the technology itself, like CSS, service workers, etc. There are tons of projects working on improving their usability.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#more-abstractions-more-tooling&quot; id=&quot;more-abstractions-more-tooling&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;More Abstractions, More Tooling&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#more-abstractions-more-tooling&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So I think we are going to see a massive increase in abstractions to help us handle all this complexity. We are not going to write more code; we are going to write less. We are going to use a lot more tools, and they are going to be visual tools.&lt;/p&gt;
&lt;p&gt;Just take a look at the significant innovations in dev tools for frameworks, Chrome dev tools, bundle analyzers, etc. I think we have only seen the beginning of this.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You only need two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A subscription on &lt;a href=&quot;https://frontendmasters.com/&quot;&gt;www.frontendmasters.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A mentor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some people like to say: &amp;quot;Learn the language&amp;quot;. I do not agree with that. I think &amp;quot;Get productive and have fun&amp;quot; is more important. You can be insanely productive without understanding the inner workings of JavaScript, and getting into that stuff will come naturally to you as you take on more and more complex concepts.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think you should get a hold of Amy Knight from &lt;a href=&quot;https://devchat.tv/js-jabber&quot;&gt;JavaScript Jabber&lt;/a&gt;. As I understand she is relatively new to programming and I believe it would be interesting, especially here in Europe, to listen to what resources she had available to her and how she got going with programming. Maybe we can learn something over here.&lt;/p&gt;
&lt;p&gt;We are trying to get to a place where we do not ask questions like &amp;quot;As a woman....&amp;quot;, but the state of our community is that we severely lack women, and we need to understand what we are doing wrong. Like my old boss said, you need at least 30% women at the party because then the men behave.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I guess I should encourage you to check out &lt;a href=&quot;http://www.cerebraljs.com&quot;&gt;Cerebral 2.0&lt;/a&gt; which is closing in on release. It is a JS framework that goes head on with handling side effects and has a pretty excellent debugger.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Christian! I remember using WebpackBin on my early workshops and it was particularly great to see the recent upgrades made to the service. If you haven&amp;#39;t tried it in a while, it&amp;#39;s worth another look.&lt;/p&gt;
&lt;p&gt;If you want to check out the source, see &lt;a href=&quot;https://github.com/cerebral/webpackbin&quot;&gt;webpackbin on GitHub&lt;/a&gt;. The service itself isn&amp;#39;t online anymore.&lt;/p&gt;
</content></entry><entry><title>SurviveJS Euro Tour 2017 Recap</title><id>asurvivejseurotour2017recap2017-05-03t00:00:00z</id><link href="https://survivejs.com/blog/euro-tour-2017-recap/"></link><updated>2017-05-03T00:00:00Z</updated><content type="html">&lt;p&gt;In this post, I will go through the biggest realizations gained in my &lt;a href=&quot;https://survivejs.com/blog/euro-tour-2017&quot;&gt;Euro tour&lt;/a&gt;. I know it&amp;#39;s a cliché thing to say, but trips like this grow you as a person. Spending a month outside of your comfort zone leads to realizations you might not otherwise have.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#background&quot; id=&quot;background&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Background&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s not the easiest point of life for me as I&amp;#39;m struggling to find a sustainable direction. It&amp;#39;s a similar crisis like the one &lt;a href=&quot;https://survivejs.com/blog/the-story-so-far&quot;&gt;I had early on&lt;/a&gt; but on a different level. It&amp;#39;s a crisis of identity. Having a business that runs is nice, but maybe there&amp;#39;s more to life than that.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s the never-ending battle of finding a good niche for your business while managing the personal side. These two go together, and some balance is needed. You cannot be an all business person and forget about the personal side. I guess in my case the business reflects my personality. No way to avoid that.&lt;/p&gt;
&lt;p&gt;I saw the trip as an opportunity for a change of pace. The last few months were filled with &lt;a href=&quot;https://survivejs.com/webpack&quot;&gt;webpack book&lt;/a&gt; related work, and I was fairly tired by the end of it. The trip itself came with responsibilities of its own, but at least it was something different.&lt;/p&gt;
&lt;p&gt;I ended up giving twelve sessions around Europe within the span of a month. It sounds much, and it is. Interestingly enough I got used to the life of touring by the end and will miss it.&lt;/p&gt;
&lt;p&gt;Monetarily the trip wasn&amp;#39;t a great success, and I ended up making a solid loss, but despite this, I believe it was worth the investment. You cannot measure everything as money. It was the experience gained that was valuable for me, and it is possible I&amp;#39;ll cover the losses regarding new opportunities.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Half of the trip was sponsored and arranged by &lt;a href=&quot;https://reactiveconf.com/&quot;&gt;Reactive Conf&lt;/a&gt;. Thank you for your invaluable support. They also &lt;a href=&quot;https://medium.com/@ReactiveConf/juho-veps%C3%A4l%C3%A4inen-webpack-gives-you-complete-control-over-your-app-88c148db18eb&quot;&gt;interviewed me&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#presentations&quot; id=&quot;presentations&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Presentations&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#presentations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I prepared three presentations for the trip:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://presentations.survivejs.com/re-imagining-webpack/&quot;&gt;Re-imagining webpack&lt;/a&gt; - 15-20 min short talk about my love story with webpack. How I found it, what I did with it, and where it&amp;#39;s going.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From apprentice to journeyman&lt;/a&gt; - First half of the book summarized.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://presentations.survivejs.com/webpack-from-journeyman-to-master/&quot;&gt;Webpack - From journeyman to master&lt;/a&gt; - Second half of the book summarized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given I had already written a book and given &lt;a href=&quot;http://presentations.survivejs.com/advanced-webpack/&quot;&gt;an earlier presentation&lt;/a&gt; about the topic earlier, my challenge was to convert all the information as slides. As it happens, this was hard to achieve.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-went-right&quot; id=&quot;what-went-right&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Went Right&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-went-right&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I considered my first week in Oslo as training. In addition to giving a public talk on the topic of &amp;quot;Re-imagining webpack&amp;quot;, I managed to arrange a couple of free private sessions (one on one and a group session with a company). Doing this gave me a good chance to benchmark the content against people and improve the content.&lt;/p&gt;
&lt;p&gt;I managed to find a speaker out of myself by the end of the tour. I enjoyed especially the Vienna session, and we had real interaction going on. I still made a few mistakes, but it was the most relaxed session for me and also the most enjoyable one. The irony is that once you find your pace, it all ends!&lt;/p&gt;
&lt;p&gt;I think I made the right decision in splitting the main presentation into two halves. The first one took around 45 minutes while the latter was designed around 30 minutes. I implemented a ten-minute break in between the sections early on as otherwise, it&amp;#39;s a little much to endure.&lt;/p&gt;
&lt;p&gt;Another thing that went right was allowing questions within the presentations. I structured the parts of the presentations so that they map to the book and allowed questions after each. I think this is a good way as it gives you a lot of chances to interact with your audience and even clarify your thinking. Sometimes the same question comes by multiple times across different audiences, and you can improve your answer!&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-went-wrong&quot; id=&quot;what-went-wrong&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Went Wrong&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-went-wrong&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I made the mistake of including too much content on my early presentations. As presentations went by, I dropped more and more points while increasing focus. I did a special version of the &amp;quot;From journeyman to master&amp;quot; set for my last few presentations to keep it terse. It wasn&amp;#39;t perfect but enough to give some idea of more advanced scenarios. The slides online contain more ideas than this special edition.&lt;/p&gt;
&lt;p&gt;I got bitten by my native language. Finnish and English don&amp;#39;t go well together, and that leads to problems with comprehension. By the end of the month, I had adapted to English quite well and even struggled a bit with Finnish by then. To resolve this fully, I would have to live abroad as otherwise, I won&amp;#39;t get training. It looks like you have to choose between the two.&lt;/p&gt;
&lt;p&gt;Without a fault of my own, there were technical difficulties along the way. I learned I struggle with traditional mics a lot. You have one hand less to code with and one more thing to worry about adding to the stress. There were also times when the mic just broke, and we had to replace it with another one a few times. I guess the lesson to learn is that if you are serious about touring, bring equipment you trust.&lt;/p&gt;
&lt;p&gt;Another lesson to learn was that you should always have backup plans when it comes to the presentation itself. On one occasion the HDMI connection just wouldn&amp;#39;t work, and I had to use someone else&amp;#39;s Windows laptop. Even though challenging, it worked out somehow in the end even though I could not live code. It&amp;#39;s good to make sure your presentation material is available online as you never know when you need a backup plan.&lt;/p&gt;
&lt;p&gt;Sometimes issues beyond your control like these will affect you. Technical problems lead to rush and rush leads to poorer results. Maybe the lesson here is to keep your calm as there&amp;#39;s not much you can do about technology above a certain point. Rushing will only make it worse. For this reason, it&amp;#39;s a good idea to cut the amount of content you want to present as then there&amp;#39;s slack in the schedule.&lt;/p&gt;
&lt;p&gt;I was interested in having more free sessions in Berlin, but I probably didn&amp;#39;t push that enough as there was no response to my initial tweet. But on the plus side, I had time to explore the city and its possibilities.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c2635be554fcd60675286d5a0b7a1192.jpg&quot; alt=&quot;Gnome&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Gnome&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#trip&quot; id=&quot;trip&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Trip&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#trip&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The trip itself was amazing. I spent time in a lot of cities and learn about different cultures. Being outside of your culture allows you to understand it better. I understood I&amp;#39;ve been taking things like clean air, water, sauna, solid internet connection, and honesty, for granted. It&amp;#39;s not the same everywhere, and there are always trade-offs.&lt;/p&gt;
&lt;p&gt;I also understood how expensive place Finland is. Only Norway was worse in this regard, and the other countries were cheaper, sometimes greatly so. A good example is a pasta dinner at Berlin which included appetizer, main course, dessert, and a drink for 7.5 euros. The comparable offering would cost between 20 and 30 euros in Finland while not matching the quality.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c3df69a1075e284e757c81fa39a0bad6.jpg&quot; alt=&quot;Oslo&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Oslo&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-went-right&quot; id=&quot;what-went-right&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Went Right&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-went-right&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you go abroad, you can forget certain axioms about yourself. Instead of being shy and reserved, as most Finns tend to be, I decided to be open to experiences. Sometimes this meant chatting a bit with another traveler or going to meetups. Doing both opened an entire world to me and gained experiences I would have missed otherwise. How else could you get a private underground tour in Berlin or get to see the quarries of Czech and end the day with a stunning dinner?&lt;/p&gt;
&lt;p&gt;It seems to me that if you are open to experiences and willing to get out of your comfort zone a little, a lot of magical things can happen. The realization was perhaps the most mind altering of the trip for me. It&amp;#39;s easier to build connections once you find a common interest let it be touring, hiking, or something else.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s amazing how deep you can go in discussions when you find the right person. Maybe it&amp;#39;s a form of therapy as you get to discuss topics you would otherwise skip in fear of losing face. I&amp;#39;m not the type of person that connects well so it was refreshing to see that I can do it given the right environment and courage.&lt;/p&gt;
&lt;p&gt;I wasn&amp;#39;t much of a subway person before this trip given my home town doesn&amp;#39;t have one. This trip showed me how convenient it could be. I was particularly impressed by the systems of Oslo and Prague. Berlin worked too, but it felt complicated in comparison. The trick is to buy a day ticket or longer as this will save time and make your stay less stressful as you don&amp;#39;t have to buy tickets all the time. It also gives you a degree of freedom.&lt;/p&gt;
&lt;p&gt;Google Maps routing worked well in most cities. If you go to Vienna, you should install &lt;strong&gt;qando Wien&lt;/strong&gt; as it works much better than Google&amp;#39;s offering. To discover trekking routes, you should use &lt;strong&gt;mapy&lt;/strong&gt; while in the Czech Republic.&lt;/p&gt;
&lt;p&gt;Investing in good shoes before the trip ended up being one of the better decisions I&amp;#39;ve made. I bought an expensive pair of Mephistos by chance just to see if expensive shoes make a difference. Apparently, they do. I didn&amp;#39;t have any significant problems with legs or feet despite walking roughly 200 km during the month. As a result, I&amp;#39;m in a better shape now and feel like running again as walking doesn&amp;#39;t do the trick anymore. I also shed some winter weight while at it. Big win overall.&lt;/p&gt;
&lt;p&gt;It was great to see nature in Czech and Austria. I can recommend groups like &lt;a href=&quot;https://www.meetup.com/discoveringprague/&quot;&gt;Discovering Prague&lt;/a&gt; or &lt;a href=&quot;https://www.meetup.com/Internationals-in-Wien/&quot;&gt;Internationals in Wien&lt;/a&gt; if you want to explore and meet new people. I&amp;#39;ll miss their events for sure.&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300px&quot; src=&quot;https://www.youtube.com/embed/5DG3bxRT49U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-went-wrong&quot; id=&quot;what-went-wrong&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Went Wrong&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-went-wrong&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I made quite a phone bill at Norway by forgetting to disable data on my phone initially as modern phones are data hungry. On the plus side, I figured out the right way to deal with this problem while in Germany. I bought a prepaid SIM for 15 euros and used it solely for data. Even with 1 GB cap, it was enough for my purposes, and I bought another one in Austria.&lt;/p&gt;
&lt;p&gt;If you travel in multiple countries, it is important to buy the right SIM. I think the cheaper one was constrained to Germany alone. The EU legislation will change and make this easier. I should be able to use my unlimited LTE connection without any extra costs &lt;a href=&quot;https://ec.europa.eu/digital-single-market/en/roaming-tariffs&quot;&gt;starting from June&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I managed to lose my hat on a plane. I simply forgot to pick it up when leaving. Fortunately, this wasn&amp;#39;t a great loss, and it gave me a good excuse to buy a nicer one. In short, anything that&amp;#39;s not stored properly will likely get lost. I also had a little pocket issue with certain pants. Wear only pants with good pockets as otherwise, you are asking for trouble.&lt;/p&gt;
&lt;p&gt;I should have spent more time researching restaurants and places to visit beforehand. Now I relied on tips by locals and intuition but perhaps doing work beforehand wouldn&amp;#39;t be a bad idea. Sometimes you find the best places by exploring on your own, though.&lt;/p&gt;
&lt;p&gt;It would have been a good idea to bring earplugs and a sleep mask to help with sleep quality. I did get sleep, but I could have done better in this department.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/6d1fb21d53f5c18aa728509e68b557a8.jpg&quot; alt=&quot;Berlin&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Berlin&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though not perfect, I think the trip was a personal success. I have a better idea on how to focus my energy and what to do next. Wheels are turning, and you may see me in more significant parts of Europe again sometime soon, but I&amp;#39;ll announce the news separately with more details.&lt;/p&gt;
</content></entry><entry><title>Fluture - Fantasy Land compliant alternative to Promises - Interview with Aldwin Vlasblom</title><id>afluturefantasylandcompliantalternativetopromisesinterviewwithaldwinvlasblom2017-05-02t00:00:00z</id><link href="https://survivejs.com/blog/fluture-interview/"></link><updated>2017-05-02T00:00:00Z</updated><content type="html">&lt;p&gt;Dealing with the asynchronous code has always been a challenge in JavaScript. Callbacks are the classic way, and since then we&amp;#39;ve gained higher level abstractions and constructs for handling the problem.&lt;/p&gt;
&lt;p&gt;This time around we&amp;#39;ll discuss &lt;a href=&quot;https://github.com/fluture-js/Fluture&quot;&gt;Fluture&lt;/a&gt;, a Fantasy Land specification compatible alternative to &lt;code&gt;Promises&lt;/code&gt; by &lt;a href=&quot;https://github.com/Avaq&quot;&gt;Aldwin Vlasblom&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/e30745ae3be2e0792957c89d7460d57c?s=200&quot; alt=&quot;Aldwin Vlasblom&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I was born and raised in Rotterdam, the Netherlands. I got into programming at age eleven when I decided to make a website for my RuneScape clan and happened upon Macromedia Flash with ActionScript. At age fourteen I had made several small sites for family members and decided to do my internship at a digital agency.
&lt;/p&gt;

&lt;p&gt;That&amp;#39;s where I was introduced to PHP and realized I want to pursue an education in this area, which lead me to do a course in interactive media design and development.&lt;/p&gt;
&lt;p&gt;During my second internship, I became responsible - and was later hired - to maintain the company&amp;#39;s internal PHP framework. I loved making API&amp;#39;s and abstractions for other developers and was fond of higher order functions.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s, therefore, no surprise that I was drawn into the JavaScript functional programming world, and ended up creating an API which is based almost exclusively on higher order functions.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-fluture-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-fluture-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Fluture&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-fluture-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are three approaches to introducing Fluture, depending on the background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To an inexperienced JavaScript programmer I might say that it&amp;#39;s an abstraction which serves to reduce the complexity of dealing with JavaScripts asynchronous nature (also knows as callback-hell).&lt;/li&gt;
&lt;li&gt;To an experienced JavaScript programmer I might say that it&amp;#39;s like a Promise, but lazily evaluated, with cancellation, and with a more principled API which conforms to &lt;a href=&quot;https://github.com/fantasyland/fantasy-land&quot;&gt;Fantasy Land&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To a functional programmer I might say that it&amp;#39;s a Monad which encodes side-effects, delay, and possible failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-fluture-work-&quot; id=&quot;how-does-fluture-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Fluture&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-fluture-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In it&amp;#39;s simplest form, it&amp;#39;s a function which takes a function and returns it wrapped in an object with the name &amp;quot;fork&amp;quot;, perhaps best explained through code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;Future&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; fork &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;fork&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;Future&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;rej&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;fork&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;log
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This structure becomes interesting once you add higher order functions like &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;Future&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; fork &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  fork&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  map&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; f &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Future&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;reject&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; resolve&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot; &gt;fork&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
        reject&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        x &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;Future&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;reject&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; resolve&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;fork&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea that you can &lt;code&gt;map&lt;/code&gt; over a Future similarly to how one might &lt;code&gt;map&lt;/code&gt; over an &lt;code&gt;Array&lt;/code&gt; comes from the research into &amp;quot;algebraic data types&amp;quot; brought to JavaScript most prominently by &lt;a href=&quot;https://github.com/fantasyland/fantasy-land&quot;&gt;Fantasy Land&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fluture builds on top of these ideas to add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Full conformity to Fantasy Land Monad&lt;/li&gt;
&lt;li&gt;Other utilities and transformations&lt;/li&gt;
&lt;li&gt;Cancellation&lt;/li&gt;
&lt;li&gt;Input type checking&lt;/li&gt;
&lt;li&gt;And &lt;a href=&quot;https://github.com/fluture-js/Fluture/milestone/5&quot;&gt;soon&lt;/a&gt;: Stack safety&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-fluture-differ-from-other-solutions-&quot; id=&quot;how-does-fluture-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Fluture&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-fluture-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The description of Fluture states that it&amp;#39;s &lt;em&gt;an alternative to Promises&lt;/em&gt;, so it&amp;#39;s only natural that people want to compare it. In my article &lt;a href=&quot;https://github.com/fluture-js/Fluture/wiki/Comparison-to-Promises&quot;&gt;comparing Futures to Promises&lt;/a&gt; I write:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the surface Futures are just like Promises, but with the different behaviors of the &lt;code&gt;.then&lt;/code&gt; method extracted into three distinct functions, each with a &lt;em&gt;single responsibility&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; method of a Promise is massively overloaded: You can give it zero to two arguments, both are mixed types (&lt;code&gt;Nil&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt;). The return values of the functions are also overloaded: You can return any value, but returning something with a &lt;code&gt;then&lt;/code&gt;-method has a particular meaning. Throwing an error also has special meaning.&lt;/p&gt;
&lt;p&gt;Extracting all of these behaviors to separate functions makes it easier to abstract over, and clarifies developer intent, making it simpler to detect mistakes.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve also written about the differences between Fluture and other libraries which have a similar structure, in my article &lt;a href=&quot;https://github.com/fluture-js/Fluture/wiki/Comparison-of-Future-Implementations&quot;&gt;comparing them&lt;/a&gt;. I&amp;#39;ll go into this when answering why I developed Fluture.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-fluture-&quot; id=&quot;why-did-you-develop-fluture-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Fluture&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-fluture-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I got into functional programming some years ago when I discovered &lt;a href=&quot;http://ramdajs.com/&quot;&gt;Ramda&lt;/a&gt;, and from there I became acquainted with &lt;a href=&quot;https://github.com/fantasyland/fantasy-land&quot;&gt;Fantasy Land&lt;/a&gt;. The first algebraic type I decided to try was a Future. I tried &lt;a href=&quot;https://github.com/folktale/data.task&quot;&gt;&lt;code&gt;data.task&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/ramda/ramda-fantasy&quot;&gt;Ramda Fantasy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A little later I was teaching asynchronous functional programming to a small group of developers, and I found that one of the biggest sources of confusion were the bizarre and cryptic error messages one would get out of these Future libraries from making simple mistakes.&lt;/p&gt;
&lt;p&gt;I had also accumulated a set of common utilities that I was using with Futures, so I decided to create a Future library which would ship with these utilities and provide understandable error messages. I made sure that the performance remained decent because I did not want people to have to choose between good performance and a pleasant development experience.&lt;/p&gt;
&lt;p&gt;I later discovered &lt;a href=&quot;https://sanctuary.js.org/&quot;&gt;Sanctuary&lt;/a&gt;, with which Fluture shares a lot of its design
philosophy. It became another important part of Fluture&amp;#39;s design to integrate
with Sanctuary nicely.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To learn more about Sanctuary, &lt;a href=&quot;https://survivejs.com/blog/sanctuary-interview&quot;&gt;read the interview of David Chambers&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A critique Fluture and other Futures have always received is that they are not stack safe, unlike Promises. Promises execute every action immediately in the next JavaScript tick giving them an inherent stack safety, because every operation waits until the stack is cleared before executing.&lt;/p&gt;
&lt;p&gt;Some weeks ago, by combining ideas from Promises, Fluture, and Free Monads, I created a stack safe proof of concept Future which does not use the next-tick-trick. I&amp;#39;m currently working on porting the entire Fluture library to this new architecture. It&amp;#39;s already feature complete - it just needs &lt;a href=&quot;https://github.com/fluture-js/Fluture/milestone/5&quot;&gt;some polishing&lt;/a&gt; before being released under version &lt;code&gt;6.0&lt;/code&gt; in the coming months.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-fluture-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-fluture-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Fluture&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-fluture-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fluture has earned a place in my personal toolkit when it comes to classic request-response applications, like those you find in web-servers. In this context, I consider it the best solution to the &lt;a href=&quot;https://github.com/plaid/async-problem&quot;&gt;async problem&lt;/a&gt; (and the promise problem) that I&amp;#39;ve used to date, and I don&amp;#39;t think that will change soon.&lt;/p&gt;
&lt;p&gt;As for other kinds of applications, like the ones you might find running in browsers, I think we are moving towards reactive. Streams are the perfect async abstraction in these environments.&lt;/p&gt;
&lt;p&gt;Streams are like Futures, except that they can produce more than one value. For an excellent Stream library I recommend &lt;a href=&quot;https://github.com/cujojs/most&quot;&gt;most&lt;/a&gt;. And for an interesting way to use it, and think about front-end applications, I would recommend learning about &lt;a href=&quot;https://github.com/cyclejs/cyclejs&quot;&gt;CycleJS&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To learn more about CycleJS, &lt;a href=&quot;https://survivejs.com/blog/cycle-interview&quot;&gt;read the interview of André Staltz&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avoid using object and variable mutation as a feature for the functionality of your code. You are shooting yourself in the foot. Mutation is a means to optimize code.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I admire the works of &lt;a href=&quot;https://github.com/briancavalier&quot;&gt;Brian Cavalier&lt;/a&gt;, author of &lt;a href=&quot;https://github.com/cujojs/most&quot;&gt;most&lt;/a&gt;, &lt;a href=&quot;https://github.com/briancavalier/creed&quot;&gt;creed&lt;/a&gt;, and more.&lt;/p&gt;
&lt;p&gt;I also think it may be good to interview &lt;a href=&quot;https://github.com/safareli&quot;&gt;Irakli Safareli&lt;/a&gt;, he has been an invaluable contributor to both Sanctuary and Fluture, and he&amp;#39;s been exploring the little-explored field of Free Monads with his project &lt;a href=&quot;https://github.com/safareli/free&quot;&gt;Free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, I would like to give a shout-out to &lt;a href=&quot;https://github.com/rpominov&quot;&gt;Roman Pominov&lt;/a&gt; who helped me bring cancellation into Fluture. He authored &lt;a href=&quot;https://github.com/rpominov/kefir&quot;&gt;Kefir&lt;/a&gt; - the first Reactive Stream library I got into, and &lt;a href=&quot;https://github.com/rpominov/static-land&quot;&gt;Static Land&lt;/a&gt; - an adaptation of Fantasy Land which pushes the community forward.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think a wildly under-appreciated feature of Monads is &lt;em&gt;Monad Transformers&lt;/em&gt;, I&amp;#39;ve scratched the surface of what they are capable of in my project &lt;a href=&quot;https://github.com/Avaq/momi&quot;&gt;momi&lt;/a&gt;, which implements the core ideas of &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; in only a few lines of code by combining two existing Monads. I would like to see their usage grow.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Aldwin! It is always amazing to see new solutions to old problems. Sometimes reframing the problem somehow can lead to alternatives.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/fluture-js/Fluture&quot;&gt;Fluture GitHub page&lt;/a&gt; to learn more about the project.&lt;/p&gt;
</content></entry><entry><title>CodeSandbox - Online React Playground - Interview with Ives van Hoorne</title><id>acodesandboxonlinereactplaygroundinterviewwithivesvanhoorne2017-04-24t00:00:00z</id><link href="https://survivejs.com/blog/codesandbox-interview/"></link><updated>2017-04-24T00:00:00Z</updated><content type="html">&lt;p&gt;Getting started with React can be daunting especially if you want to understand the entire setup. Solutions like &lt;a href=&quot;https://www.npmjs.com/package/create-react-app&quot;&gt;create-react-app&lt;/a&gt; have hidden a lot of this complexity. But there&amp;#39;s more to it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/&quot;&gt;CodeSandbox&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/Ives13&quot;&gt;Ives van Hoorne&lt;/a&gt; pushes the problem online. Instead of setting up a React project each time you want to experiment, you can use his service instead. Read on to learn more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://avatars1.githubusercontent.com/u/587016?v=3&amp;s=460&quot; alt=&quot;Ives van Hoorne&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

My name is Ives van Hoorne; I&amp;#39;m a Computer Science student at the &lt;a href=&quot;https://www.utwente.nl/en/&quot;&gt;University of Twente&lt;/a&gt; and a part-time developer at &lt;a href=&quot;https://catawiki.com&quot;&gt;Catawiki&lt;/a&gt;. I worked there full-time last year, at that time I was responsible for converting the website to React.
&lt;/p&gt;

&lt;p&gt;Though I like all kinds of programming, I&amp;#39;ve been especially attracted to frontend the last few years, mostly because it&amp;#39;s also a bit artistic. I get a lot of satisfaction from building user interfaces that people both find beautiful and easy to use.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-codesandbox-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-codesandbox-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;CodeSandbox&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-codesandbox-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io&quot;&gt;CodeSandbox&lt;/a&gt; is an online editor for web development projects. It automates things like transpiling, bundling and dependency management for you so you can easily create a new project with a single click. The editor also has a live preview so you can see the results of your work while you type.&lt;/p&gt;
&lt;p&gt;Sharing is very easy; you can just share the URL of your project or embed it in an iframe. Others can then fork it to edit the project to their liking. CodeSandbox currently has a focus on React projects, which means that it supports features like downloading to a &lt;code&gt;create-react-app&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;This is an example of a project on CodeSandbox, it&amp;#39;s the classic TodoMVC example in Redux:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/voz37vLG5&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; sandbox=&quot;allow-modals allow-forms allow-popups allow-scripts allow-same-origin&quot;&gt;&lt;/iframe&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-codesandbox-work-&quot; id=&quot;how-does-codesandbox-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;CodeSandbox&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-codesandbox-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CodeSandbox at its core consists of two parts: the editor and the preview. The editor is the whole CodeSandbox application (file manager, code editor, dependency settings) and the preview is the result you see on the right. These two parts are very decoupled and only communicate using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;&lt;code&gt;postMessage&lt;/code&gt;&lt;/a&gt;. The preview is on a subdomain (&lt;code&gt;sandbox.codesandbox.io&lt;/code&gt;) in an iframe to literally &amp;#39;sandbox&amp;#39; the preview away from the main application.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/e01fe7a0efe82a8cacc40c2d562e1e3c.png&quot; alt=&quot;Editor vs. preview&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Editor vs. preview&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The editor sends all its files, directories and dependencies to the preview; this either happens when the user changes something or when the application loads. The preview then takes all these files and processes each type using different loaders, which currently is either CSS, JavaScript, JSON, or HTML. These loaders can be very simple, the JSON loader, for example, is only a one-liner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; module &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; JSON&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;code&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The JavaScript loader is by far the most interesting since this loader also has to transpile, require and cache the result. It first transpiles the code using &lt;code&gt;babel&lt;/code&gt;; then it evals the transpiled code with a stubbed &lt;code&gt;require&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;require&lt;/code&gt; function just takes a path, checks if this is an npm dependency or a file and handles it again with the loader for that extension. Every result is cached, so most of the time only the edited file is evalled again after a change.&lt;/p&gt;
&lt;p&gt;The output of the loader goes through a &lt;code&gt;boilerplate&lt;/code&gt;, this boilerplate is determined by the output. A boilerplate simply is a separate file that does something with the loader output, for example, the boilerplate for a returned React components is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; render &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// domChanged is a boolean which specifies if the module&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// has done something to the DOM while it was evaluated&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-export&quot; &gt;export&lt;/span&gt; &lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;evaluatedModule&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; domChanged&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;domChanged&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; node &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
      React&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;evaluatedModule&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      node
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This boilerplate renders the output of a React component to the DOM if it doesn&amp;#39;t change the DOM at all.
I want to make it possible for others to build and share loaders/boilerplates as well, but this requires some thinking because we still want to support &lt;code&gt;create-react-app&lt;/code&gt; interoperability.&lt;/p&gt;
&lt;p&gt;The npm dependencies are handled by a separate server; I call it the &amp;#39;bundler&amp;#39;. The editor sends the list of dependencies to it, the bundler then creates a UMD build of this combination using webpack 2 and sends an object containing the URL and the manifest back.&lt;/p&gt;
&lt;p&gt;A manifest is an object with a mapping from dependency name to module number, so the JavaScript loader knows which module to load from the UMD build when a dependency is required.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-codesandbox-differ-from-other-solutions-&quot; id=&quot;how-does-codesandbox-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;CodeSandbox&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-codesandbox-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CodeSandbox is one of the few editors that supports npm dependencies and multiple files/directories. It also handles almost everything in the browser, which allows us to show real-time feedback without any server communication.&lt;/p&gt;
&lt;p&gt;That is a feature-wise difference, but I think the real difference compared to other editors is the goal. We want to make it possible to let others import your sandbox as a dependency. This way you can&amp;#39;t only edit others work, you can use it in your projects. The feature hasn&amp;#39;t been fully implemented yet; I still need to finish the UI for it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-codesandbox-&quot; id=&quot;why-did-you-develop-codesandbox-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;CodeSandbox&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-codesandbox-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started to think about CodeSandbox last summer when I was on holiday in St. Ives. Several colleagues asked me questions about the React project we&amp;#39;ve been working on, but there was no easy way for me to answer them. The questions were either related to a library or were so complex that it was very hard to show in, for example, Codepen.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s when I started thinking: &amp;#39;man, it would be great just to have an online editor that could do this&amp;#39;. I began working on this in my spare time and eventually, my friend Bas Buursma joined me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m currently working on more support for users and sharing. Specifically, I&amp;#39;m building the profile view right now; here you can showcase your sandboxes and see statistics like how many times your sandboxes were forked and how many views you got.&lt;/p&gt;
&lt;p&gt;It also includes a very requested feature: deleting sandboxes. Deleting is currently impossible and also very irritating, I have 38 sandboxes right now, and I would love to delete the junk ones.&lt;/p&gt;
&lt;p&gt;This is the current design for the new profile view:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/3a234440a681723f1bc35004d3516216.png&quot; alt=&quot;Profile view design&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Profile view design&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After we have better support for searching and sharing sandboxes within CodeSandbox, I can work on &amp;#39;import as library&amp;#39;. I&amp;#39;m excited about that feature and would love to build it sooner; it&amp;#39;s just that I first need to build the foundation for it.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also exploring ways to use your editor for building things on CodeSandbox; I&amp;#39;m looking at things like setting CodeSandbox as git remote/Github integration or making it possible to sync local files. Syncing is still very vague and unexplored though, so nothing is sure on this.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-codesandbox-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-codesandbox-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;CodeSandbox&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-codesandbox-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this dynamic world, it&amp;#39;s very hard to speculate on what direction we&amp;#39;re going. I think that React and other web application frameworks, like Vue, will gain a lot more mainstream adoption this year.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve seen a big increase of interest in Vue and many companies are moving to React lately. The interest automatically means that more people will go to CodeSandbox, either to learn, try something out or to build an example for asking a question.&lt;/p&gt;
&lt;p&gt;My big question is if people will use CodeSandbox to build projects on, either to share or to start something serious. So to summarize it: I think web frameworks, and as a result CodeSandbox will grow a lot, the big question for CodeSandbox is what direction this will be.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Try not to get overwhelmed! That&amp;#39;s easier said than done, so if you do get overwhelmed by a task, it&amp;#39;s smart to divide it into smaller, more manageable sub-tasks. Take it step by step.&lt;/p&gt;
&lt;p&gt;I also recommend learning by just starting a personal project. Building something that you like and can share is a great motivation, and that motivation helps to overcome so many hurdles along the way.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Christian Alfoni, the creator of WebpackBin (now defunct) and &lt;a href=&quot;https://cerebraljs.com/&quot;&gt;Cerebral&lt;/a&gt;. It has been a blast working with him. He is close to releasing a new version of a state controller called Cerebral.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; I &lt;a href=&quot;https://survivejs.com/blog/cerebral-interview&quot;&gt;interviewed Christian earlier about Cerebral&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I learned React via SurviveJS! Great book and helped me a lot with understanding React.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Ives! It&amp;#39;s nice to see services like this to appear as they take so much pain out of the process and enable quick experimentation. Maybe one day web development goes to the web entirely.&lt;/p&gt;
&lt;p&gt;Be sure to give &lt;a href=&quot;https://codesandbox.io/&quot;&gt;CodeSandbox&lt;/a&gt; a go.&lt;/p&gt;
</content></entry><entry><title>Scrimba - Interactive Screencasts Created in an Instant - Interview with Per Harald Borgen</title><id>ascrimbainteractivescreencastscreatedinaninstantinterviewwithperharaldborgen2017-04-17t00:00:00z</id><link href="https://survivejs.com/blog/scrimba-interview/"></link><updated>2017-04-17T00:00:00Z</updated><content type="html">&lt;p&gt;YouTube and the web are filled with screencasts. They provide a great way to learn difficult concepts as you can see in practice how something specific is done. This is the way I learned to use Blender, a 3D suite, in the past. It all made sense after I saw how to use the application.&lt;/p&gt;
&lt;p&gt;When it comes to coding, the challenge is that you have to literally type it all out yourself if you want to replicate the results. Scrimba has developed a solution that could change all this. &lt;a href=&quot;https://twitter.com/perborgen&quot;&gt;Per Harald Borgen&lt;/a&gt; can tell more about it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://s.gravatar.com/avatar/da24dd3ef4d4c2cde869bde781369d99?s=200&quot; alt=&quot;Per Harald Borgen&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m Per, CEO and co-founder of &lt;a href=&quot;https://scrimba.com/&quot;&gt;Scrimba&lt;/a&gt;. We&amp;#39;re an Oslo-based startup consisting of three co-founders: &lt;a href=&quot;https://github.com/somebee&quot;&gt;Sindre&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/judofyr&quot;&gt;Magnus&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/perborgen&quot;&gt;me&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Our goal is to make online learning better than in-person learning, starting with programming. At the core of this is Scrimba - an interactive video format for explaining and understanding code.&lt;/p&gt;
&lt;p&gt;I myself became a professional developer in 2015, a process I&amp;#39;ve written extensively about on &lt;a href=&quot;https://medium.com/@perborgen&quot;&gt;my blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-scrimba-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-scrimba-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Scrimba&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-scrimba-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Scrimba is an interactive video format for communicating code. It makes the experience significantly better for both the creator and the viewer. The easiest way to understand Scrimba is to watch &lt;a href=&quot;https://scrimba.com/casts/cast-279&quot;&gt;the 1 minute screencast below&lt;/a&gt;:&lt;/p&gt;
&lt;iframe src=&quot;https://scrimba.com/cast/cast-279.embed&quot; width=&quot;100%&quot; height=&quot;300px&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;As a viewer, you can pause and edit the code at any given time. So if you&amp;#39;re struggling to understand something, just hit pause, jump into the environment and play around with the code until you understand it properly.&lt;/p&gt;
&lt;p&gt;Scrimba also makes the creation experience much less frustrating, as we remove all the hassle involved with creating coding screencasts. No more &lt;em&gt;setup&lt;/em&gt;, &lt;em&gt;edit&lt;/em&gt;, &lt;em&gt;encode&lt;/em&gt;, &lt;em&gt;upload&lt;/em&gt; and &lt;em&gt;re-encode&lt;/em&gt;. Just code while you talk and then publish it instantly.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-scrimba-work-&quot; id=&quot;how-does-scrimba-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Scrimba&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-scrimba-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We record the underlying events instead of pixels. When replaying a Scrimba screencast, we recreate exactly what the creator did.&lt;/p&gt;
&lt;p&gt;This opens up a whole new world of possibilities for interactivity, creation, responsiveness, search, and recommendations. We&amp;#39;ve only begun scratching the surface of what we can do with this format.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-scrimba-differ-from-other-solutions-&quot; id=&quot;how-does-scrimba-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Scrimba&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-scrimba-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Compared to traditional video, Scrimba has the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Much easier to create&lt;/li&gt;
&lt;li&gt;Interactive (viewer can pause and edit code)&lt;/li&gt;
&lt;li&gt;1% file size of video&lt;/li&gt;
&lt;li&gt;Better mobile experience (because of responsiveness)&lt;/li&gt;
&lt;li&gt;Indexable/searchable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-scrimba-&quot; id=&quot;why-did-you-develop-scrimba-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Scrimba&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-scrimba-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Scrimba was invented because Sindre needed to document his programming language &lt;a href=&quot;http://imba.io/home&quot;&gt;Imba&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;He first tried creating traditional video tutorials, but became increasingly frustrated with the creation process. What would have taken him two minutes to explain in-person often took him an hour to convey through video. So he began building Scrimba as a tool for people to learn Imba. However, it soon became clear that this could be used for much more than just Imba.&lt;/p&gt;
&lt;p&gt;Just think about it: if you want to explain code online today, you&amp;#39;re stuck with either text or video, both of which are cumbersome compared to explaining in-person.&lt;/p&gt;
&lt;p&gt;What if you could combine the easiness and quality of in-person teaching with the global scale of the web?&lt;/p&gt;
&lt;p&gt;That&amp;#39;s what we want to do with Scrimba!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next&quot; id=&quot;what-next&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#39;re going to continue to lower the threshold for people to create content, so expect it to become even easier to create Scrimba screencasts.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re also working on building a community around &lt;a href=&quot;https://scrimba.com/&quot;&gt;Scrimba.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-scrimba-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-scrimba-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Scrimba&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-scrimba-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think the amount of developers (not just web) in the world will continue to grow, as software is &lt;em&gt;still&lt;/em&gt; eating the world. Also, the skill of coding will be more mainstream, as more and more kids are exposed to it at school.&lt;/p&gt;
&lt;p&gt;At Scrimba, we want to be a part of this by empowering anyone to easily tech code to others.
We aim to become &lt;em&gt;the&lt;/em&gt; best place online to teach and learn technical subjects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting into web development - and JavaScript in particular - can seem intimidating, given all the hot new tools/frameworks/libraries you seemingly need to learn. I&amp;#39;d say don&amp;#39;t worry too much about that in the beginning, and rather focus on the essentials. Once you know the essentials, you can learn any tool you want.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Keith Horwood of &lt;a href=&quot;https://stdlib.com/&quot;&gt;Stdlib&lt;/a&gt;. He&amp;#39;s basically creating the standard library for the internet, which is really awesome. The easiest way to create, distribute and discover web services.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for interviewing us, and keep up the great work!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Per Harald. Scrimba looks cool to me and there&amp;#39;s a fair amount of screencasts at &lt;a href=&quot;https://scrimba.com/&quot;&gt;Scrimba site&lt;/a&gt; already!&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v2.0 - Results and Errata</title><id>asurvivejswebpackv20resultsanderrata2017-04-12t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-20-results-errata/"></link><updated>2017-04-12T00:00:00Z</updated><content type="html">&lt;p&gt;Enough time has passed since &lt;a href=&quot;https://survivejs.com/survivejs-webpack-20&quot;&gt;the major release of the webpack book&lt;/a&gt; so it&amp;#39;s a good time to evaluate how well it went. As no release is perfect, I&amp;#39;ve been pushing smaller patches to the content and I cover the fixes later in this post. The fixes are minor but they were still worth doing.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#results&quot; id=&quot;results&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Results&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#results&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/dp/9526868803&quot;&gt;The paperback&lt;/a&gt; has sold roughly twenty copies in two weeks. &lt;a href=&quot;https://www.amazon.com/SurviveJS-Webpack-apprentice-Juho-Veps%C3%A4l%C3%A4inen-ebook/dp/B06XWZZGBS&quot;&gt;The Kindle edition&lt;/a&gt; is close to thirty and the higher quality and more expensive &lt;a href=&quot;https://survivejs.typeform.com/to/LUQK0T&quot;&gt;hard cover edition&lt;/a&gt; has close to ten interested buyers which just might be enough for me to do a little print but we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;In addition, the &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;Leanpub edition&lt;/a&gt; reached two thousand readers but it&amp;#39;s good to remember half of those received the book for free when I split up my first book.&lt;/p&gt;
&lt;p&gt;Based on these results it&amp;#39;s safe to say the release wasn&amp;#39;t a great financial success. I&amp;#39;m particularly happy that I found a good writing model, though. Especially the last few months were great as significant progress was made and this bodes well for the future.&lt;/p&gt;
&lt;p&gt;The book is stronger in many ways than the initial &amp;quot;Webpack and React&amp;quot; one and I have a solid writing process in place now. I know what kind of books to write from now on.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s still a lot of work to do, some related to the webpack book. Even with poor sales it&amp;#39;s worth doing as it adds more streams to the whole. As they say, a lot of small streams form a big river.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#errata&quot; id=&quot;errata&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Errata&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#errata&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve listed errata per version below so you can see the main changes. You can see them all through &lt;a href=&quot;https://github.com/survivejs/webpack-book/compare/v2.0.1...v2.0.7&quot;&gt;GitHub compare changes view&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-2&quot; id=&quot;2-0-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.2&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Renamed &lt;em&gt;Splitting Bundles&lt;/em&gt; chapter as &lt;a href=&quot;https://survivejs.com/webpack/building/bundle-splitting/&quot;&gt;Bundle Splitting&lt;/a&gt; to be consistent.&lt;/li&gt;
&lt;li&gt;Linked to &lt;a href=&quot;http://jspm.io/&quot;&gt;JSPM&lt;/a&gt; in the comparison appendix.&lt;/li&gt;
&lt;li&gt;Added missing &lt;code&gt;const webpack = require(&amp;#39;webpack&amp;#39;);&lt;/code&gt; to the &lt;a href=&quot;https://survivejs.com/webpack/building/bundle-splitting/&quot;&gt;Bundle Splitting&lt;/a&gt; chapter example.&lt;/li&gt;
&lt;li&gt;Improved wording related to disabling package consumption related warnings.&lt;/li&gt;
&lt;li&gt;Noted that generating a single bundle over many is more performant as discussed in &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack/issues/23&quot;&gt;karma-webpack issue 23&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Made Istanbul exclude test files from coverage results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-3&quot; id=&quot;2-0-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.3&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-3&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added missing file names to the i18n chapter.&lt;/li&gt;
&lt;li&gt;Clarified i18n chapter ESLint configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-4&quot; id=&quot;2-0-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.4&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-4&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Changed entry name from &lt;code&gt;demo&lt;/code&gt; to &lt;code&gt;lib&lt;/code&gt; at the &lt;em&gt;Bundling Libraries&lt;/em&gt; chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-5&quot; id=&quot;2-0-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.5&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-5&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplified &lt;code&gt;import&lt;/code&gt;s at the &lt;a href=&quot;https://survivejs.com/webpack/extending/loaders/&quot;&gt;Extending with Loaders&lt;/a&gt; chapter to avoid a linting warning.&lt;/li&gt;
&lt;li&gt;Noted that PhantomJS doesn&amp;#39;t support ES6 features yet so it requires preprocessing in order to work.&lt;/li&gt;
&lt;li&gt;Added missing &lt;code&gt;path&lt;/code&gt; import to Karma configuration example.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-6&quot; id=&quot;2-0-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.6&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-6&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that HMR setup needs to be done before implementing &lt;em&gt;Hot Module Replacement with React&lt;/em&gt; at the appendix.&lt;/li&gt;
&lt;li&gt;Cleared up webpack process image a bit so you can see entry can be something complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-7&quot; id=&quot;2-0-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.7&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-7&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplified &lt;a href=&quot;https://survivejs.com/webpack/appendices/searching-with-react/&quot;&gt;Searching with React&lt;/a&gt; appendix example so that it works with HMR out of the box. The old example used binding method that doesn&amp;#39;t work well with &lt;em&gt;react-hot-loader&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Fixed a typo at the &lt;a href=&quot;https://survivejs.com/webpack/optimizing/minifying/&quot;&gt;Minifying&lt;/a&gt; chapter - &lt;code&gt;that&lt;/code&gt; &amp;rarr; &lt;code&gt;than&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Made sure &lt;code&gt;recordsPath&lt;/code&gt; receives an absolute path as webpack enforces this now.&lt;/li&gt;
&lt;li&gt;Mentioned that PurifyCSS doesn&amp;#39;t work with CSS Modules yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-8&quot; id=&quot;2-0-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.8&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-8&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed a typo at the &lt;a href=&quot;https://survivejs.com/webpack/appendices/glossary/&quot;&gt;Glossary&lt;/a&gt;. &lt;code&gt;an a&lt;/code&gt; &amp;rarr; &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-9&quot; id=&quot;2-0-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.9&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-9&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Recommended &lt;code&gt;cheap-module-source-map&lt;/code&gt; over &lt;code&gt;cheap-module-eval-source-map&lt;/code&gt; since it&amp;#39;s a more stable option.&lt;/li&gt;
&lt;li&gt;Included naming to &lt;code&gt;import()&lt;/code&gt; syntax given that&amp;#39;s supported now.&lt;/li&gt;
&lt;li&gt;Dropped &lt;code&gt;devServer.open: true&lt;/code&gt; bit as redundant.&lt;/li&gt;
&lt;li&gt;Noted that CSS Modules work with purify if you use a whitelist.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-10&quot; id=&quot;2-0-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.10&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-10&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pushed &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; to production configuration to speed up the build.&lt;/li&gt;
&lt;li&gt;Dropped &lt;code&gt;useSourceMap&lt;/code&gt; flag from &lt;code&gt;parts.minifyJavaScript&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added missing &lt;code&gt;const webpack = require(&amp;#39;webpack&amp;#39;);&lt;/code&gt; to &lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt; example.&lt;/li&gt;
&lt;li&gt;Made CSSNext example use &lt;code&gt;require(&amp;#39;postcss-cssnext&amp;#39;)(),&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Made autoprefixer example compatible with the newest version. It needs &lt;code&gt;require(&amp;#39;autoprefixer&amp;#39;)()&lt;/code&gt; over &lt;code&gt;require(&amp;#39;autoprefixer&amp;#39;)&lt;/code&gt; now.&lt;/li&gt;
&lt;li&gt;Simplified stylelint configuration by dropping &lt;code&gt;ignoreFiles&lt;/code&gt; since webpack &lt;code&gt;include&lt;/code&gt; is used already.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-11&quot; id=&quot;2-0-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.11&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-11&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add missing &lt;strong&gt;.babelrc&lt;/strong&gt; to a  filename in the Loading JavaScript chapter.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;purify-css&lt;/code&gt; as a dependency to install as &lt;code&gt;purifycss-webpack&lt;/code&gt; requires that now as a peer dependency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-12&quot; id=&quot;2-0-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.12&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-12&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linked to &lt;a href=&quot;https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31&quot;&gt;Predictable long term caching with Webpack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Toned down &lt;strong&gt;records&lt;/strong&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-13&quot; id=&quot;2-0-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.13&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-13&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed the book to use &lt;code&gt;cheap-module-eval-source-map&lt;/code&gt; over &lt;code&gt;cheap-module-source-map&lt;/code&gt; for development.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-14&quot; id=&quot;2-0-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.14&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-14&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Changed &lt;strong&gt;browserslist&lt;/strong&gt; to &lt;strong&gt;.browserslistrc&lt;/strong&gt; as the project has changed the file name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-15&quot; id=&quot;2-0-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.15&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-15&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added missing &lt;code&gt;const path = require(&amp;#39;path&amp;#39;);&lt;/code&gt; to &lt;strong&gt;Extending Loaders&lt;/strong&gt; chapter.&lt;/li&gt;
&lt;li&gt;Added missing formatting to &lt;code&gt;const { RawSource } = require(&amp;#39;webpack-sources&amp;#39;);&lt;/code&gt; at &lt;strong&gt;Extending Loaders&lt;/strong&gt; chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-16&quot; id=&quot;2-0-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.16&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-16&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Changed &lt;code&gt;PATHS.app&lt;/code&gt; to &lt;code&gt;PATHS.lib&lt;/code&gt; at the &lt;strong&gt;Bundling Libraries&lt;/strong&gt; chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-17&quot; id=&quot;2-0-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.17&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-17&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplified a &lt;code&gt;devtool&lt;/code&gt; related paragraph to pass Amazon margin check.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-0-18&quot; id=&quot;2-0-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2.0.18&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-0-18&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Getting Started - Use &lt;code&gt;import&lt;/code&gt; over &lt;code&gt;require&lt;/code&gt; at text.&lt;/li&gt;
&lt;li&gt;Composing Configuration - Fix sentence structure at &amp;quot;Composition-based approach...&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s still a &lt;a href=&quot;https://survivejs.com/euro-tour-2017&quot;&gt;lot of touring&lt;/a&gt; to be done so things will move slower than usual. That said, I&amp;#39;ll try to get most out of this experience and convert that into something good. Traveling is good for ideas.&lt;/p&gt;
</content></entry><entry><title>Sanctuary - Refuge from unsafe JavaScript - Interview with David Chambers</title><id>asanctuaryrefugefromunsafejavascriptinterviewwithdavidchambers2017-04-10t00:00:00z</id><link href="https://survivejs.com/blog/sanctuary-interview/"></link><updated>2017-04-10T00:00:00Z</updated><content type="html">&lt;p&gt;If there&amp;#39;s something that&amp;#39;s easy, it&amp;#39;s making mistakes while coding JavaScript. Overlook one detail and you have a runtime error! One way to deal with the problem is to use a programming style which leads code that&amp;#39;s harder to break and also easier to test.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/davidchambers&quot;&gt;David Chambers&lt;/a&gt; has been developing &lt;a href=&quot;https://www.npmjs.com/package/sanctuary&quot;&gt;sanctuary&lt;/a&gt;, a &lt;em&gt;functional programming&lt;/em&gt; library these goals in mind.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot;&gt;
    &lt;img src=&quot;https://www.gravatar.com/avatar/5f41fa18e9774f1a2ea7c519f476c348?s=200&quot; alt=&quot;David Chambers&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
  &lt;/span&gt;

I grew up in New Zealand. I studied graphic design at University and worked briefly as a graphic designer after graduating. I found myself in a cycle of procrastination, guilt, self-doubt, and euphoria. I loved my job a small proportion of the time.
&lt;/p&gt;

&lt;p&gt;I became interested in web design and discovered that I enjoyed writing HTML, CSS, and JavaScript. This work was also creative, but I found the emotional ups and downs much less extreme. In recent years my interests have shifted towards programming, specifically functional programming.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-sanctuary-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-sanctuary-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Sanctuary&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-sanctuary-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://sanctuary.js.org/#overview&quot;&gt;project&amp;#39;s overview&lt;/a&gt; puts it the best:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sanctuary is a JavaScript functional programming library inspired by Haskell and PureScript. It&amp;#39;s stricter than &lt;a href=&quot;https://www.npmjs.com/package/ramda&quot;&gt;Ramda&lt;/a&gt; and provides a similar suite of functions.&lt;/p&gt;
&lt;p&gt;Sanctuary promotes programs composed of simple, pure functions. Such programs are easier to comprehend, test, and maintain &amp;ndash; they are also a pleasure to write.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-sanctuary-work-&quot; id=&quot;how-does-sanctuary-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Sanctuary&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-sanctuary-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sanctuary is designed to take full advantage of the &lt;a href=&quot;https://github.com/fantasyland/fantasy-land&quot;&gt;Fantasy Land&lt;/a&gt; specification. Fantasy Land defines some methods, each with accompanying laws.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The inclusion of laws makes Fantasy Land significantly different in nature from Promises/A+. Fantasy Land is a set of well-understood concepts with Wikipedia entries rather than an ad hoc list of requirement for implementors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sanctuary provides functions for operating on built-in types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; S&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;baz&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;quux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The neat thing is that &lt;a href=&quot;https://sanctuary.js.org/#map&quot;&gt;&lt;code&gt;S.map&lt;/code&gt;&lt;/a&gt; is not defined only for arrays. We can
enter a function&amp;#39;s name into the REPL to see the function&amp;#39;s type signature:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; S&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;map
map &lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Functor f &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; f a &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; f b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&amp;#39;t be put off by this notation. It&amp;#39;ll be very helpful once we&amp;#39;ve learned to read it. Let&amp;#39;s do so.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll start with &lt;code&gt;::&lt;/code&gt;. The markup can be read as &lt;em&gt;is a member of&lt;/em&gt;. For example, &lt;code&gt;true :: Boolean&lt;/code&gt; can be read &lt;em&gt;&lt;code&gt;true&lt;/code&gt; is a member of &lt;code&gt;Boolean&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;How do we represent the types of functions? Let&amp;#39;s consider &lt;a href=&quot;https://sanctuary.js.org/#toUpper&quot;&gt;&lt;code&gt;S.toUpper&lt;/code&gt;&lt;/a&gt; which takes a string and returns its upper-case equivalent. We would write &lt;code&gt;S.toUpper :: String -&amp;gt; String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What is the type of &lt;code&gt;x =&amp;gt; x&lt;/code&gt;, the identity function? &lt;code&gt;String -&amp;gt; String&lt;/code&gt; is too restrictive, as the identity function can operate on a value of any type. We write it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//    id :: a -&amp;gt; a&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;id&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; x &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is a type variable. We can replace it with any type we choose, but we must replace every occurrence of &lt;code&gt;a&lt;/code&gt; in a type signature with the same type.&lt;/p&gt;
&lt;p&gt;Before we consider the &lt;code&gt;Functor f =&amp;gt;&lt;/code&gt; bit, let&amp;#39;s consider a similar function which operates exclusively on arrays:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot; &gt;arrayMap&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot; &gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, &lt;code&gt;arrayMap&lt;/code&gt; takes as its argument a value of type &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt;, a function from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;. It returns a value of type &lt;code&gt;Array a -&amp;gt; Array b&lt;/code&gt;. We would use it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;arrayMap&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;baz&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;quux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Arrays are just one of &lt;em&gt;many&lt;/em&gt; structures we may wish to map over. It would be unfortunate to have to define &lt;code&gt;arrayMap&lt;/code&gt;, &lt;code&gt;listMap&lt;/code&gt;, &lt;code&gt;futureMap&lt;/code&gt;, &lt;code&gt;maybeMap&lt;/code&gt;, &lt;code&gt;eitherMap&lt;/code&gt;, &lt;code&gt;streamMap&lt;/code&gt;, etc. Although necessary for some languages, it is not so in
JavaScript, as we can dispatch to a method with a particular name.&lt;/p&gt;
&lt;p&gt;The method name, in this case, is &lt;code&gt;fantasy-land/map&lt;/code&gt;. We wish to express that &lt;code&gt;S.map&lt;/code&gt; can operate on a value of any type which provides a &lt;code&gt;fantasy-land/map&lt;/code&gt; method. &lt;code&gt;Functor f =&amp;gt;&lt;/code&gt; is a constraint on the type variable &lt;code&gt;f&lt;/code&gt;. It states that &lt;code&gt;f&lt;/code&gt; can be replaced with any type which provides &lt;code&gt;fantasy-land/map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s &lt;em&gt;specialize&lt;/em&gt; the type of &lt;code&gt;S.map&lt;/code&gt; in the expression
&lt;code&gt;S.map(s =&amp;gt; s.length)([&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;, &amp;#39;quux&amp;#39;])&lt;/code&gt;. Here&amp;#39;s the general type again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;&lt;span class=&quot;token constant&quot; &gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot; &gt;map&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Functor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;f&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot; &gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;f&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;f&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;f&lt;/code&gt; is &lt;code&gt;Array&lt;/code&gt;, in this case:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;&lt;span class=&quot;token constant&quot; &gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot; &gt;map&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot; &gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is &lt;code&gt;String&lt;/code&gt;, as we&amp;#39;re operating on an array of strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;&lt;span class=&quot;token constant&quot; &gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot; &gt;map&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot; &gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token hvariable&quot; &gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; is &lt;code&gt;Number&lt;/code&gt;, since the provided function returns the length of its string argument:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;&lt;span class=&quot;token constant&quot; &gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot; &gt;map&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot; &gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Array&lt;/span&gt; &lt;span class=&quot;token constant&quot; &gt;Number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-sanctuary-differ-from-other-solutions-&quot; id=&quot;how-does-sanctuary-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Sanctuary&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-sanctuary-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sanctuary is most similar to Ramda. In &lt;a href=&quot;https://github.com/sanctuary-js/sanctuary/issues/377&quot;&gt;sanctuary-js/sanctuary#377&lt;/a&gt;
we&amp;#39;re currently documenting the differences between Ramda and Sanctuary.&lt;/p&gt;
&lt;p&gt;The most striking difference is the handling of invalid inputs. When applied to arguments of the correct types, &lt;code&gt;R.append&lt;/code&gt; and &lt;code&gt;S.append&lt;/code&gt; are equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// =&amp;gt; [1, 2, 3]&lt;/span&gt;

S&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what happens if we get the arguments in the wrong order?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// =&amp;gt; [[1, 2]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;R.append&lt;/code&gt; somehow coerces &lt;code&gt;3&lt;/code&gt; into &lt;code&gt;[]&lt;/code&gt; and &amp;quot;succeeds&amp;quot;. We expected the result to be of type &lt;code&gt;Array Number&lt;/code&gt;, but it&amp;#39;s actually of type &lt;code&gt;Array (Array Number)&lt;/code&gt;. This will likely result in an error being thrown, possibly several steps from the source of the type error.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;S.append&lt;/code&gt;, on the other hand, throws a type error with a descriptive message:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;S&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// ! TypeError: Invalid value&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// append :: a -&amp;gt; Array a -&amp;gt; Array a&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//                ^^^^^^^&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//                   1&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// 1)  3 :: Number, FiniteNumber, NonZeroFiniteNumber, Integer, ValidNumber&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// The value at position 1 is not a member of ‘Array a’.&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// See https://github.com/sanctuary-js/sanctuary-def/tree/v0.9.0#Array for information about the Array type.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run-time type checking isn&amp;#39;t free, so one can disable it if desired.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-sanctuary-&quot; id=&quot;why-did-you-develop-sanctuary-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Sanctuary&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-sanctuary-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was a significant contributor to Ramda at the time, but I was unhappy with the fact that a certain Ramda function was not composable (and remains so). To use &lt;a href=&quot;http://ramdajs.com/docs/#head&quot;&gt;&lt;code&gt;R.head&lt;/code&gt;&lt;/a&gt; safely one must first check that the array is non-empty:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;isEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;xs&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/* some default value */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;xs&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wanted to be able to write this instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;xs&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We decided not to pursue this approach in &lt;a href=&quot;https://github.com/ramda/ramda/issues/683&quot;&gt;ramda/ramda#683&lt;/a&gt;. I created Sanctuary so I could use safe versions of the Ramda functions I found troubling alongside the many Ramda functions I was happy to use.&lt;/p&gt;
&lt;p&gt;Over the past two years, Sanctuary has grown to the point that it no longer makes sense to use Ramda and Sanctuary together, as there&amp;#39;s so much overlap in the functionality they provide.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sanctuary-js/sanctuary/issues/332&quot;&gt;Sanctuary v0.12.0&lt;/a&gt; was a big release representing about eight months&amp;#39; work. From this point forward we hope to make smaller, more frequent releases.&lt;/p&gt;
&lt;p&gt;The significant changes currently in the works are &lt;a href=&quot;https://github.com/sanctuary-js/sanctuary-maybe/pull/3&quot;&gt;sanctuary-js/sanctuary-maybe#3&lt;/a&gt; and &lt;a href=&quot;https://github.com/sanctuary-js/sanctuary-either/pull/3&quot;&gt;sanctuary-js/sanctuary-either#3&lt;/a&gt;, which will make Sanctuary&amp;#39;s &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Either&lt;/code&gt; type available as stand-alone packages.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-sanctuary-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-sanctuary-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Sanctuary&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-sanctuary-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My hope is that the JavaScript community&amp;#39;s current enthusiasm for functional programming is part of a long-term trend rather than a fad. I predict the Sanctuary community will continue to grow as more people come to appreciate the benefits of building software on principled foundations.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Learn &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;. Treating user actions as values which can be passed as arguments to functions is a truly wonderful idea! Whether one continues to write Elm, or switches to JavaScript or PureScript, the approach will remain valid.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Avaq&quot;&gt;Aldwin Vlasblom&lt;/a&gt;, the creator of &lt;a href=&quot;https://github.com/fluture-js/Fluture&quot;&gt;Fluture&lt;/a&gt;. I respect him as a programmer
and as a person. :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you decide to start using type signatures to document your functions you may be interested in &lt;a href=&quot;https://www.npmjs.com/package/transcribe&quot;&gt;Transcribe&lt;/a&gt;. The tool used to generate the readme files for the various Sanctuary projects.&lt;/p&gt;
&lt;p&gt;Each type signature in the source code is turned into a heading in the readme which links back to the type signature in the source code, so it&amp;#39;s easy to jump to an implementation when reading the documentation. Transcribe supports arbitrary GitHub Flavored
Markdown.&lt;/p&gt;
&lt;p&gt;One other project I&amp;#39;d like to plug is &lt;a href=&quot;https://www.npmjs.com/package/xyz&quot;&gt;xyz&lt;/a&gt;. If you&amp;#39;ve ever forgotten a step when publishing an npm package, you should give xyz a look.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview David! It&amp;#39;s cool to see functional solutions get more attention from the community. I see it as a great technique and enjoy spending time composing.&lt;/p&gt;
&lt;p&gt;You can learn more about sanctuary at &lt;a href=&quot;https://sanctuary.js.org/&quot;&gt;Sanctuary site&lt;/a&gt; and &lt;a href=&quot;https://github.com/sanctuary-js/sanctuary&quot;&gt;GitHub project page&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Rambda - Faster and Smaller Alternative to Ramda - Interview with Dejan Toteff</title><id>arambdafasterandsmalleralternativetoramdainterviewwithdejantoteff2017-04-03t00:00:00z</id><link href="https://survivejs.com/blog/rambda-interview/"></link><updated>2017-04-03T00:00:00Z</updated><content type="html">&lt;p&gt;Even though you can get far with JavaScript&amp;#39;s native functionality, eventually you&amp;#39;ll find yourself writing little utilities to make it easier. For this reason, we have libraries such as &lt;a href=&quot;https://www.npmjs.com/package/lodash&quot;&gt;Lodash&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/ramda&quot;&gt;Ramda&lt;/a&gt;, and others.&lt;/p&gt;
&lt;p&gt;In this interview, you&amp;#39;ll learn about &lt;a href=&quot;https://www.npmjs.com/package/rambda&quot;&gt;Rambda&lt;/a&gt;, a light Ramda alternative by &lt;a href=&quot;https://twitter.com/self_refactor&quot;&gt;Dejan Toteff&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/fbfd7af236eb986e5877c46d44a93263?s=200&quot; alt=&quot;Dejan Toteff&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I am a full stack JavaScript and React developer at Comstream, based in Sofia, Bulgaria. I also work at my side project I Learn Smarter.
&lt;/p&gt;

&lt;p&gt;I started learning JavaScript two years ago, and I am still fascinated by the language and its ecosystem. I don&amp;#39;t believe in the narrative that we should use JavaScript for everything and ignore that there are other languages out there. So I spend some of my free time learning Golang as it is both powerful and beginners friendly.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rambda-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-rambda-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Rambda&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-rambda-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is utility library which gives you useful methods without the price of large size and performance penalty.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rambda-work-&quot; id=&quot;how-does-rambda-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rambda&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rambda-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rambda doesn&amp;#39;t have any external dependency - it is just plain JavaScript.&lt;/p&gt;
&lt;p&gt;Its selling point lies in using &lt;code&gt;R.compose&lt;/code&gt; to generate readable chain of actions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; R &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;rambda&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; getShortColors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;val &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;uniq
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;blue&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;purple&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; shortColors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;getShortColors&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;//=&amp;gt; [&apos;blue&apos;, &apos;red&apos;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the methods can be curried, which gives the developer a choice how to call them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; addOne &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; foo &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;addOne&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// =&amp;gt; 11&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; bar &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; baz &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; R&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terms of performance &lt;code&gt;R.add(1,10)&lt;/code&gt; is faster, but code of type &lt;code&gt;R.add(1)(10)&lt;/code&gt; is more readable with longer declarations.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-rambda-differ-from-other-solutions-&quot; id=&quot;how-does-rambda-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Rambda&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-rambda-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rambda doesn&amp;#39;t offer the same freedom of expression as Ramda, as it focuses on covering a small but useful portion of the vast API of Ramda.&lt;/p&gt;
&lt;p&gt;To illustrate the size difference in numbers - my custom Ramda build was 24.6 kB, while the same methods in Rambda take only 7.6 kB.&lt;/p&gt;
&lt;p&gt;Also, Rambda has better performance when &lt;a href=&quot;https://github.com/selfrefactor/rambda#benchmark&quot;&gt;benchmarked against Ramda and Lodash&lt;/a&gt;. You can run the benchmark yourself by cloning Rambda repository and the running &lt;code&gt;npm i &amp;amp;&amp;amp; node benchmark&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main reason for the better performance is that Rambda methods only need to take care for currying and execution, while Ramda and Lodash methods cover more use cases. Therefore they have more elaborate boilerplate around the actual execution, which results in slower performance.&lt;/p&gt;
&lt;p&gt;We can see an illustration of that in the code of &lt;code&gt;find&lt;/code&gt; method of Ramda, Lodash, and Rambda.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ramda:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; _curry2 &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./internal/_curry2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; _dispatchable &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./internal/_dispatchable&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; _xfind &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./internal/_xfind&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;_curry2&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;_dispatchable&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;find&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; _xfind&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; list&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; idx &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; len &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-while&quot; &gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;idx &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt; len&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;idx&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; list&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;idx&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    idx &lt;span class=&quot;token operator&quot; &gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Lodash:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; predicate&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; fromIndex&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; length &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; array &lt;span class=&quot;token operator&quot; &gt;==&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;length&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; index &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; fromIndex &lt;span class=&quot;token operator&quot; &gt;==&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;toInteger&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fromIndex&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    index &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;nativeMax&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;length &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;baseFindIndex&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;getIteratee&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;predicate&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;createFind&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;findIndexFunc&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;collection&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; predicate&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; fromIndex&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; iterable &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;collection&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;isArrayLike&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;collection&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; iteratee &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;getIteratee&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;predicate&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      collection &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;collection&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot; &gt;predicate&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;iteratee&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; iterable&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; index &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;findIndexFunc&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;collection&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; predicate&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; fromIndex&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; index &lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt; iterable&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;iteratee &lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt; collection&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; index&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; find &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;createFind&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;findIndex&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Rambda:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;arr &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; undefined&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; holder &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; holder&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rambda-&quot; id=&quot;why-did-you-develop-rambda-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Rambda&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-rambda-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was happy to use Ramda, but not so satisfied with its size.
So I explored the idea to recreate my favorite Ramda methods with less code, and this is how Rambda became to be.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe that regular commits are a sign of a healthy library.
So I do some upgrades when I see a limitation in the current state of Rambda. The latest one was adding type &amp;quot;Async&amp;quot; as a return value of &lt;code&gt;R.type&lt;/code&gt; for recognition of async functions.&lt;/p&gt;
&lt;p&gt;Also, I have a plan for separate documentation site, as now browsing the documentation in not as convenient as it can be.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rambda-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-rambda-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Rambda&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-rambda-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With speed JavaScript is growing regarding API, such libraries will get less useful. They are currently needed just because native JavaScript doesn&amp;#39;t yet offer this functionality.&lt;/p&gt;
&lt;p&gt;As for the current trends - I like that Vue is the new hype child, as this shows that developers prefer simpler solutions over complicated ones such as Angular 4.&lt;/p&gt;
&lt;p&gt;I still don&amp;#39;t like Vue, and I considered a big step back compared to React, but I understand why some developers like it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Read all of the &lt;strong&gt;You don&amp;#39;t know JS&lt;/strong&gt; books and watch some &lt;strong&gt;Kyle Simpson&lt;/strong&gt; videos - the guy has the talent to educate.&lt;/p&gt;
&lt;p&gt;Don&amp;#39;t underestimate the complexity of CSS - it is a real language, and it requires proper attention.&lt;/p&gt;
&lt;p&gt;Check PostCSS before jumping to LESS or SASS camp - it exists for a reason.&lt;/p&gt;
&lt;p&gt;Don&amp;#39;t write a single line of front-end code without &lt;strong&gt;webpack&lt;/strong&gt; - the excuse that it is hard is thin.&lt;/p&gt;
&lt;p&gt;Read the API of another language than JavaScript as this could help you better understand the high points of JavaScript.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bruderstein&quot;&gt;Dave Brotherstone&lt;/a&gt;, the author of &lt;a href=&quot;https://www.npmjs.com/package/unexpected-react&quot;&gt;unexpected-react&lt;/a&gt; and founder of ReactJS meetup in Hamburg. He is one of the reasons why I made the switch from Angular 1.X to React.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Dejan! I think Rambda is a part of the current trend towards micro-libraries. The trend has been visible especially in front-end UI libraries for a while.&lt;/p&gt;
&lt;p&gt;Interestingly bigger libraries try to solve this in their own ways (Babel plugins etc.) though you still have the requirement problem (more cases to support).&lt;/p&gt;
&lt;p&gt;Learn more about Rambda at &lt;a href=&quot;https://github.com/selfrefactor/rambda&quot;&gt;Rambda&amp;#39;s GitHub page&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v2.0</title><id>asurvivejswebpackv202017-03-29t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-20/"></link><updated>2017-03-29T00:00:00Z</updated><content type="html">&lt;p&gt;Here we go then. This is the big release I&amp;#39;ve been working towards for the past few months. Compared to &lt;a href=&quot;https://survivejs.com/survivejs-webpack-19&quot;&gt;the previous release&lt;/a&gt; this one is more polished and also &lt;a href=&quot;https://www.amazon.com/dp/9526868803&quot;&gt;available in a paper form&lt;/a&gt;. The digital edition has 458 pages while the paper version grew to 499 due to layout reasons.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you aren&amp;#39;t interested in what has changed, &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;skip straight to the book&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Writing and content is only a part of the work required. Especially editing phase and tuning the book so that page breaks are in place and that content fits need significant effort. Compared to my first paper book, I spent far more time editing and I hope it shows in the result.&lt;/p&gt;
&lt;p&gt;I found room for a couple of more chapters based on the existing content. I feel this made certain parts of the book easier to approach even though I admit it&amp;#39;s a long book! I like the idea of writing a lot of shorter, focused chapters and I&amp;#39;ll be using this model in the future as well.&lt;/p&gt;
&lt;p&gt;As I&amp;#39;ve been preparing for the &lt;a href=&quot;https://survivejs.com/euro-tour-2017&quot;&gt;Euro tour&lt;/a&gt;, I had a good chance to look at the content critically. I condensed the book into two sets of slides: &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman&quot;&gt;Webpack - From Apprentice to Journeyman&lt;/a&gt; and &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-journeyman-to-master/&quot;&gt;Webpack - From Journeyman to Master&lt;/a&gt;. I also created a related presentation that goes by the name of &lt;a href=&quot;https://presentations.survivejs.com/re-imagining-webpack/&quot;&gt;Re-imagining Webpack&lt;/a&gt;. It&amp;#39;s a quick look at the project and where it&amp;#39;s going.&lt;/p&gt;
&lt;p&gt;The way to a paper release was far harder than I anticipated but journeys like this are rarely easy. And there is still more to come. If nothing else, pushing this release out there is a big personal step for me and it has also taught me a lot. I&amp;#39;m particularly thankful to the community that supported me in this effort and helped me to surpass myself over and over again.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-0&quot; id=&quot;book-improvements-2-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I released a series of silent releases as before. The biggest changes had to do with splitting of a few chapters that had grown too long and unfocused. Especially the packaging and extending parts of the book received a lot of attention. I also put heavy effort into editing the book to make sure pages of the print edition break at the right places.&lt;/p&gt;
&lt;p&gt;In total 726 commits went to the book since the last release. You can find the &lt;a href=&quot;https://github.com/survivejs/webpack-book/compare/v1.9.0...v2.0.1&quot;&gt;changes at GitHub&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next bigger step for me is to get through the &lt;a href=&quot;https://survivejs.com/euro-tour-2017&quot;&gt;Euro tour&lt;/a&gt; successfully. There is also more writing to be done as certain other book might require an update and a third one just might be on sight! I&amp;#39;ve been also experimenting with screencasts but we&amp;#39;ll see if that leads anywhere.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-to-get-the-book-&quot; id=&quot;how-to-get-the-book-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How to get the book?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-to-get-the-book-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I prepared &lt;a href=&quot;https://survivejs.com/webpack&quot;&gt;a special landing page&lt;/a&gt; that explains the book in detail. But if you know it already, consider the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;Free online edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;Leanpub edition (digital)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/9526868803&quot;&gt;Amazon edition (paperback)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/B06XWZZGBS&quot;&gt;Kindle edition (digital)&lt;/a&gt; - Snapshot on 2.0, hence the special price!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A special signature edition will happen if there is enough interest. &lt;a href=&quot;https://survivejs.typeform.com/to/LUQK0T&quot;&gt;I want one!&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his. Literally most of the income goes to webpack developers now!&lt;/blockquote&gt;&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;support webpack through open collective&lt;/a&gt; too.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy the book! It took a lot of work to get here and there&amp;#39;s still more to come. Thank you for your support!&lt;/p&gt;
&lt;p&gt;Note that I&amp;#39;m active at the &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;book Gitter channel&lt;/a&gt; if you want to bug me about webpack. You can also &lt;a href=&quot;https://github.com/survivejs/ama/issues&quot;&gt;ask questions at my AmA&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Hyperapp - Tiny Library for Frontend Applications - Interview with Jorge Bucaran</title><id>ahyperapptinylibraryforfrontendapplicationsinterviewwithjorgebucaran2017-03-13t00:00:00z</id><link href="https://survivejs.com/blog/hyperapp-interview/"></link><updated>2017-03-13T00:00:00Z</updated><content type="html">&lt;p&gt;Micro-sized JavaScript libraries are a niche of their own. Often the idea is to use modern JavaScript APIs and expose them in an easier way. The earlier &lt;a href=&quot;https://survivejs.com/blog/redom-interview&quot;&gt;RE:DOM interview&lt;/a&gt; discussed one option.&lt;/p&gt;
&lt;p&gt;This time around I am interviewing &lt;a href=&quot;https://twitter.com/JorgeBucaran&quot;&gt;Jorge Bucaran&lt;/a&gt;, the author of &lt;a href=&quot;https://github.com/hyperapp/hyperapp&quot;&gt;Hyperapp&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/1823e8f81a08dbbdd59a19382c5c5af9?s=200&quot; alt=&quot;Jorge Bucaran&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m an engineer at Increments, Inc, based in Tokyo, Japan. We build &lt;a href=&quot;https://qiita.com/&quot;&gt;Qiita&lt;/a&gt;, Japan’s technical knowledge sharing and collaboration platform for programmers. I was born and raised in Venezuela.

&lt;/p&gt;

&lt;p&gt;I started making simple web pages when I was around 15 years old, but I still need to look up how to link CSS with HTML. How I wound up in Japan is quite the story, but not for today.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-_hyperapp_-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-_hyperapp_-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Hyperapp&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-_hyperapp_-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hyperapp is a JavaScript library for building frontend applications. In this way, it&amp;#39;s similar to others like React, Vue or Ember.&lt;/p&gt;
&lt;p&gt;Hyperapp supports IE10+ out of the box, it&amp;#39;s &lt;code&gt;1KB&lt;/code&gt;-ish minified and gzipped; it&amp;#39;s fast and has an exciting community supporting it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-_hyperapp_-work-&quot; id=&quot;how-does-_hyperapp_-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Hyperapp&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-_hyperapp_-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have &lt;a href=&quot;https://hyperapp.js.org/&quot;&gt;documentation&lt;/a&gt; to help newcomers get started and learn how to get started with Hyperapp.&lt;/p&gt;
&lt;p&gt;A typical Hello World example looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; h&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; app &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;hyperapp&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Hi.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; actions &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;view&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; actions&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/hyperapp/pen/Qdwpxy?editors=0010&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here is a bound text input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; h&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; app &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;hyperapp&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  text&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Hello!&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; actions &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  setText&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; text &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; text &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;view&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; setText &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;🤯&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;autofocus&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;value&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot; &gt;oninput&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;e &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;setText&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; actions&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/hyperapp/pen/qRMEGX?editors=1010&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hyperapp offers a single, immutable model. The state is always a plain JavaScript object and can contain anything that makes sense to your application.&lt;/p&gt;
&lt;p&gt;Users interact with your application to trigger actions. Actions can be used in a variety of ways, but their ultimate goal is to update the state. They do this by returning a new state (or partial state) that gets merged with the current one and replaces it. When the state changes as a result of calling an action, Hyperapp re-renders your application, and that&amp;#39;s the circle of life in a wrap.&lt;/p&gt;
&lt;p&gt;Hyperapp also advocates using stateless components. Stateless components are pure functions that only know how to render themselves and what actions they are allowed to trigger. As a result, they are framework agnostic and easy to debug and test.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-_hyperapp_-differ-from-other-solutions-&quot; id=&quot;how-does-_hyperapp_-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Hyperapp&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-_hyperapp_-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#hyperapp-is-opinionated-about-state-management&quot; id=&quot;hyperapp-is-opinionated-about-state-management&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Hyperapp is opinionated about state management&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#hyperapp-is-opinionated-about-state-management&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hyperapp is inspired by &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt; and does not rely on external libraries such as Redux, enabling you to create almost pure functional applications out of the box.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#hyperapp-is-easy-to-grasp&quot; id=&quot;hyperapp-is-easy-to-grasp&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Hyperapp is easy to grasp&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#hyperapp-is-easy-to-grasp&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you can read the 300-ish lines of code, you&amp;#39;ll have seen everything you needed to know about Hyperapp. That feeling you get when you are done going through the code base, and got it all down and still can walk away with your sanity intact is liberating. It is at that moment that the project is no longer someone else&amp;#39;s mad science experiment, but something familiar and yours truly.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#hyperapp-is-good-enough&quot; id=&quot;hyperapp-is-good-enough&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Hyperapp is good enough&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#hyperapp-is-good-enough&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am not trying to science out every single aspect of the virtual DOM engine, and as a result, Hyperapp is approximately 1 KB. Attention is still paid to performance, and the &lt;a href=&quot;https://github.com/hyperapp/hyperapp/issues/499&quot;&gt;latest benchmarks&lt;/a&gt; suggest we are not far behind the big ones like React or Vue.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#not-a-one-man-effort&quot; id=&quot;not-a-one-man-effort&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Not a one-man-effort&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#not-a-one-man-effort&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Despite the tremendous success of heavily optimized engines like Mithril and Inferno, they remain at large a one man&amp;#39;s project. They have burgeoning communities helping triage issues and maintain the ecosystem, but core development still answers to a single individual.&lt;/p&gt;
&lt;p&gt;I want Hyperapp to be more a people&amp;#39;s project. We&amp;#39;ve already seen substantial contributions from the community, and I think this is in part due to the brutal approach and simplicity of the project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-hyperapp-&quot; id=&quot;why-did-you-develop-hyperapp-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Hyperapp?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-hyperapp-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I needed to build a web client for a project at work. My first choice was React and Redux since that&amp;#39;s what we use to develop Qiita, but I wanted something lightweight and without the frameworkyness of React.&lt;/p&gt;
&lt;p&gt;I looked at other options too: Elm, Choo, and yo-yo, were the ones closest to my heart, but none of them delivered the mix of simplicity and works-out-of-the-box-ness I was looking for.&lt;/p&gt;
&lt;p&gt;Elm is undoubtedly otherworldly. It&amp;#39;s probably the best attempt to popularize functional programming that I&amp;#39;ve seen in recent years. However, I found that it was quite challenging to integrate third party libraries with Elm.&lt;/p&gt;
&lt;p&gt;Choo and yo-yo were lovely too. Both projects were a big source of inspiration for me, but I wanted something ⅓ of the size and less opinionated about JavaScript and how it should be written. If you are not sure what I mean by this, shoot me a tweet at &lt;a href=&quot;https://twitter.com/JorgeBucaran&quot;&gt;@JorgeBucaran&lt;/a&gt;, and I&amp;#39;ll be happy to elaborate.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Server side rendering (SSR). There have been a few &lt;a href=&quot;https://github.com/hyperapp/hyperapp/pull/28&quot;&gt;SSR prototypes&lt;/a&gt; developed by members of the community so far, but I&amp;#39;d like to offer this out of the box. Hyperapp offers SSR re-hydration out of the box as of 1.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More examples. We currently lack an official website or a REPL. All are coming near you soon!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-hyperapp-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-hyperapp-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for Hyperapp and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-hyperapp-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m very excited about Hyperapp and the community that has started to congregate around the project. If I can add my two cents to popularizing functional programming in the frontend, I&amp;#39;ll die a happy man. I hope I can create a stable framework that stays true to its original premise and can help people make elegant and pure functional websites.&lt;/p&gt;
&lt;p&gt;My perceptions are largely biased by my likes and dislikes. I don&amp;#39;t know what&amp;#39;s going to become trendy next or what isn&amp;#39;t, but I can tell you that I&amp;#39;d love to see more people embracing the wonders of &lt;a href=&quot;https://github.com/fantasyland/fantasy-land&quot;&gt;Fantasy Land&lt;/a&gt; and help make it more accessible for the rest of us.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reinvent the wheel. Otherwise, how are you ever going to learn anything?&lt;/li&gt;
&lt;li&gt;Learn functional programming. Then help communicate it effectively to others.&lt;/li&gt;
&lt;li&gt;Learn CSS. While some are already speaking about a &lt;a href=&quot;https://developers.slashdot.org/story/17/03/04/0042218/douglas-crockford-envisions-a-post-javascript-world&quot;&gt;post-JavaScript world&lt;/a&gt;, CSS is not going away. Ever.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/paldepind&quot;&gt;Simon Friis Vindum&lt;/a&gt;. He is the author of &lt;a href=&quot;https://github.com/snabbdom/snabbdom&quot;&gt;Snabbdom&lt;/a&gt;, a virtual DOM engine and &lt;a href=&quot;https://github.com/Funkia/funnel&quot;&gt;Funnel&lt;/a&gt;, a devoted, purely functional frontend framework.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Jorge! I think it&amp;#39;s time to do round two with Simon as we did a &lt;a href=&quot;https://survivejs.com/blog/snabbdom-interview&quot;&gt;Snabbdom interview&lt;/a&gt; earlier. :)&lt;/p&gt;
&lt;p&gt;Learn more about Hyperapp from its &lt;a href=&quot;https://hyperapp.js.org/&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;https://codepen.io/hyperapp/&quot;&gt;examples&lt;/a&gt;. Check out the &lt;a href=&quot;https://github.com/hyperapp/hyperapp&quot;&gt;project at GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS Euro Tour 2017</title><id>asurvivejseurotour20172017-03-10t00:00:00z</id><link href="https://survivejs.com/blog/euro-tour-2017/"></link><updated>2017-03-10T00:00:00Z</updated><content type="html">&lt;p&gt;You know how rockstars tour to support their albums? Who is to say a book author could not do the same?&lt;/p&gt;
&lt;p&gt;Through a couple of coincidences, it looks like I&amp;#39;ll be touring Europe this April. I&amp;#39;ll start the tour from Finland and visit countries like Norway, Germany, Czech, Slovakia, and Austria during it. I will be talking mostly about webpack during the tour unless there&amp;#39;s demand for &lt;a href=&quot;https://presentations.survivejs.com/&quot;&gt;other topics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that I have time especially during the weeks at Norway and Germany. This is your chance to bug me in person!&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve listed the tour dates below with registration where possible. The list will be updated as I have more information available.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-23-24-3-helsinki-finland-&quot; id=&quot;-23-24-3-helsinki-finland-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;23-24.3 - Helsinki, Finland&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-23-24-3-helsinki-finland-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;23.3 - &lt;a href=&quot;https://meetabit.com/communities/react-helsinki&quot;&gt;React Helsinki&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/re-imagining-webpack/&quot;&gt;Re-imagining Webpack&lt;/a&gt; - 20 mins + QA, first go!&lt;/li&gt;
&lt;li&gt;&lt;del&gt;24.3 - &lt;a href=&quot;http://wwweeklies.com/&quot;&gt;wwweeklies&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 45 mins + QA, from basic to advanced topics fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-1-9-4-norway-oslo-&quot; id=&quot;-1-9-4-norway-oslo-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;1-9.4 - Norway, Oslo&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-1-9-4-norway-oslo-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;3.4 - &lt;a href=&quot;https://www.meetup.com/ReactJS-Oslo-Meetup/events/238536172/&quot;&gt;ReactJS Norway&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/re-imagining-webpack/&quot;&gt;Re-imagining Webpack&lt;/a&gt; - 20 mins + QA, second go!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-9-19-4-germany-&quot; id=&quot;-9-19-4-germany-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;9-19.4 - Germany&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-9-19-4-germany-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;11.4 - &lt;a href=&quot;https://www.meetup.com/NewStore/&quot;&gt;Berlin - NewStore&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Journeyman&lt;/a&gt; - 45 mins + QA, see the &lt;a href=&quot;https://www.meetup.com/NewStore/events/238314252/&quot;&gt;Meetup&lt;/a&gt; page for more information.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;14.4 - &lt;a href=&quot;https://www.meetup.com/Cologne-js/events/238980913/&quot;&gt;Cologne - CologneJS&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 4h (with breaks!) + QA&lt;/li&gt;
&lt;li&gt;&lt;del&gt;18.4 - &lt;a href=&quot;https://www.facebook.com/events/404484116586415/&quot;&gt;Berlin - Reactive Roadshow&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 90 mins + QA&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-19-26-4-czech-republic-and-slovakia-&quot; id=&quot;-19-26-4-czech-republic-and-slovakia-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;19-26.4 - Czech Republic and Slovakia&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-19-26-4-czech-republic-and-slovakia-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;19.4 - &lt;a href=&quot;https://www.facebook.com/events/419425221744852/&quot;&gt;Prague - Reactive Roadshow&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 90 mins + QA&lt;/li&gt;
&lt;li&gt;&lt;del&gt;20.4 - &lt;a href=&quot;https://www.facebook.com/events/1868848770041251/&quot;&gt;Hradec Králové - Reactive Roadshow&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 90 mins + QA&lt;/li&gt;
&lt;li&gt;&lt;del&gt;24.4 - &lt;a href=&quot;https://www.facebook.com/events/1863697743885500/&quot;&gt;Brno - Reactive Roadshow&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 90 mins + QA&lt;/li&gt;
&lt;li&gt;&lt;del&gt;25.4 - &lt;a href=&quot;https://www.facebook.com/events/247969145674274/&quot;&gt;Bratislava - Reactive Roadshow&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 90 mins + QA&lt;/li&gt;
&lt;li&gt;&lt;del&gt;26.4 - &lt;a href=&quot;https://www.facebook.com/events/1736850319939384/&quot;&gt;Košice - Reactive Roadshow&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 90 mins + QA&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#-27-4-vienna-austria-&quot; id=&quot;-27-4-vienna-austria-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;&lt;del&gt;27.4 - Vienna, Austria&lt;/del&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#-27-4-vienna-austria-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;27.4 - &lt;a href=&quot;https://www.meetup.com/ReactVienna/events/239448438/&quot;&gt;Vienna - Reactive Roadshow&lt;/a&gt;&lt;/del&gt; - &lt;a href=&quot;https://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/&quot;&gt;Webpack - From Apprentice to Master&lt;/a&gt; - 90 mins + QA&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;See you on the tour!&lt;/del&gt;&lt;/p&gt;
</content></entry><entry><title>Code Quality - Interview with João Caxaria</title><id>acodequalityinterviewwithjoaocaxaria2017-03-06t00:00:00z</id><link href="https://survivejs.com/blog/code-quality-interview/"></link><updated>2017-03-06T00:00:00Z</updated><content type="html">&lt;p&gt;What makes code good? How do you tell bad code from good one? Issues like this come to mind when you think about the concept of &lt;strong&gt;code quality&lt;/strong&gt;. To get a better idea of the topic, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/caxaria&quot;&gt;João Caxaria&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;http://0.gravatar.com/avatar/40405d52c92e546d32046560f4e5c40a?s=200&quot; alt=&quot;João Caxaria&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m a software engineer currently disguised of a CTO for &lt;a href=&quot;https://www.codacy.com&quot;&gt;Codacy&lt;/a&gt;. Before this, I did several years of software development as a consultant, having worked in several different companies, from small game studios to industry giants such as Citibank.
&lt;/p&gt;


&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-the-term-code-quality-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-the-term-code-quality-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe the term &lt;em&gt;code quality&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-the-term-code-quality-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Code quality is a hard thing to explain; Having a good code quality will mean your code is less error prone but having no errors in your code does not mean good code quality. Good code quality reflects itself on a application whose architecture is well built, easily explainable and well understood by your peers.&lt;/p&gt;
&lt;p&gt;Code quality is code that is easily extendable and provides a framework to work upon for the next developers that find it vs. removing the current code and starting over. Code quality is safety in deployments, and predictable development times on new features.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-do-you-measure-code-quality-&quot; id=&quot;how-do-you-measure-code-quality-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How do you measure &lt;em&gt;code quality&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-do-you-measure-code-quality-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To measure code quality, you need to look at several components in your code: code issues, code consistency, proper namespace or package responsibilities, class dependencies should be kept to a minimum, code coverage, etc etc. Some stuff can be measured automatically, and some &lt;em&gt;still&lt;/em&gt; requires human reviewers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-is-code-quality-important-&quot; id=&quot;why-is-code-quality-important-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why is &lt;em&gt;code quality&lt;/em&gt; important?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-is-code-quality-important-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Code quality is not always important! For example, if you&amp;#39;re doing a prototype, code quality takes a secondary role when compared to speed of delivery.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re working on a project on which you will build a mission critical part of your company, then code quality is the most important thing you can think of; it will allow you to continuously grow your project and have your company grow with it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-measuring-code-quality-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-measuring-code-quality-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for measuring &lt;em&gt;code quality&lt;/em&gt;? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-measuring-code-quality-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe several current software development processes will be changed or improved by Machine Learning / AI techniques. Although foreseeing the future is hard, if I had to bet on something, it would be on this.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have fun and and don&amp;#39;t be afraid to create and experiment new things.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/flomotlik&quot;&gt;Florian Motlik&lt;/a&gt; for sure. Smartest and kindest fellow I had the pleasure to talk to and learn from. Would read anything he says without second thoughts.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thank you for your time and making me think about this and how to put it in written form :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview João! I think code quality is one of those things that&amp;#39;s easy to overlook. You definitely feel it when you are working. I found it particularly interesting that you noted it doesn&amp;#39;t matter that much always.&lt;/p&gt;
&lt;p&gt;Especially during prototyping phase it&amp;#39;s more important to explore the idea space than end up with a technically perfect implementation. Techniques, such as using tracer bullets, come in handy here as you are still guessing and trying to figure out a good direction.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.9</title><id>asurvivejswebpackv192017-03-01t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-19/"></link><updated>2017-03-01T00:00:00Z</updated><content type="html">&lt;p&gt;If &lt;a href=&quot;https://survivejs.com/survivejs-webpack-18&quot;&gt;the previous release&lt;/a&gt; was a big step, this is another one. By the looks of it, the final paper version will be around 450 pages. Don&amp;#39;t worry, though, I&amp;#39;ve taken special care to keep the chapters short and focused.&lt;/p&gt;
&lt;p&gt;I consider the current release content complete. Only final tweaking and tuning remain.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you aren&amp;#39;t interested in what has changed, &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;skip straight to the book&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I added the missing &lt;a href=&quot;https://survivejs.com/webpack/techniques/testing&quot;&gt;chapter on testing&lt;/a&gt; while introducing a new part to the book that covers specific techniques. In addition, the part covers aspects like internationalization and web workers. You can also find new material at the beginning and the end of the book, but I&amp;#39;ll leave those for you to discover and check out.&lt;/p&gt;
&lt;p&gt;The structure and the content of the book feel solid now. All that remains is studying the chapters in detail and improving where possible. I have a couple of rough ideas what to do, but overall the changes required are small. Remember to provide feedback to me as it will make this final process smoother.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you have found the content useful, this would be a good time to contribute a testimonial. A sentence or two would go a long way. Contact me the way you see the most fitting. You can find a couple of channels at the site footer.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-9&quot; id=&quot;book-improvements-1-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.9&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-9&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I took my habit of silent releases to a new level during this iteration. This was due to the fact that the changes I made were not disruptive and rather improved the book.&lt;/p&gt;
&lt;p&gt;Especially the techniques part feels like a good addition to the book. There is enough material for you to get started with the covered topics. Apart from the testing chapter, the new chapters are short so you can get the main ideas fast.&lt;/p&gt;
&lt;p&gt;One of the additions I&amp;#39;m most excited about has to do with chapter conclusions. I wrote a small recap for each main chapter of the book. This allows you to see what I consider as the main ideas of each chapter. You could learn a lot about webpack by reading the summaries alone.&lt;/p&gt;
&lt;p&gt;The book also has a proper conclusion chapter now that works as a checklist. You can use it against your application to see if you are using the techniques covered in the book.&lt;/p&gt;
&lt;p&gt;In addition to these changes, you will find numerous smaller improvements. I spent a lot of time reviewing the book for grammar issues. In short, the book should read better.&lt;/p&gt;
&lt;p&gt;In total 234 commits went to the book since the last release. You can find the &lt;a href=&quot;https://github.com/survivejs/webpack-book/compare/v1.8.1...v1.9.0&quot;&gt;changes at GitHub&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the book covers the topics I want, I can focus on improving its quality. I feel the book is in a good place overall, but I want to sharpen certain parts before going paper. Especially the chapters related to extending webpack can become better as new technology has appeared making them easier to develop.&lt;/p&gt;
&lt;p&gt;I also have something font related brewing that will make it easier to figure out which fonts you should load, but more on this the next time.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As usual, feedback is welcome. I&amp;#39;m active at the &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;book Gitter channel&lt;/a&gt; and you can reach me through it easily. I am still looking for testimonials for the final release and I will choose a few for the book cover.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his. Literally most of the income goes to webpack developers now!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;support webpack through open collective&lt;/a&gt; too.&lt;/blockquote&gt;</content></entry><entry><title>SurviveJS - Webpack - v1.8</title><id>asurvivejswebpackv182017-02-18t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-18/"></link><updated>2017-02-18T00:00:00Z</updated><content type="html">&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/survivejs-webpack-170&quot;&gt;the previous release&lt;/a&gt; this one has gained more weight. The PDF version of the book is close to 400 pages due to new content and enhancements. There is still one chapter and two appendices to write, but the finish line is close!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you aren&amp;#39;t interested in what has changed, &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;skip straight to the book&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My biggest goal this time around was to add certain missing content to the book. Initially I wanted to write an output related chapter, but instead that ended up becoming an entire part containing multiple chapters. I also added material on web workers while pushing the current content further based on feedback.&lt;/p&gt;
&lt;p&gt;I still have to write a testing related chapter and cover i18n and debugging in short appendices. I will also add more material related to the fundamentals of webpack and likely rewrite the extension related chapters to use a package known as &lt;strong&gt;webpack-defaults&lt;/strong&gt;. They will become more pragmatic as well.&lt;/p&gt;
&lt;p&gt;The structure of the book evolved further and I took great care in figuring out short, but descriptive, names for parts of the book. Certain restructuring was made and the book should flow a little better than earlier.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you have found the content useful, this would be a good time to contribute a testimonial. A sentence or two would go a long way. Contact me the way you see the most fitting. You can find a couple of channels at the site footer.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-8&quot; id=&quot;book-improvements-1-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.8&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-8&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continued the habit of silent releases and did a couple before I realized the book has moved too far content-wise to warrant one. But I&amp;#39;ll likely continue with this habit yet again.&lt;/p&gt;
&lt;p&gt;The highlight of the new release is the output related part. I cover output options of webpack there. I also put emphasis on multi-page setups and &lt;strong&gt;Server Side Rendering&lt;/strong&gt;. Due to this the React chapter of the book disappeared and was split between the new content and HMR specific appendix.&lt;/p&gt;
&lt;p&gt;The configuration style evolved yet again to accommodate for multi-page setups better. Now it&amp;#39;s easier to compose than before.&lt;/p&gt;
&lt;p&gt;You will find numerous smaller improvements. In addition to new content, the language of the book was improved. I introduced certain level of linting to my workflow and will continue to work on this as the major milestone gets closer.&lt;/p&gt;
&lt;p&gt;In total 353 commits went to the book since the last release. You can find the &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.7.0...v1.8.1&quot;&gt;changes at GitHub&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will write a testing focused chapter, the missing appendices, and continue to cover issues highlighted by reader feedback. I expect to cover more fundamentals of webpack so you get a rough idea of webpack before actually starting to develop the configuration. After these steps I consider it feature complete.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy the changes. As usual, feedback is welcome. I&amp;#39;m active at the &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;book Gitter channel&lt;/a&gt; and you can reach me through it easily.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his. Literally most of the income goes to webpack developers now!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;support webpack through open collective&lt;/a&gt; too.&lt;/blockquote&gt;</content></entry><entry><title>SurviveJS - Webpack - v1.7.0</title><id>asurvivejswebpackv1702017-02-04t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-170/"></link><updated>2017-02-04T00:00:00Z</updated><content type="html">&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/survivejs-webpack-160&quot;&gt;the previous release&lt;/a&gt; we&amp;#39;ve proceeded a step or two closer towards paper. This time around in addition to the usual tweaks there are a couple of new chapters and more content.&lt;/p&gt;
&lt;p&gt;It will likely take at least one more release till we get to the magical 2.0 release that should become available in paper as well.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you aren&amp;#39;t interested in what has changed, &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;skip straight to the book&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I tackled most of the issues I had in mind for this release. Some were deferred to the next one and I&amp;#39;ll continue iterating there. The structure of the book feels solid and it&amp;#39;s fast to progress now. There are three chapters and three appendices to add. After that I consider the book &amp;quot;feature complete&amp;quot;.&lt;/p&gt;
&lt;p&gt;This time around my special thanks go to &lt;a href=&quot;https://github.com/Undistraction&quot;&gt;Pedr Browne&lt;/a&gt; for his amazing feedback that helped me improve particularly the flow of the book. Some improvements are still in store.&lt;/p&gt;
&lt;p&gt;There will be at least a 1.8 version before the book reaches paper, but the end is definitely in sight. &lt;a href=&quot;https://github.com/survivejs/webpack/issues&quot;&gt;Open issues&lt;/a&gt; as you see fit. You can also &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;reach me through Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that webpack 2 is considered stable now and you don&amp;#39;t need &lt;code&gt;@beta&lt;/code&gt; specifier with it when installing. Only &lt;a href=&quot;https://github.com/webpack-contrib/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; remains in release candidate mode. If you want to help with it, check out the issue tracker and especially the milestones. It has to reach a final release before I can push the paper book out there.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you have found the content useful, this would be a good time to contribute a testimonial. A sentence or two would go a long way. Contact me the way you see the most fitting. You can find a couple of channels at the site footer.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-7-0&quot; id=&quot;book-improvements-1-7-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.7.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-7-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 159 commits went to the book since the last release. You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.6.0...v1.7.0&quot;&gt;all changes&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;p&gt;I continued the habit of silent releases and I actually intend to do one quite fast after this release to improve the formatting of webpack output.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a new part on how to extend webpack. I pushed the existing loader chapter there and added a short one on plugins. It&amp;#39;s more of a quick dip in the topic to give you some idea on how you might write one.&lt;/p&gt;
&lt;p&gt;I also integrated React HMR appendix to the React chapter itself as that felt like a better place for it. During this process I upgraded the setup to use the newest beta version of &lt;em&gt;react-hot-loader&lt;/em&gt; while covering a couple of gotchas related to it and how to work around those.&lt;/p&gt;
&lt;p&gt;The configuration style has improved a notch and you&amp;#39;ll see many functions accept objects. This is to keep them readable and easy to extend.&lt;/p&gt;
&lt;p&gt;You will find numerous smaller improvements in the book and it should flow better. Certain chapters contribute more to the book project and I&amp;#39;ve tried to take care to write the chapters so that you can approach them even without knowledge of the previous ones. Sometimes that&amp;#39;s impossible to pull off, but it should be a little better now at least.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplified especially the end part a notch. The book digs into detail later so there&amp;#39;s no need to repeat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-started&quot; id=&quot;getting-started&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Started&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-started&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Covered webpack&amp;#39;s multi-compiler mode. That might eventually go elsewhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot; id=&quot;automatic-browser-refresh&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Automatic Browser Refresh&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pushed development plugins section to this chapter to improve balance between the chapters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting&quot; id=&quot;linting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained advanced ESLint configuration and how to pull that off with webpack.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#composing-configuration&quot; id=&quot;composing-configuration&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Composing Configuration&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#composing-configuration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;code&gt;env&lt;/code&gt; discussion as that&amp;#39;s covered earlier now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#handling-styles&quot; id=&quot;handling-styles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Handling Styles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#handling-styles&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#separating-css&quot; id=&quot;separating-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Separating CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#separating-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added autoprefixing setup. Now configuration is more flexible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#eliminating-unused-css&quot; id=&quot;eliminating-unused-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Eliminating Unused CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#eliminating-unused-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ported the setup to &lt;a href=&quot;http://npmjs.org/package/purifycss-webpack&quot;&gt;purifycss-webpack&lt;/a&gt; as I couldn&amp;#39;t get rights to the old package on time. &lt;em&gt;purifycss-webpack-plugin&lt;/em&gt; will be deprecated once npm makes its move.&lt;/li&gt;
&lt;li&gt;Added a small section on a technique known as critical path rendering.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-loaders&quot; id=&quot;understanding-loaders&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding Loaders&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-loaders&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loader-definitions&quot; id=&quot;loader-definitions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loader Definitions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loader-definitions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a section on enforcing order.&lt;/li&gt;
&lt;li&gt;Added a section on how to use functions with &lt;code&gt;use&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added a section on alternative matchers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-images&quot; id=&quot;loading-images&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Images&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Showed how to integrate the techniques to the book project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-fonts&quot; id=&quot;loading-fonts&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Fonts&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-fonts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integrated the Font Awesome setup to the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot; id=&quot;building-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#source-maps&quot; id=&quot;source-maps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Source Maps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#source-maps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Renamed the chapter and fixed a typo while at it.&lt;/li&gt;
&lt;li&gt;Expanded the explanation of source maps greatly. Now you can see what kind of output webpack emits. During this process &lt;a href=&quot;https://github.com/webpack/webpack/issues/4176&quot;&gt;I found a bug&lt;/a&gt; in a certain variant.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#processing-with-babel&quot; id=&quot;processing-with-babel&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Processing with Babel&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#processing-with-babel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a section on how to enable Babel plugins and presets per environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#optimizing-build&quot; id=&quot;optimizing-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Optimizing Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#optimizing-build&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minifying-build&quot; id=&quot;minifying-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minifying Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minifying-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the idea of a performance budget in detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot; id=&quot;setting-environment-variables&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Setting Environment Variables&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Showed how to choose a package based on environment.&lt;/li&gt;
&lt;li&gt;Listed optimization related plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot; id=&quot;adding-hashes-to-filenames&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Adding Hashes to Filenames&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Split into two chapters. Manifest has a chapter of its own now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#extending-webpack&quot; id=&quot;extending-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Extending Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#extending-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#extending-webpack-with-plugins&quot; id=&quot;extending-webpack-with-plugins&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Extending Webpack with Plugins&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#extending-webpack-with-plugins&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New chapter based on &lt;a href=&quot;https://github.com/webpack-contrib/purifycss-webpack&quot;&gt;purifycss-webpack&lt;/a&gt; plugin. It&amp;#39;s a quick introduction to give initial idea on what&amp;#39;s needed to write plugins. There&amp;#39;s more to come.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#consuming-packages&quot; id=&quot;consuming-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Consuming Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#consuming-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained how to deal with pre-built dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-react&quot; id=&quot;configuring-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained how to make ESLint work with React as that was missing earlier.&lt;/li&gt;
&lt;li&gt;Added &lt;em&gt;react-hot-loader&lt;/em&gt; 3 setup and integrated it to the book project. There is no React HMR appendix anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll focus on the smaller tweaks on my list first and get a silent release or two out there based on those. After that I will get the remaining chapters and appendices done. Especially the early part of the book will receive certain improvements that make it a little easier to approach.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy the changes. As usual, feedback is welcome. I&amp;#39;m active at the &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;book Gitter channel&lt;/a&gt; and you can reach me through it easily.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his. Literally most of the income goes to webpack developers now!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;support webpack through open collective&lt;/a&gt; too.&lt;/blockquote&gt;</content></entry><entry><title>ajv - The Fastest JSON Schema Validator - Interview with Evgeny Poberezkin</title><id>aajvthefastestjsonschemavalidatorinterviewwithevgenypoberezkin2017-01-23t00:00:00z</id><link href="https://survivejs.com/blog/ajv-interview/"></link><updated>2017-01-23T00:00:00Z</updated><content type="html">&lt;p&gt;Describing what things are is an essential skill for a programmer. We might do that implicitly, but we often have to think about structure regardless. &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt; is a specification that allows us to do this in a more formal manner.&lt;/p&gt;
&lt;p&gt;Assuming you were creating a form, you could describe its fields and their details using a schema. Once you have a schema, you could generate the form and its validation based on that information.&lt;/p&gt;
&lt;p&gt;The same idea applies to tools like &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;. There we use a JSON Schema to describe the configuration webpack expects. This way you can get a schema invalidation error over a cryptic runtime one which you would have to debug.&lt;/p&gt;
&lt;p&gt;Underneath webpack uses a library known as Ajv by &lt;a href=&quot;https://twitter.com/EPoberezkin&quot;&gt;Evgeny Poberezkin&lt;/a&gt; to handle validation. Read on to learn more about JSON Schema and the library itself.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/f0e97301983c1019d98740935009ab6e?s=200&quot; alt=&quot;Evgeny Poberezkin&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;ve been interested in software since school. I&amp;#39;ve spent a big part of my life creating and managing businesses, only occasionally creating software for them. I&amp;#39;ve been coding full time for several years. Currently I lead the team of great software engineers at &lt;a href=&quot;http://dailymail.co.uk&quot;&gt;MailOnline&lt;/a&gt; (and we are hiring!).
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-ajv-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-ajv-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Ajv&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-ajv-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/epoberezkin/ajv&quot;&gt;Ajv&lt;/a&gt; implements &lt;a href=&quot;http://json-schema.org&quot;&gt;JSON Schema&lt;/a&gt; - a standard to describe and validate a JSON document using a schema. For example, the schema below describes an object that must have two properties: &amp;quot;first_name&amp;quot; and &amp;quot;last_name&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot; &gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot; &gt;&quot;required&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;last_name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot; &gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot; &gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot; &gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot; &gt;&quot;last_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot; &gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To comply with the schema, you could write a definition like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot; &gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot; &gt;&quot;last_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;Doe&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming you provided a wrong type or failed to pass a required field to the schema, the validation step would fail. This way you can know for sure that your data is exactly the way you expect it to be. Beyond simple field definitions, you could describe how data relates to each other. Even more complex invariants are possible.&lt;/p&gt;
&lt;p&gt;Ajv implements several extensions to JSON Schema specification (e.g., &lt;a href=&quot;https://github.com/epoberezkin/ajv#data-reference&quot;&gt;$data reference&lt;/a&gt;) and allows users to define their own custom keywords. &lt;a href=&quot;https://github.com/epoberezkin/ajv-keywords&quot;&gt;ajv-keywords&lt;/a&gt; defines several useful keywords, some of which will be included in the next versions of JSON Schema specification - &lt;code&gt;propertyNames&lt;/code&gt; is included in draft-06 (soon to be published) and &lt;code&gt;if/then/else&lt;/code&gt; is considered for draft-07.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-ajv-work-&quot; id=&quot;how-does-ajv-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Ajv&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-ajv-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ajv compiles JSON Schema into JavaScript - it generates the code used to validate user data against the constraints defined in the original JSON Schema (and creates a validation function using the &lt;code&gt;Function&lt;/code&gt; constructor).&lt;/p&gt;
&lt;p&gt;For example, use this code to compile the above schema to a validation function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Ajv &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;Ajv&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; ajv &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Ajv&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;allErrors&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Schema from the example above&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; validate &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; ajv&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;schema&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;validate&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of the compilation is a JavaScript function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/*, ... */&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; vErrors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; errors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data &lt;span class=&quot;token operator&quot; &gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword keyword-typeof&quot; &gt;typeof&lt;/span&gt; data &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;object&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;isArray&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;first_name &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; undefined&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; err &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; keyword&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;required&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/*, ... */&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;vErrors &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

      errors&lt;span class=&quot;token operator&quot; &gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-typeof&quot; &gt;typeof&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;first_name &lt;span class=&quot;token operator&quot; &gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; err &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; keyword&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;type&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/*, ... */&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;vErrors &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

      errors&lt;span class=&quot;token operator&quot; &gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;last_name &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; undefined&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; err &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; keyword&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;required&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/*, ... */&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;vErrors &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

      errors&lt;span class=&quot;token operator&quot; &gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-typeof&quot; &gt;typeof&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;last_name &lt;span class=&quot;token operator&quot; &gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; err &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; keyword&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;type&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/*, ... */&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;vErrors &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        vErrors&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

      errors&lt;span class=&quot;token operator&quot; &gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; err &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; keyword&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;type&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/*, ... */&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;vErrors &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token keyword keyword-null&quot; &gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      vErrors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-else&quot; &gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      vErrors&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

    errors&lt;span class=&quot;token operator&quot; &gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

  validate&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;errors &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; vErrors&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; errors &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated function performs validation against exactly the schema above without using the schema itself - all the keywords are translated into code.&lt;/p&gt;
&lt;p&gt;The generated code is verbose. However, it is very efficient as it has no loops or function calls. The developer does not need to see the generated code to use it, so the size doesn&amp;#39;t matter.&lt;/p&gt;
&lt;p&gt;There are several other validators using the same approach - it allows to achieve more than 100 times performance of interpreting validators.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-ajv-differ-from-other-solutions-&quot; id=&quot;how-does-ajv-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Ajv&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-ajv-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ajv is the fastest JSON Schema validator - in &lt;a href=&quot;https://github.com/pandastrike/jsck#benchmarks&quot;&gt;some tests&lt;/a&gt; it is almost 3 times faster than the nearest alternative.&lt;/p&gt;
&lt;p&gt;Its main advantage is that it is the most standard-compliant JavaScript validator, particularly when it comes to resolving references between schemas - all other validators have &lt;a href=&quot;https://github.com/epoberezkin/test-validators#most-failed-tests-related-to-ref&quot;&gt;limited support of references&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ajv is also the most extensible validator - it allows to create custom validation keywords in &lt;a href=&quot;https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md&quot;&gt;several different ways&lt;/a&gt; and also has support of &lt;a href=&quot;https://github.com/epoberezkin/ajv#asynchronous-validation&quot;&gt;asynchronous validation&lt;/a&gt; (when validation keywords make asynchronous calls). Users have managed to use this functionality to include the business logic validation into their schemas, that is often more manageable than having it in the code.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-ajv-&quot; id=&quot;why-did-you-develop-ajv-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Ajv&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-ajv-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was working on &lt;a href=&quot;http://www.jsonscript.org&quot;&gt;JSONScript&lt;/a&gt; (a language for scripted server-side processing of existing endpoints and services). I needed a JSON Schema validator. However, all the existing validators were failing in some of my tests – tests that were expected to pass according to the JSON Schema specification.&lt;/p&gt;
&lt;p&gt;Before Ajv I created &lt;a href=&quot;https://github.com/epoberezkin/json-schema-consolidate&quot;&gt;json-schema-consolidate&lt;/a&gt; - a collection of adapters to many JavaScript validators to be able to switch between them easily without changing my code. I&amp;#39;ve learned a lot about the inner workings of the validators and I&amp;#39;ve found out that there was no validator as good as I needed. So I decided to create another JSON Schema validator.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the problems in JSON Schema adoption is the lack of tools to test the schemas. From what I have observed, developers write only a handful of tests where validation passes and from these tests make a conclusion that their schemas are correct. Even an empty schema &lt;code&gt;{}&lt;/code&gt; without any keywords would satisfy all passing tests!&lt;/p&gt;
&lt;p&gt;The only way to thoroughly test JSON Schemas is to write tests when validation fails sufficient to cover all keywords used in the schema. But how &amp;quot;sufficient to cover&amp;quot; can be measured?&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-schemas&quot; id=&quot;testing-schemas&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing Schemas&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-schemas&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given that Ajv compiles schemas to JavaScript functions, it is possible to measure &lt;strong&gt;code coverage&lt;/strong&gt; of the schemas. The problem though is that the coverage reports are not very useful - it is not very easy to see JSON Schemas behind generated JavaScript code (as you can see in the earlier example).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve started working on tools that allow to test schemas and generate code coverage reports. These packages can already be used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MailOnline/json-schema-test&quot;&gt;json-schema-test&lt;/a&gt; - a package that was used in Ajv from the very beginning to execute platform independent tests that are written as JSON files in &lt;a href=&quot;https://github.com/json-schema-org/JSON-Schema-Test-Suite&quot;&gt;the same format&lt;/a&gt; that JSON Schema specification uses. Although this format was created to test validators with very simple schemas it can be used to test schemas (assuming that the validator is working correctly).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/epoberezkin/ajv-istanbul&quot;&gt;ajv-istanbul&lt;/a&gt; - a package to instrument generated validation code to measure its code coverage.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/epoberezkin/json-source-map&quot;&gt;json-source-map&lt;/a&gt; - a package to parse/stringify JSON and to provide source-map for JSON-pointers to all nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#current-work&quot; id=&quot;current-work&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Current Work&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#current-work&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am working on adding source maps to generated validation code (where the &amp;quot;source code&amp;quot; is JSON Schema itself) and on generating coverage reports for JSON Schemas. That would allow to test JSON Schemas using JSON files as test cases and measuring code coverage in a platform independent way.&lt;/p&gt;
&lt;p&gt;It can be used for schemas used in any language. This assumes that the validator available in that language complies with the standard.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-ajv-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-ajv-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Ajv&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-ajv-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next major version of Ajv will implement the next version of JSON Schema standard (draft-06) that should be published very soon. &lt;a href=&quot;https://github.com/epoberezkin/ajv/tree/5.0.1-beta.1&quot;&gt;Beta version&lt;/a&gt; of Ajv that supports preliminary draft-06 specification is already available.&lt;/p&gt;
&lt;p&gt;With JSON Schema coverage tool I described above it will be possible to use Ajv to help develop validators for other languages. I believe that JSON Schema specification still requires both some simplification and at the same time some additional features to make it more flexible and powerful.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#reactive-programming-explicit-and-implicit-graphs&quot; id=&quot;reactive-programming-explicit-and-implicit-graphs&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Reactive Programming - Explicit and Implicit Graphs&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#reactive-programming-explicit-and-implicit-graphs&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Regarding the web, I think the most promising developments are happening in &lt;strong&gt;reactive programming&lt;/strong&gt;. I think with React etc. we are only making the first steps. Reactive programming paradigm allows to define a graph connecting different parts of application data/state using some expressions/rules. There are two different approaches in defining such graphs - explicit and implicit.&lt;/p&gt;
&lt;p&gt;In the explicit approach the graph is defined using some syntax connecting data structures (it is used in some libraries for JavaScript, e.g. &lt;a href=&quot;https://github.com/milojs/milo&quot;&gt;milojs&lt;/a&gt;). In the implicit one, the observer pattern is used to translate messages to the changes in data/application state (e.g. React/Redux).&lt;/p&gt;
&lt;p&gt;While the second approach is easier to implement and in some cases it allows to better manage some common reactive programming problems (glitches, cycles, mutable state, race conditions), the advantage of the first approach is that it allows to write code at a higher level of abstraction.&lt;/p&gt;
&lt;p&gt;I think in the near future we will see new implementations of explicit approach to building data graph in JavaScript. It can be a library, syntax extensions or even a whole new language that allows to explicitly define data graph without worrying about internal mechanics of change propagation.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#abstraction-of-html-css&quot; id=&quot;abstraction-of-html-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Abstraction of HTML/CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#abstraction-of-html-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I also hope that we will either see some new web standard for defining UI in the browser that could supersede HTML/CSS or at the very least some mature libraries that abstract these details from the developer.&lt;/p&gt;
&lt;p&gt;HTML/CSS that was created for hypertext documents seems very clunky when used for building UI. Although it keeps millions of web-developers busy, I think they could achieve much more with something more suitable for UI creation. Web components seem to be a step in that direction.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think the most important thing is to understand the foundations of the technologies you are using - JavaScript features (closures, classes, prototypes, etc.), DOM API and node.js core packages, rather than limit your understanding to a particular library/framework APIs and conventions.&lt;/p&gt;
&lt;p&gt;Firstly, because the foundational technologies have much longer life cycle than frameworks, so any time spent learning them is a long term investment. Secondly, because by understanding the foundation of the frameworks you use you can easily solve problems that these frameworks can&amp;#39;t help you with.&lt;/p&gt;
&lt;p&gt;I think it&amp;#39;s important to be able to solve the problem by just writing code rather than only be able to glue together pieces created by other people - I see that a bit too often when developers try to avoid writing code manipulating some simple data structures.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s also very important to be very critical, I&amp;#39;d even say skeptical, towards all new tools and libraries, particularly those that generate a lot of hype. Quite a few of them may spend more of your time than they promise to save. Some others may simply not be around in 3-5 years. So heavily relying on them should be a carefully made decision rather than a default choice.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think your readers could be interested to learn about &lt;a href=&quot;https://github.com/MatAtBread/nodent&quot;&gt;nodent&lt;/a&gt; - &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; transpiler created by &lt;a href=&quot;https://github.com/MatAtBread&quot;&gt;Matt Woolf&lt;/a&gt; that generates the fastest ES5 code. It&amp;#39;s been tested with Ajv for asynchronous validation and I can say that it is much more performant and stable than the alternatives.&lt;/p&gt;
&lt;p&gt;Also, I would be quite interested to read about the history and the future of Istanbul - code coverage library created by &lt;a href=&quot;https://github.com/gotwarlost&quot;&gt;Krishnan Anantheswaran&lt;/a&gt;. This library revolutionised the way we write and test JavaScript code.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Evgeny! I&amp;#39;ve seen the power of schema many times and it feels like an underappreciated approach especially in front-end.&lt;/p&gt;
&lt;p&gt;By relying on a standard, like JSON Schema, you simply eliminate a part of the work altogether and can focus on something more important. That said, there are always cases a standard won&amp;#39;t cover, but regardless I would recommend studying the idea of schemas.&lt;/p&gt;
&lt;p&gt;There are several tutorials about JSON Schema, e.g. a &lt;a href=&quot;https://spacetelescope.github.io/understanding-json-schema/&quot;&gt;very good guide&lt;/a&gt; for schema authors by the Space Telescope Science Institute. Evgeny has also written a &lt;a href=&quot;https://code.tutsplus.com/tutorials/validating-data-with-json-schema-part-1--cms-25343&quot;&gt;tutorial about JSON Schema&lt;/a&gt; that is available on tuts+. &lt;a href=&quot;https://epoberezkin.github.io/ajv/&quot;&gt;The site of Ajv&lt;/a&gt; is worth studying and you can &lt;a href=&quot;https://github.com/epoberezkin/ajv&quot;&gt;find the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.6.0</title><id>asurvivejswebpackv1602017-01-19t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-160/"></link><updated>2017-01-19T00:00:00Z</updated><content type="html">&lt;p&gt;You might have noticed that &lt;a href=&quot;https://medium.com/webpack/webpack-2-2-the-final-release-76c3d43bf144&quot;&gt;webpack 2 reached a final release&lt;/a&gt;. That means it&amp;#39;s a good time to update this book as well. Even though it&amp;#39;s mostly a maintenance release, there&amp;#39;s some new content in store.&lt;/p&gt;
&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/survivejs-webpack-150&quot;&gt;the previous release&lt;/a&gt; this one feels more solid and should be a little easier to approach. A lot of grammatical issues were eliminated in addition to other tweaks. This work is a part of the hardening required for a paper release.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you aren&amp;#39;t interested in what has changed, &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;skip straight to the book&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on the book again, I had roughly three hundred issues on my list to tackle. Roughly 40 remains. The current content requires certain minor tweaks. Also a couple of new chapters are required. After that we are good to go with the milestone release.&lt;/p&gt;
&lt;p&gt;This time around my special thanks go to &lt;a href=&quot;https://github.com/jeggett&quot;&gt;Alexander Zaytsev&lt;/a&gt; for his awesome feedback on the content that allowed me to push it further. Thanks Alexander!&lt;/p&gt;
&lt;p&gt;The next release might be the last before the book reaches 2.0. It&amp;#39;s not too late to contribute specific ideas on what to cover at the book. &lt;a href=&quot;https://github.com/survivejs/webpack/issues&quot;&gt;Open issues&lt;/a&gt; as you see fit. You can also &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;reach me through Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-6-0&quot; id=&quot;book-improvements-1-6-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.6.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-6-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 118 commits went to the book since the last release. You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.5.0...v1.6.0&quot;&gt;all changes&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;p&gt;This time around I made a couple of &amp;quot;silent&amp;quot; releases (no notification on Leanpub) to get smaller fixes in. I will likely continue this habit as it&amp;#39;s more in line with the way I like to work and publish.&lt;/p&gt;
&lt;p&gt;Structurally the biggest change was pushing the configuration splitting chapter at the end of its part. Earlier it was too early and you understand the idea better after you experience some of the pain the approach solves.&lt;/p&gt;
&lt;p&gt;I had a pair of non-technical editors go through the content. This alone lead to hundreds of little fixes all around the content. You won&amp;#39;t notice most of them, but I feel it contributes towards the overall quality. It&amp;#39;s impossible for me to fix the paper book so it&amp;#39;s better to do this now.&lt;/p&gt;
&lt;p&gt;Unlike the general JavaScript convention, the book uses trailing commas in its book examples now. This lead to one big benefit - simplified code diffs. Instead of having to remove and add code, I can often only add code now. This eliminated some redundant code from the book making room for more content in the paper release.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot; id=&quot;automatic-browser-refresh&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Automatic Browser Refresh&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This chapter is right after the &lt;a href=&quot;https://survivejs.com/webpack/developing/getting-started/&quot;&gt;Getting Started&lt;/a&gt; one now. The splitting idea is covered at the end of the part. The flow of the book feels better this way and it should be easier for beginners to pick up.&lt;/li&gt;
&lt;li&gt;The chapter has been largely redeveloped. Especially &lt;code&gt;--env&lt;/code&gt; fits the whole better now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-hot-module-replacement&quot; id=&quot;configuring-hot-module-replacement&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring Hot Module Replacement&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-hot-module-replacement&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Listed some of the features of webpack-dev-server that weren&amp;#39;t mentioned earlier. At least this way you know what it&amp;#39;s capable of.&lt;/li&gt;
&lt;li&gt;Added a screenshot to clarify the idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-javascript&quot; id=&quot;linting-javascript&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting JavaScript&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-javascript&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Restructured ESLint tips so they are easier to access.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/prettier&quot;&gt;Prettier&lt;/a&gt; and &lt;a href=&quot;https://github.com/danger/danger-js&quot;&gt;Danger&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-configuration&quot; id=&quot;splitting-configuration&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Configuration&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-configuration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This chapter is largely the same as before except this time around you can see better the difference the approach makes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#handling-styles&quot; id=&quot;handling-styles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Handling Styles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#handling-styles&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-styles&quot; id=&quot;loading-styles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Styles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-styles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote PostCSS approach to use &lt;code&gt;options&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pushed the import tilde idea to a single section to simplify further.&lt;/li&gt;
&lt;li&gt;Added sections on sourcemaps, Bootstrap, and converting CSS to a string (Angular).&lt;/li&gt;
&lt;li&gt;Improved the quality of the images.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#separating-css&quot; id=&quot;separating-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Separating CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#separating-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a section on how to maintain CSS outside of JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-css&quot; id=&quot;linting-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ported PostCSS to &lt;code&gt;options&lt;/code&gt; based scheme to encapsulate the idea better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-loaders&quot; id=&quot;understanding-loaders&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding Loaders&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-loaders&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loader-definitions&quot; id=&quot;loader-definitions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loader Definitions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loader-definitions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more detail to the main example.&lt;/li&gt;
&lt;li&gt;Discussed inline definitions in greater detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-fonts&quot; id=&quot;loading-fonts&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Fonts&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-fonts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified a notch while adding a better example for Font Awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#writing-loaders&quot; id=&quot;writing-loaders&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Writing Loaders&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#writing-loaders&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the idea of pitch loaders.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot; id=&quot;building-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot; id=&quot;splitting-bundles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Bundles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on the basic ideas and especially &lt;code&gt;CommonsChunkPlugin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added a section on chunk merging and splitting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#code-splitting&quot; id=&quot;code-splitting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Code Splitting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#code-splitting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more examples and related patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#processing-with-babel&quot; id=&quot;processing-with-babel&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Processing with Babel&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#processing-with-babel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added sections on TypeScript and Flow and explained them in greater detail than earlier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#hosting-on-github-pages&quot; id=&quot;hosting-on-github-pages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Hosting on GitHub Pages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#hosting-on-github-pages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added an example of how to resolve &lt;code&gt;publicPath&lt;/code&gt; dynamically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#optimizing-build&quot; id=&quot;optimizing-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Optimizing Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#optimizing-build&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minifying&quot; id=&quot;minifying&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minifying&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minifying&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the basic idea of tree shaking with a small demonstration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot; id=&quot;adding-hashes-to-filenames&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Adding Hashes to Filenames&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the idea of records and why/how to use them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#consuming-packages&quot; id=&quot;consuming-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Consuming Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#consuming-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a section on how to deal with globals, like jQuery, using webpack as this is a common problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-react&quot; id=&quot;configuring-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a React specific code splitting example.&lt;/li&gt;
&lt;li&gt;Pushed TypeScript and Flow bits to the Babel chapter as those fit below compiling topic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll continue on my task list. I don&amp;#39;t expect the current content will change a lot. It&amp;#39;s possible the &lt;em&gt;Writing Loaders&lt;/em&gt; chapter will go to a part with a similar chapter for plugins and I have &lt;a href=&quot;https://github.com/webpack-contrib/purifycss-webpack-plugin&quot;&gt;prepared a plugin example&lt;/a&gt; for the chapter already. The plugin will eventually replace the current Purify plugin of the book.&lt;/p&gt;
&lt;p&gt;I expect the next release has at least a couple of more chapters to make the book complete enough for a paper release.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy the new version. There were quite a few smaller changes that I didn&amp;#39;t cover, but it&amp;#39;s up to you to discover those.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his. Literally most of the income goes to webpack developers now!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;support webpack through open collective&lt;/a&gt; too.&lt;/blockquote&gt;</content></entry><entry><title>isomorphic-webpack - Universal module consumption using webpack - Interview with Gajus Kuizinas</title><id>aisomorphicwebpackuniversalmoduleconsumptionusingwebpackinterviewwithgajuskuizinas2017-01-10t00:00:00z</id><link href="https://survivejs.com/blog/isomorphic-webpack-interview/"></link><updated>2017-01-10T00:00:00Z</updated><content type="html">&lt;p&gt;A lot of people see isomorphic rendering as a holy grail given it gives advantages a SPAs lost compared to earlier solutions. The fact that you can provide initial markup has SEO and performance implications. It is a hard problem, though, as your tooling needs to support the approach well.&lt;/p&gt;
&lt;p&gt;In this interview we&amp;#39;ll discuss a solution known as &lt;a href=&quot;https://github.com/gajus/isomorphic-webpack&quot;&gt;isomorphic-webpack&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/kuizinas&quot;&gt;Gajus Kuizinas&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot;&gt;
    &lt;img src=&quot;https://pbs.twimg.com/profile_images/796004738273865728/qRcdB4kf.jpg&quot; alt=&quot;Gajus Kuizinas&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
  &lt;/span&gt;

My name is Gajus Kuizinas. I am a consultant software engineer, living in London. I advise companies on the subject of the software architecture, database design and DevOps. When not at work, I am spending a considerable amount of time contributing to the open-source.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-isomorphic-webpack-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-isomorphic-webpack-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;isomorphic-webpack&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-isomorphic-webpack-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is a program that makes an application written for browser consumption render on the server-side.&lt;/p&gt;
&lt;p&gt;Rendering an application server-side enables advanced page generation techniques (e.g. using &lt;a href=&quot;https://www.w3.org/TR/esi-lang&quot;&gt;ESI&lt;/a&gt;), critical rendering path optimization and it maintains the idea on which the internet was built – that pages are documents, and if you ask server for a document by URL, you get back the text of the document rather than a program that generates the document.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-isomorphic-webpack-work-&quot; id=&quot;how-does-isomorphic-webpack-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;isomorphic-webpack&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-isomorphic-webpack-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the most part, &lt;em&gt;isomorphic-webpack&lt;/em&gt; is an abstraction of the webpack API. isomorphic-webpack configures a new webpack compiler and sets it into a &lt;code&gt;watch&lt;/code&gt; mode. Since it is simply another webpack instance, the configuration can be shared between client-side and server-side.&lt;/p&gt;
&lt;p&gt;However, isomorphic-webpack clones the configuration and makes a few amendments, e.g. for performance purposes, the isomorphic-webpack&amp;#39;s webpack compiler instance is using in-memory file system, a &lt;a href=&quot;https://github.com/webpack/docs/wiki/list-of-plugins#dllplugin&quot;&gt;&lt;code&gt;DllPlugin&lt;/code&gt;&lt;/a&gt; plugin is added, and by default all dependencies are externalized.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;DllPlugin&lt;/code&gt; changes the behaviour of the webpack compiler. When using the &lt;code&gt;DllPlugin&lt;/code&gt; plugin, the resulting script bundle does not self-invoke. Instead, the resulting script bundle exports a function which can be used to &lt;code&gt;require&lt;/code&gt; modules.&lt;/p&gt;
&lt;p&gt;webpack compiles the bundle and writes the resulting files to the in-memory file system. isomorphic-webpack then evaluates the resulting bundle using Node.js &lt;a href=&quot;https://nodejs.org/api/vm.html&quot;&gt;vm&lt;/a&gt; module. The V8 virtual machine is created using a context that emulates the browser environment.&lt;/p&gt;
&lt;p&gt;To be specific, &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects are created using &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt;. These objects are required by various loaders and dependencies, e.g. &lt;a href=&quot;https://github.com/webpack/style-loader&quot;&gt;style-loader&lt;/a&gt; requires access to &lt;code&gt;document&lt;/code&gt;, &lt;a href=&quot;https://github.com/mjackson/history&quot;&gt;history&lt;/a&gt; requires access to &lt;code&gt;window.history&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;To access the code, isomorphic-webpack overrides Node.js module resolution logic using &lt;a href=&quot;https://github.com/gajus/override-require&quot;&gt;override-require&lt;/a&gt;. &lt;code&gt;require()&lt;/code&gt; queries that match an entry in the manifest file (generated by the &lt;code&gt;DllPlugin&lt;/code&gt;) are mapped to an entry in the resulting bundle, other requests are delegated to the native Node.js module loading system.&lt;/p&gt;
&lt;p&gt;This is how when you &lt;code&gt;require(&amp;#39;./app&amp;#39;)&lt;/code&gt; we are able to render the entire application as if that code was executed in the browser.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-it-take-to-make-an-existing-webpack-application-isomorphic-using-isomorphic-webpack-&quot; id=&quot;what-does-it-take-to-make-an-existing-webpack-application-isomorphic-using-isomorphic-webpack-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does it take to make an existing &lt;em&gt;webpack&lt;/em&gt; application isomorphic using &lt;strong&gt;isomorphic-webpack&lt;/strong&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-it-take-to-make-an-existing-webpack-application-isomorphic-using-isomorphic-webpack-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose that this is your existing webpack application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; express &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; webpack &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;webpack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; webpackDevMiddleware &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;webpack-dev-middleware&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; webpackConfiguration &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;../webpack.configuration&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; compiler &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;webpack&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;webpackConfiguration&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;webpackDevMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;compiler&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; `
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;doctype html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;head&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;head&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;app&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/static/app.js&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;body&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  `&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;8000&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It doesn&amp;#39;t matter whats in the &lt;em&gt;webpack.configuration.js&lt;/em&gt;, because the same configuration is used for client- and server-side.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Note: webpack-dev-middleware is not a dependency of isomorphic-webpack. It is used here to deliver the client-side bundle.&lt;/blockquote&gt;&lt;p&gt;To make the above webpack server render the application server-side, all you need is to create isomorphic-webpack compiler and render the application using &lt;code&gt;react-dom/server&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; express &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; webpack &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;webpack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; webpackDevMiddleware &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;webpack-dev-middleware&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  createIsomorphicWebpack
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;isomorphic-webpack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  renderToString
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;react-dom/server&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; webpackConfiguration &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;../webpack.configuration&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; compiler &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;webpack&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;webpackConfiguration&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;webpackDevMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;compiler&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;createIsomorphicWebpack&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;webpackConfiguration&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; `
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;!&lt;/span&gt;doctype html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;head&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;head&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;app&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
        $&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;../app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-default&quot; &gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/static/app.js&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;body&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;html&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
  `&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;8000&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-isomorphic-webpack-differ-from-other-solutions-&quot; id=&quot;how-does-isomorphic-webpack-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;isomorphic-webpack&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-isomorphic-webpack-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have added a &lt;a href=&quot;https://github.com/gajus/isomorphic-webpack#what-makes-isomorphic-webpack-different-from-webpack-isomorphic-tools-universal-webpack-&quot;&gt;comparison table&lt;/a&gt; to the main repository. The key difference is that &lt;code&gt;isomorphic-webpack&lt;/code&gt; does not require a separate configuration for client- and server-side code and all &lt;code&gt;webpack&lt;/code&gt; loaders and dependencies work out of the box.&lt;/p&gt;
&lt;p&gt;The latter is an important condition: a true universal code base requires that the same code works across different platforms. If you start adding platform specific conditions to make the code work, it is no longer a universal code base.&lt;/p&gt;
&lt;p&gt;It is the responsibility of the program running the code to enable isomorphism. In that sense, isomorphic-webpack is the only tool that enables re-use of the code base between client- and server-side without making modifications to the application code base.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-isomorphic-webpack-&quot; id=&quot;why-did-you-develop-isomorphic-webpack-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;isomorphic-webpack&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-isomorphic-webpack-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am consulting a company that utilise &lt;a href=&quot;https://en.wikipedia.org/wiki/Edge_Side_Includes&quot;&gt;Edge Side Includes&lt;/a&gt; (ESI) to construct the page content. This company is migrating from a mixed bag of programming languages to JavaScript for client- and server-side development.&lt;/p&gt;
&lt;p&gt;This was a unique challenge: I was working as part of a larger frontend team; the code will need to be maintained by the frontend team. Therefore, my focus has been to use frameworks known to frontend teams and avoid backend specific frameworks as much as possible. I have proceeded to develop the application using React and webpack.&lt;/p&gt;
&lt;p&gt;I have had the application up and running client-side, but there was one problem – none of the existing isomorphic-rendering solutions worked out of the box with the code base. The existing solutions required obscure configuration, ran multiple Node processes (making it a pain to containerise the application), and didn’t work with all of the webpack loaders the project was using.&lt;/p&gt;
&lt;p&gt;I have started with a project specific implementation. I have learned about the webpack API and progressed to develop a re-usable abstraction.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#whats-next-for-isomorphic-webpack-&quot; id=&quot;whats-next-for-isomorphic-webpack-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Whats next for &lt;em&gt;isomorphic-webpack&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#whats-next-for-isomorphic-webpack-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My priority is for isomorphic-webpack to pass the &lt;a href=&quot;https://blog.codinghorror.com/rule-of-three/&quot;&gt;rule of three&lt;/a&gt;. I have approached a number of developers in senior positions at various companies asking for feedback and offering my help working with isomorphic-webpack. I am going to develop the project by responding to the real-life use cases arising from the wider project adoption.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-web-development-future-look-like-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-web-development-future-look-like-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the web development future look like in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-web-development-future-look-like-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am seeing an increasing reliance on open-source projects and focus on a better developer experience (DX). JavaScript in particular has a thriving open-source module ecosystem with an avg. growth of 423 packages per day. This is an astonishing number, far ahead of the closest alternatives (2nd, Maven Central (Java) – 172/ day, 3rd Packagist (PHP) – 109/day). (Statistics from &lt;a href=&quot;http://www.modulecounts.com/&quot;&gt;http://www.modulecounts.com/&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Behind these numbers there hides the good and the bad: the good is that there are more developers that are willing to share their code with the community. The bad is that there are a lot of packages that perform the same function. For example, there are &lt;a href=&quot;https://github.com/gajus/sister#similar-libraries&quot;&gt;over 100 packages&lt;/a&gt; that implement an &amp;quot;event emitter&amp;quot; pattern! In addition, you can find many low quality packages, as well as a lot of abandoned packages.&lt;/p&gt;
&lt;p&gt;I hope to see more collaboration in the open-source world, more community driven development and maintenance of the existing projects.&lt;/p&gt;
&lt;p&gt;Furthermore, JavaScript has a growing number of projects focused on the developer experience, e.g. webpack enables &lt;a href=&quot;https://survivejs.com/webpack/appendices/hmr/&quot;&gt;Hot Module Replacement (HMR)&lt;/a&gt;, &lt;a href=&quot;https://github.com/storybooks/react-storybook&quot;&gt;react-storybook&lt;/a&gt; sandboxes UI component development and &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; enables inspection of Redux application state, just to name a few.&lt;/p&gt;
&lt;p&gt;This is super important – after all, good DX is what &amp;quot;recruits&amp;quot; the new talents, it is what makes companies to adopt the language. However, I&amp;#39;d like to see a wider adoption of strict code styles, usage of immutable constructs and strict-type checking.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avoid learning theory. Focus on building small programs. Learn as you iterate. Enjoy.&lt;/p&gt;
&lt;p&gt;I am seeing so many developers who are learning theory by heart without applying it. Its just not right. You need to enjoy the learning process. A simple way to enjoy whatever you are doing is to observe the results. A simple way to observe the results is to start small (&amp;quot;Hello, World!&amp;quot;), iterate adding new features and researching theory as you proceed. Make your code open-source, promote it, seek feedback. I do this every day.&lt;/p&gt;
&lt;p&gt;When I just started learning JavaScript, I have created a profile on a popular freelancing website. I have sought for small projects. Specifically, I was looking for: small scale, not time-sensitive projects with an existing technical leader.&lt;/p&gt;
&lt;p&gt;I would contact the author and introduce myself as a &amp;quot;good overall developer with experience in XYZ, but no experience in JavaScript&amp;quot;. I offered to deliver their project at a friction of the price at an agreed time frame. This was never about money. This was about me creating a product that someone will use, making connections, getting feedback from the professionals and learning from the real-life requirements.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Evgeny Poberezkin. He is doing revolutionary work in the JSON domain. His package &lt;a href=&quot;https://github.com/epoberezkin/ajv&quot;&gt;Ajv&lt;/a&gt; is becoming an industry-wide standard for validating JSON schemes. Furthermore, I know that he is working on new and exciting things.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Gajus! It&amp;#39;s more often than not that a package of yours finds its way to one of my projects. And isomorphic-webpack is definitely looking like a fresh approach.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/gajus/isomorphic-webpack&quot;&gt;isomorphic-webpack on GitHub&lt;/a&gt; or read Gajus&amp;#39; &lt;a href=&quot;https://medium.com/@gajus/developing-isomorphic-applications-using-webpack-eca814a418ad&quot;&gt;step-by-step article on how to turn an existing application into an isomorphic one&lt;/a&gt; to learn more.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.5.0</title><id>asurvivejswebpackv1502017-01-03t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-150/"></link><updated>2017-01-03T00:00:00Z</updated><content type="html">&lt;p&gt;New year, new chance to write. &lt;a href=&quot;https://survivejs.com/survivejs-webpack-142&quot;&gt;The previous release&lt;/a&gt; put the writing gear back on and it&amp;#39;s time to continue. This time around there are quite a big changes in the content and it&amp;#39;s starting to feel more and more something worth publishing in a paper format.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you aren&amp;#39;t interested in what has changed, &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;skip straight to the book&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You could say the last few weeks were intense. As usual, I started working through my list of things to resolve. The effort escalated fairly fast and I ended up restructuring the entire book to make it easier to handle.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve noticed my sweet spot for a chapter length is between 1-3k words and I&amp;#39;ve structured the book accordingly. So the chapters are shorter, but also more focused. And they have been split over more parts.&lt;/p&gt;
&lt;p&gt;I want to give my special thanks to &lt;a href=&quot;https://twitter.com/sapegin&quot;&gt;Artem Sapegin&lt;/a&gt; for motivating quite a few changes. I take feedback seriously and it&amp;#39;s great to push the book forward especially as you see it going improving.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s still work left to do, but now that the structure feels solid enough, I can focus more and more on content instead of editing.&lt;/p&gt;
&lt;p&gt;If you have specific ideas on what to cover at the book, &lt;a href=&quot;https://github.com/survivejs/webpack/issues&quot;&gt;open an issue&lt;/a&gt;. That will give me a better idea. You can also &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;reach me through Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-5-0&quot; id=&quot;book-improvements-1-5-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.5.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-5-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 234 commits went to the book since the last release. You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.4.2...v1.5.0&quot;&gt;all changes&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; as it&amp;#39;s worth mentioning due to its contribution. Now the AMD module format discussion is here too due to this.&lt;/li&gt;
&lt;li&gt;Explained how to use npm as a task runner.&lt;/li&gt;
&lt;li&gt;Split most of the webpack bits to a chapter of its own as this chapter started feeling too long.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-webpack-&quot; id=&quot;why-webpack-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why Webpack?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-webpack-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;New chapter based on the old &lt;em&gt;Webpack Compared&lt;/em&gt; information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-started&quot; id=&quot;getting-started&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Started&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-started&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ported modules to ES6 format given webpack 2 supports that out of the box.&lt;/li&gt;
&lt;li&gt;Added a section about useful &lt;em&gt;html-webpack-plugin&lt;/em&gt; extensions.&lt;/li&gt;
&lt;li&gt;Added a section about useful development plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-configuration&quot; id=&quot;splitting-configuration&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Configuration&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-configuration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained &lt;code&gt;--env&lt;/code&gt; behavior in greater detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot; id=&quot;automatic-browser-refresh&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Automatic Browser Refresh&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified greatly as I realized it&amp;#39;s possible to split this into two chapters.&lt;/li&gt;
&lt;li&gt;Added a section about how to make module ids more debuggable.&lt;/li&gt;
&lt;li&gt;Added a section about how to make it faster to develop configuration using nodemon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-hot-module-replacement&quot; id=&quot;configuring-hot-module-replacement&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring Hot Module Replacement&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-hot-module-replacement&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New chapter focused on Hot Module Replacement (HMR). Now you actually implement the client-side interface to get the idea better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-javascript&quot; id=&quot;linting-javascript&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting JavaScript&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-javascript&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The earlier linting bits are an early chapter now. You will integrate ESLint to the project early on. I split up a couple of appendices from here to keep this to the point.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#handling-styles-with-webpack&quot; id=&quot;handling-styles-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Handling Styles with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#handling-styles-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This new part encapsulates all styling related concerns. Earlier they were split around the book and there was some duplication. This move allowed me to simplify things quite a bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-styles&quot; id=&quot;loading-styles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Styles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-styles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is the old style chapter renamed and slightly expanded.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#separating-css&quot; id=&quot;separating-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Separating CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#separating-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is the old separating chapter renamed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#eliminating-unused-css&quot; id=&quot;eliminating-unused-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Eliminating Unused CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#eliminating-unused-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There was a little glitch in the old setup that has been fixed now. The purify interface is more flexible now as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-css&quot; id=&quot;linting-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Earlier this was a part of the generic linting chapter, but now it&amp;#39;s focused chapter of its own.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-loaders&quot; id=&quot;understanding-loaders&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding Loaders&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-loaders&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This part replaces the old asset one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loader-definitions&quot; id=&quot;loader-definitions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loader Definitions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loader-definitions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This chapter replaces the old loader definition one. The supported formats chapter was assimilated by others and disappeared entirely.&lt;/li&gt;
&lt;li&gt;Tweaked based on a couple of tips by Tobias so you can see the idea behind the design better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-images&quot; id=&quot;loading-images&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Images&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a tip about dynamic imports.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-fonts&quot; id=&quot;loading-fonts&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Fonts&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-fonts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a section about Font Awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#writing-loaders&quot; id=&quot;writing-loaders&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Writing Loaders&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#writing-loaders&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Moved to this new part as it felt like the right place for the chapter for now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot; id=&quot;building-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Earlier this part was too big so it has been split into a few more focused ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot; id=&quot;enabling-sourcemaps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Enabling Sourcemaps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is the old chapter with a few clarifications here and there. I&amp;#39;m still not completely happy about it and it needs more examples, but those are good goals for the next releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot; id=&quot;splitting-bundles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Bundles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No major changes were made to bundle splitting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#code-splitting&quot; id=&quot;code-splitting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Code Splitting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#code-splitting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Earlier code splitting was explained far too late. Now it&amp;#39;s a part of the main content and you can see the idea better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#processing-with-babel&quot; id=&quot;processing-with-babel&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Processing with Babel&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#processing-with-babel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I realized I had to add a chapter focused on Babel as the information was split around the book. I gathered it here and show how to process the source through Babel. It might be interesting to do a similar chapter for TypeScript if there is interest.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#cleaning-the-build&quot; id=&quot;cleaning-the-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Cleaning the Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#cleaning-the-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is the same old chapter more or less.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#hosting-on-github-pages&quot; id=&quot;hosting-on-github-pages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Hosting on GitHub Pages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#hosting-on-github-pages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a few deployment tips including how to get archives and what other systems exist.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#optimizing-build&quot; id=&quot;optimizing-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Optimizing Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#optimizing-build&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This is a new part focused on build optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minifying-the-build&quot; id=&quot;minifying-the-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minifying the Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minifying-the-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No major changes were required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot; id=&quot;setting-environment-variables&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Setting Environment Variables&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minor cleanup to illustrate the idea better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot; id=&quot;adding-hashes-to-filenames&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Adding Hashes to Filenames&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I pushed all the hashing related bits here. Better than splitting the ideas over the book. Now you get the changes in a single place.&lt;/li&gt;
&lt;li&gt;Explained manifest related ideas in greater detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot; id=&quot;analyzing-build-statistics&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Analyzing Build Statistics&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more analysis tools.&lt;/li&gt;
&lt;li&gt;Added graphics to go with the tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#consuming-packages&quot; id=&quot;consuming-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Consuming Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#consuming-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It felt like the package authoring chapter did too much so I ended up splitting it into two chapters. This gave me a good chance to discuss ideas like aliasing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-packages&quot; id=&quot;authoring-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I did minor cleanup here and the chapter is lighter now that it doesn&amp;#39;t have to cover as much ground as before.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-react&quot; id=&quot;configuring-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Given there&amp;#39;s a Babel chapter now, this one doesn&amp;#39;t need to discuss Babel in great detail anymore. The HMR bit went to an appendix to keep this more focused.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#appendices&quot; id=&quot;appendices&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Appendices&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#appendices&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Since it started to feel that certain content is secondary, it made sense to push it to appendices.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#searching-with-react&quot; id=&quot;searching-with-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Searching with React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#searching-with-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The old code splitting example fit an appendix well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-hot-module-replacement-with-react&quot; id=&quot;configuring-hot-module-replacement-with-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring Hot Module Replacement with React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-hot-module-replacement-with-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This felt like a good appendix. I need to revisit this one to show how to handle react-hot-loader 3 beta.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#writing-eslint-plugins&quot; id=&quot;writing-eslint-plugins&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Writing ESLint Plugins&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#writing-eslint-plugins&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Another good appendix. Writing ESLint plugins went past the book focus so it fit into an appendix.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#customizing-eslint&quot; id=&quot;customizing-eslint&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Customizing ESLint&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#customizing-eslint&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ESLint customization was another topic like that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I still have quite a few smaller tasks to dig through before I am willing to call this 2.0. I have a feeling the current restructuring will pay off nicely in the coming weeks. There are a couple of chapters to write and content to tune.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The current version of the book is beginning to feel solid to me. I&amp;#39;m starting to find a writing style I like and it&amp;#39;s easier to spot what works than earlier. Keep the feedback coming as I can put it to good use.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his. Literally most of the income goes to webpack developers now!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;support webpack through open collective&lt;/a&gt; too.&lt;/blockquote&gt;</content></entry><entry><title>Styletron - Universal, high-performance JavaScript styles - Interview with Ryan Tsao</title><id>astyletronuniversalhighperformancejavascriptstylesinterviewwithryantsao2016-12-26t00:00:00z</id><link href="https://survivejs.com/blog/styletron-interview/"></link><updated>2016-12-26T00:00:00Z</updated><content type="html">&lt;p&gt;Styling is one of those topics that&amp;#39;s under flux. My &lt;a href=&quot;https://survivejs.com/react/advanced-techniques/styling-react/&quot;&gt;React styling chapter&lt;/a&gt; alone covers quite a few approaches and &lt;a href=&quot;https://github.com/MicheleBertoli/css-in-js&quot;&gt;Michele Bertoli&amp;#39;s list&lt;/a&gt; has a lot more.&lt;/p&gt;
&lt;p&gt;There was &lt;a href=&quot;https://survivejs.com/blog/glamor-interview&quot;&gt;an interview on glamor&lt;/a&gt; earlier. It&amp;#39;s time to continue on the theme and check out a solution known as &lt;a href=&quot;http://styletron.js.org/&quot;&gt;Styletron&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/rtsao&quot;&gt;Ryan Tsao&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/73f8205a10da6e826075fdaa42201055?s=200&quot; alt=&quot;Ryan Tsao&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m a software engineer living in San Francisco currently working at Uber on the Web Platform team. I first got into web development at the age of 12 when, for whatever reason, I decided that I wanted to build a website.
&lt;/p&gt;

&lt;p&gt;The immediacy and accessibility of web programming and its synthesis of coding and visual design and proved tremendously appealing to me and I&amp;#39;ve been hooked ever since. Most recently, I&amp;#39;ve been focused on building JavaScript tools and libraries to support Node.js web application development, particularly in the area of UI components and styles.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-styletron-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-styletron-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Styletron&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-styletron-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Styletron is a small CSS-in-JS utility designed for server and client-rendered web applications with a focus on scalability and high performance. Like other CSS-in-JS libraries, it&amp;#39;s designed to work in conjunction with component-driven web app frameworks.&lt;/p&gt;
&lt;p&gt;This includes React where UI logic, markup, and styling are colocated in JavaScript and partitioned by component rather than separated into HMTL, CSS, and JS. Among other things, Styletron makes it easier to treat your views (styling included) as a pure function of state and not worry about side effects or global namespace collisions in CSS.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-styletron-work-&quot; id=&quot;how-does-styletron-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Styletron&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-styletron-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Styletron produces CSS from styles defined in JavaScript. Many different APIs can be built on top of Styletron, but typically, styles are defined somewhere in the render function of a component in the form of object literals, which Styletron turns into corresponding class names.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; Styletron &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;styletron&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; injectStyle &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;styletron-utils&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Create a Styletron instance&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; styletron &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Styletron&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; className &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;injectStyle&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;styletron&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  display&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;inline-block&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  fontSize&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;1.6em&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Corresponding css is injected into the page&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// and a class name is returned&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;During a page render on the server, Styletron accumulates the injected styles into a cache which is then serialized into a string of HTML which can inlined into &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the server-rendered markup. Since the styles came from the rendered components, the output has no non-critical or unused CSS!&lt;/p&gt;
&lt;p&gt;In the browser, Styletron will hydrate its cache from the server-rendered styles (to avoid re-rendering these on the initial client render) and any additional styles rendered on the client will be injected into the page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; Styletron &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;styletron&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; injectStyle &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;styletron-utils&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// On the server:&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Create a Styletron instance&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; styletron &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Styletron&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Render the app, which results in several `injectStyle` calls&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; appHtml &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;renderApp&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; stylesheets &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; styletron&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getStylesheetsHtml&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`
    &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;stylesheets&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;appHtml&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
  `&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// On the client:&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; serverRenderedStyles &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&apos;_styletron_hydrate_&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Create Styletron instance on the client,&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// hydrating from server-rendered styles&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; styletron &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Styletron&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;serverRenderedStyles&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Inject new styles into the page&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; newClassName &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;injectStyle&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;styletron&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  fontSize&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;24px&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-styletron-differ-from-other-solutions-&quot; id=&quot;how-does-styletron-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Styletron&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-styletron-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The traditional CSS-in-JS method involves a straightforward 1:1 conversion of style objects into corresponding scoped CSS classes. Instead, Styletron takes advantage of a novel approach to generating CSS from JavaScript styles.&lt;/p&gt;
&lt;p&gt;This involves the generation of &amp;quot;virtual CSS classes&amp;quot; that are composed of several underlying atomic, single-declaration classes. As a result, any re-used declaration is shared between all classes, which effectively results in declaration-level deduplication, yielding much smaller CSS output than the traditional CSS-in-JS method.&lt;/p&gt;
&lt;p&gt;For example, given styles for two buttons, we get the following class names and corresponding CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; redButtonClass &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;injectStyle&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;styletron&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  display&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;inline-block&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  fontSize&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;1.6em&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// redButtonClass is `a b c`&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; blueButtonClass &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;injectStyle&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;styletron&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  display&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;inline-block&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  fontSize&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;1.6em&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// blueButtonClass is `d b c`&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// injected CSS is:&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/*
.a { color: red }
.b { display: inline-block }
.c { font-size: 1.6em }
.d { color: blue }
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, since Styletron operates on individual declarations rather than rules, it benefits from more granular memoization which it allows it to avoid extra work.&lt;/p&gt;
&lt;p&gt;In large apps, the total number of declarations can dwarf the number of unique declarations, so the de-duplication that Styletron is able to perform can turn out to be quite significant.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-styletron-&quot; id=&quot;why-did-you-develop-styletron-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Styletron&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-styletron-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The original impetus for creating Styletron was the lack of unopinonated, low-level CSS-in-JS solutions. Many CSS-in-JS solutions provided some mechanism for rendering styles in both the browser and server, but they were tightly coupled with an opinionated, high-level API for defining and consuming styles in components.&lt;/p&gt;
&lt;p&gt;I built Styletron to address this: in fact, the very first implementation of Styletron was essentially just the low-level rendering bits from Aphrodite decoupled from its high-level API and features. Soon after, my interest shifted towards performance and after having the realization of generating atomic CSS, I completely re-implemented Styletron from the ground up.&lt;/p&gt;
&lt;p&gt;This version of Styletron was created for a mobile web application that was built specifically to perform well on smartphones in developing countries, where network performance is often slow and unreliable and every kilobyte of the application can make a difference for users. For this reason Styletron produces the smallest possible CSS output (while being small itself) and is extremely performant at runtime.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although in many ways I think CSS-in-JS is already superior to a conventional CSS/Sass workflow in terms of developer experience, I think the overall developer tooling hasn&amp;#39;t quite caught up yet. So for me, an important focus is area is how to make working with CSS-in-JS even better.&lt;/p&gt;
&lt;p&gt;One thing in particular that I think would be great is type definitions for style object literals, so authoring styles in JavaScript becomes a lot nicer and things like IDE autocomplete become possible. Aside from that, I&amp;#39;m planning further performance optimization and will look into ways to support more CSS features in Styletron. Chrome DevTools integration that makes working with the generated atomic CSS easier would also be awesome.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-styletron-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-styletron-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Styletron&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-styletron-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think across the board, there&amp;#39;s a been a renewed focus on application size and parse times, which can have an outsized impact on mobile devices. In the JS module bundler space, bundle-splitting and tree-shaking have been much-heralded features.&lt;/p&gt;
&lt;p&gt;Lightweight and fast React alternatives such as Preact and Inferno have garnered massive amounts of traction recently. The Google AMP project, which places restrictions on page size and completely forbids external CSS assets to ensure fast load times on mobile devices, is also reflection of this greater trend of web page performance.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These days, amidst the ever-growing myriad of web frameworks and tools, I can see how choice paralysis or fatigue might set in, especially for folks new to web development. Everything seems to change so fast it&amp;#39;s borderline impossible to stay on top of everything.&lt;/p&gt;
&lt;p&gt;What I find helpful is to try and avoid a mindset of newer is automatically better. As with any abstraction, I think all web frameworks and libraries involve trade-offs to some degree; to get benefits in one area, usually there&amp;#39;s something given up in exchange somewhere else. Seeking out and understanding what those trade-offs are is super valuable in deciding to use an abstraction.&lt;/p&gt;
&lt;p&gt;Unfortunately, it&amp;#39;s sometimes hard to find out what these may be because it&amp;#39;s less fun to talk about problems and they aren&amp;#39;t always published along with the usual bullet points of features/benefits. But ultimately, it&amp;#39;s okay to stick with simple, tried-and-true stuff; newer things may even introduce unnecessary complexity.&lt;/p&gt;
&lt;p&gt;I think part of the beauty of web development is you can just start building without much setup, all you really need is a web browser and a text editor. And in my eyes, you can&amp;#39;t really go wrong since in my experience, just building things is the best way to learn and it&amp;#39;s the mistakes made along the way that have often provided the most valuable experience.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kyle Mathews, who has been working on Gatsby, a React-powered static site generator.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Check out my blog post &lt;a href=&quot;https://ryantsao.com/blog/virtual-css-with-styletron&quot;&gt;Virtual CSS with Styletron&lt;/a&gt; if you&amp;#39;re interested in learning more about how Styletron works and the benefits it provides. I&amp;#39;m excited that other libraries in the space have started to adopt similar strategies and am looking forward to seeing more innovation in the CSS-in-JS space.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Ryan! It is cool to see innovation in the styling space and I agree with your observation about the general direction of the web. Mobile is becoming more and more important.&lt;/p&gt;
&lt;p&gt;Remember to &lt;a href=&quot;https://github.com/rtsao/styletron&quot;&gt;check Styletron on GitHub&lt;/a&gt; to learn more about the approach and get started.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.4.2</title><id>asurvivejswebpackv1422016-12-19t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-142/"></link><updated>2016-12-19T00:00:00Z</updated><content type="html">&lt;p&gt;Alright, here we go again. It has been a while since &lt;a href=&quot;https://survivejs.com/survivejs-webpack-131&quot;&gt;the previous release&lt;/a&gt; and it&amp;#39;s time for a big Winter update!&lt;/p&gt;
&lt;p&gt;Quite a bit has happened since. I spent most of the intermediate time in consulting and training mode. Since I became a part of webpack core team, I&amp;#39;ve been pushing things forward in my own way. This has meant coordinating efforts around &lt;a href=&quot;https://webpack.js.org/&quot;&gt;the new site of webpack&lt;/a&gt; and developing certain technology related to it.&lt;/p&gt;
&lt;p&gt;We also launched something known as &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;open collective for webpack&lt;/a&gt;. This makes it possible for individuals and companies to support the project in form of donations. The overall theme of this year has been in making webpack more sustainable as a project and scaling it from one person to many. By the looks of it we are actually succeeding in this goal.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can get a better idea of the type of training I have been doing at &lt;a href=&quot;https://presentations.survivejs.com/&quot;&gt;my presentation site&lt;/a&gt;. See especially &lt;a href=&quot;http://presentations.survivejs.com/advanced-webpack/&quot;&gt;my slides on advanced webpack&lt;/a&gt; as those complement the book material well. It probably goes without saying, but if you are interested in training on these topics, you know who to poke.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This time around I focused especially on getting the book up to date with upcoming webpack 2. The book uses webpack 2 syntax now. In addition, I went through quite a few issues I have on my list. All of this has translated into a nice list of improvements.&lt;/p&gt;
&lt;p&gt;There is one new chapter that was gained through splitting &lt;a href=&quot;https://survivejs.com/webpack/styling/separating-css/&quot;&gt;Separating CSS&lt;/a&gt; into two shorter ones. The existing ones should be better than before as well. Thanks to the changes introduced with webpack 2, I could simply drop a part of the content.&lt;/p&gt;
&lt;p&gt;Webpack 2 performs validation and simplifies environment handling greatly. Also the configuration format is a little neater in certain parts although there is still work left for webpack 3. I believe we can improve the way you configure webpack with little effort.&lt;/p&gt;
&lt;p&gt;I still have quite a few issues on my list. This includes a couple of chapters and further improvements to the current content. If you have specific ideas, &lt;a href=&quot;https://github.com/survivejs/webpack/issues&quot;&gt;open an issue&lt;/a&gt;. That will give me a better idea on what kind of content to develop for the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-4-2&quot; id=&quot;book-improvements-1-4-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.4.2&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-4-2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 192 commits went to the book since the last release. You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.3.0...v1.4.2&quot;&gt;all changes&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote for clarity, mostly the same.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added more upcoming tools.&lt;/li&gt;
&lt;li&gt;Expanded on core ideas of webpack.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-started&quot; id=&quot;getting-started&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Started&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-started&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bumped to webpack 2 beta. This applies to other content too.&lt;/li&gt;
&lt;li&gt;Noted that entries have to resolve against files. Directories won&amp;#39;t work unless they resolve to &lt;em&gt;index.js&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned plugins that work well with &lt;em&gt;html-webpack-plugin&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-configuration&quot; id=&quot;splitting-configuration&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Configuration&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-configuration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained &lt;em&gt;webpack-merge&lt;/em&gt; in greater detail so it&amp;#39;s less of a black box.&lt;/li&gt;
&lt;li&gt;Simplified environment passing to benefit from webpack 2 &lt;code&gt;--env&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Explained why configuration composition is a good thing.&lt;/li&gt;
&lt;li&gt;Renamed &lt;em&gt;lib/parts.js&lt;/em&gt; as &lt;em&gt;webpack.parts.js&lt;/em&gt;. This feels more natural way to handle it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot; id=&quot;automatic-browser-refresh&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Automatic Browser Refresh&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote for clarity.&lt;/li&gt;
&lt;li&gt;Disabled &lt;code&gt;multiStep&lt;/code&gt; option of &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; as that doesn&amp;#39;t work yet with webpack 2 and &lt;em&gt;html-webpack-plugin&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot; id=&quot;enabling-sourcemaps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Enabling Sourcemaps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the difference between inline and separate sourcemaps. There&amp;#39;s still work to do, but it&amp;#39;s a little better now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot; id=&quot;building-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minifying-build&quot; id=&quot;minifying-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minifying Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minifying-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned UglifyJS alternatives.&lt;/li&gt;
&lt;li&gt;Mentioned gotchas related to minifying CSS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot; id=&quot;setting-environment-variables&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Setting Environment Variables&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote the introduction so it&amp;#39;s easier to see why &lt;code&gt;DefinePlugin&lt;/code&gt; is valuable.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;code&gt;webpack.EnvironmentPlugin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/compression-webpack-plugin&quot;&gt;compression-webpack-plugin&lt;/a&gt; as that&amp;#39;s handy for generating gzips.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot; id=&quot;splitting-bundles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Bundles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned about &lt;strong&gt;code splitting&lt;/strong&gt; and explained the difference.&lt;/li&gt;
&lt;li&gt;Added an alternative technique for figuring out which dependencies should go to the vendor bundle.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot; id=&quot;adding-hashes-to-filenames&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Adding Hashes to Filenames&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned hash slicing trick (&lt;code&gt;[chunkhash:8]&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Added a concrete example showing how to use placeholders.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#separating-css&quot; id=&quot;separating-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Separating CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#separating-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that you should &lt;strong&gt;not&lt;/strong&gt; use &lt;code&gt;ExtractTextPlugin&lt;/code&gt; for development. It&amp;#39;s not compatible with HMR yet, although there&amp;#39;s a PR in progress.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#eliminating-unused-css&quot; id=&quot;eliminating-unused-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Eliminating Unused CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#eliminating-unused-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This chapter was a part of &lt;a href=&quot;https://survivejs.com/webpack/styling/separating-css/&quot;&gt;Separating CSS&lt;/a&gt; earlier. Now it is a chapter of its own.&lt;/li&gt;
&lt;li&gt;There was a little glitch in the approach that made it to match against &lt;em&gt;node_modules&lt;/em&gt;. This has been fixed and it gives very compact results now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot; id=&quot;analyzing-build-statistics&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Analyzing Build Statistics&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified greatly thanks to webpack 2 &lt;code&gt;--env&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added more analysis tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-assets&quot; id=&quot;loading-assets&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Assets&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-assets&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loader-definitions&quot; id=&quot;loader-definitions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loader Definitions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loader-definitions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote for clarity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-images&quot; id=&quot;loading-images&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Images&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained in greater detail.&lt;/li&gt;
&lt;li&gt;Added more techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-fonts&quot; id=&quot;loading-fonts&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Fonts&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-fonts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-chunks&quot; id=&quot;understanding-chunks&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding Chunks&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-chunks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote using webpack 2 &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;dynamic imports&lt;/a&gt;. This simplified the implementation somewhat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting&quot; id=&quot;linting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;code&gt;eslint --init&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added more techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-packages&quot; id=&quot;authoring-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote to reflect the current situation. More tools and techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-react&quot; id=&quot;configuring-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/create-react-app&quot;&gt;create-react-app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added Babel related presets and plugins that are useful with React.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have next two weeks to dedicate to this work. It is quite possible we will see an intermediate release or two before 2.0. But at least now we are in sync with webpack so that&amp;#39;s great!&lt;/p&gt;
&lt;p&gt;After 2.0, I can give the React book a big refresh.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given webpack 2 isn&amp;#39;t actually out yet, there still may be some rough edges. I&amp;#39;ve tried to annotate these as well as I can, but there still may be something. I&amp;#39;ll fix potential issues in the next release.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his. Literally most of the income goes to webpack developers now!&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;You can &lt;a href=&quot;https://opencollective.com/webpack&quot;&gt;support webpack through open collective&lt;/a&gt; too.&lt;/blockquote&gt;</content></entry><entry><title>Inferno - Blazing fast, React-like UI library - Interview with Dominic Gannaway</title><id>ainfernoblazingfastreactlikeuilibraryinterviewwithdominicgannaway2016-12-12t00:00:00z</id><link href="https://survivejs.com/blog/inferno-interview/"></link><updated>2016-12-12T00:00:00Z</updated><content type="html">&lt;p&gt;One of the cool things about React is that it managed to pull a lot of people into the component world. Even though there was initial resistance, the ideas seem to have stuck. Maybe the question is, what next?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://infernojs.org/&quot;&gt;Inferno&lt;/a&gt;, a blazing fast React-like UI library by &lt;a href=&quot;https://twitter.com/trueadm&quot;&gt;Dominic Gannaway&lt;/a&gt; might be one of the answers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/5d645ce683649c2332294ea6fcc8b7a2?s=200&quot; alt=&quot;Dominic Gannaway&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;
I&amp;#39;m currently a Software Development Engineer at Tesco, based in London.

I&amp;#39;ve been developing and writing actual software since I was 15 years old, but I was first interested in coding when I was around 7 years old. (It was Visual Basic 5 back then!)
&lt;/p&gt;

&lt;p&gt;I&amp;#39;m a huge fan and advocate of web technologies, and I&amp;#39;ve always enjoyed optimising and making things fast. These days I spend a lot of time building complex UIs, middlewares, tooling and all the other things you would associate with a full-stack JavaScript engineer.&lt;/p&gt;
&lt;p&gt;In my free time, I enjoy being a Dad (I&amp;#39;ve got two kids) and spending time with my family. I also enjoying working on open-source projects and I love to attend meetups and conferences when I get the chance.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-inferno-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-inferno-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Inferno&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-inferno-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trueadm/inferno&quot;&gt;Inferno&lt;/a&gt; is a JavaScript library that helps developers build user interfaces for websites and apps. Inferno intentionally builds on the same API as React, so developers do not have to invest time/money in learning a completely new way of building things.&lt;/p&gt;
&lt;p&gt;In many ways I think React has been a game-changer for the web UI community. It scrapped the old ways of doing things like we&amp;#39;d been doing them for years on the server (MVC for example) and offered an approach that inspired many different patterns and design discussions; e.g., one-way data flow, components over templates, JSX, Virtual DOM.&lt;/p&gt;
&lt;p&gt;Inferno was designed to be really, &lt;em&gt;really&lt;/em&gt; fast and lightweight while offering a bunch of out-of-the-box features that makes working with a React-like project a bit nicer.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s also a big push right now to improve the experience on mobile and it&amp;#39;s good to see so many people taking notice – as, in my opinion, mobile performance has been really poor for a long time. Inferno started off nearly 2 years ago as my attempt to fix the problems with mobile performance.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-inferno-work-&quot; id=&quot;how-does-inferno-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Inferno&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-inferno-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like many other libraries and frameworks, Inferno uses a Virtual DOM. Virtual DOM is a tiny abstraction above the real DOM that provides Inferno with a list of instructions on what the UI will look like; so that when a user creates components or virtual DOM nodes (&lt;code&gt;VNodes&lt;/code&gt;), they are describing how they&amp;#39;d like their UI to look.&lt;/p&gt;
&lt;p&gt;Inferno takes all this information and works out the least amount of changes necessary to update the webpage from one state to the next. It makes this process fast by leveraging several optimisations that modern JavaScript engines provide; along with the mounds of trial-and-error it required to improve &amp;quot;touching&amp;quot; the DOM.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;might get a bit technical&lt;/em&gt;, but I&amp;#39;ve been asked about it plenty of times so I thought it would be best to share my experiences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inferno tries to ensure as many object property callsites are &lt;a href=&quot;http://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html&quot;&gt;monomorphic&lt;/a&gt; as possible.&lt;/li&gt;
&lt;li&gt;Inferno avoids using prototype objects with constructors and instead favours object literals with minimal properties. Inferno uses utility/helper functions to mutate/access these objects rather than adding methods onto the object itself. This had a noticeble impact in non-JIT (just in time) compilation or on mobile devices with low memory.&lt;/li&gt;
&lt;li&gt;Rather than &amp;quot;diff&amp;quot; virtual DOM against the real DOM, Inferno instead diffs the virtual DOM against the last virtual DOM created. This also had a noticeable impact on performance.&lt;/li&gt;
&lt;li&gt;Inferno tries to reuse properties, objects and DOM nodes whenever possible. Creating too many objects can be expensive on memory, the GC (garbage collector) and overall performance. For example, rather than create extra properties on &lt;code&gt;VNode&lt;/code&gt; objects, Inferno reuses previous properties (even if the property name doesn&amp;#39;t really align anymore with what&amp;#39;s being put within it). Furthermore, DOM nodes are also stored and recycled, reducing the cost of having to recreate large DOM trees and computing all the internal visual calculations again.&lt;/li&gt;
&lt;li&gt;Inferno avoids touching the DOM as often as it can. Instead, it opts to only touch a small subset of properties/methods on DOM nodes (&lt;code&gt;firstChild&lt;/code&gt;, &lt;code&gt;lastChild&lt;/code&gt;, &lt;code&gt;parentNode&lt;/code&gt;, &lt;code&gt;nextSibling&lt;/code&gt;, &lt;code&gt;createElement&lt;/code&gt;, &lt;code&gt;removeChild&lt;/code&gt;, &lt;code&gt;insertBefore&lt;/code&gt;, &lt;code&gt;replaceChild&lt;/code&gt;). Inferno avoids using &lt;code&gt;childNodes&lt;/code&gt; and &lt;code&gt;innerHTML&lt;/code&gt; as these methods tend to be very expensive. A nice optimisation trick to clear a DOM&amp;#39;s content was to use &lt;code&gt;textContent(&amp;#39;&amp;#39;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Inferno prefers the usage of helper functions that all get inlined by a JIT compiler – for example, rather than doing &lt;code&gt;foo === null&lt;/code&gt;, doing &lt;code&gt;isNull(foo)&lt;/code&gt;. We found that this really helped improve bundle size, and in some cases it also improved JIT performance (when the &lt;a href=&quot;https://docs.google.com/document/d/1VoYBhpDhJC4VlqMXCKvae-8IGuheBGxy32EOgC2LnT8/edit&quot;&gt;inline budget for inlining hadn&amp;#39;t been fully consumed&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Extensive checking was done to ensure that deoptimisations (&amp;quot;deopts&amp;quot;, where a JIT compiler can&amp;#39;t compile something) were kept to the absolute minimum. The Inferno team used benchmarks, profiling tools (IRHydra 2, Chrome Dev Tools) and lots of spikes re-writes on various parts of the codebase as way of constantly finding ways to remove deopts.&lt;/li&gt;
&lt;li&gt;Inferno uses its own event system for certain events, which allows it to choose a delegated event or an inline event depending on the type of event. Delegated events can offer a significant performance and memory improvement over non-delegated events in cetain use-cases.&lt;/li&gt;
&lt;li&gt;Inferno&amp;#39;s keyed children sorting algorithm is highly efficient and yields the fewest possible DOM mutations to get from A to B (thanks to the &lt;a href=&quot;https://github.com/ivijs/ivi&quot;&gt;great work&lt;/a&gt; by &lt;a href=&quot;https://github.com/localvoid&quot;&gt;localvoid&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are plenty more optimisations going on under the hood, so I&amp;#39;d recommend reading the sourcecode if anyone is interested in learning more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-inferno-differ-from-other-solutions-&quot; id=&quot;how-does-inferno-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Inferno&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-inferno-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inferno doesn&amp;#39;t try to be too different from React. Very much like Preact, Inferno enjoys having lots of similarities with React. Inferno supports many different ways of creating UIs, such as: JSX (Inferno has its own Babel plugin for this), HyperScript and good ol&amp;#39; &lt;code&gt;createElement()&lt;/code&gt; from React.&lt;/p&gt;
&lt;p&gt;Inferno differs in that it offers some additional features that React or Preact don&amp;#39;t have (at the expense of some file size):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tiny in size; in fact, only 8kb min+gzip. It parses and evaluates as quickly as anything in the browser (almost the same as that of Preact). It&amp;#39;s perfect for mobile!&lt;/li&gt;
&lt;li&gt;Lifecycle events like &lt;code&gt;shouldComponentUpdate&lt;/code&gt; and &lt;code&gt;componentDidMount&lt;/code&gt; on functional components.&lt;/li&gt;
&lt;li&gt;Better modularisation of core features. For example, &lt;code&gt;createClass&lt;/code&gt; isn&amp;#39;t in Inferno&amp;#39;s core; it&amp;#39;s a separate package called &lt;code&gt;inferno-create-class&lt;/code&gt;. The same applies for ES2015 class components. This helps reduce filesize for people who simply don&amp;#39;t need to carry things that they will never use.&lt;/li&gt;
&lt;li&gt;Inferno doesn&amp;#39;t have an InfernoDOM - the DOM is baked into the core. Inferno will never have an Inferno Native, so it made a lot of sense (improved performance and bundle size by unifying the two).&lt;/li&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/trueadm/inferno/blob/master/README.md#linkevent-package-inferno&quot;&gt;&lt;code&gt;linkEvent&lt;/code&gt;&lt;/a&gt; helper for passing &lt;code&gt;state&lt;/code&gt;/&lt;code&gt;props&lt;/code&gt;/&lt;code&gt;this&lt;/code&gt; to an event callback without needing to use arrow functions or &lt;code&gt;bind()&lt;/code&gt;. Not only is it a lot faster than the alternatives, but you can use it on functional components too:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; Inferno&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; linkEvent &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;inferno&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; event&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;validateValue&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;MyComponent&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;linkEvent&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; handleClick&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-inferno-&quot; id=&quot;why-did-you-develop-inferno-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Inferno&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-inferno-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I developed Inferno because (1) curiosity/research and (2) I ran into too many performance issues too often while trying to build a highly complex mobile web app.&lt;/p&gt;
&lt;p&gt;Two years ago, when this project started, I was really frustrated with the mentality that a lot of the community had in regards to mobile performance. I was commonly told that &amp;quot;mobile is fast enough&amp;quot; or &amp;quot;people simply don&amp;#39;t need aything faster&amp;quot; or &amp;quot;X is already as fast as it gets&amp;quot;.&lt;/p&gt;
&lt;p&gt;Thankfully, that mentality has changed since then and now people are starting to become more aware of the real problem users are having; especially in emerging countries with poor web experiences on mobile.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The focus for me and the rest of the Inferno team is to get 1.0 released before Christmas (along with the website). I have some big plans for 2017, but it&amp;#39;s a bit too early to announce them right now. :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-inferno-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-inferno-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Inferno&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-inferno-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think there is going to be a big shift towards making things smaller and faster. I think we&amp;#39;ve only just begun tapping into the potential of JavaScript compiling. With the work that Rich Harris has done with &lt;a href=&quot;https://svelte.technology/&quot;&gt;Svelte&lt;/a&gt;, along with the work by the Ember and Angular guys on AoT (ahead of time) compiling, we&amp;#39;ll see WebAssembly compilation start to take off too. I think 2017 will be an interesting year for the future of web development.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-who-are-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-who-are-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers who are getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-who-are-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Get into open source, either on an existing project or start your own. You&amp;#39;ll learn huge amounts from the experience and get to tap into a huge community of very smart people.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/developit&quot;&gt;Jason Miller&lt;/a&gt; and &lt;a href=&quot;https://github.com/rtsao&quot;&gt;Ryan Tsao&lt;/a&gt;. They&amp;#39;re both doing fantastic work!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d like to say a big thank you to the team behind making Inferno awesome. &lt;a href=&quot;https://github.com/Havunen&quot;&gt;Sampo Kivistö&lt;/a&gt;, &lt;a href=&quot;https://github.com/nightwolfz&quot;&gt;Ryan M&lt;/a&gt;, &lt;a href=&quot;https://github.com/LukeSheard&quot;&gt;Luke Sheard&lt;/a&gt;, &lt;a href=&quot;https://github.com/localvoid&quot;&gt;Boris Kaul&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/lukeed&quot;&gt;Luke Edwards&lt;/a&gt; and many others! They&amp;#39;ve been great.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Dominic! If there&amp;#39;s one thing that sets Inferno apart from my point of view, it&amp;#39;s how it expands function based components through a beautifully designed hook system. That solves a major pain point for me even if it&amp;#39;s not standard React code.&lt;/p&gt;
&lt;p&gt;You should check out &lt;a href=&quot;https://infernojs.org/&quot;&gt;the official site&lt;/a&gt; and &lt;a href=&quot;https://github.com/trueadm/inferno/&quot;&gt;Inferno on GitHub&lt;/a&gt; to learn more about the project and those hooks. Maybe 2017 is the big year for Inferno.&lt;/p&gt;
</content></entry><entry><title>Svelte - The magical disappearing UI framework - Interview with Rich Harris</title><id>asveltethemagicaldisappearinguiframeworkinterviewwithrichharris2016-12-07t00:00:00z</id><link href="https://survivejs.com/blog/svelte-interview/"></link><updated>2016-12-07T00:00:00Z</updated><content type="html">&lt;p&gt;If jQuery gave us proper control over the DOM, and React brought components to the limelight, what&amp;#39;s next? &lt;a href=&quot;https://svelte.technology/&quot;&gt;Svelte&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/Rich_Harris&quot;&gt;Rich Harris&lt;/a&gt; might be an answer to this conundrum. You might remember him from tools such as &lt;a href=&quot;https://buble.surge.sh&quot;&gt;Bublé&lt;/a&gt; and &lt;a href=&quot;http://rollupjs.org&quot;&gt;Rollup&lt;/a&gt;. Read on to learn what Svelte is about.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/329f9d32fe20b186838ee237d3eb2d43?s=200&quot; alt=&quot;Rich Harris&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m an interactive editor at &lt;a href=&quot;https://theguardian.com&quot;&gt;theguardian.com&lt;/a&gt;, based in New York City. My background is in journalism, and my day job is to come up with new ways to use web technologies in the service of storytelling. A key part of that is building the tools that we need to create rich and performant applications on tight deadlines.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-svelte-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-svelte-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Svelte&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-svelte-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On one level, Svelte is a UI framework – if you&amp;#39;ve heard of tools like React, Vue or Ractive, it tackles the same problems they do. It allows you to build applications in a declarative, component-driven way, rather than creating a hairball of imperative DOM manipulation.&lt;/p&gt;
&lt;p&gt;But on another way, it&amp;#39;s a complete rethink of how we approach the problem: rather than being a piece of software that sits between you and the browser, giving you a set of abstractions to work with, it essentially &lt;em&gt;writes your app for you&lt;/em&gt; in the most efficient way possible. The result is faster loading, faster running apps, with next to zero waste.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-svelte-work-&quot; id=&quot;how-does-svelte-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Svelte&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-svelte-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s less magical than it sounds. You write components in HTML files, which can optionally include &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements to encapsulate CSS and behaviours. Svelte&amp;#39;s template syntax takes a few minutes to learn.&lt;/p&gt;
&lt;p&gt;These component files are converted into modules by Svelte&amp;#39;s compiler, using the &lt;a href=&quot;https://github.com/sveltejs/svelte-cli&quot;&gt;command line interface&lt;/a&gt; or one of the various &lt;a href=&quot;https://github.com/sveltejs/svelte/#svelte&quot;&gt;build tool integrations&lt;/a&gt;. These modules contain what you might call &amp;#39;vanilla JS&amp;#39; – i.e. low-level DOM manipulation specific to your app – meaning there&amp;#39;s no data-binding or DOM diffing or any of the other tricks frameworks have to use to render your UI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HelloWorld.html&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Hello {{name}}!&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;app.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; HelloWorld &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./HelloWorld.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; app &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  target&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;main&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  data&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;world&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-set&quot; &gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;SurviveJS&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-svelte-differ-from-other-solutions-&quot; id=&quot;how-does-svelte-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Svelte&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-svelte-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To the end user, the biggest difference is speed. Svelte is lighter and faster than alternative solutions because the browser has a lot less work to do (benchmarks coming soon!). Our &lt;a href=&quot;https://svelte-todomvc.surge.sh/&quot;&gt;TodoMVC implementation&lt;/a&gt; is just 3.6 kB gzipped, which is tiny.&lt;/p&gt;
&lt;p&gt;For the developer, the advantages are more subjective. Svelte has a very simple API and is designed to behave very predictably – for example, the DOM updates synchronously whenever data changes. It has some productivity-boosting features borrowed from Ractive, like scoped styles and computed properties.&lt;/p&gt;
&lt;p&gt;One of the nice features about Svelte&amp;#39;s approach is that it&amp;#39;s inherently very easy to adopt incrementally, without a big bang rewrite. Ordinarily if you wanted to move from one framework to another there&amp;#39;d be a transition period during which your app depended on both, which is terrible.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-svelte-&quot; id=&quot;why-did-you-develop-svelte-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Svelte&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-svelte-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Guilt, partly. The JS community has become hyper-aware in the last two or three months about the cost of shipping too much JavaScript – it&amp;#39;s not just about the download time, it&amp;#39;s also about the parse/eval time, which on mobile has a real impact for a lot of people. As the creator of Ractive, I&amp;#39;d been unwittingly contributing to the problem, just like every framework author.&lt;/p&gt;
&lt;p&gt;As soon as I had the idea for Svelte – &amp;#39;what if the framework was actually just a compiler?&amp;#39; – I could barely sleep until I&amp;#39;d written the first proof-of-concept. I don&amp;#39;t think I&amp;#39;ve ever been this excited about one of my projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s a huge amount of work still to do – server-side rendering and progressive enhancement, transitions, routing, plus all the documentation and examples that go along with it. We&amp;#39;ll be very busy over the next few weeks.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m particularly keen to explore a couple of areas that Svelte opens up – statically analysing CSS in the context of the markup it&amp;#39;s attached to, and WYSIWYG component editors that can create dependency-free widgets and applications. I think there are some tremendous opportunities that only really become practical when you have a zero-runtime framework and template-driven components.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-svelte-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-svelte-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Svelte&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-svelte-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What Svelte does is an example of &amp;#39;ahead-of-time&amp;#39; compilation, or AoT. (It&amp;#39;s not the only framework doing AoT – Angular 2 has also embraced similar techniques – though as far as I know Svelte is the first to take the idea this far.) I&amp;#39;ve seen a huge amount of interest in AoT, and I think there&amp;#39;s a lot of undiscovered territory, and not just in UI. I&amp;#39;m excited to see how that develops.&lt;/p&gt;
&lt;p&gt;A lot of people have asked me if Svelte&amp;#39;s techniques could be used with JSX. Unfortunately, other framework authors have reached the same conclusion that I did – because JSX is &amp;#39;just JavaScript&amp;#39;, no compiler could ever have the same guarantees about the shape of your app, meaning there will always need to be some runtime reconciliation process. So I think we might see a resurgence of interest in non-JSX approaches to building apps.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you try to learn web development by reading blog posts about new technologies you will drown in information. Instead, find someone who is a bit further along on their programming journey and befriend them. Just build stuff badly – hack it together any way you can – and ask them for help when you need it. Both of you will become better programmers as a result.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/trueadm&quot;&gt;Dominic Gannaway&lt;/a&gt; – here&amp;#39;s the author of Inferno, which is probably the fastest UI framework in the world. Until Svelte overtakes it, at least.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Rich! It&amp;#39;s cool to see how changing the axioms and identifying true problems can lead to new solutions that change the way we think about web development. There is always room for innovation.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://svelte.technology/&quot;&gt;learn more about Svelte at their site&lt;/a&gt;. There&amp;#39;s also a &lt;a href=&quot;https://svelte.technology/repl/&quot;&gt;REPL you can use to try out the syntax&lt;/a&gt;. Remember to &lt;a href=&quot;https://github.com/sveltejs/svelte&quot;&gt;star the project&lt;/a&gt; as well as everyone likes stars.&lt;/p&gt;
</content></entry><entry><title>webpack-merge - Taming Webpack Configuration - Interview with Juho Vepsäläinen</title><id>awebpackmergetamingwebpackconfigurationinterviewwithjuhovepsalainen2016-11-29t00:00:00z</id><link href="https://survivejs.com/blog/webpack-merge-interview/"></link><updated>2016-11-29T00:00:00Z</updated><content type="html">&lt;p&gt;It&amp;#39;s almost funny how far a simple idea can fly sometimes. When writing my first book, I ran into the problem of configuring webpack. I prefer to keep my configuration in a single file and duplication goes against my nature. As a result &lt;a href=&quot;https://www.npmjs.com/package/webpack-merge&quot;&gt;webpack-merge&lt;/a&gt; was born.&lt;/p&gt;
&lt;p&gt;Given &lt;em&gt;webpack-merge&lt;/em&gt; reached 1.0 milestone recently, I&amp;#39;m going to talk a bit more about the project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-webpack-merge-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-webpack-merge-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;webpack-merge&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-webpack-merge-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s easiest to understand &lt;em&gt;webpack-merge&lt;/em&gt; in terms of input and output. If you give a standard &lt;code&gt;merge&lt;/code&gt; function a structure containing arrays and objects, it will override them like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  entry&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./main.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot; &gt;/\.css$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;style&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  entry&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./other.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot; &gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;babel&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Avoid mutating a&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Object.assign({}, a, b);&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  entry&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./other.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot; &gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;babel&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the default output isn&amp;#39;t that useful. If you wanted useful output, you would have to merge very carefully and apply &lt;code&gt;concat&lt;/code&gt; here and there. That approach has potential to get messy very fast.&lt;/p&gt;
&lt;p&gt;What if you could do just this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  entry&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./main.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot; &gt;/\.css$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;style&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  entry&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./other.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot; &gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;babel&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// merge(a, b);&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  entry&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;./main.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;./other.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot; &gt;/\.css$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;style&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot; &gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;babel&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks far more useful. This is essentially what &lt;em&gt;webpack-merge&lt;/em&gt; does. It concatenates arrays (append by default) and merges objects while creating a new object to play with.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;webpack-merge&lt;/em&gt; implements also something known as &lt;em&gt;smart merging&lt;/em&gt;. This process folds your webpack configuration into a smaller format (i.e., multiple loader definitions might become a single). There are also strategies available to allow you to control the merging process so instead of appending it might prepend or replace content.&lt;/p&gt;
&lt;p&gt;Interestingly enough I&amp;#39;ve begun to find use for &lt;em&gt;webpack-merge&lt;/em&gt; beyond webpack as configuration management is a common concern. Whenever you have configuration, you might want to &lt;em&gt;compose&lt;/em&gt; it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-webpack-merge-work-&quot; id=&quot;how-does-webpack-merge-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;webpack-merge&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-webpack-merge-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It uses &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt; internally. There are certain webpack specific portions, but I&amp;#39;ve left the heavy lifting to lodash. A recent rewrite by Kyle Herock gave it a little performance boost even while improving webpack 2 compatibility.&lt;/p&gt;
&lt;p&gt;The rewrite was possible thanks to extensive tests in place. I&amp;#39;ve tested &lt;em&gt;webpack-merge&lt;/em&gt; fairly thoroughly (over 200 tests and counting) given it&amp;#39;s so critical piece of code to have right or else you start breaking people&amp;#39;s projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-webpack-merge-differ-from-other-solutions-&quot; id=&quot;how-does-webpack-merge-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;webpack-merge&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-webpack-merge-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are quite a few solutions for managing webpack configuration. Just to mention a few, consider &lt;a href=&quot;https://www.npmjs.com/package/webpack-config&quot;&gt;webpack-config&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/@easy-webpack/core&quot;&gt;easy-webpack&lt;/a&gt;. Using lodash &lt;code&gt;merge&lt;/code&gt; is one option, but for the reasons outlined above I don&amp;#39;t consider as a good long term way to handle it.&lt;/p&gt;
&lt;p&gt;Compared to the other options, &lt;em&gt;webpack-merge&lt;/em&gt; comes with a tiny API surface. There&amp;#39;s not a lot to remember once you understand how it works. Composition allows you to begin to model fragments of configuration as you like and find the abstractions that make sense for you. Andy Wermke did something like this in &lt;a href=&quot;https://github.com/andywer/webpack-blocks&quot;&gt;webpack-blocks&lt;/a&gt; and I discuss one approach in my &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;webpack book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A while ago I spent time with a client refactoring their webpack configuration to run through &lt;em&gt;webpack-merge&lt;/em&gt; and once we were done, the difference was quite immense. A large amount of duplication was gone and we had something together that was possible to share across their projects.&lt;/p&gt;
&lt;p&gt;Having less configuration to maintain is always good. You still have to understand what you are doing, but thanks to this approach you can push abstraction to the level you prefer. Maybe in the future we can find nicer configuration definition away and make &lt;em&gt;webpack-merge&lt;/em&gt; redundant, but I see it as a necessity for my own projects right now.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-webpack-merge-&quot; id=&quot;why-did-you-develop-webpack-merge-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;webpack-merge&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-webpack-merge-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While developing the content of my first book, it quickly became apparent how painful it is to manage webpack configuration. I started from a naïve merge and realized that if it behaved a little differently, I would have a nice way to compose. As a result &lt;em&gt;webpack-merge&lt;/em&gt; was born and it has been going forward since then.&lt;/p&gt;
&lt;p&gt;It didn&amp;#39;t get noticed early on, but as you can see from the graph captured from &lt;a href=&quot;https://npm-stat.com/charts.html?package=webpack-merge&quot;&gt;npm-stat&lt;/a&gt; below, it has become popular this year. It gets downloaded almost 20k times per day now so someone is definitely using it.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c96e81406ec622f984b8a9aa2e932962.png&quot; alt=&quot;webpack-merge popularity&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;webpack-merge popularity&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I have the 1.0 version of &lt;em&gt;webpack-merge&lt;/em&gt; out there, I consider it ready for public usage. The API feels solid and the project is in maintenance mode. I will merge possible improvements, but I don&amp;#39;t expect to develop new functionality to the project myself.&lt;/p&gt;
&lt;p&gt;I want to explore the idea of configuration presets further. It&amp;#39;s quite possible I&amp;#39;ll collaborate with Andy of &lt;em&gt;webpack-blocks&lt;/em&gt; here. Maybe we&amp;#39;ll find something.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s no one true solution to configuration management as that depends on your personal needs. That said, I believe webpack should come with better defaults. The current defaults are too development oriented and it&amp;#39;s too easy to miss certain production specific functionality very easily early on. It&amp;#39;s not an easy problem to solve, but you definitely don&amp;#39;t solve it unless you give it a go.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-webpack-merge-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-webpack-merge-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;webpack-merge&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-webpack-merge-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I expect more people will find &lt;em&gt;webpack-merge&lt;/em&gt;. It&amp;#39;s popularity will likely saturate at some point and perhaps it will become obsolete at some point as new approaches and tools become available. I think the core idea will remain valid, though, as it feels like something that goes beyond webpack.&lt;/p&gt;
&lt;p&gt;Web development is in an interesting place right now. It feels like we are somewhere between two worlds as the standards try to keep up with the development. The constant innovation tells about the need to find better ways to develop for the web. We have made a lot of progress in the past few years alone, but I believe there&amp;#39;s still a long way to go.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think I have answered this before, but let&amp;#39;s try again!&lt;/p&gt;
&lt;p&gt;It&amp;#39;s both harder and easier than it looks. It is harder in sense that we have to deal with legacy. It&amp;#39;s easier in sense that the current tooling can be very powerful at best and enable huge productivity.&lt;/p&gt;
&lt;p&gt;Focus on the fundamentals. Learning the language well will pay dividends as you learn about different solutions. Get exposed to a lot of technology. Instead of going &amp;quot;all in&amp;quot; with the framework of the day, spend time with alternatives as well. You&amp;#39;ll see commonalities and also differences.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a couple of interviews at the pipeline. If you have some cool technology you want to discuss, get in touch.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you find &lt;em&gt;webpack-merge&lt;/em&gt; useful! Check out the &lt;a href=&quot;https://www.npmjs.com/package/webpack-merge&quot;&gt;npm page&lt;/a&gt; and remember to give a star at &lt;a href=&quot;https://github.com/survivejs/webpack-merge&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are running another round of &lt;a href=&quot;http://www.reactindiebundle.com/&quot;&gt;React Indie Bundle&lt;/a&gt; for a limited time. If you want a nice collection of React related content, it&amp;#39;s a good time to invest.&lt;/p&gt;
&lt;/blockquote&gt;
</content></entry><entry><title>StarRatio - Compare JavaScript Projects - Interview with Dmitry Zaets</title><id>astarratiocomparejavascriptprojectsinterviewwithdmitryzaets2016-11-14t00:00:00z</id><link href="https://survivejs.com/blog/starratio-interview/"></link><updated>2016-11-14T00:00:00Z</updated><content type="html">&lt;p&gt;Comparing different JavaScript projects is surprisingly tough. This is a problem encountered by many developers daily. Most often it&amp;#39;s the easiest to go and pick the solution with the most GitHub stars, but that&amp;#39;s not always the whole story.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/dmitryzaets&quot;&gt;Dmitry Zaets&lt;/a&gt; has decided to tackle this particular problem with a solution known as StarRatio. Read on to learn more about it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/b1a049347f659b8455244bc50ac45ef9?s=200&quot; alt=&quot;Dmitry Zaets&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;
My name is Dmitry Zaets. I am a Full-Stack Web Developer from Ukraine, living in Barcelona. Learning and sharing my knowledge with people are the things I enjoy to do. In a free time, I&amp;#39;m mentoring at NodeSchool Barcelona and helping to organize local ReactJS and .NET meetups.
&lt;/p&gt;

&lt;p&gt;My developer&amp;#39;s journey started when I was 10 years old. Father showed me how to code with Basic and we&amp;#39;ve created a tiny chat bot. At that point, I understood that programming is a huge universe without boundaries. Currently, I&amp;#39;m interested in software design and architecture.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-starratio-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-starratio-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;StarRatio&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-starratio-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Usually, when you need to choose a library or component and you have a couple of the competitors - it&amp;#39;s easy, you just check them one by one, looking at the code, examples, issues. But what to do when you have a bunch of options, let&amp;#39;s say 8 or even 10?&lt;/p&gt;
&lt;p&gt;For sure you would like to check which of them are still maintained, how popular they are and how actively they are maintained. So you will go to npm to see download stats, to github to check stars, issues, a number of contributors. Would be cool to have a tool for this?&lt;/p&gt;
&lt;p&gt;As I say, StarRatio is a &lt;em&gt;handy tool to compare JavaScript open source projects&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/3cd7d5ca08659991e9e5619a70c2cc28.png&quot; alt=&quot;Basic comparison&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Basic comparison&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-starratio-work-&quot; id=&quot;how-does-starratio-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;StarRatio&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-starratio-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the user perspective it is really easy to use, you just to go &lt;a href=&quot;http://starratio.js.org&quot;&gt;StarRatio site&lt;/a&gt;, enter a couple of GitHub repos and see the comparison by multiple interesting stats. Here are couple of examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://starratio.js.org/#/compare/tiles?keys=reactjs%2Fredux%2Cfacebook%2Fflux%2Cgoatslacker%2Falt%2Creflux%2Frefluxjs%2Freflux&quot;&gt;State Containers (Flux-like)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://starratio.js.org/#/compare/tiles?keys=facebook%2Fjest%2Cmochajs%2Fmocha%2Cjasmine%2Fjasmine%2Csubstack%2Ftape&quot;&gt;Testing Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From technical perspective it is a client-server web application. On the client side it is a react application, built with &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;react-create-app&lt;/a&gt;. On the server side, it is a simple Express app, which gathers the data from the different sources. Currently, we support npm and GitHub, but planning to extend a number of supported package managers.&lt;/p&gt;
&lt;p&gt;Under the hood, StarRatio API is really simple. It is just aggregating data from npm and GitHub, processing it and caching the results.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/9ad1b7cc9b27f1dc2e11ee547c2e1970.png&quot; alt=&quot;Card view&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Card view&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-starratio-differ-from-other-solutions-&quot; id=&quot;how-does-starratio-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;StarRatio&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-starratio-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;StarRatio tries to gather and calculate stats that are really important from a developer point of view.&lt;/p&gt;
&lt;p&gt;It is quite unique as it doesn&amp;#39;t try to solve the problem of choice, it just helps to simplify it by showing all needed information on one page in a way that is easy to compare.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/ac6ddf774ef414ecbd64ca0e41fe155f.png&quot; alt=&quot;Chart view&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Chart view&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-starratio-&quot; id=&quot;why-did-you-develop-starratio-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;StarRatio&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-starratio-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve found a problem and haven&amp;#39;t found a good solution, isn&amp;#39;t it a reason for any developer to build new tool?&lt;/p&gt;
&lt;p&gt;So I&amp;#39;ve planned to develop simple, usable tool over a weekend and ship it within less than a week. And here it is.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently, we are actively discussing different possibilities and directions in which this tool can grow. In the near future, we are going to release a version for .NET-based projects. Also, we are developing a way to save comparison sets, so users will be able to add useful comparisons to the tool.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-starratio-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-starratio-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;StarRatio&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-starratio-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the biggest trends right now is JavaScript and especially different approaches, frameworks, libraries and tooling around JavaScript.&lt;/p&gt;
&lt;p&gt;The is even a term - &amp;quot;JavaScript fatigue&amp;quot;, that becomes really popular these days. You always need to choose on which subset of JavaScript to write, which framework/library/component/tool/bundler to use.&lt;/p&gt;
&lt;p&gt;You can see that people are already really tender because of this and they already starting to think how to solve it.&lt;/p&gt;
&lt;p&gt;StarRatio is one of the tools that helps to solve at least one problem from the whole &amp;quot;fatigue&amp;quot; set. I hope that in near future there would be more tools that help to rescue from that problem of choice.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will not be unique and will advise to never stop learning.&lt;/p&gt;
&lt;p&gt;But I will suggest one cool way of learning - prototyping.&lt;/p&gt;
&lt;p&gt;Prototyping is an amazing way to learn and trying new things!&lt;/p&gt;
&lt;p&gt;You can set a goal, as I did with StarRatio - create an app over a weekend. This will allow you to focus on the result and build a small but functional product.&lt;/p&gt;
&lt;p&gt;Believe me, you will face a lot of real problems and you will learn how to solve them in a short period of time.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would suggest to interview &lt;a href=&quot;https://github.com/andrew&quot;&gt;Andrew Nesbitt&lt;/a&gt;, the creator of &lt;a href=&quot;https://github.com/DependencyCI&quot;&gt;Dependency CI&lt;/a&gt;, &lt;a href=&quot;https://github.com/Librariesio&quot;&gt;Libraries.io&lt;/a&gt;, &lt;a href=&quot;https://github.com/24pullrequests&quot;&gt;24 Pull Requests&lt;/a&gt; and &lt;a href=&quot;https://github.com/splitrb&quot;&gt;Split&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Dmitry! You should check out the &lt;a href=&quot;http://starratio.js.org&quot;&gt;StarRatio site&lt;/a&gt; to learn more. Be sure to visit &lt;a href=&quot;https://github.com/StarRatio/star-ratio&quot;&gt;GitHub&lt;/a&gt; too.&lt;/p&gt;
</content></entry><entry><title>RE:DOM - Tiny but Super Fast DOM Library - Interview with Juha Lindstedt</title><id>aredomtinybutsuperfastdomlibraryinterviewwithjuhalindstedt2016-10-31t00:00:00z</id><link href="https://survivejs.com/blog/redom-interview/"></link><updated>2016-10-31T00:00:00Z</updated><content type="html">&lt;p&gt;Sometimes small is beautiful. &lt;a href=&quot;https://twitter.com/pakastin&quot;&gt;Juha Lindstedt&lt;/a&gt;&amp;#39;s FRZR, a 4kB view library, was a nice example of that &lt;a href=&quot;https://survivejs.com/blog/frzr-interview&quot;&gt;as we saw earlier&lt;/a&gt;. This time we&amp;#39;ll discuss evolution of Juha&amp;#39;s work - a solution known as &lt;em&gt;RE:DOM&lt;/em&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-re-dom-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-re-dom-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;RE:DOM&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-re-dom-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;143&quot; height=&quot;129&quot;&gt;&lt;title&gt;REDOM&lt;/title&gt;&lt;desc&gt;Created with Sketch.&lt;/desc&gt;&lt;g fill=&quot;none&quot;&gt;&lt;path id=&quot;Combined-Shape&quot; fill=&quot;#E8DC64&quot; d=&quot;M125 75l12.5 25h-25L125 75zm0-50l12.5 25h-25L125 25zm-25 50l12.5 25h-25L100 75zm12.5-25L125 75h-25l12.5-25zm-100 0L25 75H0l12.5-25zm25-50L50 25H25L37.5 0zm-25 0L25 25H0L12.5 0zM25 25l12.5 25h-25L25 25zm25 50l12.5 25h-25L50 75zm12.5-25L75 75H50l12.5-25zM75 25l12.5 25h-25L75 25zm12.5 25L100 75H75l12.5-25z&quot;/&gt;&lt;path id=&quot;Combined-Shape&quot; fill=&quot;#FDF06F&quot; d=&quot;M25 75l12.5-25h-25L25 75zm25-50L62.5 0h-25L50 25zm-25 0L37.5 0h-25L25 25zm12.5 25L50 25H25l12.5 25zm-25 0L25 25H0l12.5 25zm50 50L75 75H50l12.5 25zM100 75l12.5-25h-25L100 75zm12.5 25L125 75h-25l12.5 25zM125 75l12.5-25h-25L125 75zm0-50l12.5-25h-25L125 25zM12.5 100L25 75H0l12.5 25zm75-50L100 25H75l12.5 25z&quot;/&gt;&lt;path id=&quot;Combined-Shape&quot; fill=&quot;#BA152B&quot; d=&quot;M25 75l12.5 25h-25L25 75zm50 0l12.5 25h-25L75 75zM37.5 50L50 75H25l12.5-25zM50 25l12.5 25h-25L50 25zM87.5 0L100 25H75L87.5 0zm25 0L125 25h-25l12.5-25zM100 25l12.5 25h-25L100 25zM62.5 0L75 25H50L62.5 0zm25 50L100 75H75l12.5-25z&quot;/&gt;&lt;path fill=&quot;#D31B33&quot; d=&quot;M100 25l12.5-25h-25L100 25zm-62.5 75L50 75H25l12.5 25zM50 75l12.5-25h-25L50 75zm25-50L87.5 0h-25L75 25zm12.5 75L100 75H75l12.5 25zm25-50L125 25h-25l12.5 25zM75 75l12.5-25h-25L75 75zM62.5 50L75 25H50l12.5 25z&quot;/&gt;&lt;path fill=&quot;#222&quot; d=&quot;M21.78 104.67c1.76 0 3.22.2 4.37.56 1.16.37 2.08.9 2.76 1.58.7.7 1.17 1.5 1.44 2.42.28.93.42 1.95.42 3.07 0 1.53-.33 2.9-.98 4.12-.65 1.2-1.76 2.12-3.35 2.74l4.82 8.84H25.6l-4.3-8.08h-3.84V128h-5.22v-23.33h9.54zm-4.32 11.12h3.76c.86 0 1.56-.1 2.1-.24.56-.16 1-.38 1.33-.68.33-.3.56-.66.7-1.1.13-.42.2-.9.2-1.45 0-.53-.07-1-.2-1.44-.14-.44-.37-.8-.7-1.08-.33-.3-.77-.5-1.32-.66-.55-.16-1.25-.23-2.1-.23h-3.77v6.86zM34.9 128l.02-23.33h16.56v4.3H40.13v5.1h9.83v4.33h-9.83v5.28h11.35V128H34.92zm26.55-2.4c0 .78-.23 1.44-.68 1.97-.45.53-1.2.8-2.23.8s-1.77-.27-2.2-.78c-.45-.53-.67-1.2-.67-2 0-.78.22-1.42.66-1.94.44-.52 1.18-.77 2.2-.77 1.05-.02 1.8.24 2.24.76.45.52.68 1.16.68 1.93zm0-11.72c0 .8-.23 1.45-.68 1.98-.45.52-1.2.8-2.23.8s-1.77-.26-2.2-.77c-.45-.52-.67-1.2-.67-2.02 0-.77.22-1.42.66-1.93.44-.52 1.18-.78 2.2-.78 1.05 0 1.8.26 2.24.78.45.5.68 1.16.68 1.93zm4.52-9.2h8.48c2.22 0 4.07.3 5.54.9 1.47.6 2.64 1.43 3.52 2.5.88 1.04 1.5 2.28 1.9 3.7.36 1.42.55 2.95.55 4.6 0 1.6-.2 3.12-.58 4.53-.4 1.4-1.03 2.64-1.93 3.7-.9 1.06-2.07 1.9-3.54 2.5-1.48.6-3.3.9-5.48.9h-8.48v-23.33zm9.24 19c1 0 1.84-.18 2.55-.55.7-.36 1.27-.87 1.72-1.53.44-.66.76-1.44.97-2.33.2-.9.3-1.86.3-2.92 0-1.06-.1-2.03-.28-2.94-.2-.9-.52-1.67-.96-2.33-.44-.66-1.02-1.18-1.73-1.55-.72-.37-1.6-.56-2.63-.56h-3.96v14.72h4.03zm24.7 4.68c-1.8 0-3.4-.28-4.76-.86-1.36-.57-2.5-1.37-3.43-2.4-.92-1.04-1.6-2.3-2.1-3.75-.46-1.46-.7-3.1-.7-4.9 0-1.85.24-3.52.73-5.02.48-1.5 1.2-2.77 2.14-3.82.95-1.05 2.12-1.86 3.52-2.44 1.4-.57 3-.85 4.8-.85 1.8 0 3.38.3 4.76.85 1.37.56 2.53 1.36 3.46 2.4.94 1.05 1.65 2.3 2.13 3.77.5 1.46.73 3.1.73 4.9 0 1.8-.24 3.45-.73 4.95-.48 1.5-1.2 2.78-2.16 3.84-.97 1.08-2.14 1.9-3.54 2.5-1.4.57-3.02.86-4.87.86zm.2-4.3c1.84 0 3.28-.64 4.3-1.93 1.05-1.3 1.56-3.25 1.56-5.84 0-2.57-.5-4.5-1.53-5.77-1.02-1.3-2.47-1.93-4.34-1.93-1.92 0-3.4.65-4.43 1.96-1.04 1.3-1.55 3.23-1.55 5.76 0 2.57.52 4.5 1.58 5.8 1.06 1.3 2.52 1.95 4.4 1.95zm21.84-19.4l5.44 13.28 5.45-13.27h5.9l1.82 23.33h-5.25l-1.06-13.46-.03-2.45-5 11.74h-3.63l-5-11.7-.05 2.36-1.03 13.5h-5.3l1.83-23.33h5.9z&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;&quot; alt=&quot;RE:DOM&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;RE:DOM&lt;/figcaption&gt;&lt;/figure&gt;

  &lt;a href=&quot;https://redom.js.org&quot;&gt;RE:DOM&lt;/a&gt; is a tiny UI library (~2 kB gzipped), handling only the hardest parts of managing the DOM. You could think of it as a vanilla JavaScript tool, but it&amp;#39;s actually really useful in almost any kind of projects – even bigger ones.
&lt;/p&gt;

&lt;p&gt;I create all my projects with it, even large single page applications. You can also render it on server-side with &lt;a href=&quot;https://github.com/pakastin/nodom&quot;&gt;NO:DOM&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-re-dom-work-&quot; id=&quot;how-does-re-dom-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;RE:DOM&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-re-dom-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I gave a more detailed explanation in my &lt;a href=&quot;https://www.youtube.com/watch?v=0nh2EK1xveg&quot;&gt;talk in HelsinkiJS / Frontend Finland&lt;/a&gt;, but basically it allows you to create HTML elements and components really easily with HyperScript syntax. Another thing it does is it helps you to keep a list of components in sync with your data. Check out examples at the &lt;a href=&quot;https://redom.js.org&quot;&gt;RE:DOM website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea is to use HyperScript to create HTML elements:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; mount &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redom&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; hello &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;h1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Hello world!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; hello&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also create components by defining an object with &lt;code&gt;el&lt;/code&gt; property, which is the HTML element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; text&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; mount &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redom&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Hello&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;constructor&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// how to create a component&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;el &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;h1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot; &gt;&apos;Hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;world&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot; &gt;&apos;!&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;update&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// how to update it&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; name
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; hello &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Hello&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; hello&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  hello&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;RE:DOM&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keeping lists in sync is also really easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; mount &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redom&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// create some data&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-for&quot; &gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token keyword keyword-let&quot; &gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot; &gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  data&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    id&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Item &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; i
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// define Li component&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Li&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;constructor&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;el &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;update&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; name &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; name
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// create &amp;lt;ul&amp;gt; list&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; ul &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;ul&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; Li&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; ul&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// shuffle it every second&lt;/span&gt;
&lt;span class=&quot;token function&quot; &gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  data&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  ul&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-re-dom-differ-from-other-solutions-&quot; id=&quot;how-does-re-dom-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;RE:DOM&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-re-dom-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RE:DOM doesn&amp;#39;t use Virtual DOM, but still allows you to define components and how to update them. For me it&amp;#39;s the best of both worlds: mutability gives great flexibility and performance, but defining a one-directional flow of updates is very close to VDOM-approach.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s also really tiny, but still does quite a lot of work. Not to mention it&amp;#39;s really fast. The source is also really &lt;a href=&quot;https://github.com/pakastin/redom/tree/master/src&quot;&gt;easily readable&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-re-dom-&quot; id=&quot;why-did-you-develop-re-dom-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;RE:DOM&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-re-dom-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I actually first developed FRZR, which eventually got renamed to RE:DOM. RE:DOM is a bit more clever with element creation from queries, and better designed lists. Originally I created FRZR because I was one of the Riot 2.0 early contributors and wrote a HTML element reorder method for it, which Riot lacked.&lt;/p&gt;
&lt;p&gt;Riot&amp;#39;s original idea was to be a really simple UI library, which I think have got a bit out of hand. RE:DOM is basically my view of the simplest possible UI library. RE:DOM is also much more performant than Riot at the moment.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s some things in RE:DOM I need to think through. For example, &lt;code&gt;mounted&lt;/code&gt; and &lt;code&gt;unmounted&lt;/code&gt; &amp;quot;events&amp;quot; happen when attached/detached related to the parent component/element. They might be better if called when attached/detached to the DOM instead. But that&amp;#39;s something that needs careful approach, so it doesn&amp;#39;t affect the performance that much. There&amp;#39;s also a possibility to use Web Components instead, let&amp;#39;s see.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-re-dom-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-re-dom-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;RE:DOM&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-re-dom-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think web standards will eventually make frameworks and UI libraries quite obsolete. That&amp;#39;s something recently discussed a lot in the &lt;a href=&quot;https://www.polymer-project.org/summit&quot;&gt;Polymer Summit&lt;/a&gt;. That&amp;#39;s a good direction, because I think frameworks are actually the source of most of the &amp;quot;JavaScript fatigue&amp;quot; and frustration in general.&lt;/p&gt;
&lt;p&gt;Web standards are more thought through and also a safer choice, because they will (almost) always be backwards compatible – you can&amp;#39;t say the same about frameworks. Abstraction usually also comes with a vendor lock-in: if you start a project with Angular for example, it&amp;#39;s really hard to convert the project to some other framework.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Be open-minded about web standards and the DOM. It&amp;#39;s not as scary and complex as many say it is. You don&amp;#39;t always need a framework and you don&amp;#39;t always have to follow the crowd. Less is more. I recently wrote &lt;a href=&quot;https://medium.com/re-dom/master-the-dom-bc1a2a06089b&quot;&gt;a Medium post about the subject&lt;/a&gt;. Even if you use some framework, you should learn how the DOM work.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You should interview &lt;a href=&quot;https://twitter.com/tipiirai&quot;&gt;Tero Piirainen&lt;/a&gt;, the original author of Riot.js. Ask about web standards and simplicity in web development :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Juha! RE:DOM looks great to me. Especially that Web Component direction sounds interesting. I think you are right in that given enough time, web standards will make a lot of the current solutions obsolete (a good thing!).&lt;/p&gt;
&lt;p&gt;To get started with, head to &lt;a href=&quot;https://redom.js.org&quot;&gt;RE:DOM website&lt;/a&gt;. Check out also the &lt;a href=&quot;https://github.com/pakastin/redom&quot;&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Glamor - Inline CSS for React et al - Interview with Sunil Pai</title><id>aglamorinlinecssforreactetalinterviewwithsunilpai2016-10-17t00:00:00z</id><link href="https://survivejs.com/blog/glamor-interview/"></link><updated>2016-10-17T00:00:00Z</updated><content type="html">&lt;p&gt;If you ask multiple React developers their styling approaches, you will also get multiple different answers. One trend is clear, though, the movement towards inline styling.&lt;/p&gt;
&lt;p&gt;This is something that was considered an anti-pattern before React, but as React has become more popular, we are also more open to question our earlier beliefs.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve &lt;a href=&quot;https://survivejs.com/react/advanced-techniques/styling-react/&quot;&gt;discussed various approaches&lt;/a&gt; myself. Each solve similar problems in different ways. Today I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/threepointone&quot;&gt;Sunil Pai&lt;/a&gt;, the author of an inline CSS solution known as Glamor. Read on to learn more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/6eadce66e218b83b484c5e1ee293f5b9?s=200&quot; alt=&quot;Sunil Pai&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Hi! My name&amp;#39;s Sunil Pai, and I wrote the css-in-js library &lt;a href=&quot;https://github.com/threepointone/glamor&quot;&gt;Glamor&lt;/a&gt;. In the past, I have built a bunch of websites for Myntra, Yahoo, Visa etc. I now write JavaScript libraries for fun and/or world domination.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-glamor-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-glamor-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Glamor&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-glamor-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The official line is Inline CSS for Components, but in my opinion it&amp;#39;s THE missing CSS piece for React. I wrote a longer piece on how &lt;a href=&quot;https://gist.github.com/threepointone/c382856fd2e2c325f8d230e85d85499b&quot;&gt;React solves &amp;#39;writing&amp;#39; web pages&lt;/a&gt; in a natural way, and Glamor is the css companion to that piece.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-glamor-work-&quot; id=&quot;how-does-glamor-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Glamor&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-glamor-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First the developer defines inline CSS rules as JavaScript objects. Something like &lt;code&gt;&amp;lt;div {...style({ color: &amp;#39;red&amp;#39; })/&amp;gt;&lt;/code&gt; or with the &lt;code&gt;createElement&lt;/code&gt; replacement &lt;code&gt;&amp;lt;div css={{ color: &amp;#39;red&amp;#39; }} /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the background, Glamor treats CSS rules as &amp;#39;values&amp;#39;, generates an identifier corresponding to that rule (similar to Clojure hashes for their data structures). It attaches this id to a DOM element with a data-attribute, while also adding the rule to a &lt;strong&gt;real&lt;/strong&gt; stylesheet. Glamor also dedupes rules, manages universal shims, adds vendor prefixes, all the boring stuff you don&amp;#39;t want to do by hand.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-glamor-differ-from-other-solutions-&quot; id=&quot;how-does-glamor-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Glamor&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-glamor-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I really like this &lt;em&gt;css-as-values&lt;/em&gt; abstraction. It enables a bunch of nice properties, like not having to &lt;em&gt;name&lt;/em&gt; a rule unless preferred, and letting the developer choose how to compose/modularize their code. Glamor also tries hard to allow &lt;em&gt;all&lt;/em&gt; possible CSS features, with no compromises on selectors and what not. And it works hard at being efficient, so you shouldn&amp;#39;t worry about it being a part of your stack.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also happy with the abstraction this library offers; it&amp;#39;s low level enough that it&amp;#39;s mostly invisible, but allows for some higher order programming. Indeed, Glamor itself ships with shims for &lt;a href=&quot;https://github.com/Khan/aphrodite&quot;&gt;Aphrodite&lt;/a&gt; and &lt;a href=&quot;https://github.com/smyte/jsxstyle&quot;&gt;jsxstyle&lt;/a&gt; APIs, and I&amp;#39;m totally on the lookout for other interesting options.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s some other technical stuff like super efficient css &lt;em&gt;insertion&lt;/em&gt;, &lt;strong&gt;precise&lt;/strong&gt; server side rendering, a plugin system, etc, but I think the css-as-values abstraction is the nicest.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-glamor-&quot; id=&quot;why-did-you-develop-glamor-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Glamor&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-glamor-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It started off as an exploration of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet&quot;&gt;a browser API I&amp;#39;d never used&lt;/a&gt;. I was also checking out other css-in-js libraries at the time, and none of them really ticked off all the things I wanted from such a library.&lt;/p&gt;
&lt;p&gt;One week of furious coding later, Glamor was born, tests and all. Since then, I&amp;#39;ve been tweaking and polishing away at the thing, with help from some nice online folks who are using it as well. There might be many css-in-js libraries, but this is the one I like.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, there a bunch of &lt;a href=&quot;https://github.com/threepointone/glamor/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement&quot;&gt;fun enhancements&lt;/a&gt; planned. React Native support would be nice too, I guess? In the slightly more distant future, I&amp;#39;m curious to see how React itself deals with CSS / alternative styling systems (like terminals, WebGL, etc).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-glamor-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-glamor-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Glamor&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-glamor-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think React has really ignited this discussion around rethinking &lt;em&gt;best practices&lt;/em&gt;, even if not directly connected with using React itself; as an example, I can&amp;#39;t imagine writing another &lt;code&gt;className&lt;/code&gt; by hand after having used something like Glamor. I think this trend will continue, particularly around using &amp;#39;components&amp;#39;/JSX to represent other &lt;em&gt;stateful&lt;/em&gt; parts of your &lt;strong&gt;system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I also see some movement towards micro-transpilation; adding a plugin or two to get some compile time powers for your code. This already exists for most compile-to-js languages, and it&amp;#39;s also how devs use &lt;em&gt;new&lt;/em&gt; JavaScript features in places without support for the same.&lt;/p&gt;
&lt;p&gt;I think developers will further add their own tiny compiler transforms with Babel/whatever to their apps and unlock new functionality (I&amp;#39;m told the LISP folks have had this for decades with macros).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think the internet is really noisy right now; trying to listen to everybody and doing everything will probably overwhelm most (all?) people. Don&amp;#39;t get distracted by them, and don&amp;#39;t try to learn everything at once. Focus on what you want to build, and having some fun while doing so. Otherwise, it&amp;#39;s really not worth it, no matter what your stack looks like.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Could you find _why for me? I think the world could use him right now.
I&amp;#39;d love to hear what @jingc&amp;#39;s working on, and how @tjholowaychuk&amp;#39;s startup journey&amp;#39;s going.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Sunil! It&amp;#39;s cool to see innovation around this area. Incidentally I had to work with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet&quot;&gt;StyleSheet API&lt;/a&gt; as well and I ended up writing some &lt;a href=&quot;https://www.npmjs.com/package/stylesheet-helpers&quot;&gt;helpers to make it easier&lt;/a&gt; to use. StyleSheet API might not be the most developer friendly API, but the performance is there. Let the browser do what it does the best.&lt;/p&gt;
&lt;p&gt;To learn more, check out the &lt;a href=&quot;https://github.com/threepointone/glamor&quot;&gt;GitHub project page of Glamor&lt;/a&gt;. The API is beautifully simple.&lt;/p&gt;
</content></entry><entry><title>Teaching JavaScript - Interview with Bianca Gandolfo</title><id>ateachingjavascriptinterviewwithbiancagandolfo2016-10-03t00:00:00z</id><link href="https://survivejs.com/blog/teaching-javascript-interview/"></link><updated>2016-10-03T00:00:00Z</updated><content type="html">&lt;p&gt;I have chosen one approach when it comes to teaching JavaScript and related topics. Books are just a way amongst many others. Today I&amp;#39;m interviewing another professional, &lt;a href=&quot;https://twitter.com/BiancaGando&quot;&gt;Bianca Gandolfo&lt;/a&gt;, about the topic. Let&amp;#39;s see what she thinks about teaching JavaScript.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/3a6815d1148f39b83841a55d238cd563?s=200&quot; alt=&quot;Bianca Gandolfo&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Sure. My name is Bianca, and I&amp;#39;ve been teaching people and writing curriculum on how to become a web developer for about 3 years now while working at Hack Reactor, cofounding Telegraph Academy and teaching in other venues like Girl Develop It, Laboratory (in Peru) and online with Frontend Masters, Pluralsight, and Udemy.
&lt;/p&gt;

&lt;p&gt;I also code on the side, but I spend 70% of my work time related to education, coaching, mentoring and content creation. Right now I am in Kuala Lumpur and will be traveling with my partner and working remotely for the next several months or so.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-do-you-prefer-to-teach-javascript-&quot; id=&quot;how-do-you-prefer-to-teach-javascript-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How do you prefer to teach JavaScript?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-do-you-prefer-to-teach-javascript-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I prefer to teach JavaScript live and in smaller settings because it is fascinating to learn how each person&amp;#39;s mental model evolves over time. I feel like detective trying to find the cracks in that model to fill it in. I always wanted to become Harriet the Spy so the process is just like that to me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#is-there-something-particularly-difficult-about-teaching-&quot; id=&quot;is-there-something-particularly-difficult-about-teaching-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Is there something particularly difficult about teaching?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#is-there-something-particularly-difficult-about-teaching-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hmm. Great question. It can be tough to teach when you are disconnected from the beginner&amp;#39;s mind. When you are so familiar with something, you start to have assumptions about what the person already knows.&lt;/p&gt;
&lt;p&gt;I avoid this pattern by staying a student of my students, which looks like being annoyingly curious and asking a lot of questions. If you see my teaching style, it is very Socratic and more of a discussion because I always want to learn where everyone is.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-have-you-learned-about-teaching-and-training-in-general-&quot; id=&quot;what-have-you-learned-about-teaching-and-training-in-general-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What have you learned about teaching and training in general?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-have-you-learned-about-teaching-and-training-in-general-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have learned a lot about communication, and I continue to nerd out on effective communication. Communication isn&amp;#39;t just about saying what you intend to say and it coming out eloquently, it is about what the person walks away with with includes a message but also feelings, etc. I am always testing what message students walk away with and monitoring the environment so that I can hone in on what is going right and what I need to improve.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-javascript-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-javascript-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for JavaScript and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-javascript-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#39;t like this question! Unfortunately the JS/Web community is pretty fragmented and tribal, which means people are re-inventing the wheel all the time and defending very minor points or brand identities. The future looks like it will continue that way, and I will continue to stay out of it. :)&lt;/p&gt;
&lt;p&gt;I will just use whatever tool is required to get the job done until it doesn&amp;#39;t anymore. I also like to dabble in lots of different things, but I am not the type to hold strong opinions about anything unless I have extensive experience which I&amp;#39;ll never have with something that is new.&lt;/p&gt;
&lt;p&gt;The nice thing about being an engineer and not a politician is that I can stick to my facts and not try to predict the future!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Haha, wow. I should write a book on this :)&lt;/p&gt;
&lt;p&gt;I will just stick to one which I think is the most important. Aside from learning the technical pieces, you should learn how to effectively measure your learning, especially if you are self studying. There are lots of things you can do that will give you a false sense of productivity but at the end of the day you can&amp;#39;t actually build anything.&lt;/p&gt;
&lt;p&gt;The key - research, google, read, watch videos etc just enough so that you can build the thing. Laying down before bed and reading about X framework, tool or whatever will only get you so far (not far at all). It doesn&amp;#39;t have to be complicated. Pick a small project. Make a view show up as quickly as possible and then go from there.&lt;/p&gt;
&lt;p&gt;How do you know if you are learning? You are able to apply whatever you are studying to build something or solve small programming challenges.&lt;/p&gt;
&lt;p&gt;The metaphor I use a lot with students is if you want to learn how to write poetry in Spanish (assuming you don&amp;#39;t speak Spanish), you can start by reading Spanish poetry and/or about Spanish poetry, sure. But when you sit down at your laptop and try to write it, you probably won&amp;#39;t be able to at first, despite all your research.&lt;/p&gt;
&lt;p&gt;The fastest way to learn how to write poetry in Spanish is to simply start writing it in Spanish. Yes, it will be terrible at first, but you have to start somewhere. Programming is just the same!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These are my favorite eng educators:
Albrey Brown (Telegraph Academy), Scott Moss (Angular Class, Udacity, Hack Reactor), Patrick JS (Angular Class, OSS contributor), Aysegul Yonet (Autodesk, Girl Develop It, Annie Cannons), Brenda Gin (Girl Develop It, Slack)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Bianca! It&amp;#39;s cool to see a little different take on JavaScript every once in a while. Teaching and learning are those topics that easily go overlooked. Even though I&amp;#39;ve been working with JavaScript for a decade myself, it feels like there&amp;#39;s always something to learn. And what&amp;#39;s a nicer way to learn than to teach.&lt;/p&gt;
</content></entry><entry><title>react-game-kit - Make games with React - Interview with Ken Wheeler</title><id>areactgamekitmakegameswithreactinterviewwithkenwheeler2016-09-26t00:00:00z</id><link href="https://survivejs.com/blog/react-game-kit-interview/"></link><updated>2016-09-26T00:00:00Z</updated><content type="html">&lt;p&gt;What&amp;#39;s more fun than making applications with React? Making games of course! I remember coding Pong in Python (harder than it sounds) and writing a text adventure or two. Games look deceptively simple but are quite difficult to code.&lt;/p&gt;
&lt;p&gt;Today I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/ken_wheeler&quot;&gt;Ken Wheeler&lt;/a&gt; about &lt;a href=&quot;https://github.com/FormidableLabs/react-game-kit&quot;&gt;react-game-kit&lt;/a&gt;. You might recognize the name from projects such as &lt;a href=&quot;https://github.com/FormidableLabs/spectacle&quot;&gt;spectacle&lt;/a&gt;, &lt;a href=&quot;https://github.com/FormidableLabs/react-music&quot;&gt;react-music&lt;/a&gt;, or &lt;a href=&quot;https://github.com/FormidableLabs/webpack-dashboard&quot;&gt;webpack-dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/4751e2e9fe7b876958d38f86a718ca91?s=200&quot; alt=&quot;Ken Wheeler&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

My name is Ken. It means &amp;quot;handsome&amp;quot; in Gaelic, and &amp;quot;yes&amp;quot; in Hebrew.
&lt;/p&gt;

&lt;p&gt;I like America, short walks on the beach, food thats bad for you, recreational archery, and brown liquor.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m the Director of Open Source at Formidable, where I turn coffee into GitHub stars.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m a dad and husband, I used to be a rapper, and my favorite color is snow camo.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m a software engineer, but I look like a cop, so cops and military give me this nod all the time like I&amp;#39;m off duty, which puts me in a funny position where I am guilty yet flattered.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-game-kit-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-game-kit-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;react-game-kit&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-game-kit-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;react-game-kit&lt;/em&gt; is a set of components that provide the basic building blocks for game development using React and React Native. It takes care of the repetitive hard stuff, so that you can focus on the hard hard stuff.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-react-game-kit-work-&quot; id=&quot;how-does-react-game-kit-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;react-game-kit&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-react-game-kit-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A central game loop is created using the &lt;code&gt;Loop&lt;/code&gt; component, which is then passed down via context like &lt;code&gt;Provider&lt;/code&gt; does for Redux. Next there are a set of optional components that you can use to craft your game.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stage&lt;/code&gt; helps set game area boundaries and calculates scale ratios, &lt;code&gt;World&lt;/code&gt; creates a physics world, and you can use &lt;code&gt;Body&lt;/code&gt; components to add entities to that world.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tilemap&lt;/code&gt; lets you generate levels from a tile atlas, and &lt;code&gt;Sprite&lt;/code&gt; facilitates the creation of multi-state sprite animations using a spritesheet.&lt;/p&gt;
&lt;p&gt;All of these components use the context based loop to keep everything in sync.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-react-game-kit-differ-from-other-solutions-&quot; id=&quot;how-does-react-game-kit-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;react-game-kit&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-react-game-kit-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not sure there are other solutions in the React world? There are other ways to make games, things like Phaser and Unity, but they are super fully featured, whereas react-game-kit is literally bare bones.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-game-kit-&quot; id=&quot;why-did-you-develop-react-game-kit-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;react-game-kit&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-game-kit-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My 9 year old brother made some pixel art using Qixels, this toy where you have little blocks and you can spray water on them. He approached me and pitched a game and asked if I could build it. I was like duh bro, of course I can.&lt;/p&gt;
&lt;p&gt;So my first shot was with SpriteKit on iOS. I&amp;#39;ve been doing a lot of React Native so I decided I wanted to try to bridge SpriteKit. Then I realized, this isn&amp;#39;t going to work for Android.&lt;/p&gt;
&lt;p&gt;So I decided to try and build the game with just React Native. It actually performed better than SpriteKit on the simulator.&lt;/p&gt;
&lt;p&gt;After this I pitched a talk about making games with React, and when I started creating the material and the game demo, I thought, why am I doing this again, I should just build a helper lib for the repetitive stuff. And then I did.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Who knows. Probably an e-learning tool. That&amp;#39;d be chill.&lt;/p&gt;
&lt;p&gt;I like the idea of continuing to push the limits of using React, but at the same time I should probably build some stuff that will get everyday use as well. I&amp;#39;d like to do some more Node OSS. And I really want to build something cool with Reason.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-game-kit-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-game-kit-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;react-game-kit&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-game-kit-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, for react-game-kit, I&amp;#39;d like to switch over to a GL based solution once the libs are ready for React/React Native. Then we can see some real perf.&lt;/p&gt;
&lt;p&gt;Web dev in general? I think WebAssembly is a gonna be pretty huge, WebWorker stuff, VR, and some cool stuff with some of the APIs browsers are providing like WebAudio.&lt;/p&gt;
&lt;p&gt;I would definitely check out some of the stuff the squad at ExponentJS is doing. I see a future where we have an app browser, where you get the responsiveness and power of a native app, with the urls/discovery/etc of the web.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Are they already programmers? If so, I&amp;#39;d say get a stress ball.&lt;/p&gt;
&lt;p&gt;If they aren&amp;#39;t, I&amp;#39;d recommend learning programming fundamentals. And then language fundamentals. Don&amp;#39;t even think about using an abstraction until you understand how objects and arrays work.&lt;/p&gt;
&lt;p&gt;If you know the fundamentals, its SO much easier to hop into new libraries/frameworks. If you start with a framework and then never learn fundamentals, learning the next thing will be hard all over again. If you are fundamentally sound, you see exactly what the new stuff is doing and then you just need to read the API docs and get acquainted.&lt;/p&gt;
&lt;p&gt;Another thing I might say is slow down and read the manual.&lt;/p&gt;
&lt;p&gt;Type things out, don&amp;#39;t copy and paste. There is a lot of &amp;quot;webpack is hard&amp;quot; type of sentiment out there, and I don&amp;#39;t buy it. It&amp;#39;s more like webpack configs get copy and pasted and we don&amp;#39;t know how to fix it.&lt;/p&gt;
&lt;p&gt;If you slow down and write a config out by hand while perusing the API, webpack really isn&amp;#39;t that bad. It&amp;#39;s a lot easier to add stuff a la carte than to start with a huge prebuilt config and try to figure out what part doesn&amp;#39;t work for your app.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hmmm... Good question. I&amp;#39;d recommend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sunil Pai - He builds really cool stuff and like myself, loves to make a mockery of JSX. Also wrote &lt;a href=&quot;https://github.com/threepointone/glamor&quot;&gt;glamor&lt;/a&gt;, which is pretty dope.&lt;/li&gt;
&lt;li&gt;Nikhilesh Sigtapu - This dude is the smartest guy I know. He builds the kind of stuff I would build if I went to college. He also makes magic happen at &lt;a href=&quot;https://getexponent.com/&quot;&gt;ExponentJS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Leland Richardson - Dude is a beast. Brought us hit records such as &lt;a href=&quot;https://github.com/airbnb/react-native-maps&quot;&gt;react-native-maps&lt;/a&gt; and &lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;Enzyme&lt;/a&gt;, and has this chill new project &lt;a href=&quot;https://github.com/lelandrichardson/redux-entity&quot;&gt;redux-entity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Safia Abdalla - She is the master of all things data, and works on &lt;a href=&quot;https://github.com/nteract/nteract&quot;&gt;Nteract&lt;/a&gt;, which is a really cool interactive notebook built in React on Electron.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Ken! Check out &lt;a href=&quot;https://github.com/FormidableLabs/react-game-kit&quot;&gt;react-game-kit&lt;/a&gt; on GitHub to learn more.&lt;/p&gt;
</content></entry><entry><title>Reactotron - A CLI and OS X App for Inspecting - Interview with Steve Kellock</title><id>areactotronacliandosxappforinspectinginterviewwithstevekellock2016-09-19t00:00:00z</id><link href="https://survivejs.com/blog/reactotron-interview/"></link><updated>2016-09-19T00:00:00Z</updated><content type="html">&lt;p&gt;If there&amp;#39;s one thing that has set React community apart, it&amp;#39;s the focus on developer experience (DX). Historically developer tools haven&amp;#39;t been the greatest, but this is slowly and surely changing. Reactotron by &lt;a href=&quot;https://twitter.com/skellock&quot;&gt;Steve Kellock&lt;/a&gt; is a good example of this trend. Read on to learn more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/0fb48c7e9a462c7e6d312ef50d618e12?s=200&quot; alt=&quot;Steve Kellock&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

Hi. I’m Steve. I live with my wife and 2 boys (4 and 2) in Tiny, Canada (2 hours north of Toronto). It’s pretty rural. Farms and tractors.  That sort of thing.  =)
&lt;/p&gt;

&lt;p&gt;Been a professional dev for 23(ish?) years. First computer was a TI 99/4A. First real language was Turbo Pascal, which turned in long love affair with Borland Delphi.&lt;/p&gt;
&lt;p&gt;I’m currently working with the crazy-awesome folks at &lt;a href=&quot;https://infinite.red&quot;&gt;Infinite Red&lt;/a&gt; doing mobile dev. React Native to be specific.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-reactotron-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-reactotron-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Reactotron&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-reactotron-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the app you’re building had a Twitter feed, it’d be Reactotron. It streams to you information about your app’s state, API calls, benchmarks, exceptions, and other stuff.&lt;/p&gt;
&lt;p&gt;If you love debuggers like gdb or lldb, &lt;a href=&quot;https://www.sadtrombone.com/?autoplay=true&quot;&gt;this isn’t for you&lt;/a&gt;. If your debugging experience consists of well placed &lt;code&gt;console.log&lt;/code&gt; calls, then, welcome home my friend.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-reactotron-work-&quot; id=&quot;how-does-reactotron-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Reactotron&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-reactotron-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It plugs into your React JS or React Native app and relays info up to 1 of the 2 flavours of Reactotron running on your computer: Desktop or CLI.&lt;/p&gt;
&lt;p&gt;If your app uses Redux, you can track state changes, subscribe to parts of your state tree, and even replay &amp;amp; dispatch actions. There are ways to pass data like you would &lt;code&gt;console.log&lt;/code&gt; and even supports images.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/bf4a71a4fbcb78c0a7dd5ac5150607ab.gif&quot; alt=&quot;Reactotron in action&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Reactotron in action&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-reactotron-differ-from-other-solutions-&quot; id=&quot;how-does-reactotron-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Reactotron&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-reactotron-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, I consider &lt;code&gt;console.log&lt;/code&gt; the “other solution”. There’s something magical about it, right?&lt;/p&gt;
&lt;p&gt;It’s first tool that most people turn to when something goes sideways. With little effort, it is placed in (hopefully) the right place to lift up the answer to your problem. Maybe an API response? Maybe a piece of poorly-behaving state?&lt;/p&gt;
&lt;p&gt;Now, there are wonderful tools out there that specialize in specifics like breakpoints &amp;amp; code stepping. There are fantastic add-ons for working with just Redux.&lt;/p&gt;
&lt;p&gt;Continue to use them. They’re great. The harder problems will require these heavy hitters.&lt;/p&gt;
&lt;p&gt;But for me, streaming a series of manually-placed debug logs or automatically-streaming API calls &amp;amp; state changes is a pretty pleasant experience.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-reactotron-&quot; id=&quot;why-did-you-develop-reactotron-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Reactotron&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-reactotron-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Classic itch scratching.&lt;/p&gt;
&lt;p&gt;The apps I was helping build exceed the limit working memory &amp;amp; attention capacity of my aging brain.&lt;/p&gt;
&lt;p&gt;This pattern was becoming too common:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you kick off an API call&lt;/li&gt;
&lt;li&gt;it returns some goodies&lt;/li&gt;
&lt;li&gt;you transform it for your app&lt;/li&gt;
&lt;li&gt;shotgun it through your reducers&lt;/li&gt;
&lt;li&gt;have it appear in your views&lt;/li&gt;
&lt;li&gt;and maybe trigger other workflows &amp;amp; sagas…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, I couldn’t follow it.&lt;/p&gt;
&lt;p&gt;I mean, I could. But it involved focusing; which is not a strength of mine. Squirrel!&lt;/p&gt;
&lt;p&gt;And I didn’t want to litter log statements everywhere.&lt;/p&gt;
&lt;p&gt;I just wanted to see the final state.&lt;/p&gt;
&lt;p&gt;Or better yet, the journey of actions &amp;amp; network calls it made along the way.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a big list of candidates. The things that top that list are visualization problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filtering events within Reactotron&lt;/li&gt;
&lt;li&gt;Tracking redux-saga effects&lt;/li&gt;
&lt;li&gt;things like memory, cpu usage, and other perf issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows compatibility is up there too.&lt;/p&gt;
&lt;p&gt;MobX is coming. Reactotron is built with MobX but can only track Redux-based state. Awk....ward.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-reactotron-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-reactotron-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Reactotron&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-reactotron-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Reactotron will likely stay in JS and try to service that passive-debugging need that lives between &lt;code&gt;console.log&lt;/code&gt; and a real debugger.&lt;/p&gt;
&lt;p&gt;Reactotron started out as a CLI app.&lt;/p&gt;
&lt;p&gt;But it wasn’t until I ported it to the desktop with Electron did I realize just how deep the web dev rabbit hole goes.&lt;/p&gt;
&lt;p&gt;React Native feels more like web dev than mobile dev, but it wasn’t until I finished building the desktop version that it donned on me: this “way” to create apps is MUCH better.&lt;/p&gt;
&lt;p&gt;Next few years will be a steamroller for “web” and compile-to-js.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The web isn’t just the web anymore. Web apps, mobile apps, and desktop apps are just apps, so try to focus on things that help you do one thing: ship.&lt;/p&gt;
&lt;p&gt;Focusing only on the tech is a mistake. No stack will guarantee a successful product. There are always multiple right answers.&lt;/p&gt;
&lt;p&gt;Don’t get hung up in the great “State Wars” of 2016 or the upcoming Battle of JS Compilers in 2017. You’ve got work to do.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’d like to hear more about Ken Wheeler’s React adventures.  Behind the hilarious persona is a guy delivering some crazy awesome open source React-based projects.&lt;/p&gt;
&lt;p&gt;Janic Duplessis, the unsung hero of React Native, would be another good pick.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Steve! It&amp;#39;s definitely one cool looking tool. To get started, head to &lt;a href=&quot;https://github.com/reactotron/reactotron&quot;&gt;GitHub&lt;/a&gt;. Consider also following &lt;a href=&quot;https://twitter.com/reactotron&quot;&gt;@reactotron&lt;/a&gt; for fresh news related to it.&lt;/p&gt;
</content></entry><entry><title>Reactabular - Spectacular tables for React - Interview with Juho Vepsäläinen</title><id>areactabularspectaculartablesforreactinterviewwithjuhovepsalainen2016-09-12t00:00:00z</id><link href="https://survivejs.com/blog/reactabular-interview/"></link><updated>2016-09-12T00:00:00Z</updated><content type="html">&lt;p&gt;Writing a little HTML table isn&amp;#39;t particularly hard. It all gets more complex when you need logic like filtering, pagination, or fixed headers. A simple problem becomes difficult fast as requirements appear.&lt;/p&gt;
&lt;p&gt;When it comes to React, there are a few established alternatives out there. Consider Facebook&amp;#39;s &lt;a href=&quot;https://www.npmjs.com/package/fixed-data-table&quot;&gt;fixed-data-table&lt;/a&gt;, &lt;a href=&quot;https://griddlegriddle.github.io/Griddle/&quot;&gt;Griddle&lt;/a&gt;, &lt;a href=&quot;https://allenfang.github.io/react-bootstrap-table/&quot;&gt;react-bootstrap-table&lt;/a&gt;, &lt;a href=&quot;https://react-component.github.io/table/&quot;&gt;rc-table&lt;/a&gt;, &lt;a href=&quot;https://bvaughn.github.io/react-virtualized/&quot;&gt;react virtualized&lt;/a&gt;, or &lt;a href=&quot;https://glittershark.github.io/reactable/&quot;&gt;Reactable&lt;/a&gt; for a few examples.&lt;/p&gt;
&lt;p&gt;Today I&amp;#39;m going to discuss an alternative which I developed during the Summer. The project actually goes way back, but a client made this work possible. Read on to learn what makes &lt;a href=&quot;http://reactabular.js.org/&quot;&gt;Reactabular&lt;/a&gt; different.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/b26ec3c2769168c2cbc64cc3df9cdd9c?s=200&quot; alt=&quot;Juho Vepsäläinen&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I maintain this site and have written a book on React and webpack (available on the site). I&amp;#39;ve been programming well over a decade and started web development when jQuery didn&amp;#39;t even exist. The last year or two have been focused on establishing a little business. The books are an important part of that effort.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-reactabular-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-reactabular-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Reactabular&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-reactabular-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes to React tables, you will always find several key ideas: &lt;strong&gt;rows&lt;/strong&gt;, &lt;strong&gt;column definition&lt;/strong&gt;, &lt;strong&gt;React components&lt;/strong&gt;. This is the trinity of Reactabular.&lt;/p&gt;
&lt;p&gt;I expect that you pass an array of objects (or arrays) to it. You will define how to display these rows using a separate column definition that maps properties to specific columns. React components are more about how the table is laid out. You can swap portions of the rendering pipeline with parts of your own to customize it further. This has enabled me to build functionality on top of the light table core.&lt;/p&gt;
&lt;p&gt;Reactabular might not be the easiest component to use. It actually consists of a series of small packages (around twenty) that work together. I&amp;#39;ve implemented something known as &lt;a href=&quot;https://www.npmjs.org/package/reactabular-easy&quot;&gt;reactabular-easy&lt;/a&gt; that provides an interface closer to the alternatives. You&amp;#39;ll lose out on flexibility, but it should be literally easier to pick up without wiring that much.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s also a meta-package of sort known as simply &lt;a href=&quot;https://www.npmjs.com/package/reactabular&quot;&gt;reactabular&lt;/a&gt;. It contains most of the functionality behind a single interface. You still have to fetch extra functionality, such as editing or pagination, from separate ones. I see it as a legacy way out and I actually generate an old-fashioned build found at the &lt;a href=&quot;https://github.com/reactabular/reactabular&quot;&gt;project repository&lt;/a&gt; based on this packages.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-reactabular-work-&quot; id=&quot;how-does-reactabular-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Reactabular&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-reactabular-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier, Reactabular has a strong conceptual foundation. I would say column definition is the most interesting part of the component as I&amp;#39;ve pushed a lot of problems there. Instead of providing a prop for every feature, I rather let you compose your solutions on top of my ideas.&lt;/p&gt;
&lt;p&gt;I didn&amp;#39;t want to grow the core to support every possible use case. Instead I wanted to end up with a design that would allow me to push problems into user space. That said, the packages I&amp;#39;ve implemented cover a lot of ground and depending on your case, not a lot of extra work might be required.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#column-definition&quot; id=&quot;column-definition&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Column Definition&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#column-definition&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To understand better how Reactabular works, it&amp;#39;s a good idea to dig into the column definition. Consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; columns &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Map color to the first column&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    property&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    header&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      label&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      transforms&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
        color &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
          &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Show alert when a color header cell is clicked&lt;/span&gt;
          onClick&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;color&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    cell&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Format color content cells in a special way&lt;/span&gt;
      format&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; color &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; color &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;color&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Map name parts to a column&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    header&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      label&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Name&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Given a name is given in parts, define separate&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// columns for it&lt;/span&gt;
    children&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        property&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;name.first&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        header&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
          label&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;First Name&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        property&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;name.last&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        header&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
          label&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Last Name&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A lot of the column definition likely explains itself. There are a couple of parts that will require additional explanation to see the point. Consider &lt;code&gt;format&lt;/code&gt; for instance. It allows you to shape value formatting when rendering. This is useful if you want to transform the input into something else or attach extra logic to it.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;format&lt;/code&gt; operates within a cell, &lt;code&gt;transforms&lt;/code&gt; operate on a table cell itself. You can use it to attach handlers to it like above. There&amp;#39;s also an interception mechanism that allows us to implement editors through this interface. If a transform returns &lt;code&gt;children&lt;/code&gt;, it will override any subsequent result. That&amp;#39;s a powerful mechanism in its simplicity.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-definition&quot; id=&quot;react-definition&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Definition&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-definition&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Besides row data and a column definition, Reactabular requires one more part to work - React definition. To give you an idea of a fairly advanced one, consider the following example where I split data into two bodies while showing a header for both:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Provider&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;columns&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;columns&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Header&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Body&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot; &gt;rows&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;first &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Adam&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot; &gt;rowKey&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Header&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Body&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot; &gt;rows&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;first &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Brian&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot; &gt;rowKey&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;Table.Provider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A minimal definition with an extra &lt;code&gt;className&lt;/code&gt; could be like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jsx&quot;&gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Provider&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot; &gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;pure-table pure-table-striped&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot; &gt;columns&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;columns&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Header&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;&lt;/span&gt;Table.Body&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;rows&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;rows&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; &gt;rowKey&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot; &gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; &gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token tag&quot; &gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;lt;/&lt;/span&gt;Table.Provider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The table definition is fairly flexible. It generates standard &lt;code&gt;table&lt;/code&gt; elements by default. You could add &lt;code&gt;tfoot&lt;/code&gt; within the definition and expect it to work without any problems. That&amp;#39;s something handy for generating summaries based on data for example.&lt;/p&gt;
&lt;p&gt;There are also hooks for customizing rendering per row (&lt;code&gt;Table.Body.onRow&lt;/code&gt; prop). You can also replace &lt;code&gt;Table.Provider&lt;/code&gt; &lt;code&gt;components&lt;/code&gt; with your own if you aren&amp;#39;t happy with the defaults. Instead of rendering a regular table, you could render divs. Or you could inject React components. I implemented drag and drop on top of the core this way. The hooks also enabled a performance related feature known as virtualization without a lot of effort.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-reactabular-differ-from-other-solutions-&quot; id=&quot;how-does-reactabular-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Reactabular&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-reactabular-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started developing Reactabular in early 2015 I found the existing solutions too monolithic. I gravitated towards the idea of a column definition early on. I would say the work done during this Summer helped to make the ideas shine. The emphasis on keeping the core decoupled and extensible is the thing that sets Reactabular apart in good and bad.&lt;/p&gt;
&lt;p&gt;I learned a lot in the process and became a great fan of &lt;a href=&quot;https://medium.com/@bebraw/the-case-for-monorepos-907c1361708a&quot;&gt;monorepos&lt;/a&gt;. I also picked up a few React tricks along the way. All of this is good as it will lead to stronger content.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-reactabular-&quot; id=&quot;why-did-you-develop-reactabular-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Reactabular&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-reactabular-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I needed a table component for my &lt;a href=&quot;https://github.com/bebraw/react-crm-frontend&quot;&gt;old CRM project&lt;/a&gt;. The idea was to develop something on top of React, Swagger, and all that. The project has since then died out, but a table component, and a few others, came out of it.&lt;/p&gt;
&lt;p&gt;The Summer work was sponsored by a company known as &lt;a href=&quot;http://www.kenandy.com/&quot;&gt;Kenandy&lt;/a&gt;. The component wouldn&amp;#39;t be where it is today without their support. Having a client as a driver is most helpful and keeps you grounded as you are solving actual problems instead of only the fun ones.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From my point of view Reactabular is in maintenance mode right now. It is packed with functionality and I will work on it based on the client needs. I consider it ready on a conceptual level and I&amp;#39;m quite happy with the design. There&amp;#39;s always something to improve, but it feels fairly solid right now.&lt;/p&gt;
&lt;p&gt;As there&amp;#39;s less technical work to be done, I&amp;#39;ll put more of my personal effort towards pushing webpack and SurviveJS further. The project taught me quite a bit and I&amp;#39;ll be able to recycle the learnings into new content.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-reactabular-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-reactabular-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Reactabular&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-reactabular-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope the right people find Reactabular. I believe it has potential to make table related tasks less arduous. There&amp;#39;s certain upfront investment as you have to understand the design and concepts to make most out of it, but if you do, I think you could find value in it.&lt;/p&gt;
&lt;p&gt;Web development itself is in an interesting place. If you consider something like Reactabular, it&amp;#39;s currently limited within the domain of React. A lot of the logic actually works without, but even then the potential market is limited by definition. I truly hope we can push towards solutions that allow us to reuse more component level code across boundaries.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m likely not alone with this pain and I hope standards catch up with the recent developments. It always takes some time, but eventually we get there I hope. An alternative is of course that it will all get even messier and fragmented.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web development is a broad domain. Don&amp;#39;t try to understand all of it at once. Instead, try to develop strength in one area before moving to another. Understanding JavaScript the language opens a lot of doors by itself. Topics such as CSS are difficult by themselves.&lt;/p&gt;
&lt;p&gt;In short, don&amp;#39;t bite too much at once. Patience is gold.&lt;/p&gt;
&lt;p&gt;When it comes to motivation, find projects that are interesting to you. Sometimes getting to your goal might not be that easy, but that&amp;#39;s when you learn the most. If you are doing something you find challenging, the chances are that you are learning.&lt;/p&gt;
&lt;p&gt;I bet when most of us look to our old projects, we find a lot of room for improvement. Even within a year you&amp;#39;ll change a lot as a developer as you learn more about the field. Technological advancement makes sure it never grows old.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a couple of names in mind, but I&amp;#39;ll keep those to me. I guess you&amp;#39;ll have to wait and see.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you find &lt;a href=&quot;http://reactabular.js.org/&quot;&gt;Reactabular&lt;/a&gt; useful for your projects. Even if the component or its approach aren&amp;#39;t that interesting to you, consider checking out &lt;a href=&quot;https://github.com/reactabular/reactabular&quot;&gt;the project repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given the project has been arranged as a monorepo, it might look a little different than what you are used to. The approach is worth understanding and I believe it might change the way we think about structuring applications even instead of just npm packages.&lt;/p&gt;
&lt;p&gt;To understand the design decisions I took with Reactabular, check out &lt;a href=&quot;https://survivejs.github.io/react-api-design/&quot;&gt;my slides on React API design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a presentation I gave about the topic:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300px&quot; src=&quot;https://www.youtube.com/embed/nEn5k_HXeNc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
</content></entry><entry><title>Assetgraph - Optimization Framework for Web Pages and Applications - Interview with Peter Müller</title><id>aassetgraphoptimizationframeworkforwebpagesandapplicationsinterviewwithpetermuller2016-09-05t00:00:00z</id><link href="https://survivejs.com/blog/assetgraph-interview/"></link><updated>2016-09-05T00:00:00Z</updated><content type="html">&lt;p&gt;If you have written a web application or site, you have had to deal with various assets like images, fonts, HTML, JavaScript code, whatnot. It&amp;#39;s not a simple task to keep it all organized. This is why we have tools like &lt;a href=&quot;https://webpack.github.io/&quot;&gt;webpack&lt;/a&gt;, &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;, or &lt;a href=&quot;http://jspm.io/&quot;&gt;jspm&lt;/a&gt; after all.&lt;/p&gt;
&lt;p&gt;Today I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/_munter_&quot;&gt;Peter Müller&lt;/a&gt;, the author of &lt;a href=&quot;https://github.com/assetgraph/assetgraph&quot;&gt;AssetGraph&lt;/a&gt;, a tool fitting this category. Read on to learn more about the problem and how the tool solves it in a rather unique way.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/01349d877b6e4b9c0ddbadf97f07fa0d?s=200&quot; alt=&quot;Peter Müller&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I am a seasoned front-end developer with lots of experience in developing high usage productivity applications that drive daily workflows. I&amp;#39;ve focused my attention on the problems surrounding development and build tooling for web sites for a long time and have gained an ever-increasing appreciation of simplicity wherever it can be found.
&lt;/p&gt;

&lt;p&gt;I am a maintainer of the &lt;a href=&quot;https://github.com/assetgraph/assetgraph&quot;&gt;Assetgraph&lt;/a&gt; project, authored &lt;a href=&quot;https://github.com/One-com/one-color&quot;&gt;one-color&lt;/a&gt; and contribute to &lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt; and &lt;a href=&quot;https://github.com/unexpectedjs/unexpected&quot;&gt;Unexpected&lt;/a&gt;. I recently had my first child, dealt with cancer, and became the owner of a garden, where I hope to put my feet up and relax once in a while.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt;. I&amp;#39;m actually using &lt;em&gt;one-color&lt;/em&gt; to power my colorpicker, &lt;a href=&quot;https://bebraw.github.io/colorjoe/&quot;&gt;colorjoe&lt;/a&gt;. Good API. Thanks Peter!&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-assetgraph-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-assetgraph-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Assetgraph&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-assetgraph-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Assetgraph is a dependency graph that instantiates full data models of all types of typical web assets; HTML, CSS, JavaScript, images and so on. It also comes with the ability to automatically populate this dependency graph by static analysis and crawling of the found dependencies.&lt;/p&gt;
&lt;p&gt;To make this graph model useful it has a query language to find assets (nodes) or relations (edges), a transform pipeline to chain modifications of the graph and many curated graph transformations that all focus on common web performance optimizing tasks.&lt;/p&gt;
&lt;p&gt;In itself Assetgraph is not useful to the common web developer, but it enables tool developers to take advantage of a full and consistent data model that has a larger scope than any other build tool out there. Let&amp;#39;s call it a toolmakers toolbox.&lt;/p&gt;
&lt;p&gt;The really interesting applications are in the specific opinionated tool implementations and the API they expose to the end-user.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-assetgraph-work-&quot; id=&quot;how-does-assetgraph-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Assetgraph&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-assetgraph-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a certain life cycle that usually makes sense for most Assetgraph based tools:&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#1-loading&quot; id=&quot;1-loading&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;1. Loading&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#1-loading&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Load in some initial assets, entry points of your website like &lt;strong&gt;index.html&lt;/strong&gt;, &lt;strong&gt;webmanifest.json&lt;/strong&gt;, or similar. You can load any number of asset entry points into the graph using the &lt;a href=&quot;https://github.com/assetgraph/assetgraph#assetgraphloadassetsfilenamewildcardurlasset-&quot;&gt;loadAssets transform&lt;/a&gt;. At this point these assets are nodes without any relation in the dependency graph. To set up the relations between the assets you need to use the &lt;a href=&quot;https://github.com/assetgraph/assetgraph#transformspopulateoptions&quot;&gt;populate transform&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#2-expanding-the-graph-by-crawling&quot; id=&quot;2-expanding-the-graph-by-crawling&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;2. Expanding the graph by crawling&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#2-expanding-the-graph-by-crawling&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Populating the graph with a &lt;code&gt;populate()&lt;/code&gt; call will start a deep traversal of all outgoing relations to other assets. So if we start the graph with &lt;strong&gt;index.html&lt;/strong&gt;, &lt;code&gt;populate()&lt;/code&gt; will find all outgoing anchors to other pages, HTML script tags, style tags, images, RSS feeds, and so forth.&lt;/p&gt;
&lt;p&gt;For each of these it will recursively expand their dependencies and keep going until there are no more or it hits a stop condition. If you just let it run unlimited it has the potential to start scraping the entire internet, which I don&amp;#39;t recommend. ;)&lt;/p&gt;
&lt;p&gt;This is where the query model comes into play. By passing a query into the populate transform, only assets or relations matching that query will be populated in the graph. A good starter query is &lt;code&gt;{ followRelations: { crossorigin: false }}&lt;/code&gt; in case your focus is a build system.&lt;/p&gt;
&lt;p&gt;This will basically give you a fully populated graph of all your local files if you started with &lt;code&gt;file:///project/index.html&lt;/code&gt;, but you could just as well start it off with a URL to a website and get a graph of all its same-origin dependencies.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; Peter has written a tool known as &lt;a href=&quot;https://github.com/Munter/assetviz&quot;&gt;Assetviz&lt;/a&gt; that allows you to visualize the structure of your site in a graph format. &lt;a href=&quot;https://github.com/Munter/hyperlink&quot;&gt;hyperlink&lt;/a&gt;, a hyperlink integrity checker, is another useful tool based on the technology.&lt;/blockquote&gt;&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#3-transforming-the-graph&quot; id=&quot;3-transforming-the-graph&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;3. Transforming the graph&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#3-transforming-the-graph&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/6f2b59152ff49a0495d19fe0a129a207.png&quot; alt=&quot;Transforming the graph&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Transforming the graph&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now you have a fully populated graph model of your code, and this is where the fun starts. Using the transform pipeline you can queue transformations to run on the graph. If you want to rename a file, change its URL with &lt;code&gt;asset.url = &amp;#39;foo.html&amp;#39;&lt;/code&gt;. As a result all relations pointing to it will be updated.&lt;/p&gt;
&lt;p&gt;If you want to inline some relations based on the target assets file size, call &lt;code&gt;relation.inline()&lt;/code&gt;. There is a long &lt;a href=&quot;https://github.com/assetgraph/assetgraph/tree/master/lib/transforms&quot;&gt;list of available transformations&lt;/a&gt; to do these common tasks.&lt;/p&gt;
&lt;p&gt;In the end, when you have made all your modifications, you can write the contents of the graph to disk, use it from memory or whatever you can come up with.&lt;/p&gt;
&lt;p&gt;Writing your own transformations is relatively straight forward, since the data models are kind of standard these days. HTML is is modeled using jsdom, so you can simply traverse DOM as you are used to. CSS is modeled with the PostCSS data model and JavaScript with Esprima. So you have raw access to the bare metal if you need to, but can still reap all the benefits from the high level modeling.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-assetgraph-differ-from-other-solutions-&quot; id=&quot;how-does-assetgraph-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Assetgraph&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-assetgraph-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not aware of any project with a scope comparable to core Assetgraph, but I can compare &lt;a href=&quot;https://github.com/assetgraph/assetgraph-builder&quot;&gt;Assetgraph-builder&lt;/a&gt; to other projects. Assetgraph-builder is the teams opinionated take on what a web performance optimizing build tool should do, so it comes with all the bells and whistles and attempts to expose a very powerful set of functionality with a focus on simple configuration.&lt;/p&gt;
&lt;p&gt;From a build system perspective I&amp;#39;d say the main difference between Assetgraph and other solutions is the scope of what the model tries to cover. Build tools come in lots of varieties, but what most other tools have in common is that to use them you have to adapt your code and development environment for the tool.&lt;/p&gt;
&lt;p&gt;With Assetgraph we have a core belief that the tool should not dictate your code. It should instead be able to understand your code like a browser can. This makes a big difference in how you develop. Using Assetgraph you can write a web page like you did in the 90&amp;#39;s. Just make pages, include scripts, reference images etc.&lt;/p&gt;
&lt;p&gt;With Assetgraph you don&amp;#39;t think about optimization, and instead focus on making it work in your browser. Then, when you are ready to deploy, you point Assetgraph-builder at your index file and deploy the optimized website that comes out at the other end.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way Assetgraph works is a stark contrast to all other tools that has you build things in pieces and the tool must assemble things for you before you even have a working web page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this way Assetgraph gives you an independence of your tool chain which other tools can&amp;#39;t. If all tools took a similar approach to not dictating how you assemble your code, tools could actually be fully interoperable and be chained together with ease because they would all work with the same data model, a full dependency graph of the entire website.&lt;/p&gt;
&lt;p&gt;Other dependency graph based tools, like Browserify, systemjs-builder and webpack have the potential to come close, but as long as they limit their entry point to JavaScript they will always have to expose this leaky abstraction where the user needs to have a environment variable switch between development and production code.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; webpack accepts CSS entries. The &lt;a href=&quot;https://github.com/webpack/webpack/issues/1967&quot;&gt;problem is that it generates functionally useless JavaScript files&lt;/a&gt; at the moment. There has also been &lt;a href=&quot;https://github.com/webpack/webpack/issues/536&quot;&gt;discussion of using HTML files as entry points&lt;/a&gt;.&lt;/blockquote&gt;&lt;p&gt;A really big difference is that having the entire scope of your site automatically discovered and modeled on a high level, is that a lot of configuration that you see in other tools simply disappears. File based tools like Grunt, Gulp, Broccoli or even Make, make you configure manifests of files that someone needs to maintain the correct order of. Assetgraph simply finds these things itself.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve seen &lt;strong&gt;Gruntfiles&lt;/strong&gt; where I could literally remove 80-90% of the configuration and replace it with a call to Assetgraph-builder or &lt;a href=&quot;https://github.com/Munter/grunt-reduce&quot;&gt;grunt-reduce&lt;/a&gt;, which is a Grunt wrapper I wrote for that audience. This simplicity is a thing we focus on keeping across all our transforms and tools. We only want to expose the &amp;quot;what&amp;quot;, not the &amp;quot;how&amp;quot; of operations.&lt;/p&gt;
&lt;p&gt;The feature set Assetgraph comes with is also quite impressive in its range and stability compared to other tools. Being able to automatically generate shared bundles across pages by taking advantage of the knowledge of multiple html entry points is something I haven&amp;#39;t seen anywhere else.&lt;/p&gt;
&lt;p&gt;Another example is automated spriting, where you work with your raw images as CSS backgrounds in development and just append the URL with &lt;code&gt;?sprite=spriteName&lt;/code&gt; and you get a sprite sheet and all image references updates automatically. The ability to populate external dependencies outside of your own code, to check subresource integrity hashes, update URL&amp;#39;s based on 301 redirects, warn about 404&amp;#39;s, inject them for external critical resources like Web Fonts are examples of further functionality.&lt;/p&gt;
&lt;p&gt;Some things just become so much simpler when you are working with a dependency graph. I have looked on in sadness while file based tools like grunt-filerev has struggled to fix bugs and new ones just kept popping up, while we&amp;#39;ve been able to have consistent file hashing across an entire site with what is almost a one-liner. I hope more tools will start taking advantage of dependency graphs in the future.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-assetgraph-&quot; id=&quot;why-did-you-develop-assetgraph-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Assetgraph&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-assetgraph-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As most other projects we created Assetgraph to scratch an itch. Back in around 2007 &lt;a href=&quot;https://github.com/papandreou&quot;&gt;Andreas Lind Petersen&lt;/a&gt; and I were working for an atypical web hosting company that was investing heavily in developing their own solutions for webmail, calendaring, blog creation, galleries etc.&lt;/p&gt;
&lt;p&gt;These were all fairly large and complex web applications with heavy use of lots of CSS and JavaScript. At the same time awareness was growing about web performance and the lack thereof as &lt;a href=&quot;https://github.com/stevesouders&quot;&gt;Steve Souders&lt;/a&gt; had released his inital research results and the resulting 10 rules for better web performance.&lt;/p&gt;
&lt;p&gt;Since we had a lot of users on each of our apps and these apps were driving people&amp;#39;s every day communication for work and play, we took performance seriously. At the time our most used app was simply loading blocking script tags in order, CSS nicely divided into multiple requests and so forth. A load performance nightmare. This was further complicated by the app not being single page like in these modern times, but a frameset with multiple pages that had a set of common dependencies.&lt;/p&gt;
&lt;p&gt;We iterated through a number of build systems. At the time the best thing available was Yahoo Builder with its Java dependency, massive XML configuration and slowness. Later we tried Make files for bundling and eventually ended up with a hybrid Makefile and Perl script.&lt;/p&gt;
&lt;p&gt;At this point we had added our own custom syntax for a JavaScript dependency with &lt;code&gt;// INCLUDE &amp;#39;foo.js&amp;#39;&lt;/code&gt; (I think, long time ago), which would then be picked up by the scripts and in development flattened out to a number of script tags (source maps didn&amp;#39;t exist), but in production it would bundle things together. We ran into all the same problems that Grunt and Gulp plugins have done historically and were never quite satisfied with being stuck with file and string manipulation.&lt;/p&gt;
&lt;p&gt;Then Node.js came around, and immediately some really useful modules started becoming available. jsdom, CSSOM and UglifyJS provided ASTs for their respective data model. So Andreas had this brilliant idea of using a graph model to describe the assets and their relations. This was still quite early, I think the first release of Assetgraph came out half a year before Grunt.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;&lt;strong&gt;Editor&amp;#39;s note:&lt;/strong&gt; AST as in &lt;em&gt;Abstract Syntax Tree&lt;/em&gt;. It is an intermediate format these tools use for manipulation.&lt;/blockquote&gt;&lt;p&gt;In the beginning it was crude and only had a few use cases like bundling and file renaming, only worked with our code and assumed a lot of things. Since then we saw more and more of the value of having a graph model and started separating the core functionality from the build specific ones, creating Assetgraph-builder for our specific purposes, while Assetgraph was getting trimmed down to become more of a tool collection that one could assemble in many ways.&lt;/p&gt;
&lt;p&gt;Since then Assetgraph has been driving the web front-end builds of every web application at that web hosting company, and is even used to optimize customer websites created through a &amp;quot;drag and click your own website&amp;quot;-application.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#39;re preparing a new major release that has updated old and stale dependencies with newer ones, putting Assetgraph on par with other current tools. We were running our own fork of jsdom, which has now been deprecated and replaced with the latest jsdom. CSSOM was replaced with PostCSS and the UglifyJS AST with Esprima.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ve killed a lot of features and support for obscure cases that were primarily interesting for internal reasons at that web hosting company. So the upcoming release is simpler to use and has less code to read and maintain.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re changing our focus from trying to do everything ourself to offloading some work to other tools that fit into the Assetgraph model in a collaborative way. There is now a SystemJS integration which offloads the complexity of modeling SystemJS compatible modules and their configuration to systemjs-builder.&lt;/p&gt;
&lt;p&gt;There is now a webpack integration which runs webpack as a step in the build, hopefully enabling people to use webpack for its awesome development experience, but still use Assetgraph-builder for its configuration simplicity.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m hoping we can find more common interfaces between build systems so there could be future hooks for Browserify, Gulp, Broccoli and all the build tools I have forgotten about. The webpack community is making great efforts to try to get cross community collaboration going and I have to applaud that.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-assetgraph-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-assetgraph-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Assetgraph&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-assetgraph-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For Assetgraph I have a number of hopes for the future. First of all I would hope that Assetgraph-builder will become a recognizable name in the community and that the builder sees some adoption. Maybe not for large complicated web apps where people have already dug deep and invested in other build setups, but for simpler static pages like blogs. Assetgraph-builder is extremely well suited for being run on the output of Jekyll, Harp and all the myriads of other static site generators.&lt;/p&gt;
&lt;p&gt;I hope Assetgraph will become a driver of more than just build tooling. Using the full knowledge of all site dependencies I could easily see it become the engine that drives HTTP2 push in a server middleware, the engine of an editor plugin that lets you navigate site dependencies and informs auto suggest in a better way.&lt;/p&gt;
&lt;p&gt;The crawling ability of Assetgraph is something I already used to create &lt;a href=&quot;https://github.com/Munter/hyperlink&quot;&gt;hyperlink&lt;/a&gt; a hyperlink integrity checker, but I see many more similar applications where tools could extract and test external information.&lt;/p&gt;
&lt;p&gt;I am really excited about the movement behind Service Workers and progressive web apps and I see great things happening in that direction. I really hope that the web can start displacing many of these webview and CRUD apps that live in the app stores, while the open web could do a better job with discoverability and delivery. I want to make that happen, so I focus on keeping Assetgraphs static analysis up to speed with all the new specs.&lt;/p&gt;
&lt;p&gt;I am excited about the React movement. I hope that it will somehow be possible to adopt some of these techniques into more standardized practices. I had great hopes for Web Components, and I still like the idea, but the simplicity of React&amp;#39;s model of composition and declarative UI just wins big for me.&lt;/p&gt;
&lt;p&gt;Build tooling wise I see a continued trend of working with development in a very fragmented way where source code is written to not work without a build tool, and the build tool is required to assemble the bits before you have a working web page. This makes me sad.&lt;/p&gt;
&lt;p&gt;In an ideal world we would move towards making the code work in the browser runtime without any external build tool dependencies. That would be a great step towards simplifying web development for newcomers, which I think is very important.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Focus on the basics before you join one of the many hype trains.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn HTML.&lt;/strong&gt; Not just the bare minimum, but all the tags and that they have accessibility implications. This is a fundamental building block that can&amp;#39;t be skipped.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn JavaScript.&lt;/strong&gt; Not ES6 and Babel and transpilers and Gulp and watchers and that whole mess. Just ES5 that works in browsers and Node.js. When you have the basics down it&amp;#39;s easier to understand what all the fuss is about when Hacker News explodes in awe of some new play toy that might do one or two things different from the rest of the frameworks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn CSS.&lt;/strong&gt; Not some methodology. &amp;quot;Just&amp;quot; how layout works. When I put quotes around that it&amp;#39;s because I think CSS is actually the hardest web technology of the three to learn and master. Pushing pixels just right is tough! Understand that most of the different methodologies are mostly about creating globally unique selectors that don&amp;#39;t conflict through the cascade, and all that crap is side-stepped if you use locally scoped CSS with web components, CSS in JavaScript or CSS components.&lt;/p&gt;
&lt;p&gt;Ask a lot of questions and engage with the people who help you find the right answers.&lt;/p&gt;
&lt;p&gt;Contribute to open source projects you use. In the beginning a contribution might just be asking a question about missing documentation in a GitHub issue. Then help document it. Eventually you might find a bug you can fix or a feature you can add, but start slow and get a feel for it.&lt;/p&gt;
&lt;p&gt;Work in the open. It&amp;#39;s really daunting letting other people see your code, especially when you are just starting out. But it makes you a better programmer in the end.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sunesimonsen&quot;&gt;Sune Simonsen&lt;/a&gt;, who has authored an incredibly powerful assertion library called &lt;a href=&quot;http://unexpected.js.org/&quot;&gt;Unexpected&lt;/a&gt;. His views on testing and his continuous work on improving the testing experience is what finally got me excited about testing front-end code. It has improved my programming skills immensely, so I hope other people can find similar inspiration and start using his really awesome assertion library.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Peter! I&amp;#39;ve dealt with graphs myself in the past in other context (&lt;a href=&quot;https://www.blender.org/&quot;&gt;Blender&lt;/a&gt; node editor) and can appreciate the approach. It&amp;#39;s a good abstraction and it fits web development well.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/assetgraph/assetgraph&quot;&gt;learn more about Assetgraph at the GitHub&lt;/a&gt;. Check out also &lt;a href=&quot;https://github.com/Munter/hyperlink&quot;&gt;hyperlink&lt;/a&gt; and &lt;a href=&quot;https://github.com/Munter/assetviz&quot;&gt;AssetViz&lt;/a&gt; to get more insight into your site or application.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;I set up a little &lt;a href=&quot;https://survivejs-demos.github.io/assetviz-demo/&quot;&gt;AssetViz demo&lt;/a&gt; based on this site to give you a better idea of what kind of visualization it provides. Given the tool constructs the site based on RSS, it&amp;#39;s missing a part of the site, but it&amp;#39;s good enough for a demo.&lt;/blockquote&gt;</content></entry><entry><title>PureScript - Strongly Typed Programming Language Compiling to JavaScript - Interview with Phil Freeman</title><id>apurescriptstronglytypedprogramminglanguagecompilingtojavascriptinterviewwithphilfreeman2016-08-22t00:00:00z</id><link href="https://survivejs.com/blog/purescript-interview/"></link><updated>2016-08-22T00:00:00Z</updated><content type="html">&lt;p&gt;It&amp;#39;s interesting how JavaScript development proceeds in cycles. While a lot of people might be happy with the standard language, there are always some that are willing to go further and push the envelope.&lt;/p&gt;
&lt;p&gt;Sometimes this leads to a better standard as we saw with ES2015 when it adopted a variety of CoffeeScript inspired features. The cycle will likely repeat as we see more experimentation around the language.&lt;/p&gt;
&lt;p&gt;To get a better idea of the topic, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/paf31&quot;&gt;Phil Freeman&lt;/a&gt;, the author of &lt;a href=&quot;http://www.purescript.org/&quot;&gt;PureScript&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/cbed6f201f9a0e735e5660d118c6662d?s=200&quot; alt=&quot;Phil Freeman&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I created the PureScript language and compiler a few years ago, and I continue to develop the language and its libraries. I write Haskell code for a living, and I&amp;#39;m interested in the problem of program correctness generally, so I tend to enjoy using statically typed functional programming languages where possible.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-purescript-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-purescript-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;PureScript&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-purescript-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PureScript is a purely-functional, strongly-typed programming language for the web. If you&amp;#39;ve seen Haskell before, many of the ideas will be familiar. However, unlike Haskell, PureScript is designed specifically for compilation to (straightforward) JavaScript, and compiled PureScript code can run in any environment where JavaScript runs.&lt;/p&gt;
&lt;p&gt;PureScript allows developers to identify errors at compile time, instead of at runtime, by using its expressive type system. At a simple level, this means no more &lt;code&gt;undefined is not a function&lt;/code&gt; or similar errors, but we can use the type system to validate more interesting things like &lt;code&gt;this function reads from (but does not write to) the filesystem&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-purescript-work-&quot; id=&quot;how-does-purescript-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;PureScript&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-purescript-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The PureScript compiler takes PureScript source files as input, parses and checks them, and turns them into either a collection of CommonJS modules, or a single JavaScript bundle for the browser. You can run the compiler on source files directly, but in practice, most users prefer to use additional tools to integrate PureScript into their existing JavaScript workflow.&lt;/p&gt;
&lt;p&gt;One of the most popular tools is &lt;a href=&quot;https://github.com/bodil/pulp&quot;&gt;Pulp&lt;/a&gt;, which is a build (and general automation) tool for PureScript projects. Like many PureScript tools, Pulp is written in PureScript itself, and can be installed and run using NPM.&lt;/p&gt;
&lt;p&gt;Another essential tool for PureScript development is &lt;a href=&quot;https://pursuit.purescript.org&quot;&gt;Pursuit&lt;/a&gt;, which is our package database.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-purescript-differ-from-other-solutions-&quot; id=&quot;how-does-purescript-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;PureScript&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-purescript-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The three main features which distinguish PureScript from other similar transpilers are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strong, expressive types&lt;/li&gt;
&lt;li&gt;Compatibility with the JavaScript ecosystem&lt;/li&gt;
&lt;li&gt;Minimalism&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#expressive-types&quot; id=&quot;expressive-types&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Expressive Types&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#expressive-types&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Other languages have strong type systems - &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; is probably the most notable example of a language with an ML-like type system, compiling to JavaScript - but PureScript provides many advanced type system features which those languages lack: higher kinded types and type classes are two examples of advanced type system features which PureScript takes from Haskell. These features can enable a high level of code reuse.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#javascript-compatibility&quot; id=&quot;javascript-compatibility&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;JavaScript Compatibility&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#javascript-compatibility&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are other projects with advanced Haskell-like type systems. &lt;a href=&quot;https://github.com/ghcjs/ghcjs&quot;&gt;GHCJS&lt;/a&gt; is a great example - where PureScript is inspired by Haskell, GHCJS is actually full Haskell compiled to JavaScript.&lt;/p&gt;
&lt;p&gt;This is powerful, since you get to reuse lots of existing work from the Haskell community. However, what separates PureScript from projects like GHCJS is that PureScript aims for strong compatibility with existing JavaScript tools, as opposed to using existing Haskell tooling.&lt;/p&gt;
&lt;p&gt;Also, compiled PureScript code is readable, and code generation is predictable. By comparison, compiling the full Haskell language to JavaScript (along with its non-strict semantics) can result in large, unreadable code.&lt;/p&gt;
&lt;p&gt;So PureScript sits in an interesting niche between languages like Elm and GHCJS, providing some of the more advanced type system features from Haskell, but keeping very close ties to the JavaScript platform.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minimalism&quot; id=&quot;minimalism&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minimalism&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minimalism&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PureScript tries quite hard to assume as little as possible about your development workflow. The compiler itself ships with no libraries, although we do provide a comprehensive suite of core libraries which most larger projects will use. This means that users are free to build their own standard libraries if they like. With this approach, compiled PureScript code can be very small and fast.&lt;/p&gt;
&lt;p&gt;Also, many things which would be implemented as language or compiler features in other programming languages are implemented in either external tools or PureScript libraries.&lt;/p&gt;
&lt;p&gt;Consider language features like generators or promises in JavaScript. Those are implemented with special support in the language itself, but in PureScript they can be implemented as user libraries, which means we don&amp;#39;t need to maintain those additional features in the compiler.&lt;/p&gt;
&lt;p&gt;I think this sort of approach is essential if we want to continue to apply PureScript to projects of all sizes, from small single-module projects, to full-application development. If you choose to write a single application module in PureScript, you shouldn&amp;#39;t have to pull in an array of tools or a large standard library of unrelated code.&lt;/p&gt;
&lt;p&gt;Another important benefit of a minimalist approach is that it allows the community to try out several ideas at once. For example, PureScript isn&amp;#39;t limited to only one approach to user interface development - instead, we have several libraries - all experimenting with novel applications of functional programming techniques to UI development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In fact, pretty much every part of the PureScript library ecosystem can be replaced with some alternate implementation. That wouldn&amp;#39;t be possible with a batteries-included compiler distribution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-purescript-&quot; id=&quot;why-did-you-develop-purescript-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;PureScript&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-purescript-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few years ago, I was writing TypeScript for a living, and for the most part I enjoyed it. Coming from a Java/C# background, the type system concepts were familiar. However, I had been reading about and practicing Haskell at the time, and the benefits of things like immutable data and the pure functional approach generally were becoming more obvious. So I knew I wanted a language which could enable pure, typed functional programming.&lt;/p&gt;
&lt;p&gt;At the time, there were a few options. Elm was relatively new, and at the time, it was focused on FRP and certain types of UI applications. I knew I wanted something a bit more general purpose. GHCJS was very interesting, but might have been difficult to sell to the rest of the team, given that we were used to reading JavaScript and using JavasSript tools.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://roy.brianmckenna.org/&quot;&gt;Roy programming language&lt;/a&gt; was very close to what I wanted, but I had a few relatively minor concerns about that too, mostly around the treatment of side-effects in code.&lt;/p&gt;
&lt;p&gt;So, these were all great options, but there was no language exactly like the one I wanted. I had some bits and pieces of code from my experiments with Haskell: parsers, simple type checkers, optimizer passes, these sorts of things. So I decided to put together a prototype of the language I wanted, and a few months later, I posted version 0.1 to Reddit.&lt;/p&gt;
&lt;p&gt;It turned out that plenty of people were interested and wanted a language with similar features, so I quickly found contributors to help work on the project after that. Now, we have a great group of contributors working on the compiler and its libraries and tools.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the short term, we have contributors actively working on different things - I&amp;#39;m working on some new type system enhancements, and others are working on a range of interesting things, such as pretty printing source code, new optimizer passes, new backends (Lua, Erlang, Python and C++ backends exist right now), and novel editor plugins.&lt;/p&gt;
&lt;p&gt;In the longer term, we continue to work towards a 1.0 release. Along with fixing various bugs, and adding features in the compiler, that means that we&amp;#39;ll be working on tools to ensure a complete developer experience: package management, tools for easier integration with JavaScript, continued work on editor tooling, and so on.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-purescript-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-purescript-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;PureScript&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-purescript-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope to see more adoption of PureScript, and functional programming generally in industry. Functional programming is gradually becoming more popular for both backend and frontend JavaScript, both in terms of functional languages like PureScript, but also in the form of ideas from functional programming making their way into regular JavaScript libraries (React, Redux, etc.).&lt;/p&gt;
&lt;p&gt;PureScript has been adopted successfully and put into production at several companies now, and I&amp;#39;d like to see that trend continue. To make that possible, I&amp;#39;d like to work on lowering the barrier to adoption, so that PureScript becomes a more obvious choice of programming language for more people.&lt;/p&gt;
&lt;p&gt;Other than that, I think the future for PureScript looks like more of the same - a group of contributors trying to build the programming language that they want to use. :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Phil! Learning to use new languages is always a worthwhile idea. I&amp;#39;ve found it puts the ones you know well already into a perspective. You can &lt;a href=&quot;http://try.purescript.org&quot;&gt;try PureScript&lt;/a&gt; online. Phil has also written a free book, known as &lt;a href=&quot;http://leanpub.com/purescript/read&quot;&gt;PureScript by Example&lt;/a&gt;, about the topic.&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&quot;http://purescript.org&quot;&gt;PureScript Website&lt;/a&gt; and &lt;a href=&quot;http://pursuit.purescript.org&quot;&gt;Pursuit Package Database&lt;/a&gt; for further information.&lt;/p&gt;
</content></entry><entry><title>CodeceptJS - Modern Era Acceptance Testing for Node.js - Interview with Michael Bodnarchuk</title><id>acodeceptjsmoderneraacceptancetestingfornodejsinterviewwithmichaelbodnarchuk2016-08-15t00:00:00z</id><link href="https://survivejs.com/blog/codeceptjs-interview/"></link><updated>2016-08-15T00:00:00Z</updated><content type="html">&lt;p&gt;Testing is a complicated topic. Just peppering your code with unit tests isn&amp;#39;t often enough. You&amp;#39;ll need something more, especially if you are developing something user facing. That&amp;#39;s where techniques like integration or acceptance testing come in.&lt;/p&gt;
&lt;p&gt;Michael Bodnarchuk, an old friend of mine from the &lt;a href=&quot;http://jster.net/&quot;&gt;JSter&lt;/a&gt; era, is a testing specialist. He has developed a testing tool known as &lt;a href=&quot;http://codeception.com/&quot;&gt;Codeception&lt;/a&gt; for PHP. Today we will discuss &lt;a href=&quot;http://codecept.io/&quot;&gt;Codecept.js&lt;/a&gt;, a tool focused on acceptance testing using Node.js.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/8193cbc929cf9b73b4efc41af9f1634e.jpg&quot; alt=&quot;Michael Bodnarchuk&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Michael Bodnarchuk&lt;/figcaption&gt;&lt;/figure&gt;

  My name is Michael, I live in Kyiv, Ukraine. What I do the most is open-source development, mountain trips, and exploring the world step by step.
&lt;/p&gt;

&lt;p&gt;To be honest, I didn&amp;#39;t ever have a motivation to travel a lot (except for tracking) so I started to send my talks to conferences. After I started being accepted there, I visited Barcelona, Istanbul, Amsterdam. What would I do there without tech conferences? No idea. :)&lt;/p&gt;
&lt;p&gt;My primary language is PHP but I&amp;#39;m also passionate about Ruby and JavaScript. We can&amp;#39;t be bound to one language if we are web developers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-codeceptjs-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-codeceptjs-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;CodeceptJS&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-codeceptjs-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;CodeceptJS&lt;/em&gt; is a tool that makes acceptance testing fun and easy thing to do. Have you ever had a pain using various Selenium libraries or Protractor? How hard was it to create the simplest test, fight over asynchronous callbacks, and different API versions?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CodeceptJS&lt;/em&gt; provides an engine that allows to write test once and run it using library of your choice: webdriverio, Protractor, Nightmare, etc.&lt;/p&gt;
&lt;p&gt;The API was designed to make tests easy to read, write, and develop. Actually the test is written in JavaScript DSL, which describes user&amp;#39;s actions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;I&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;amOnPage&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
I&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;Login&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
I&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;see&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;Welcome&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those commands are written in synchronous manner and handled in a global promise chain. That makes tests clean, you can even write tests in your native language!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-codeceptjs-&quot; id=&quot;why-did-you-develop-codeceptjs-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;CodeceptJS&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-codeceptjs-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had some experience developing &lt;a href=&quot;http://codeception.com&quot;&gt;Codeception&lt;/a&gt;, a testing framework for PHP. It is my main product. I started to think If I have experience to share with JS community. And after some investigation I found that there is no good tool of such kind. Tool that could make tests elegant and use different running engines. I think it worked.&lt;/p&gt;
&lt;p&gt;I know there are already many folks around using it in different projects, one of them is a Brazilian government organization. If you think of it, it may save a lot of time (and money) by just making testing easier.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t see reason why senior JavaScript developers should learn Selenium libraries to write test automation. The less time they spend on such tasks the more they can do for business part of applications. And &lt;em&gt;CodeceptJS&lt;/em&gt; is a perfect time saver.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/3bd2240b94ab85e9c235fbff93130ee9.png&quot; alt=&quot;In action&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;In action&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a newcomer from the PHP world it was hard to get into the event loop. Especially when I had ambitious plan to fight the asynchrony. This also make me able to think in a different way. I wanted to see tests written without callbacks and chain of execution.&lt;/p&gt;
&lt;p&gt;I wanted a tester to concentrate on a test itself and not on its implementation. So the implementation is hidden in the engine. I ended up with global promise chain and a my own interface working on top of Mocha. By the way, I learned Node.js by reading Mocha sources and I really liked how it is implemented.&lt;/p&gt;
&lt;p&gt;It is really compact, simple, and powerful. I tried to make my library to be written elegantly as well, that&amp;#39;s why I&amp;#39;ve chosen to use ES6. I don&amp;#39;t use transpiler of any kind, as I&amp;#39;m perfectly fine with current ES6 support in Node. And nope, I&amp;#39;m not planning to migrate to TypeScript. :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently, &lt;em&gt;CodeceptJS&lt;/em&gt; allows you to use webdriverio, Selenium, WebdriverJS, Protractor, Nightmare as a backend for running tests. Probably this can be extended with testing mobile and Electron apps. Yes, we plan to add support for Electron testing using its official Spectron library.&lt;/p&gt;
&lt;p&gt;We also have localization for Russian and Portuguese, so you can write in it and see it in test reports. I think we will extend to more languages. One part of my global plan is to embrace Cucumber - to allow writing not only tests but business expectation as well. However, currently the focus is on stabilizing the product, getting more and more people on board, and making it not only fancy but reliable too.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/73a315f5a4fe60bc55e851f141a2f01b.png&quot; alt=&quot;Interactive session&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Interactive session&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m a backend developer, and &lt;em&gt;CodeceptJS&lt;/em&gt; is a Node.js tool, so to be honest I don&amp;#39;t deal with frontend heavily. However, I really like the paradigm shift in front-end. We stopped thinking in terms of pages, now we think everything as an autonomous component.&lt;/p&gt;
&lt;p&gt;Nevertheless, components are still need to be grouped into a web pages, ensuring they play nicely together. Even they are unit tested this may not be enough. The more front-end JavaScript is written, the harder is to ensure everything works smoothly.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s why I see that we still need acceptance tests with heavy tools like Selenium. They are slow, fragile, but they give us the real picture of web site. What can we do to speed up testing is to use libraries like Electron to recreate browser in own environment.&lt;/p&gt;
&lt;p&gt;That what actually NightmareJS does, it use Electron for testing and this makes speed to be really fast. I think more development and more testing will be done in JavaScript just because we can&amp;#39;t ignore fact that more and more apps are being built using React, React Native, Flux, Redux, etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Testers should have understanding of those technologies to optimize test execution. I don&amp;#39;t imagine writing such E2E tests in Java, it doesn&amp;#39;t sound optimal to me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d like to hear from &lt;a href=&quot;https://twitter.com/bromann&quot;&gt;Christian Bromann&lt;/a&gt;. He maintains the best WebDriver library in JS - webdriverio. He knows much more about acceptance testing, not only in web but for mobile too. Ask him!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Michael! CodeceptJS is one of those tools I should integrate to certain projects of mine. Unit testing takes you only so far after all and it&amp;#39;s easy to end up with an application that has perfect test coverage but still fails to work the way it matters.&lt;/p&gt;
&lt;p&gt;If you want to give CodeceptJS a go, check out &lt;a href=&quot;http://codecept.io/quickstart/&quot;&gt;the quickstart guide&lt;/a&gt;. Only a couple of steps to get up and running.&lt;/p&gt;
</content></entry><entry><title>Mostly Adequate Guide to Functional Programming - Interview with Brian Lonsdorf</title><id>amostlyadequateguidetofunctionalprogramminginterviewwithbrianlonsdorf2016-08-01t00:00:00z</id><link href="https://survivejs.com/blog/mostly-interview/"></link><updated>2016-08-01T00:00:00Z</updated><content type="html">&lt;p&gt;You might have heard about &lt;a href=&quot;https://github.com/MostlyAdequate/mostly-adequate-guide&quot;&gt;Mostly Adequate Guide to Functional Programming (in JavaScript)&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/drboolean&quot;&gt;Brian Lonsdorf&lt;/a&gt;. It&amp;#39;s one of the better known free books discussing JavaScript.&lt;/p&gt;
&lt;p&gt;Today I&amp;#39;m bugging Brian about the topic. Functional programming is close to my heart so I&amp;#39;m very curious to hear what he has to say.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/eace1736cd5e31e6c5288e363ed669ea?s=200&quot; alt&quot;Brian Lonsdorf&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I&amp;#39;m a software developer at Salesforce working on dev-ops stuff like build servers and css analyzers. Like many, I cut my teeth on Rails, then started to wander out into the world of different languages.
&lt;/p&gt;

&lt;p&gt;I was an object-oriented fanatic for about 5 years, then grew to strongly prefer the functional paradigm despite my lack of academic prowess. In my spare time, I like to create learning content with a little spice and whimsy.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-mostly-adequate-guide-to-fp-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-mostly-adequate-guide-to-fp-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Mostly Adequate Guide to FP&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-mostly-adequate-guide-to-fp-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Serious functional programming taught through vanilla JavaScript from the perspective of a grumpy British badger.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-was-it-like-to-write-mostly-adequate-guide-to-fp-&quot; id=&quot;what-was-it-like-to-write-mostly-adequate-guide-to-fp-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What was it like to write &lt;em&gt;Mostly Adequate Guide to FP&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-was-it-like-to-write-mostly-adequate-guide-to-fp-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fun! The moment it became excruciating, I ceased to work on it. Easy as that. When the passion is gone, it probably shows in the work.
I’d hate for people to waste time reading uninspired rubbish (only the inspired rubbish…).&lt;/p&gt;
&lt;p&gt;In fact, I think that might be the key to great work. Or perhaps that’s just a way to end up with an unfinished book…&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-mostly-adequate-guide-to-fp-differ-from-the-other-available-books-&quot; id=&quot;how-does-mostly-adequate-guide-to-fp-differ-from-the-other-available-books-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Mostly Adequate Guide to FP&lt;/em&gt; differ from the other available books?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-mostly-adequate-guide-to-fp-differ-from-the-other-available-books-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, it is not very long. I use excessive metaphor. I think the main difference is that I wanted to teach the paradigm as seen in languages like Haskell or PureScript. With that in mind, I didn’t have to apologize for using point free style, IO, or other unconventional, unidiomatic js. Haskell style FP actually works quite well in JS and I haven’t hit any real issues programming in it despite the lack of laziness.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-mostly-adequate-guide-to-fp-&quot; id=&quot;why-did-you-develop-mostly-adequate-guide-to-fp-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Mostly Adequate Guide to FP&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-mostly-adequate-guide-to-fp-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’d give these talks about FP here and there at JS conferences or meetups - preaching FP at a Haskell meetup seemed redundant. Anyways, after the talk I’d get folks asking me where to learn more and I’d have to tell them to read &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn You a Haskell&lt;/a&gt; or &lt;a href=&quot;https://leanpub.com/purescript/read&quot;&gt;PureScript by Example&lt;/a&gt;. This had the side effect of immediately extinguishing any spark of interest I had going with my talk.&lt;/p&gt;
&lt;p&gt;So yeah, it was to hopefully get more folks writing functional code in general, JavaScript or otherwise. I feel really good when I hear people were inspired to write Elm after reading my book or if they had the confidence to pick up PureScript afterwards.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve been working on a stop motion video series for egghead.io that teaches the Scala-esq style. I’m giving some workshops at Strangeloop, and Connect.tech. When I’m feeling like writing again, I have a few new chapters started about monoids, traversable, and foldable to throw into the guide.&lt;/p&gt;
&lt;p&gt;Those are really important because when you start working with “containers”, you end up having to swap them around or remove values from them and I feel as though the book is almost a full guide, but certainly leaves the reader hanging without those tools.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-mostly-adequate-guide-to-fp-are-you-planning-to-write-more-books-&quot; id=&quot;what-does-the-future-look-like-for-mostly-adequate-guide-to-fp-are-you-planning-to-write-more-books-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Mostly Adequate Guide to FP&lt;/em&gt;? Are you planning to write more books?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-mostly-adequate-guide-to-fp-are-you-planning-to-write-more-books-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is an amazing community effort to keep the book going and port it to es2015. Shout out to Matthias Benkort, Christian Takle, Chet Harrison and so many other contributors I won’t, but should name drop here. So once it’s ported to the new style, I’ll put those final chapters in and call it a book. There’s also talk of a limited edition publish after that, but we’ll see.&lt;/p&gt;
&lt;p&gt;Not to get the cart ahead of the horse here, but as far as new books go, I’m interested in practical use cases and patterns for abstractions in FP. Things like using the Env Comonad to pass along meta information or Profunctor for temporary type conversions or Monoids for tracing. It’s very hard to find this kind of material; most is scattered throughout the internet, casually mentioned amongst the clamor in forums or tiny gems in the grab bag of Stack Overflow.&lt;/p&gt;
&lt;p&gt;The other interest of mine is computer science guided decision making. Every decision one makes in programming comes with a drawback and I think there should be a book out there that spells these out. Just little stuff like “want more modularity? Invert control, but beware that the caller must now assemble the pieces” or “event handlers making control flow hard to follow? Introduce streams, but remember, you’ll end up wrapping all your standard callback functions.”&lt;/p&gt;
&lt;p&gt;Anyways, maybe these books already exist. I’d rather just read them if they did.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bianca Gandolfo who is crushing it when it comes to teaching JavaScript in an approachable way or Michael Ficarra who&amp;#39;s on TC39, an open sourcerer, and committed to fixing the front end.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Brian! Remember to &lt;a href=&quot;https://github.com/MostlyAdequate/mostly-adequate-guide&quot;&gt;check out his book&lt;/a&gt; to level up your functional programming skills.&lt;/p&gt;
</content></entry><entry><title>tcomb - Type checking and DDD for JavaScript - Interview with Giulio Canti</title><id>atcombtypecheckinganddddforjavascriptinterviewwithgiuliocanti2016-07-25t00:00:00z</id><link href="https://survivejs.com/blog/tcomb-interview/"></link><updated>2016-07-25T00:00:00Z</updated><content type="html">&lt;p&gt;Given JavaScript is loosely typed, it can be amazingly productive language for prototyping. The problems begin once your project grows in complexity. It is very easy to end up with a runtime error if you miss a simple check at the right place.&lt;/p&gt;
&lt;p&gt;Testing can help to control the situation, but it&amp;#39;s not the only way. Typing systems, like &lt;a href=&quot;https://github.com/gcanti/tcomb&quot;&gt;tcomb&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/GiulioCanti&quot;&gt;Giulio Canti&lt;/a&gt;, can help. Read on to learn more.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/17e7c06ba6bf8429ce311069b95c57d7?s=200&quot; alt&quot;Giulio Canti&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I am Giulio Canti, a mathematician turned frontend developer 15 years ago. I live in Milan, Italy. Math is still my love and passion and I try to bring its spirit and methodologies in my day to day work. I&amp;#39;m interested in functional programming languages, in particular the ML family: Scala, Haskell and OCaml.
&lt;/p&gt;

&lt;p&gt;Two years ago I started to do open source, which I genuinely love, with a precise goal: bring type safety to JavaScript.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-tcomb-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-tcomb-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;tcomb&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-tcomb-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;tcomb&lt;/strong&gt; is a library for checking the types of JavaScript values at runtime with a simple and concise syntax. It&amp;#39;s great for Domain Driven Design and for adding safety to your internal code. It has solid mathematical foundations, being based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Set_theory&quot;&gt;set theory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Type instances are not boxed, meaning tcomb works great with existing libraries (lodash, Ramda, ...). You can of course use them as props to React components and it works great paired with &lt;a href=&quot;https://github.com/gcanti/tcomb-react&quot;&gt;tcomb-react&lt;/a&gt;, an alternative to &lt;code&gt;PropTypes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s enforces immutability, using the native &lt;code&gt;Object.freeze&lt;/code&gt; on type instances.&lt;/p&gt;
&lt;p&gt;Finally, it&amp;#39;s performance friendly, since asserts and &amp;quot;freezes&amp;quot; are only present in development mode and stripped out in production builds.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-tcomb-work-&quot; id=&quot;how-does-tcomb-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;tcomb&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-tcomb-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;tcomb defines a set of basic types (e.g. &lt;code&gt;t.String&lt;/code&gt;, &lt;code&gt;t.Number&lt;/code&gt;, &lt;code&gt;t.Boolean&lt;/code&gt;, ...) and a set of type combinators, i.e. functions that return a new type (e.g. &lt;code&gt;t.list&lt;/code&gt;, &lt;code&gt;t.maybe&lt;/code&gt;, &lt;code&gt;t.interface&lt;/code&gt;, ...). The power of tcomb, comes from the composition of combinators:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; t &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;tcomb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// the maybe combinator returns a new type&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// that represents an optional value&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; MyOptString &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;maybe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;String&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// an optional string&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// the list combinator returns a new type&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// that represents a list of values&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; MyList &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;MyOptString&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// a list of optional strings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using combinators like &lt;code&gt;t.interface&lt;/code&gt; or utilities like &lt;code&gt;t.assert&lt;/code&gt;, you can model your own domain and its invariants:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; t &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;tcomb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// a domain model&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Person &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-interface&quot; &gt;interface&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  surname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;maybe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;String&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  age&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;Number&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  tags&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;String&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Person&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// an invariant&lt;/span&gt;
  t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    Person&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;is&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot; &gt;&apos;Invalid argument person supplied to getFullName&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;surname&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When an assert fails, the default behavior throws a &lt;code&gt;TypeError&lt;/code&gt; with a descriptive message, so you can leverage the power of the debugger, inspect the stack and find out what&amp;#39;s wrong with little effort.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-tcomb-differ-from-other-solutions-&quot; id=&quot;how-does-tcomb-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;tcomb&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-tcomb-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a start, tcomb is a mature project: it&amp;#39;s five years old, battle tested and deployed in several production environments (it recently hit 70K/month downloads).&lt;/p&gt;
&lt;p&gt;It&amp;#39;s also an extremely flexible tool and its strength comes from two unique features: refinements and runtime type introspection:&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#refinements&quot; id=&quot;refinements&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Refinements&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#refinements&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A refinement type is a type endowed with a predicate which must hold for all instances of the refined type. Here&amp;#39;s a simple example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; t &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;tcomb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Integer &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;refinement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;Number&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; n &lt;span class=&quot;token operator&quot; &gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; PositiveInteger &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;refinement&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;Integer&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; n &lt;span class=&quot;token operator&quot; &gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; Person &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-interface&quot; &gt;interface&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  surname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;maybe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;String&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  age&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; PositiveInteger&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;= much better!&lt;/span&gt;
  tags&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;String&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Person&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means you can narrow your types defining &lt;em&gt;precise&lt;/em&gt; invariants, something that static type checkers can do only partially.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#runtime-type-introspection&quot; id=&quot;runtime-type-introspection&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Runtime Type Introspection&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#runtime-type-introspection&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All models are inspectable at runtime. You can read and reuse the informations stored in your types. For example, you can build a validation library on top of tcomb with a few lines of code; or maybe a form generator library like &lt;a href=&quot;https://github.com/gcanti/tcomb-form&quot;&gt;tcomb-form&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-tcomb-&quot; id=&quot;why-did-you-develop-tcomb-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;tcomb&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-tcomb-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my day to day work I make many mistakes. I mean &lt;em&gt;many&lt;/em&gt; mistakes. I wanted a tool which would allow me to speed up the development phase, bringing in solid type safety, yet flexible enough to define my own types and progressively introduce them in the code base.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m really excited about my last project, a &lt;a href=&quot;https://github.com/gcanti/babel-plugin-tcomb&quot;&gt;babel plugin&lt;/a&gt; for combining static and runtime type checking using &lt;a href=&quot;https://github.com/facebook/flow&quot;&gt;Flow&lt;/a&gt; and tcomb.&lt;/p&gt;
&lt;p&gt;It allows to define your tcomb types (refinements included!) as type annotations fully compatible with Flow. This means you can run them side by side, statically checking your code with Flow and catching the remaining mistakes with tcomb at runtime: the best of the two worlds!&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the first example we&amp;#39;ve seen above, rewritten leveraging the plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;type Person &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  surname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;?&lt;/span&gt;string
  age&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; number
  tags&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Array&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;string&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; Person&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; string &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot; &gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot; &gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;${&lt;/span&gt;&lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;surname&lt;span class=&quot;token interpolation-punctuation punctuation&quot; &gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Flow can typecheck this, but you can also turn it off and let tcomb check it at runtime. This simple example may not be particularly useful, but, once you start using type refinements, the mixed approach really starts to shine!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-tcomb-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-tcomb-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;tcomb&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-tcomb-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have static type checkers for JavaScript like Flow or TypeScript one could think that tcomb will be irrelevant in the long run. Far from it, there are features that I want (namely refinements, IO validation and runtime type introspection) which are either too hard or impossible for a static type checker to provide. Static and runtime type checking are complementary and both useful.&lt;/p&gt;
&lt;p&gt;More in general, I&amp;#39;m pleased to see functional programming going mainstream in many communities, included the frontend one.
I think smart type checkers and functional techniques are going to become common tools for a growing number of frontend developers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d like to read what Phil Freeman has to say about the future of PureScript.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Giulio! I&amp;#39;ve definitely seen the light with types after getting familiar with languages like Haskell myself. Even though you can manage without a strong typing system, it can still be highly useful to document your types when you know them.&lt;/p&gt;
&lt;p&gt;Particularly the new &lt;a href=&quot;https://github.com/gcanti/babel-plugin-tcomb&quot;&gt;babel plugin&lt;/a&gt; seems interesting to me and no doubt I&amp;#39;ll be giving it a good go in the near future and integrate it to the material.&lt;/p&gt;
&lt;p&gt;Perhaps we will see something similar with types and JavaScript as we saw with CoffeeScript and JavaScript. The current standard integrated the best ideas from there and as a result we have a stronger language.&lt;/p&gt;
&lt;p&gt;I hope we see stronger options for typing in the language itself in the future. Projects like &lt;a href=&quot;https://github.com/gcanti/tcomb&quot;&gt;tcomb&lt;/a&gt; are important in that they allow us to experiment with these ideas.&lt;/p&gt;
</content></entry><entry><title>redux-saga - Saga Middleware for Redux to Handle Side Effects - Interview with Yassine Elouafi</title><id>areduxsagasagamiddlewareforreduxtohandlesideeffectsinterviewwithyassineelouafi2016-07-18t00:00:00z</id><link href="https://survivejs.com/blog/redux-saga-interview/"></link><updated>2016-07-18T00:00:00Z</updated><content type="html">&lt;p&gt;When developing front-ends, handling asynchronous behavior is always bit of a challenge. &lt;a href=&quot;https://twitter.com/YassineElouafi2&quot;&gt;Yassine Elouafi&lt;/a&gt;&amp;#39;s &lt;a href=&quot;https://www.npmjs.com/package/redux-saga&quot;&gt;redux-saga&lt;/a&gt; provides one solution to this problem. Read on to learn more about sagas and &lt;strong&gt;redux-saga&lt;/strong&gt; in particular.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;Check out &lt;a href=&quot;https://survivejs.com/blog/redux-interview&quot;&gt;the earlier interview about Redux&lt;/a&gt; if you haven&amp;#39;t dug into &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt; just yet.&lt;/blockquote&gt;&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/8dd90e6539b275dd9a35c7e193d47026.jpg&quot; alt=&quot;Yassine Elouafi&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Yassine Elouafi&lt;/figcaption&gt;&lt;/figure&gt;

  My name is Yassine Elouafi, 39 old and Dad for 2 kids. I live in Tangier (Morocco) and work on a real estate company. I have a lot of passion for coding and learning and hacking new things, exploring new ideas.
&lt;/p&gt;

&lt;p&gt;Graduated? Nope (well yes and no, I&amp;#39;m graduated in Finances not in CS). I&amp;#39;m a self taught programmer. I hack things for myself, my company and occasionally others.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-saga-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-redux-saga-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;redux-saga&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-saga-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is a Redux middleware for handling &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#redux-middlewares&quot; id=&quot;redux-middlewares&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Redux Middlewares&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#redux-middlewares&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Redux middleware is an add-on you plug into Redux to get additional features. Redux is an opinionated library for managing the state of an application. Without middleware, all we can do in Redux is compute a new state from the previous state and a given action through reducers which are pure functions.&lt;/p&gt;
&lt;p&gt;All the handling inside reducers is synchronous and pure. But in real applications we need also to do things that are asynchronous (may not complete immediately like an AJAX request) and impure (change the state of the outside world, like saving to a database). In functional programming (FP) jargon we commonly refer to those things as &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;redux-saga&lt;/em&gt; middleware isolates all side effects into software artifacts called &lt;strong&gt;sagas&lt;/strong&gt; so that side effects can be managed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#sagas&quot; id=&quot;sagas&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Sagas&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#sagas&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The term &lt;em&gt;saga&lt;/em&gt; was historically used by &lt;a href=&quot;http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&quot;&gt;Hector Garcia-Molina and Kenneth Salem&lt;/a&gt; to define a mechanism to handle long lived transactions in database systems. But in &lt;em&gt;redux-saga&lt;/em&gt;, The closest meaning is actually a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/jj591569.aspx&quot;&gt;process manager&lt;/a&gt; basically: &amp;quot;a process that receive events, and may emit new events (sync or async), aiming to orchestrate complex workflows inside your application&amp;quot; (kudos to @slorber).&lt;/p&gt;
&lt;p&gt;I want to emphasize that you don&amp;#39;t actually have to go through academic papers and backend concepts in order to use &lt;em&gt;redux-saga&lt;/em&gt;. It&amp;#39;s sufficient to know that a saga is a piece of code which runs in the background, watch for dispatched actions, may perform some async calls (or synchronous impure calls like browser storage) and can dispatch other actions to the store.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-redux-saga-work-&quot; id=&quot;how-does-redux-saga-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;redux-saga&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-redux-saga-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sagas are implemented using generator functions (a new ES2015 feature). Unlike normal functions which run to completion and return a final value, generator functions can be paused and resumed on demand and can return (more accurately &lt;code&gt;yield&lt;/code&gt;) multiple values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In &lt;em&gt;redux-saga&lt;/em&gt;, Generators typically yield &lt;em&gt;effects&lt;/em&gt;. They are simply JavaScript objects containing instructions to be performed by the middleware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To understand how saga works, I&amp;#39;ll illustrate with a fairly common example and compare with &lt;a href=&quot;https://www.npmjs.com/package/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt;, the idiomatic way to handle async actions in Redux.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#requesting-data-using-redux-thunk-&quot; id=&quot;requesting-data-using-redux-thunk-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Requesting Data Using &lt;em&gt;redux-thunk&lt;/em&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#requesting-data-using-redux-thunk-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Suppose we want to request some data from a given url each time an UI Button is clicked. With &lt;em&gt;redux-thunk&lt;/em&gt; we&amp;#39;ll write a thunk which will typically look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUrl&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot; &gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;FETCH_REQUEST&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot; &gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;data &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;FETCH_SUCCESS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      data
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, assuming the thunk middleware is mounted in the Redux store, we can dispatch the above function like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token function&quot; &gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;fetchUrl&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, You write the &lt;em&gt;task&lt;/em&gt; to be performed (the &lt;code&gt;fetchUrl&lt;/code&gt; which return the thunk). And you invoke that task directly from UI components.&lt;/p&gt;
&lt;p&gt;If you don&amp;#39;t want to pollute your React components with business logic, then thunks are a the simplest and the most idiomatic way to perform side effects in Redux. However, they may have some drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In order to test the logic inside thunks, you must mock all invoked functions, including the store methods.&lt;/li&gt;
&lt;li&gt;Coordinating concurrent tasks can be difficult: If you want to cancel a pending fetch whenever a new fetch is triggered, you&amp;#39;ll have to use the Redux store to keep track of the control state (whether the previous fetch is still running or not). It might not be that difficult for simple concurrency requirements but can get quickly become awkward.&lt;/li&gt;
&lt;li&gt;Business logic tends to be scattered in various places: startup modules, components, and thunks themselves.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#requesting-data-using-redux-saga-&quot; id=&quot;requesting-data-using-redux-saga-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Requesting Data Using &lt;em&gt;redux-saga&lt;/em&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#requesting-data-using-redux-saga-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;em&gt;redux-saga&lt;/em&gt;, things are slightly different. First, UI Components never invoke the tasks themselves, instead they always dispatch plain object actions to notify that something happened in the UI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token function&quot; &gt;dispacth&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;FETCH_REQUEST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  url&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything else must be encapsulated inside sagas. To perform the task that will perform the actual fetch, you must create a saga that will &lt;em&gt;watch&lt;/em&gt; for the dispatched action &lt;code&gt;FETCH_REQUEST&lt;/code&gt; and &lt;em&gt;fork&lt;/em&gt; the task whenever we get the desired action:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; take&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; fork&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; call&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; put &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redux-saga/effects&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// The watcher: watch actions and coordinate worker tasks&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;watchFetchRequests&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-while&quot; &gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; action &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;FETCH_REQUEST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fork&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fetchUrl&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// The worker: perform the requested task&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUrl&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;FETCH_SUCCESS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    data
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note all the 4 functions we imported from &lt;code&gt;redux-saga/effects&lt;/code&gt; are pure functions. I said previously that generators yield plain JavaScript objects called effects. The above functions serve that purpose.&lt;/p&gt;
&lt;p&gt;Each function constructs a particular object which embeds some instruction to be fullfilled by the middleware. For example &lt;code&gt;call(fetchUrl, url)&lt;/code&gt; returns an object like &lt;code&gt;{ type: CALL, function: fetchUrl, args: [url] }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a fundamental concept in &lt;em&gt;redux-saga&lt;/em&gt;: we&amp;#39;re not actually executing the side effect (i.e. function call) ourselves, but just constructing a description of the desired effect. The middleware takes care of the real execution then hands the result back to the generator.&lt;/p&gt;
&lt;p&gt;In the above example, we used &lt;code&gt;yield take(&amp;#39;FETCH_REQUEST&amp;#39;)&lt;/code&gt; to tell the middleware that we&amp;#39;re waiting for an action of type &lt;code&gt;FETCH_REQUEST&lt;/code&gt;. What happens is that the middleware will block the &lt;code&gt;watchFetchRequests&lt;/code&gt; generator until a &lt;code&gt;FETCH_REQUEST&lt;/code&gt; action is dispatched. Once we get a matching action, the middleware will resume the generator with the result which is the action object.&lt;/p&gt;
&lt;p&gt;The next instruction &lt;code&gt;fork(fetchUrl, action.url)&lt;/code&gt; tells the middleware to &lt;em&gt;fork&lt;/em&gt; a new &lt;code&gt;fetchUrl&lt;/code&gt; task with &lt;code&gt;action.url&lt;/code&gt; as argument. Now the middleware will invoke the &lt;code&gt;fetchUrl&lt;/code&gt; Generator but &lt;strong&gt;without blocking&lt;/strong&gt; &lt;code&gt;watchFetchRequests&lt;/code&gt;. It&amp;#39;s as if the 2 tasks are now evolving in parallel.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;watchFetchRequests&lt;/code&gt; continues listening to other &lt;code&gt;watchFetchRequests&lt;/code&gt; actions &lt;em&gt;while&lt;/em&gt; the &lt;code&gt;fetchUrl&lt;/code&gt; starts doing its work. Of course in reality only on thing can be done at time since JavaScript is single threaded, &lt;em&gt;redux-saga&lt;/em&gt; is performing the scheduling behind the scene to make it look like things are done in parallel.&lt;/p&gt;
&lt;p&gt;Similarly, in &lt;code&gt;fetchUrl&lt;/code&gt;, we used &lt;code&gt;call(fetch, url)&lt;/code&gt; to instruct the middleware to call the &lt;code&gt;fetch&lt;/code&gt; function. But this time, the call is &lt;em&gt;blocking&lt;/em&gt;, the middleware will suspend the generator until the &lt;code&gt;Promise&lt;/code&gt; returned by &lt;code&gt;fetch&lt;/code&gt; is resolved (or rejected) then resume the generator with the resolved value (or throw with the rejected error)&lt;/p&gt;
&lt;p&gt;It may sound like a lot of indirection, but this separation between effect creation and execution makes it really simple to test the logic inside generators. For example, we can test &lt;code&gt;fetchUrl&lt;/code&gt; simply by iterating over the generator and inspecting the yielded effects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; generator &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fetchUrl&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

assert&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;deepEqual&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  generator&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;FETCH_RESULT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// we can easily mock the result of the `take(&apos;FETCH_RESULT&apos;)` call&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; mockAction &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  url&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;some url&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// and inject the result back into the Generator&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;deepEqual&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  generator&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;mockAction&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;FETCH_RESULT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And since generators are stateful, we have much more flexibility to coordinate concurrent tasks. For example, if we want to cancel any pending fetch whenever we request a new fetch, we can store a reference to the current task in a local variable and use the &lt;code&gt;cancel&lt;/code&gt; effect:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-import&quot; &gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; take&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; fork&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; cancel&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; call&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; put &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt; &lt;span class=&quot;token keyword keyword-from&quot; &gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;redux-saga/effects&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;watchFetchRequests&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-let&quot; &gt;let&lt;/span&gt; currentTask&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-while&quot; &gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; action &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;FETCH_REQUEST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-if&quot; &gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;currentTask&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;cancel&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;currentTask&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

    currentTask &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-yield&quot; &gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;fork&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;fetchUrl&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-redux-saga-differ-from-other-solutions-&quot; id=&quot;how-does-redux-saga-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;redux-saga&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-redux-saga-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Declarative effects&lt;/strong&gt;: all operations inside sagas are yielded as plain JavaScript objects, which then get executed by the middleware. This makes it very easy to test the business logic inside the saga. You simply iterate over the generator and test the yielded sequence of objects by a simple &lt;code&gt;deepEqual&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other solutions, you&amp;#39;ll typically have to mock all the surrounding environment which can make the tests very complicated and less reliable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advanced async control flow and concurrency management&lt;/strong&gt;: You can describe your async flow using a simple synchronous style and familiar control flow constructs (&lt;code&gt;if/else&lt;/code&gt;, loops, &lt;code&gt;try/catch&lt;/code&gt;...).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The library also provides primitives and operators to manage concurrency between tasks (e.g. coordinate concurrent AJAX requests). You can &lt;em&gt;fork&lt;/em&gt; multiple background tasks in parallel. You can also cancel a running task.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sagas has also some architectural benefits: In &lt;em&gt;redux-saga&lt;/em&gt; applications, since all side effects are moved into sagas, UI components do not typically perform any business logic but only dispatch actions as pure JavaScript objects to notify what happened.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes the components more reusable in different contexts. A saga can also act as a decoupling point between 2 parts of the UI, by listening for events from one part and emitting actions that may update another part of the UI. Without any part being aware of the other part.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-saga-&quot; id=&quot;why-did-you-develop-redux-saga-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;redux-saga&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-saga-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It all started with &lt;a href=&quot;https://medium.com/@yelouafi/react-less-virtual-dom-with-snabbdom-functions-everywhere-53b672cb2fe3#.98gygakup&quot;&gt;an article&lt;/a&gt; I wrote about virtual DOM and a functional front-end architecture inspired by Elm. The architecture makes it possible to write the entire web application using pure functions. After finishing the article, I was looking for the possible ways to introduce side effects. Elm has already introduced the concept of Declarative Effects (effects as data).&lt;/p&gt;
&lt;p&gt;I &lt;a href=&quot;https://github.com/paldepind/functional-frontend-architecture/issues/20&quot;&gt;started a discussion&lt;/a&gt; in the &lt;a href=&quot;https://github.com/paldepind/functional-frontend-architecture&quot;&gt;functional-frontend-architecture&lt;/a&gt; repository which turned out to be immensely useful.&lt;/p&gt;
&lt;p&gt;Sebastien Lorber (@slorber) introduced me to the concept of Sagas as &lt;em&gt;process managers&lt;/em&gt;: a kind of background threads which listen for incoming events and can emit themselves other events. Although my initial focus was not on Redux, I started playing with the idea as a Redux middleware and later realized I could have a more powerful implementation using Generators and by introducing the &lt;code&gt;take&lt;/code&gt; effect.&lt;/p&gt;
&lt;p&gt;Instead of subscribing to Redux actions and continually invoke a piece of code (the handler) each time an action is dispatched. I could describe the concept of &lt;em&gt;waiting an action&lt;/em&gt; as a normal function call which would block the generator until the expected action is dispatched. This would offer a lot more flexibility to describe complex async flows.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m still toying with &amp;#39;alternative&amp;#39; ways (to virtual DOM) to describe dynamic and interactive UIs. I was recently looking at &lt;a href=&quot;https://github.com/tildeio/glimmer&quot;&gt;Glimmer&lt;/a&gt; (the rendering engine behind Ember) which has some interesting ideas borrowed from Functional Reactive Programming (FRP).&lt;/p&gt;
&lt;p&gt;Basically it&amp;#39;s a kind of a pull based model (no subscription or change propagation through listeners) which is a concept I&amp;#39;m very attached to. I intend to play with the concept when I have some time and see if we can combine the data-flow model of React with the templating approach of Glimmer/Ember.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-redux-saga-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-redux-saga-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;redux-saga&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-redux-saga-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hard to tell. There are more and more people using &lt;em&gt;redux-saga&lt;/em&gt; but front-end development is continually evolving and the community is more receptive to innovations (more than in other languages like Java for example).&lt;/p&gt;
&lt;p&gt;There seems to be an increasing interest on static typing. There is also a trend toward declarative data fetching (GraphQL, Falcor) although less marked (perhaps because the solutions are still very young and evolving).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Brian Lonsdorf (@drboolean). He&amp;#39;s doing a great job on demystifying FP concepts to JavaScript developers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Yassine! Sagas seem like a great solution to problems of asynchronous sort.&lt;/p&gt;
&lt;p&gt;If you want to give redux-saga a go, head to the &lt;a href=&quot;https://github.com/yelouafi/redux-saga&quot;&gt;project GitHub&lt;/a&gt; and learn more!&lt;/p&gt;
</content></entry><entry><title>Snabbdom - a Virtual DOM Focusing on Simplicity - Interview with Simon Friis Vindum</title><id>asnabbdomavirtualdomfocusingonsimplicityinterviewwithsimonfriisvindum2016-07-11t00:00:00z</id><link href="https://survivejs.com/blog/snabbdom-interview/"></link><updated>2016-07-11T00:00:00Z</updated><content type="html">&lt;p&gt;If you have been using React, you have used one implementation of virtual DOM perhaps without thinking too much about it. It&amp;#39;s one of those concepts that&amp;#39;s worth understanding in greater detail, though.&lt;/p&gt;
&lt;p&gt;There are specific virtual DOM implementations like &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;Matt-Esch/virtual-dom&lt;/a&gt; or &lt;a href=&quot;https://github.com/paldepind/snabbdom&quot;&gt;palpepind/snabbdom&lt;/a&gt;. Today I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/paldepind&quot;&gt;Simon Friis Vindum&lt;/a&gt;, the author of the latter. Read on to learn more about the technology.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/894d95cf834e9c3b4966d10eaa52d610?s=200&quot; alt=&quot;Simon Friis Vindum&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;

My name is Simon Friis Vindum. I live in Aarhus, Denmark. I currently study computer science at Aarhus University and work as a JavaScript developer on the side. Programming was my hobby for many years. After secondary school I was looking for a job and I was lucky to get one as a JavaScript developer.
&lt;/p&gt;

&lt;p&gt;I realized that my hobby was probably going to become my profession. I worked for two years and then began studying CS last summer. I love programming and learning about programming. I have written quite a few JavaScript libraries that are published on my &lt;a href=&quot;https://github.com/paldepind&quot;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-snabbdom-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-snabbdom-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Snabbdom&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-snabbdom-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Snabbdom is a virtual DOM library. You hand it two JavaScript representations of two DOM trees. These JavaScript representations are called virtual DOM trees. The first represents how the actual DOM currently looks and the second how you want it to look. Snabbdom then figures out the differences between the two and changes the real DOM accordingly.&lt;/p&gt;
&lt;p&gt;The beauty of it all is that application code now never needs to manually make changes to the DOM. It only needs to produce a DOM representation of the application as a function of the application state and the virtual DOM library will then take care of making the correct changes.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-snabbdom-&quot; id=&quot;why-did-you-develop-snabbdom-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Snabbdom&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-snabbdom-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wanted to use a virtual DOM library for a project of mine. I looked at the existing libraries available, but none of them was exactly what I was looking for. I found React to be too huge and I could see that other virtual DOM libraries where much smaller.&lt;/p&gt;
&lt;p&gt;When I decide on libraries simplicity is a big deal to me. The more complex a library is the more opaque it is the its users. In the case of React I found its size, and thus complexity, to out of proportions to the functionality that I needed from it. However, when looking into the alternatives I found that they lacked certain features that I needed. Furthermore, I realized that it should be possible to create an even simpler virtual DOM implementation.&lt;/p&gt;
&lt;p&gt;The original project was a spare time project so I chose to delay it and spend the time to create a virtual DOM library exactly after my head. In the end, I managed to implement one that was very simple and performant. I made the library modular and extensible so that new features can be implemented separately from the core. This made it possible for me to get the features that I wanted and for others to add theirs as modules.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-would-you-use-snabbdom-over-react-or-other-solutions-&quot; id=&quot;why-would-you-use-snabbdom-over-react-or-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why would you use &lt;em&gt;Snabbdom&lt;/em&gt; over React or other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-would-you-use-snabbdom-over-react-or-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React is in many ways a great library and in some cases I would prefer it to Snabbdom. Especially in a professional setting since React is so ubiquitous. I would use Snabbdom because of its simplicity and flexibility. It is simple because it only concerns itself with the very essence of being a virtual DOM library. As a result it is many times smaller than React.&lt;/p&gt;
&lt;p&gt;To me that makes the library more elegant and it suits my aesthetics with regards to libraries. I invite people to look at the implementation of Snabbdom and compare it is React. One has to ask why React is so huge when a virtual DOM library can be so small.&lt;/p&gt;
&lt;p&gt;The other benefit of Snabbdom is its flexibility. Its modular nature makes it extensible and its simplicity makes it unopinionated. This should make it possible for people to use Snabbdom no matter what architecture they want to use in structuring their application.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Snabbdom does everything I want. I continue to maintain it, albeit at a slow pace. An upcoming release will have some performance improvements and TypeScript support thanks to Tylor Steinberger.&lt;/p&gt;
&lt;p&gt;Unrelated to Snabbdom I will probably release more libraries and continue to explore new approaches to front-end development in JavaScript.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-snabbdom-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-snabbdom-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Snabbdom&lt;/em&gt; and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-snabbdom-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am very happy that the JavaScript community as a whole seems to be moving toward more functional and more reactive approaches. I think we can go further, but React and Redux are important steps in that direction.&lt;/p&gt;
&lt;p&gt;I am also curious about what relevance virtual DOM will have in the future. Currently it is everywhere and for some very good reasons. But when I look at recent libraries, like Cycle.js and MobX, I wonder if these approaches really benefit much from virtual DOM. I am currently exploring that myself right now.&lt;/p&gt;
&lt;p&gt;I am also excited about the future of static typing in JavaScript. I am a bit torn because I personally prefer Flow, but TypeScript seems to enjoy more mindshare. Fortunately TypeScript is catching up on features which is really great because I don&amp;#39;t think having two competing solutions is beneficial to the community. Primarily because adding typings to existing libraries is a lot of work and duplicating that effort is wasteful.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yassine Elouafi has been doing some very great work with redux-saga and some very innovative FRP libraries. I&amp;#39;d love to hear what he has to say.&lt;/p&gt;
&lt;p&gt;An interview with Brian Cavalier author of the most impressive library Most.js (pun intended) and other libraries would also be very interesting.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Simon! It&amp;#39;s definitely interesting to see where the web will head. I don&amp;#39;t expect we&amp;#39;ve seen it all just yet and virtual DOM is likely just one step amongst many.&lt;/p&gt;
&lt;p&gt;If you want to dig deeper, check out &lt;a href=&quot;https://github.com/paldepind/snabbdom&quot;&gt;Snabbdom&amp;#39;s GitHub repository&lt;/a&gt;!&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.3.1</title><id>asurvivejswebpackv1312016-06-14t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-131/"></link><updated>2016-06-14T00:00:00Z</updated><content type="html">&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/blog/survivejs-webpack-120&quot;&gt;the previous release&lt;/a&gt; this is a conservative release. There are certain bug fixes and content improvements, but no new chapters. The focus was on pushing the current content further based on feedback.&lt;/p&gt;
&lt;p&gt;I am very happy that &lt;a href=&quot;https://survivejs.com/blog/survivejs-react-253&quot;&gt;the book split has been completed now&lt;/a&gt;. That was a big undertaking, but well worth it as it&amp;#39;s easier to move forward now.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though it&amp;#39;s a better book now, there are still tasks to be done. I don&amp;#39;t have a clear roadmap for 2.0 yet. If you have specific ideas on what you would like to see in the book, &lt;a href=&quot;https://github.com/survivejs/webpack/issues&quot;&gt;open an issue&lt;/a&gt;. That will give me a better idea on what kind of content to develop for the book.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve been thinking of writing a small tool that would generate a Git repository based on the book code. This kind of automation would help a lot, and even though it&amp;#39;s not trivial to achieve, it could be worth it as it would save time and effort. In addition, this would allow me to lint the book code somewhat effectively so I&amp;#39;ll likely prioritize the development of this tool.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-3-1&quot; id=&quot;book-improvements-1-3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.3.1&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-3-1&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 53 commits went to the book since the last release. You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.2.0...v1.3.1&quot;&gt;all changes&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;p&gt;Special thanks to David Lee, Steve Schwartz, and Jesús Rodríguez Rodríguez for their helpful contributions and feedback! It has been great to discuss about the topic at &lt;a href=&quot;https://gitter.im/survivejs/webpack&quot;&gt;the book chat&lt;/a&gt;. That helps to shape the future of the content.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added a section for &lt;a href=&quot;http://brunch.io/&quot;&gt;Brunch&lt;/a&gt;. It&amp;#39;s an interesting alternative to webpack and worth covering. There&amp;#39;s even a &lt;a href=&quot;https://github.com/brunch/hmr-brunch&quot;&gt;HMR runtime&lt;/a&gt; available for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-started&quot; id=&quot;getting-started&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Started&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-started&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained Webpack output in detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot; id=&quot;automatic-browser-refresh&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Automatic Browser Refresh&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained why HMR is easy with CSS but hard with JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#refreshing-css&quot; id=&quot;refreshing-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Refreshing CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#refreshing-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linked the &lt;code&gt;css?modules&lt;/code&gt; idea to the &lt;a href=&quot;https://survivejs.com/webpack/loading/loader-definitions/&quot;&gt;Loader Definitions&lt;/a&gt; chapter.&lt;/li&gt;
&lt;li&gt;Fixed generated class. Instead of &lt;code&gt;styles.locals.redButton&lt;/code&gt; it should be just &lt;code&gt;styles.redButton&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot; id=&quot;enabling-sourcemaps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Enabling Sourcemaps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the topic in greater detail and separated the ideas of JavaScript and CSS sourcemaps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot; id=&quot;building-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot; id=&quot;setting-environment-variables&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Setting Environment Variables&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the basic idea of &lt;code&gt;DefinePlugin&lt;/code&gt; in detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot; id=&quot;splitting-bundles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Bundles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reworked and explained the split idea in greater detail to get the point.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minifying-the-build&quot; id=&quot;minifying-the-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minifying the Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minifying-the-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reworked the section about UglifyJS specific options. It should be clearer what&amp;#39;s going on now.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/uglify-loader&quot;&gt;uglify-loader&lt;/a&gt; as an alternative.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot; id=&quot;analyzing-build-statistics&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Analyzing Build Statistics&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reworked and explained the value of analysis in greater detail. Now there are also more tools listed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-assets&quot; id=&quot;loading-assets&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Assets&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-assets&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-fonts&quot; id=&quot;loading-fonts&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Fonts&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-fonts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;code&gt;query.prefix&lt;/code&gt; and replaced it with &lt;code&gt;name: &amp;#39;font/[hash].[ext]&amp;#39;&lt;/code&gt; given the latter form has been deprecated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting&quot; id=&quot;linting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-import&quot;&gt;eslint-plugin-import&lt;/a&gt;. It&amp;#39;s able to lint your ES6 imports effectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-packages&quot; id=&quot;authoring-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/lockdown&quot;&gt;lockdown&lt;/a&gt; as an alternative to &lt;code&gt;npm shrinkwrap&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-chunks&quot; id=&quot;understanding-chunks&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding Chunks&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-chunks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added an image showing the idea and mentioned &lt;code&gt;require.ensure&lt;/code&gt; respects &lt;code&gt;output.publicPath&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-react&quot; id=&quot;configuring-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more context to &lt;code&gt;resolve.extensions&lt;/code&gt; idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll do a pass on &lt;a href=&quot;https://survivejs.com/react/introduction&quot;&gt;the React book&lt;/a&gt; next and then continue plowing through my TODO list for this one. There are always topics to cover and you can affect the direction of the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though this is another small release, it&amp;#39;s a step ahead. Keep up providing feedback and I&amp;#39;ll integrate as well as I can.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his.&lt;/p&gt;
</content></entry><entry><title>npms.io - A better and open source search for node modules - Interview with André Cruz</title><id>anpmsioabetterandopensourcesearchfornodemodulesinterviewwithandrecruz2016-06-13t00:00:00z</id><link href="https://survivejs.com/blog/npms-interview/"></link><updated>2016-06-13T00:00:00Z</updated><content type="html">&lt;p&gt;As I &lt;a href=&quot;http://www.nixtu.info/2016/02/discovery-and-quality-services-for-npm.html&quot;&gt;lamented earlier this year&lt;/a&gt;, it&amp;#39;s increasingly difficult to find npm packages. One way to describe this is &lt;em&gt;npmopeia&lt;/em&gt;. The feeling that the package you need exists. The problem is how to find that package.&lt;/p&gt;
&lt;p&gt;That is where services like &lt;a href=&quot;https://npms.io/&quot;&gt;npms.io&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/satazor&quot;&gt;André Cruz&lt;/a&gt; come in. To learn about the problem and this service in particular, let&amp;#39;s hear more.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/1a691c6ddec4c073246eeaf13afeb0ef?s=200&quot; alt=&quot;André Cruz&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

My name is André Cruz. I&amp;#39;m 28 years old and I live in Porto, Portugal with my wife and little child.
&lt;/p&gt;

&lt;p&gt;When I was a kid, I used to sneak into my brothers computer. Every time I used his computer, I asked myself how this little metal box was able to interpret and execute commands on my behalf. I quickly become intrigued and interested in knowing how it was built. Several years passed and, in the IRC apogee, I developed a several scripts for mIRC.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/c34946272989d1984e4ba81713c3e56b.jpg&quot; alt=&quot;mIRC scripts&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;mIRC scripts&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#39;s where my passion in coding and programming started. Since then, I&amp;#39;ve explored and used several technologies, became graduated in Computers and Telematic Engineering, gave a couple &lt;a href=&quot;https://www.youtube.com/watch?v=PHlZan97TN0&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=5h66mv6Ve4o&quot;&gt;talks&lt;/a&gt; and built many projects.&lt;/p&gt;
&lt;p&gt;Fast-forward to the future, I&amp;#39;m the lead developer of &lt;a href=&quot;http://baboom.com&quot;&gt;BABOOM&lt;/a&gt; and I contribute to many open-source &lt;a href=&quot;https://github.com/IndigoUnited&quot;&gt;projects&lt;/a&gt;. Working in open-source heavily influenced me as a developer and as a person, for the better. I encourage everyone to the same. Not doing so is like going to Paris without visiting the Eiffel tower :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-npms-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-npms-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;npms&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-npms-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://npms.io/&quot;&gt;npms.io&lt;/a&gt; is a replacement to the official &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmjs.com&lt;/a&gt; search but with a key difference: the quality of the results are much much better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npmjs.com search is not fine tuned and, because of that, produces strange results. Try searching for &lt;code&gt;promise&lt;/code&gt; and &lt;code&gt;promises&lt;/code&gt; and you get totally different results just because of the plurality. This is just an example, but there are many more.&lt;/li&gt;
&lt;li&gt;npmjs.com search results are simply based on the relevance they have to the terms you put into the search box. npms.io combines the relevance with the modules&amp;#39; score producing results with far greater quality.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-npms-work-&quot; id=&quot;how-does-npms-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;npms&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-npms-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;npms&lt;/em&gt; may look simple but is actually complex and it&amp;#39;s composed of several projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npms-analyzer: analyzes the npm ecosystem, collecting info, evaluating and scoring each module.&lt;/li&gt;
&lt;li&gt;npms-api: the http API that serves the search results&lt;/li&gt;
&lt;li&gt;npms-www: the frontend for &lt;a href=&quot;http://npms.io&quot;&gt;http://npms.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;npms-cli: a cli program that allows searching in the command line (not yet done)&lt;/li&gt;
&lt;li&gt;npms-badge: generates and serves score badges for developers to put into their modules&amp;#39; README.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most interesting stuff happens in the &lt;code&gt;npms-analyzer&lt;/code&gt;. Its role is to process and analyze every single module from the npm ecosystem. The analysis process collects as much information as possible about a module which is then used to evaluate and produce a score. If you are interested in knowing more, you may read our &lt;a href=&quot;https://github.com/npms-io/npms-analyzer/blob/master/docs/architecture.md&quot;&gt;architectural documention&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-npms-differ-from-other-solutions-&quot; id=&quot;how-does-npms-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;npms&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-npms-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started the project, I knew that there were several other projects that tried to solve the npmjs.com problem. While they were an improvement over the official search, I felt that there was room for improvement.&lt;/p&gt;
&lt;p&gt;What really makes &lt;code&gt;npms&lt;/code&gt; stand out from solutions like &lt;a href=&quot;http://npmsearch.com/&quot;&gt;npmsearch&lt;/a&gt; or &lt;a href=&quot;http://nipstr.com/&quot;&gt;nipster&lt;/a&gt; is the quality of the search results. We collect much more information about a module, using sources like GitHub, &lt;a href=&quot;https://david-dm.org/&quot;&gt;David&lt;/a&gt; and &lt;a href=&quot;https://nodesecurity.io/&quot;&gt;Node Security Platform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The more information we have from a module the better we can evaluate and score it. We have also invested a lot of time into polishing the scoring algorithm and the search weights to make the results even better.&lt;/p&gt;
&lt;p&gt;Another strong point of &lt;em&gt;npms&lt;/em&gt; is the clean and carefully written code. This makes it easier to do additions and modifications and will certainly benefit contributions.&lt;/p&gt;
&lt;p&gt;Last but not least, &lt;em&gt;npms&lt;/em&gt; is a new and shiny project which uses recent technologies such as ES6 modules, React and Redux.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-npms-&quot; id=&quot;why-did-you-develop-npms-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;npms&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-npms-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;npmjs.com allows developers to search for node modules, but, having used it for several years, I always felt that the overall experience and quality of the results were bad. I wanted to make my life and yours easier every time we wanted to search for a module.&lt;/p&gt;
&lt;p&gt;I also saw an opportunity to learn and use new technologies, which I couldn&amp;#39;t do due to my job&amp;#39;s nature.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;npms&lt;/em&gt; is far from being finished and every contribution is much appreciated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We urgently need a logo and identity. If you have the design skills please &lt;a href=&quot;https://github.com/npms-io/npms-www/issues/15&quot;&gt;help&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Both &lt;code&gt;npms-cli&lt;/code&gt; and &lt;code&gt;npms-badge&lt;/code&gt; projects are yet to be done. Those will make the whole &lt;code&gt;npms&lt;/code&gt; project more complete.&lt;/li&gt;
&lt;li&gt;We want to make the search results more personal. The goal is to use data from your GitHub account (who you follow, what you starred, etc.) to further improve the quality of the search results.&lt;/li&gt;
&lt;li&gt;We are paying the infrastructure costs ourselves to provide this service for free. Though, if you use the service regularly, please consider &lt;a href=&quot;https://salt.bountysource.com/teams/npms&quot;&gt;donating&lt;/a&gt; to cover these costs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-npms-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-npms-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;npms&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-npms-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;npms&lt;/em&gt; will become obsolete by the time the official npm improves its current offering. Until then, &lt;em&gt;npms&lt;/em&gt; will continue to evolve and improve over time. Diversity drives change.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You should definitively interview &lt;a href=&quot;https://github.com/atduarte&quot;&gt;André Duarte&lt;/a&gt;. He has built &lt;em&gt;npms&lt;/em&gt; with me and he has proven to be very valuable both conceptually and technically to the project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview André! The quality of the official npm search is definitely something I&amp;#39;ve felt personally. Sometimes finding the right package can be more painful than it has to be. Services like &lt;a href=&quot;https://npms.io/&quot;&gt;npms.io&lt;/a&gt; are therefore valuable as they save developer time.&lt;/p&gt;
&lt;p&gt;Beyond using &lt;a href=&quot;https://npms.io/&quot;&gt;npms.io&lt;/a&gt;, &lt;a href=&quot;https://github.com/npms-io&quot;&gt;consider contributing to the project&lt;/a&gt;. I&amp;#39;m sure André won&amp;#39;t mind. :)&lt;/p&gt;
</content></entry><entry><title>Mikey - React/Redux CLI/Framework - Interview with Michael Farrell</title><id>amikeyreactreduxcliframeworkinterviewwithmichaelfarrell2016-06-06t00:00:00z</id><link href="https://survivejs.com/blog/mikey-interview/"></link><updated>2016-06-06T00:00:00Z</updated><content type="html">&lt;p&gt;It is tedious and boring to do the same thing over and over. That&amp;#39;s where generator tools come in as they take some grunt work out of coding. &lt;a href=&quot;https://github.com/Mikeysax/mikey&quot;&gt;Mikey&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/MichaelMFarrell&quot;&gt;Michael Farrell&lt;/a&gt; is a tool like that for React and Redux. To learn more about the tool, read on.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://secure.gravatar.com/avatar/5549c6f94f271b3cedd522e6b9d930b1?s=200&quot; alt=&quot;Michael Farrell&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;

I am Michael Farrell, a musician and music educator turned developer. I decided to pursue my love and passion for programming by diving into online resources for coding and attending The Firehose Project to learn all I can about programming and related computer science topics. Currently, I am looking for work in the Metro New York area.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-mikey-to-someone-who-has-never-heard-of-it-how-does-it-differ-from-other-solutions-&quot; id=&quot;how-would-you-describe-mikey-to-someone-who-has-never-heard-of-it-how-does-it-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Mikey&lt;/em&gt; to someone who has never heard of it? How does it differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-mikey-to-someone-who-has-never-heard-of-it-how-does-it-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Mikey&lt;/em&gt; is a CLI/Framework for React/Redux applications. &lt;em&gt;Mikey&lt;/em&gt; was designed to be simple, intuitive to use, and increase development speed and productivity of React/Redux applications.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mikey&lt;/em&gt; can generate React/Redux projects and files, saving the developer valuable time that can be spent building features. &lt;em&gt;Mikey&lt;/em&gt; can also be used in any React/Redux project and is intended to be a broad solution.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#project-generation&quot; id=&quot;project-generation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Project Generation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#project-generation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;mikey new projectName&lt;/code&gt;, you can immediately start with a fully functioning application with testing integration, source mapping, linting, hot reloading, and any other key dependencies and features a developer would expect from a React/Redux application.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mikey&lt;/em&gt; generated projects are also very minimal in dependency integration, unlike a lot of boilerplates, and strike a good balance between features and bloat.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#file-generation&quot; id=&quot;file-generation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;File Generation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#file-generation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What really makes &lt;em&gt;Mikey&lt;/em&gt; extra special are the CLI commands for file generation. When you generate a file, &lt;em&gt;Mikey&lt;/em&gt; will look through your working project directory and dynamically find the folder for the corresponding file type.&lt;/p&gt;
&lt;p&gt;This feature is very important and allows &lt;em&gt;Mikey&lt;/em&gt; to be used with other React/Redux projects with different file trees. These file paths are stored in a generated &lt;code&gt;.mikeyPath&lt;/code&gt; folder for performance and automatically added to &lt;code&gt;.gitignore&lt;/code&gt;. On file generation, a test file is also created and setup for immediate use within the project test directory.&lt;/p&gt;
&lt;p&gt;Another useful feature is the ability to add import statements to the top of the file on file generation. Imports are stored as defaults for corresponding file type and allow you to include them in the next file generation instead of typing out each import over again.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-mikey-&quot; id=&quot;why-did-you-develop-mikey-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Mikey&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-mikey-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started learning React and Redux I was coming from a background of primarily using Ruby on Rails. During this period, I became rather annoyed that I had to keep typing the same thing, over and over again. A lot of time was spent just configuring and setting up basic project dependencies and components.&lt;/p&gt;
&lt;p&gt;Out of annoyance and my background with Ruby on Rails, I saw a need for a CLI tool to easily generate files and projects. &lt;em&gt;Mikey&lt;/em&gt; was inspired by the &lt;code&gt;rails generate&lt;/code&gt; command and sees to make React/Redux development more enjoyable, productive, and faster.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am constantly looking for feedback from the community and hope that other developers find enjoyment in using &lt;em&gt;Mikey&lt;/em&gt;. My goal is to make &lt;em&gt;Mikey&lt;/em&gt; the most robust CLI / Framework that the community would be proud to support and back. If anyone wants to get in touch about an idea for &lt;em&gt;Mikey&lt;/em&gt; you can &lt;a href=&quot;mailto:michaelfarrelldev@gmail.com&quot;&gt;email&lt;/a&gt; me directly as well; I would love to hear from you.&lt;/p&gt;
&lt;p&gt;Here are just some ideas and I haven&amp;#39;t contemplated if some are good or bad just yet. Some possible features for the future might include... API user authentication (like devise), automatic import dependency installation, more templates, plain React project generation, and MobX integration.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-mikey-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-mikey-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Mikey&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-mikey-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope that as React/Redux matures (and the JavaScript community as a whole), we will see an adoption of better practices.&lt;/p&gt;
&lt;p&gt;What I realized when developing &lt;em&gt;Mikey&lt;/em&gt; is that there are two arguments to be made:&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#convention-over-configuration&quot; id=&quot;convention-over-configuration&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Convention Over Configuration&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#convention-over-configuration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This means that applications should follow the same structure, the configuration can happen automatically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The pros:&lt;/strong&gt; Write fewer lines of code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The cons:&lt;/strong&gt; People don&amp;#39;t often understand how to configure their application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Most Rails developers don&amp;#39;t know what every single configuration line means. I know I don&amp;#39;t, but I am an effective Rails developer. Learning one or two configuration options is easy because it is well documented, and you already have a reference built for you.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuration-over-convention&quot; id=&quot;configuration-over-convention&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuration Over Convention&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuration-over-convention&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Instead of having one &amp;quot;right&amp;quot; way to do things, learn the configuration and then build the configuration that&amp;#39;s right for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The pros:&lt;/strong&gt; If you&amp;#39;ve explicitly configured every aspect of your application, you fully understand it all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The cons:&lt;/strong&gt; All applications will be different and jumping into a new code base won&amp;#39;t be familiar. In the real world, projects are built by teams. On most teams different people have different expertise.&lt;/p&gt;
&lt;p&gt;That means projects built by multiple people&amp;#39;s configuration will likely be the result of a single person who fully understands the configuration. If this person were to leave the project, people would be left with a working configuration that they don&amp;#39;t know how to use.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-facts&quot; id=&quot;the-facts&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Facts&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-facts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;People don&amp;#39;t want to learn how to configure their code. In the current React ecosystem, rather than learning how to configure their application, people use boilerplates that they don&amp;#39;t understand. This is a problem for multiple reasons.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Since there are no conventions, people can not specify how to fix their application, because each application is different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; People want to extend beyond the limitations of a limited boilerplate but, they are stuck because they don&amp;#39;t understand the configuration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; This leads to trying to hack something they don&amp;#39;t understand to work, and often results in failure.&lt;/p&gt;
&lt;p&gt;Other people are making new boilerplates that have different configurations after saying &amp;quot;it shouldn&amp;#39;t take 15 hours to craft the perfect webpack config! Let me share mine with the world so someone else doesn&amp;#39;t need to feel my pain&amp;quot;. Currently, there are around 100+ different React boilerplates. (&lt;strong&gt;Editor&amp;#39;s note&lt;/strong&gt;: there are actually far more!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This makes the matter only worse.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-solution-&quot; id=&quot;the-solution-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Solution:&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-solution-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem will continue to get worse until the react community unites behind a standard, robust, CLI implementation; Even if it isn&amp;#39;t &lt;em&gt;Mikey&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As for the future of web development, there will definitely be a movement towards pushing more responsibilities on to the server and removing them from the client. We are already seeing this with isomorphic React applications, which gives you the ability to render components on both client and server which offers a better user experience and improved SEO.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You should interview the very opinionated and wise &lt;a href=&quot;https://twitter.com/kenmazaika&quot;&gt;Ken Mazaika&lt;/a&gt;! He has a lot to say on this topic of convention over configuration, among other things.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Michael!&lt;/p&gt;
&lt;p&gt;If you want to check out Mikey and learn more about the tool, &lt;a href=&quot;https://github.com/Mikeysax/mikey&quot;&gt;head to GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - React - v2.5.3</title><id>asurvivejsreactv2532016-06-01t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-react-253/"></link><updated>2016-06-01T00:00:00Z</updated><content type="html">&lt;p&gt;It has been a while since &lt;a href=&quot;https://survivejs.com/blog/survivejs210&quot;&gt;the previous release&lt;/a&gt; and a lot has happened. In addition to ramping up my consulting and &lt;a href=&quot;https://survivejs.github.io/training&quot;&gt;training&lt;/a&gt; business, I managed to publish a &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;book on webpack&lt;/a&gt;. That was the first part of my planned split. This is the second.&lt;/p&gt;
&lt;p&gt;From now on we&amp;#39;ll continue with two books - &amp;quot;SurviveJS - Webpack&amp;quot; and &amp;quot;SurviveJS - React&amp;quot;. I am a lot more comfortable with this setup as now it&amp;#39;s easier to focus and we can cover more advanced topics. In short, the effort is more manageable now.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;To reward my current Leanpub readers, you will receive the Leanpub version of &amp;quot;SurviveJS - Webpack&amp;quot; for free. You will receive an email about that.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This release, 2.5, is easily the biggest I&amp;#39;ve done in a while. Just extracting the webpack portions wasn&amp;#39;t enough. I felt the book needed polish. As a result I ended up rewriting a significant portion of it. It took time but I&amp;#39;m happy with the outcome.&lt;/p&gt;
&lt;p&gt;The book consists of smaller, more focused chapters now. This brings down the difficulty while allowing me to cover different dimensions of React in greater detail. The rework enables me to develop further content easier than the old one. You can see this also in the application architecture.&lt;/p&gt;
&lt;p&gt;In short, I&amp;#39;m confident about the direction of the effort. Thanks to the effort I&amp;#39;ll be able to pick up the pace again and add more advanced information to the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-5-3&quot; id=&quot;book-improvements-2-5-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.5.3&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-5-3&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 191 commits went to book since the last release. Given the book has changed so much, it would be easier to tell you what hasn&amp;#39;t changed that what did, but I&amp;#39;ll try my best.&lt;/p&gt;
&lt;p&gt;You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v2.1.0...v2.5.1&quot;&gt;all changes&lt;/a&gt;. Especially the &amp;quot;Files changed&amp;quot; tab is highly useful although in this case it&amp;#39;s probably going to be a little sluggish.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you were following an old version through the web, remember that you can find the versions tagged at &lt;a href=&quot;https://github.com/survivejs/react&quot;&gt;GitHub&lt;/a&gt;.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-started&quot; id=&quot;getting-started&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Started&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-started&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This part replaces the earlier &lt;em&gt;Setting Up Webpack&lt;/em&gt; chapter. Rather than stepping you through how to develop your own webpack configuration, you will start from a &lt;a href=&quot;https://github.com/survivejs/react-boilerplate&quot;&gt;small boilerplate&lt;/a&gt; instead. &lt;a href=&quot;..webpack/preface&quot;&gt;The webpack book&lt;/a&gt; covers the techniques used there in detail.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction-to-react&quot; id=&quot;introduction-to-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction to React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction-to-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I felt the previous version didn&amp;#39;t spend enough time on discussing React. This has been remedied now as I discuss the basic ideas of React in greater detail. Especially the Virtual DOM has received more attention. This chapter will likely grow further as I receive feedback on it.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#setting-up-the-project&quot; id=&quot;setting-up-the-project&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Setting Up the Project&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#setting-up-the-project&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The idea of this chapter is to show you how to get the boilerplate project up and running. It also describes the boilerplate and the custom language features used.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-note-application&quot; id=&quot;implementing-a-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This chapter existed in the previous version as well. This time, however, I have split it up into multiple smaller ones. All major steps belong to chapters of their own. This allows more detailed discussion where needed.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#deleting-notes&quot; id=&quot;deleting-notes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Deleting &lt;code&gt;Notes&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#deleting-notes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even though a short chapter, I felt deletion deserved a chapter of its own. It&amp;#39;s a breather after the a heavier chapter if nothing else.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-react-components&quot; id=&quot;understanding-react-components&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding React Components&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-react-components&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Earlier the React component discussion was quite terse and scattered. I resolved the problem by gathering the material to a chapter of its own. This is more of a reference level chapter that you can check out if you have some component level related question in mind. I&amp;#39;ll likely use it a lot myself for this purpose.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#editing-notes&quot; id=&quot;editing-notes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Editing &lt;code&gt;Notes&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#editing-notes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is another tutorial level chapter that moves the implementation forward. As usual, there&amp;#39;s material on component design. I pushed the entire &lt;code&gt;Editable&lt;/code&gt; component here to simplify the later portions of the book.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-the-notes-application&quot; id=&quot;styling-the-notes-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling the Notes Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-the-notes-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I pushed the Notes application styling related aspects to a chapter of its own. Also &lt;a href=&quot;https://www.npmjs.org/package/classnames&quot;&gt;classnames&lt;/a&gt; is discussed briefly now. It would be possible to expand this chapter to discuss &lt;strong&gt;CSS Modules&lt;/strong&gt; in detail. I&amp;#39;m still on the edge about that, though.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-kanban&quot; id=&quot;implementing-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-kanban&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This part existed in the earlier version. It is more focused, though, as the Notes application was pushed to the new part we just covered.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I expanded the scope of this chapter a notch. It mentions solutions such as Redux and MobX and puts them into a perspective. I evolved the application architecture so that instead of using &lt;code&gt;AltContainer&lt;/code&gt; directly, we push the state management related aspects behind a facade.&lt;/p&gt;
&lt;p&gt;I achieved this by implementing a &lt;code&gt;Provider&lt;/code&gt; and a &lt;code&gt;connect&lt;/code&gt; higher order function pair based on &lt;a href=&quot;https://www.npmjs.com/package/react-redux&quot;&gt;react-redux&lt;/a&gt; API. It takes effort to implement the pair, but on the plus side now the Kanban has a looser dependency on Alt.&lt;/p&gt;
&lt;p&gt;The point of this change was to enable the development of new content. I could imagine Redux and MobX specific chapters. It would be possible to achieve now without having to rewrite significant portions of the application. Even then the rewrite needed would be very instructive.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-store-and-actions&quot; id=&quot;implementing-store-and-actions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Store and Actions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-store-and-actions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given the previous chapter focused on theory and connecting a state management system with React, this one adds a missing concepts - store and actions.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-persistency-over-localstorage&quot; id=&quot;implementing-persistency-over-localstorage&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Persistency over &lt;code&gt;localStorage&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-persistency-over-localstorage&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Persistency felt like a chapter of its own so I changed it that way. It might be possible to push this chapter further (offline usage?) but even the current version is quite fine. At least it is focused.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#handling-data-dependencies&quot; id=&quot;handling-data-dependencies&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Handling Data Dependencies&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#handling-data-dependencies&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Earlier the difficult concept of data relations was within the &lt;em&gt;From Notes to Kanban&lt;/em&gt; chapter. Now the idea is an entire chapter of its own as it felt like one of those ideas that deserves more emphasis.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#editing-lanes&quot; id=&quot;editing-lanes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Editing Lanes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#editing-lanes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This chapter does the remainder of the implementation apart from drag and drop. It just uses the collection of components we have together to get it together.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#drag-and-drop&quot; id=&quot;drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The drag and drop portion related more or less the same. The chapter is simpler now as certain logic is handled earlier. I was able to drop a couple of steps as a result. The chapter should flow a little better now.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This part gained a new chapter as I moved structuring ideas here. The part received a beauty pass as I went through the content to make it work with the new implementation of Kanban.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This Leanpub exclusive chapter gained updated graphics. Thanks to the improved implementation, now the tests are a little simpler as well. There&amp;#39;s some complexity involved given now the book defaults to stateless functional components, but overall the chapter feels better.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot; id=&quot;typing-with-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Typing with React&lt;/em&gt; received a beauty pass as well. Given Flow supports stateless functional components now, this was a fun one to improve.&lt;/p&gt;
&lt;p&gt;TypeScript might deserve more attention in the future. Especially the upcoming 2.0 release looks promising!&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not a lot happened here. I removed webpack references but nothing drastic happened.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#structuring-react-projects&quot; id=&quot;structuring-react-projects&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Structuring React Projects&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#structuring-react-projects&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I felt structuring is a core topic so I pushed it here. The chapter should probably be pushed further. It could perhaps use more concrete examples.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#appendices&quot; id=&quot;appendices&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Appendices&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#appendices&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apart from that move the appendices didn&amp;#39;t see a lot of action. There were minor tweaks but those are too small to mention.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I have completed the split, it is easier to develop the content again. I will prioritize state management related work. Here is my task list based on priority:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a new chapter or two on state management. Essentially we would port the application to Redux and MobX here and discuss different systems in detail. I feel Alt works adequately for the purposes of the book but having this sort of advanced discussion would improve it.&lt;/li&gt;
&lt;li&gt;Expand on asynchronous handling. The current edition improves on this but we can do better.&lt;/li&gt;
&lt;li&gt;Figure out what to do after these have been tackled. I have proposed chapters at &lt;a href=&quot;https://github.com/survivejs/react/issues&quot;&gt;the issue tracker&lt;/a&gt;. Feel free to propose one or comment on the existing ones there. Maybe a routing chapter would be nice?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#pricing-changes&quot; id=&quot;pricing-changes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Pricing Changes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#pricing-changes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the content has changed (two books!), I&amp;#39;ve implemented the following pricing changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.amazon.com/SurviveJS-Webpack-React-apprentice-master/dp/152391050X&quot;&gt;Amazon edition&lt;/a&gt; will be available for $19.99. Once I have paper versions of the new books out there, this book will go out of market.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;&amp;quot;SurviveJS - Webpack&amp;quot; - Leanpub edition&lt;/a&gt; goes to $15.99. Thanks early supporters!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/survivejs-react&quot;&gt;&amp;quot;SurviveJS - React&amp;quot; - Leanpub edition&lt;/a&gt; goes to $15.99. If you bought the original book, you will receive &amp;quot;SurviveJS - Webpack&amp;quot; for free.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/b/survivejs-webpack-react&quot;&gt;&amp;quot;SurviveJS - Webpack&amp;quot; + &amp;quot;SurviveJS - React&amp;quot; bundle&lt;/a&gt; - $27.99.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea is that as more content gets developed, the price will gradually go up. Also if splits like this happen, the modus operandi is the same. You will receive the split book as well. This is my way of saying thanks to those who support the effort monetarily.&lt;/p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;&lt;i class=&quot;icon-attention-circled&quot;&gt;&lt;/i&gt;If you have bought the paper version before June 2016, get in touch and I&amp;#39;ll hook you up with the digital versions.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. As usual, your support keeps this effort going on. Thanks!&lt;/p&gt;
&lt;p&gt;Remember that you can find up to date code from &lt;a href=&quot;https://github.com/survivejs/react&quot;&gt;the book repository&lt;/a&gt;. The stable version of the book is available at the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/react&quot;&gt;Gitter&lt;/a&gt; will work. There are topic specific channels now so it&amp;#39;s easier to handle.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs-react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt; or an earlier version of the book at &lt;a href=&quot;https://amazon.com/SurviveJS-Webpack-React-apprentice-master/dp/152391050X&quot;&gt;Amazon&lt;/a&gt; (paper version). Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Builder - A npm-based task runner - Interview with Ryan Roemer</title><id>abuilderanpmbasedtaskrunnerinterviewwithryanroemer2016-05-16t00:00:00z</id><link href="https://survivejs.com/blog/builder-interview/"></link><updated>2016-05-16T00:00:00Z</updated><content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder&quot;&gt;Builder&lt;/a&gt; by Formidable Labs is one of those projects tackling the boilerplate issue. It is a project that repurposes npm &lt;code&gt;scripts&lt;/code&gt; into something more powerful. To learn more, let&amp;#39;s let &lt;a href=&quot;https://twitter.com/ryan_roemer&quot;&gt;Ryan Roemer&lt;/a&gt; discuss builder in detail.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/e5b6fdf2e8af6487241497183581f87a?s=200&quot; alt=&quot;Ryan Roemer&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I am the CTO and co-founder of &lt;a href=&quot;http://formidable.com/&quot;&gt;Formidable&lt;/a&gt;, a   development shop in (the delightfully weird neighborhood of) Fremont in Seattle, WA. Our main area of focus is React frontends and Node.js backends. Most of my client and open source work these days tends towards frontend build infrastructures.
&lt;/p&gt;

&lt;p&gt;Before Formidable, I&amp;#39;ve had stints as a distributed systems engineer and security researcher. And, in my deep, dark past, I used to be a patent attorney before finding my way to engineering.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-builder-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-builder-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;builder&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-builder-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Builder is a tool for wrangling build infrastructures and workflows for a collection of similar projects. It leverages the modern development trend of &lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;&lt;code&gt;npm&lt;/code&gt;-based workflows&lt;/a&gt; with better scalability and flexibility.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-builder-work-&quot; id=&quot;how-does-builder-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;builder&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-builder-work-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;#39;s walk through a basic example. Imagine that we have two projects with identical &lt;code&gt;npm&lt;/code&gt; tasks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;project1&amp;gt;/package.json&lt;/span&gt;
&lt;span class=&quot;token string&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;echo FOO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;echo BAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;npm run foo &amp;amp;&amp;amp; npm run bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;project2&amp;gt;/package.json&lt;/span&gt;
&lt;span class=&quot;token string&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;echo FOO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;echo BAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;npm run foo &amp;amp;&amp;amp; npm run bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which allows us to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project1&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot; &gt;npm&lt;/span&gt; run foobar
FOO
BAR

$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project2&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot; &gt;npm&lt;/span&gt; run foobar
FOO
BAR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! Unfortunately, as the number of projects increases and these similar tasks change, we end up with a bit of a maintenance nightmare -- keeping up with and updating the latest task set across all projects.&lt;/p&gt;
&lt;p&gt;Builder solves this problem with the notion of an &lt;a href=&quot;http://formidable.com/open-source/builder/#archetypes&quot;&gt;&amp;quot;archetype&amp;quot;&lt;/a&gt; -- a separate npm module responsible for abstracting and managing the common tasks, configurations, and dependencies. Builder allows us to move common &lt;code&gt;scripts&lt;/code&gt; tasks and &lt;code&gt;dependencies&lt;/code&gt; / &lt;code&gt;devDependencies&lt;/code&gt; for those tasks into an archetype project. The archetype can then be published and consumed just like any normal Node.js module.&lt;/p&gt;
&lt;p&gt;The builder version of the above example would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;project1&amp;gt;/package.json&lt;/span&gt;
&lt;span class=&quot;token string&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;project2&amp;gt;/package.json&lt;/span&gt;
&lt;span class=&quot;token string&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;archetype&amp;gt;/package.json&lt;/span&gt;
&lt;span class=&quot;token string&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;echo FOO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;echo BAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;builder run foo &amp;amp;&amp;amp; builder run bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we&amp;#39;re now using &lt;code&gt;builder run &amp;lt;task&amp;gt;&lt;/code&gt; in the place of &lt;code&gt;npm run &amp;lt;task&amp;gt;&lt;/code&gt;. We can execute the tasks with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project1&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ builder run foobar
FOO
BAR

$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project2&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ builder run foobar
FOO
BAR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this simple abstraction, builder allows us to have one central location for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder#tasks&quot;&gt;&lt;code&gt;scripts&lt;/code&gt; tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder#moving-scripts-and-config-files&quot;&gt;configuration files&lt;/a&gt; (typically in a &lt;code&gt;config/&lt;/code&gt; directory)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder#moving-dependencies-and-devdependencies-from-an-existing-packagejson&quot;&gt;&lt;code&gt;dependencies&lt;/code&gt; / &lt;code&gt;devDependencies&lt;/code&gt;&lt;/a&gt; for the tasks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder#npm-config&quot;&gt;npm &lt;code&gt;config&lt;/code&gt;&lt;/a&gt; variables in &lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;while still mostly behaving &amp;quot;just like &lt;code&gt;npm&lt;/code&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Builder also provides critical &lt;em&gt;flexibility&lt;/em&gt; for tasks. Many meta / build frameworks are great when you follow the given workflows, but break down when a project goes &amp;quot;off script&amp;quot;. By contrast, builder supports projects doing sub-tasks differently as a first class concern and at a very granular level.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s tweak our example so that &lt;code&gt;&amp;lt;project2&amp;gt;&lt;/code&gt; has a slightly different &lt;code&gt;bar&lt;/code&gt; task like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;project1&amp;gt;/package.json&lt;/span&gt;
&lt;span class=&quot;token string&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// &amp;lt;project2&amp;gt;/package.json&lt;/span&gt;
&lt;span class=&quot;token string&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot; &gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;echo \&quot;I&apos;M GONNA BE DIFFERENT\&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run the specific tasks, we get the correct overrides:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project1&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ builder run bar
BAR

$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project2&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ builder run bar
I&apos;M GONNA BE DIFFERENT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Builder resolves tasks starting with the root project and then moves up to the archetype on a &lt;em&gt;per task&lt;/em&gt; basis. This means that composed tasks like &lt;code&gt;foobar&lt;/code&gt; will pick up root overrides together with existing archetype commands giving us:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project1&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ builder run foobar
FOO
BAR

$ &lt;span class=&quot;token function&quot; &gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;project2&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
$ builder run foobar
FOO
I&apos;M GONNA BE DIFFERENT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And just like that, a single project can easily do one-off changes from the archetype, while keeping all the overall composed tasks and workflows intact.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-else-can-builder-do-&quot; id=&quot;what-else-can-builder-do-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What else can &lt;em&gt;builder&lt;/em&gt; do?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-else-can-builder-do-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Aside from archetypes, builder provides an enhanced script runner and a project generator.&lt;/p&gt;
&lt;p&gt;The motivation for builder&amp;#39;s &lt;strong&gt;script runner&lt;/strong&gt; capabilities is that &lt;code&gt;npm run &amp;lt;task&amp;gt;&lt;/code&gt; is sometimes a bit limited, particularly when you want to write cross-operating-system compatible projects. Thus, builder has a few &amp;quot;nice to have&amp;quot; extras beyond &lt;code&gt;builder run &amp;lt;task&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder#builder-concurrent&quot;&gt;&lt;strong&gt;Concurrent tasks&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;builder concurrent &amp;lt;task1&amp;gt; &amp;lt;task2&amp;gt;&lt;/code&gt; - Great for running multiple tasks at the same time.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder#builder-envs&quot;&gt;&lt;strong&gt;Multiple environment variables&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;builder envs &amp;lt;task&amp;gt; &amp;#39;[{&amp;quot;MSG&amp;quot;: &amp;quot;hi&amp;quot;}, {&amp;quot;MSG&amp;quot;: &amp;quot;yo&amp;quot;}]&amp;#39;&lt;/code&gt; - Run the same task many times concurrently, but with different environment variables injected into the respective processes. Great for scenarios like integration tests on various different OS / browser combinations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At Formidable, we have a couple of one-off projects that don&amp;#39;t need an archetype for central control, but do use builder for these task execution helpers.&lt;/p&gt;
&lt;p&gt;Looking to builder&amp;#39;s &lt;strong&gt;project / boilerplate generation&lt;/strong&gt; features, archetypes usually following a defined file structure. It is thus a natural extension for builder archetypes to actually create new, idiomatic projects.&lt;/p&gt;
&lt;p&gt;With this in mind, we created &lt;a href=&quot;https://github.com/FormidableLabs/builder-init&quot;&gt;&lt;code&gt;builder-init&lt;/code&gt;&lt;/a&gt; -- a simple script that generates projects from special archetype files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder-init#archetype-data&quot;&gt;&lt;code&gt;init.js&lt;/code&gt;&lt;/a&gt; - a control file with prompts for template variables. (&lt;a href=&quot;https://github.com/FormidableLabs/builder-react-component/tree/master/init.js&quot;&gt;example&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder-init#archetype-templates&quot;&gt;&lt;code&gt;init/**&lt;/code&gt;&lt;/a&gt; - template files to expand into a new project. (&lt;a href=&quot;https://github.com/FormidableLabs/builder-react-component/tree/master/init&quot;&gt;example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once these are defined in an archetype, &lt;code&gt;builder-init&lt;/code&gt; can then create a new project via any means that &lt;code&gt;npm&lt;/code&gt; can install a module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ builder-init builder-react-component
$ builder-init builder-react-component@0.3.3
$ builder-init FormidableLabs/builder-react-component&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;#v0.3.3&lt;/span&gt;
$ builder-init git+ssh://git@github.com:FormidableLabs/builder-react-component.git&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;#v0.3.3&lt;/span&gt;
$ builder-init /FULL/PATH/TO/builder-react-component
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a great way to keep your new project boilerplate always up to date. Additionally, we utilize &lt;code&gt;builder-init&lt;/code&gt; in the &lt;a href=&quot;https://github.com/FormidableLabs/builder-react-component/blob/master/.travis.yml#L35-L58&quot;&gt;CI for the archetype&lt;/a&gt; to check that the archetype works as expected in consuming projects. It&amp;#39;s a fantastic sanity check on your boilerplate to ensure it&amp;#39;s always ready to ship.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#when-is-builder-appropriate-when-is-it-not-&quot; id=&quot;when-is-builder-appropriate-when-is-it-not-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;When is &lt;em&gt;builder&lt;/em&gt; appropriate? When is it not?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#when-is-builder-appropriate-when-is-it-not-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Builder is great for situations in which you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many nearly identical projects&lt;/li&gt;
&lt;li&gt;With lots of &lt;code&gt;npm&lt;/code&gt; &lt;code&gt;scripts&lt;/code&gt; tasks and dependencies&lt;/li&gt;
&lt;li&gt;Large teams of developers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have been helping Walmart Labs migrate their web properties to React. Just looking at React components, there are already something like 60 component repositories, split across many verticals and development teams. Builder archetypes manage the components, allowing us to funnel all of the infrastructure / workflow updates, bug fixes, and everything else into &lt;em&gt;one place&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At Formidable, we use a multi-repository strategy for our collection of &lt;a href=&quot;http://formidable.com/open-source/victory/&quot;&gt;Victory&lt;/a&gt; data visualization components, all controlled by a single archetype, &lt;a href=&quot;https://github.com/FormidableLabs/builder-victory-component&quot;&gt;&lt;code&gt;builder-victory-component&lt;/code&gt;&lt;/a&gt;. This has been great for having a single location for things like our &lt;a href=&quot;https://github.com/FormidableLabs/builder-victory-component/pull/40&quot;&gt;upgrade to Babel 6&lt;/a&gt;, &lt;a href=&quot;https://github.com/FormidableLabs/builder-victory-component/pull/59&quot;&gt;switch to optimized lodash plugins&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;At the same time, not all projects would benefit from a builder archetype solution. If you have a one-off, single-purpose project, there&amp;#39;s no need to abstract to an archetype. And the same goes for projects (like &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt;) that follow a &lt;a href=&quot;https://github.com/babel/babel/blob/4c371132ae7321f6d08567eab54a59049e07f246/doc/design/monorepo.md&quot;&gt;monorepo strategy&lt;/a&gt; with a single repository.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-builder-differ-from-other-solutions-&quot; id=&quot;how-does-builder-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;builder&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-builder-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Builder is unlike most other &amp;quot;meta&amp;quot; approaches that I&amp;#39;m aware of...&lt;/p&gt;
&lt;p&gt;Builder differs from other React infrastructure / build frameworks in that it&amp;#39;s completely technology agnostic -- it&amp;#39;s really a way of enhancing &lt;code&gt;npm&lt;/code&gt; to work from a single, controllable location. It doesn&amp;#39;t specify dependencies, tasks, or anything really.&lt;/p&gt;
&lt;p&gt;While the &lt;em&gt;substantive content&lt;/em&gt; of a given archetype will end up being very opinionated (tasks, dependencies, and workflows, specific to the team writing the archetype), the underlying builder mechanics are not.&lt;/p&gt;
&lt;p&gt;Builder differs from other task runners like &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; or &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; in that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Builder doesn&amp;#39;t require &amp;quot;plugins&amp;quot; or depend on wrappers for task functionality. It uses the same dependencies / scripts that you would use from the command line in a normal, non-builder project.&lt;/li&gt;
&lt;li&gt;Builder is much more flexible for a single project going &amp;quot;off script&amp;quot; at a fine-grained level.&lt;/li&gt;
&lt;li&gt;Builder has a specific strategy for coordinating tasks across multiple projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-builder-&quot; id=&quot;why-did-you-develop-builder-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;builder&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-builder-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The motivation for writing builder really goes back to our community&amp;#39;s ongoing conversation regarding multiple vs. single repositories.&lt;/p&gt;
&lt;p&gt;As JavaScript has become more complex, there has been a shift to &amp;quot;monorepos&amp;quot; -- monolithic repositories that house all of the code for an organization / project. And while there definitely &lt;em&gt;are&lt;/em&gt; appropriate scenarios for monorepos, several of our client projects have run into significant difficulties with them, particularly in the cases of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Large teams and sub-organizations&lt;/li&gt;
&lt;li&gt;Many developers of varying abilities and backgrounds&lt;/li&gt;
&lt;li&gt;Complex production build / release cycles&lt;/li&gt;
&lt;li&gt;Differing team sprint and release cadences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a monorepo, these factors can lead to higher likelihoods of bug introduction, one team stomping on the toes of another team, slower code velocity, etc. That is not to say that monorepos can&amp;#39;t be implemented successfully, just that many of the organizations we&amp;#39;ve helped have encountered many painful experiences with them.&lt;/p&gt;
&lt;p&gt;These days in particular, I think many teams choose a monorepo because it &lt;em&gt;appears easier&lt;/em&gt; and in large part due to the lack of effective tools for multiple-repository management. And that&amp;#39;s really why builder was created -- to make multiple project wrangling sensible, scalable, and flexible.&lt;/p&gt;
&lt;p&gt;Before creating builder, I kept seeing the same &lt;code&gt;scripts&lt;/code&gt; tasks and dependencies copied and pasted across multiple repositories, and the end result was always the same -- a maintenance and coordination nightmare. As someone who likes to have &amp;quot;one source of truth&amp;quot; across repositories, I really wanted a way to define tasks and infrastructures &lt;em&gt;once&lt;/em&gt; for many repositories.&lt;/p&gt;
&lt;p&gt;As we were already using &lt;code&gt;npm&lt;/code&gt;-based workflows for most projects, I realized I just wanted a slightly enhanced version of &lt;code&gt;npm&lt;/code&gt; for multiple projects. And that has really been the guiding direction for builder -- it&amp;#39;s &amp;quot;almost&amp;quot; &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We support &lt;code&gt;scripts&lt;/code&gt;, dependencies, and &lt;code&gt;config&lt;/code&gt; just like &lt;code&gt;npm&lt;/code&gt; does. And &lt;code&gt;builder-init&lt;/code&gt; works with modules the same as &lt;code&gt;npm&lt;/code&gt; does. And to keep us honest and grounded, we even include a section in the builder documentation on &lt;a href=&quot;https://github.com/FormidableLabs/builder#i-give-up-how-do-i-abandon-builder&quot;&gt;how to abandon builder archetypes&lt;/a&gt; and go back to vanilla &lt;code&gt;npm&lt;/code&gt;-based workflows.&lt;/p&gt;
&lt;p&gt;That said, it is not all roses and unicorns with builder archetypes. Turning back to the complexity of modern JavaScript, archetypes don&amp;#39;t &lt;em&gt;reduce&lt;/em&gt; this complexity in any fashion, they just &lt;em&gt;channel&lt;/em&gt; it to one place. And because of some idiosyncrasies with Node.js &lt;code&gt;require&lt;/code&gt; resolution, it&amp;#39;s even a bit &lt;em&gt;harder&lt;/em&gt; to wrangle an archetype than straight &lt;code&gt;npm&lt;/code&gt; tasks in a vanilla project.&lt;/p&gt;
&lt;p&gt;But for us and clients like Walmart Labs, the ability to funnel complexity has been a big enough win in allowing a smaller group of senior developers to manage the really tricky build / test / transpilation / infrastructure intricacies for the larger group of developers working in individual project repositories.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The base feature set for builder is mostly complete for folks wrangling &amp;quot;just a few&amp;quot; to &amp;quot;enterprise-level number&amp;quot; of projects. We&amp;#39;ve still got some tickets left on the roadmap, but there&amp;#39;s nothing really transformative at this point.&lt;/p&gt;
&lt;p&gt;Most of my current work is more broadly supporting multi-repository projects. Our latest project is &lt;a href=&quot;https://github.com/FormidableLabs/multibot&quot;&gt;Multibot&lt;/a&gt;, which allows you to use simple JavaScript transforms to change files (text, markdown, JS, etc.) across multiple repositories, going all the way to a pull request with a single command and no files actually touching disk.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-builder-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-builder-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;builder&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-builder-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The future looks &lt;strong&gt;increasingly complex&lt;/strong&gt;. And extremely powerful. With the meteoric rise of &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, we&amp;#39;re seeing developers becoming more and more interested in tweaking the language itself that we are writing. And in ways that are in no way on the eventual ECMAScript roadmap. (Witness the power of the &lt;a href=&quot;https://github.com/thejameskyle/babel-plugin-ken-wheeler&quot;&gt;&lt;code&gt;babel-plugin-ken-wheeler&lt;/code&gt;&lt;/a&gt; plugin.)&lt;/p&gt;
&lt;p&gt;I think developers of all levels of experience will have to work very hard to keep up with both our application and infrastructure technologies. I know I certainly do.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One Ryan is nice, but two would be &lt;strong&gt;awesome&lt;/strong&gt;. Interview &lt;a href=&quot;https://twitter.com/ryanflorence&quot;&gt;Ryan Florence&lt;/a&gt; next. In addition to leading projects that help in the boilerplate arena, he works in the trenches with an incredibly wide swath of developers of all backgrounds and will surely have some good insights as to how all these technologies are working in the wild.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Ryan! Builder definitely seems like a powerful tool especially if you have to orchestrate a complex setup. If you want to study it further, consider the links below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://formidable.com/open-source/builder/&quot;&gt;Builder Website&lt;/a&gt; (generated off GitHub README)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder&quot;&gt;Builder GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder-init&quot;&gt;Builder-init GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example Archetypes:&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder-react-component&quot;&gt;https://github.com/FormidableLabs/builder-react-component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FormidableLabs/builder-victory-component&quot;&gt;https://github.com/FormidableLabs/builder-victory-component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.2.0</title><id>asurvivejswebpackv1202016-05-11t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-120/"></link><updated>2016-05-11T00:00:00Z</updated><content type="html">&lt;p&gt;As I&amp;#39;ve been working towards splitting &lt;a href=&quot;https://survivejs.com/react/introduction&quot;&gt;the first book&lt;/a&gt;, I realized I must do one more release of this webpack one before I can complete it. That&amp;#39;s what the current release, &lt;code&gt;1.2.0&lt;/code&gt;, is about. I&amp;#39;ve moved certain content there (mainly linting, npm related) and done assorted tweaks based on feedback.&lt;/p&gt;
&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/blog/survivejs-webpack-110&quot;&gt;the previous release&lt;/a&gt; we have something more mature together now. There are still improvements in store, but you have to take one step at a time.&lt;/p&gt;
&lt;p&gt;Getting the split done successfully is my next major goal with this effort. Completing that will take a lot of pressure out of my shoulders and allow new content to be developed more easily.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Speaking of new content, I produced &lt;a href=&quot;https://survivejs.github.io/training/&quot;&gt;a set of React training slides&lt;/a&gt; for a session. A lot of the research done for the slides will fold back to the written content eventually. Even though it took a lot of time and effort to produce the set, I believe it was worth it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to pushing the book content further, I spent some time contributing to &lt;a href=&quot;https://www.npmjs.com/package/webpack-validator&quot;&gt;webpack-validator&lt;/a&gt;. The tool is growing nicely. There&amp;#39;s still a lot to do, but it&amp;#39;s progressing nicely. The biggest advantage of having this kind of shell around webpack is that it is able to catch issues early while saving your valuable time.&lt;/p&gt;
&lt;p&gt;The development of the &lt;a href=&quot;https://survivejs.github.io/training/&quot;&gt;training slides&lt;/a&gt; took serious effort, but fortunately now that&amp;#39;s done, I don&amp;#39;t have to worry about slides so much anymore should I get training requests. The initial set can be developed further and perhaps turned into something greater, but more on this later.&lt;/p&gt;
&lt;p&gt;My next goal is to finish the split. There is still some content to be developed and infrastructure work to be done, but it&amp;#39;s gladly it&amp;#39;s not that far away! Most importantly &lt;a href=&quot;https://medium.com/@leanpub/the-leanpub-blog-in-progress-publishing-and-ebook-mitosis-2ab707198ca7&quot;&gt;Leanpub has completed its share&lt;/a&gt; so now I just need to finish my part and we are in a good place with this.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-2-0&quot; id=&quot;book-improvements-1-2-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.2.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-2-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 36 commits went to the book since the last release. You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.1.0...v1.2.0&quot;&gt;all changes&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#general-improvements&quot; id=&quot;general-improvements&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;General Improvements&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#general-improvements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ported &lt;code&gt;path.join&lt;/code&gt; and other path related portions to a platform agnostic format. This is to avoid issues on Windows. Slashes tend to be problematic. Thanks Viktor!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot; id=&quot;automatic-browser-refresh&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Automatic Browser Refresh&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;code&gt;webpack --watch&lt;/code&gt;. That provides a nice bridge to the HMR topic and it&amp;#39;s one of those features you might want to be aware of in case you don&amp;#39;t want to use webpack-dev-server for some reason and are just interested in generating a build automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#refreshing-css&quot; id=&quot;refreshing-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Refreshing CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#refreshing-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained CSS scoping in greater detail. This was a good chance to discuss the basic idea behind &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt; as well so you can see the difference. Thanks Christian!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot; id=&quot;enabling-sourcemaps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Enabling Sourcemaps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained browser side support better. Thanks Tom!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot; id=&quot;building-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot; id=&quot;splitting-bundles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Bundles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Used &lt;code&gt;vendor: Object.keys(pkg.dependencies)&lt;/code&gt; over &lt;code&gt;vendor: Object.keys(pkg)&lt;/code&gt;. That was the original intention after all. Thanks Viktor!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minifying-build&quot; id=&quot;minifying-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minifying Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minifying-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that you can use &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-remove-console&quot;&gt;babel-plugin-remove-console&lt;/a&gt; to drop the &lt;code&gt;console&lt;/code&gt; statements from your source. Uglify works too, but this is a good alternative to be aware of especially if you use Babel already.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#separating-css&quot; id=&quot;separating-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Separating CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#separating-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained PurifyCSS in greater detail. Now &lt;code&gt;paths&lt;/code&gt; and additional options should be a little clearer. Thanks Christian!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#hosting-on-github-pages&quot; id=&quot;hosting-on-github-pages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Hosting on GitHub Pages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#hosting-on-github-pages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the purpose of the &lt;code&gt;output.publicPath&lt;/code&gt; field. That is useful to be aware of as you can use it to manipulate your asset paths and point to a CDN for instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#loading-assets&quot; id=&quot;loading-assets&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Loading Assets&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#loading-assets&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-webpack-loaders&quot;&gt;babel-plugin-webpack-loaders&lt;/a&gt;. Sometimes you might get away without using webpack. Less work means more speed. &lt;em&gt;babel-plugin-webpack-loaders&lt;/em&gt; is particularly useful if you want to do server side rendering without getting webpack involved in the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ported from the first book. While porting, I made adjustments to fit the chapter to this book better so that it doesn&amp;#39;t assume a Kanban project. Especially the ESLint related portions have been expanded and reworked partially.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-packages&quot; id=&quot;authoring-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integrated npm bits from the first book. I reworked the material slightly and pushed technique bits to the end of the chapter. This way you get theory first and practical parts after that.&lt;/li&gt;
&lt;li&gt;Linked to &lt;a href=&quot;https://www.npmjs.com/package/webpack-node-externals&quot;&gt;webpack-node-externals&lt;/a&gt;. That&amp;#39;s one potential option for dealing with package &lt;code&gt;externals&lt;/code&gt;. I don&amp;#39;t use it myself, but I felt it was worth mentioning about.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-react&quot; id=&quot;configuring-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that &lt;code&gt;webpack.NoErrorsPlugin()&lt;/code&gt; can be potentially useful with HMR. It allows you to see possible syntax errors at the console over the error overlay used by the hmre preset.&lt;/li&gt;
&lt;li&gt;Linked to the &lt;em&gt;Setting Environment Variables&lt;/em&gt; chapter as that&amp;#39;s a valuable chapter to check out when you are using React.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though this isn&amp;#39;t a huge release, it&amp;#39;s a solid step towards something nicer. As usual, the content will evolve as more experience is gained. I find it particularly cool that a little effort like this can help to motivate improvements in tooling as well.&lt;/p&gt;
&lt;p&gt;As stated earlier, my next goal is to finish the split. It&amp;#39;s good to have this side of the fence in a good shape so we can get the other part across it as well. If you bought the original React/Webpack book, you&amp;#39;ll get access to the digital version of this one then. The pricing model will change then (total value goes up) as I like to thank my early supporters.&lt;/p&gt;
&lt;p&gt;Of course if you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. You can still gift the coupon to a friend. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his.&lt;/p&gt;
</content></entry><entry><title>nwb - CLI for React Applications and Components - Interview with Jonny Buchanan</title><id>anwbcliforreactapplicationsandcomponentsinterviewwithjonnybuchanan2016-05-09t00:00:00z</id><link href="https://survivejs.com/blog/nwb-interview/"></link><updated>2016-05-09T00:00:00Z</updated><content type="html">&lt;p&gt;Boilerplate code is perhaps one of the leading causes of JavaScript fatigue. You often have to go through certain motions to set up a project or maintain a boilerplate of your own. In &lt;a href=&quot;https://survivejs.com/blog/kotatsu-interview&quot;&gt;the previous interview about kotatsu&lt;/a&gt; we saw one possible solution.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/insin/nwb&quot;&gt;nwb&lt;/a&gt; is another similar project with its own ideas. To understand better what it&amp;#39;s about, I am interviewing the author of the project, &lt;a href=&quot;https://twitter.com/jbscript&quot;&gt;Jonny Buchanan&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot;&gt;
    &lt;img src=&quot;https://www.gravatar.com/avatar/98d0816016ba9c3bfafbd9cf433aeaa4?s=200&quot; alt=&quot;Jonny Buchanan&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
  &lt;/span&gt;

I&amp;#39;ve been working as a full-stack web developer for about 12 years, mostly on enterprise intranet apps. The main app I&amp;#39;m currently working on has a React-based frontend and makes use of nwb for development.
&lt;/p&gt;

&lt;p&gt;My wife and I live just outside Brisbane with our 3 kids after upping sticks in February this year and emigrated away from Northern Ireland.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-nwb-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-nwb-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;nwb&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-nwb-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;nwb is a tool for running live development builds, unit tests and production builds for various types of JavaScript projects without the &lt;code&gt;devDependency&lt;/code&gt; and configuration file boilerplate those tasks usually require.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a bit like a meta-package which not only owns the dependencies for Babel, Webpack, Karma and other common development tools for you, but also generates configuration for them on the fly and handles the details of using them all together.&lt;/p&gt;
&lt;p&gt;It allows you to get that ES6, hot-reloading, style-including, code-splitting, live unit-testing developer experience we&amp;#39;ve become accustomed to without adding umpteen &lt;code&gt;devDependencies&lt;/code&gt; to every project and either having to have the initial configuration fight with these tools yourself or copying and pasting configuration files into your project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-can-nwb-offer-for-react-projects-and-components-&quot; id=&quot;what-can-nwb-offer-for-react-projects-and-components-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What can &lt;em&gt;nwb&lt;/em&gt; offer for React projects and components?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-can-nwb-offer-for-react-projects-and-components-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For React projects, nwb can run a hot-reloading development server (with some extra development niceties), run unit tests and create a production-optimised build (including extracting stylesheets and creating a separate vendor bundle).&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re running your own local development server, nwb also provides middleware (currently only for Express) you can drop in to serve its hot-reloading development build.&lt;/p&gt;
&lt;p&gt;For React components and other npm modules, nwb can also create ES5 (for Node), ES6 module (for Rollup) and UMD (for &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or AMD usage) builds ready for publishing to npm, as well as doing hot reloading and building of a demo app for your React component.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-nwb-do-it-&quot; id=&quot;how-does-nwb-do-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;nwb&lt;/em&gt; do it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-nwb-do-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To provide a workflow around these capabilities, nwb can generate very basic skeleton projects. For example, &lt;code&gt;nwb init react-app &amp;amp;&amp;amp; nwb serve --auto-install&lt;/code&gt; will initialise a simple React app in the current directory and start a hot-reloading development server which will automatically install new dependencies as you import them.&lt;/p&gt;
&lt;p&gt;If you need to tweak the default configuration, you can add an &lt;code&gt;nwb.config.js&lt;/code&gt; file to your project which I&amp;#39;ve tried to keep as declarative as possible. For example, if you want to tweak configuration of the default set of Webpack loaders, each loader has a unique id associated with it. e.g. to enable &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt; in the &lt;code&gt;css-loader&lt;/code&gt; which is part of the default style pipeline nwb sets up:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  webpack&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      css&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        query&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
          modules&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;
        &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-makes-nwb-different-compared-to-other-solutions-&quot; id=&quot;what-makes-nwb-different-compared-to-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What makes &lt;em&gt;nwb&lt;/em&gt; different compared to other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-makes-nwb-different-compared-to-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Compared to other solutions, nwb is focused almost entirely on reducing tooling boilerplate for common tasks and making the config it generates tweakable, whereas others get deeper into how you architect your React apps.&lt;/p&gt;
&lt;p&gt;nwb probably has the most similar &amp;quot;why?&amp;quot; story to the one on the Formidable Labs&amp;#39; &lt;a href=&quot;http://formidable.com/open-source/builder/&quot;&gt;Builder&lt;/a&gt; homepage and shares Builder&amp;#39;s ability to deal with multiple project types, but limits itself to a small number commands in the core and simple skeleton projects versus Builder&amp;#39;s extensiblity and richer project archetypes.&lt;/p&gt;
&lt;p&gt;Ryan Florence&amp;#39;s &lt;a href=&quot;https://github.com/ryanflorence/react-project&quot;&gt;React Project&lt;/a&gt; has the same philosophy to be &amp;quot;a dependency - not a boilerplate&amp;quot;, but it&amp;#39;s also concerned with owning some of the details of creating React apps for you, such as how you create a server configured for server rendering with React Router.&lt;/p&gt;
&lt;p&gt;Both of these are probably better bets than nwb if you want to get started with a production-ready React app with routing, server rendering etc. ready to go, whereas nwb was extracted from the experience of frequently building React apps from scratch which didn&amp;#39;t always need those capabilities.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-nwb-&quot; id=&quot;why-did-you-develop-nwb-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;nwb&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-nwb-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s one of those &amp;quot;scratch your own itch&amp;quot; projects - I was getting tired of copying the same &lt;code&gt;devDependencies&lt;/code&gt; and configuration files around when creating new projects, then having to deal with updating dependency versions and making sure the latest configuration tweaks were present when maintaining projects.&lt;/p&gt;
&lt;p&gt;The initial &lt;code&gt;0.0.x&lt;/code&gt; versions were a prototype: copy the various configuration files I was using into a new module, install all the necessary development dependencies next to them and figuring out how to run the tools with the config against a different project.&lt;/p&gt;
&lt;p&gt;This worked fine for most of my projects which were using the same vanilla config, but others had some very specific needs which would need configuration to be dynamic beyond the usual &lt;code&gt;dev&lt;/code&gt;/&lt;code&gt;test&lt;/code&gt;/&lt;code&gt;prod&lt;/code&gt; logic people tend to have in their Webpack config to avoid repitition.&lt;/p&gt;
&lt;p&gt;As I was still scratching my own itch, I could have hardcoded special cases for the other config I needed in the prototype, but that didn&amp;#39;t feel right, while making everything properly dynamic felt like a lot of work when the  benefit to my apps was relatively small.&lt;/p&gt;
&lt;p&gt;I used the knowlege I&amp;#39;d gained about running tools in a different context to do for &lt;a href=&quot;https://github.com/insin/eslint-config-jonnybuchanan&quot;&gt;ESLint configuration&lt;/a&gt; (which was also getting copied around) what I&amp;#39;d done for my build tooling and thought that would probably be the last time I&amp;#39;d touch nwb.&lt;/p&gt;
&lt;p&gt;A few days later, the video of &lt;a href=&quot;https://www.youtube.com/watch?v=gk-xyLM7R4g&quot;&gt;Yehuda Katz&amp;#39;s keynote from EmberCamp London 2015&lt;/a&gt; got posted to YouTube, in which he gives an accelerated demo of building a GitHub issues browser from scratch using Ember CLI. I&amp;#39;d looked at Ember CLI to see what the API was like and played about with it a bit, but I&amp;#39;d never seen a complete example of someone using it from scratch to a working app.&lt;/p&gt;
&lt;p&gt;Seeing the convenience of that workflow in action put a picture in my mind of exactly what I&amp;#39;d need to implement to be able to do a similar demo with nwb and React (with HMR instead of full page refreshes, which felt really strange to see again) - it&amp;#39;d need to be able to create skeleton apps for a start, and in order to be able to add extra style loaders via plugin modules (for the Sass styles used in the demo), Webpack config generation would need to be much more dynamic...&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Generally just keeping up to date with what&amp;#39;s happening in the JavaScript ecosystem - the major benefit I get from nwb is only having to deal with the details of staying up to date in once place, and easily being able to update individual projects when I&amp;#39;m good and ready by bumping the dependency and following any upgrade steps in the release notes.&lt;/p&gt;
&lt;p&gt;Some of the planned next steps are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Babel 6&lt;/strong&gt; - nwb still uses Babel 5 due to Babel 6 effectively depending on npm3&amp;#39;s deduplication at install time, and I&amp;#39;m still using Node v4 and npm2 at home and taking Babel 5 into consideration anymore. nwb needs to catch up and either explicitly drop support for npm2.&lt;/p&gt;
&lt;p&gt;Alternatively I need to figure out an alternative way to consume Babel 6 plugins which doesn&amp;#39;t disadvantage people who are using npm2. Node v6 enters active LTS in October this year, after which npm3 becomes the default version for people waiting for the next active LTS to upgrade.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostCSS&lt;/strong&gt; - nwb is using the now-deprecated &lt;code&gt;autoprefixer-loader&lt;/code&gt; as a part of its default Webpack style pipeline and will need to switch to using PostCSS directly instead. I&amp;#39;ve not personally used it before, so that&amp;#39;s something else for which I need to figure out a way to make configurable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proper cachebusting&lt;/strong&gt; - using Webpack to generate builds where all output filenames have a content hash which is stable when nothing has changed proved to be tricky without a working mental model of how Webpack operates under the hood.&lt;/p&gt;
&lt;p&gt;I have a possibly-working implementation of this in a branch which feels like it works by coincidence, with at least 2 places where I couldn&amp;#39;t begin to explain why it works, so I&amp;#39;m holding off on that for now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extensibility?&lt;/strong&gt; - nwb is currently set up a bit like Babel 5 in that all the different types of projects it can handle are baked into the &lt;code&gt;nwb&lt;/code&gt; module. These could possibly be extracted into modules like &lt;code&gt;nwb-react-app&lt;/code&gt;, &lt;code&gt;nwb-npm-module&lt;/code&gt; etc., but the current implementation wasn&amp;#39;t designed with this in mind.&lt;/p&gt;
&lt;p&gt;I might try to make it more extensible if I ever need new project types which need a substantially different set of development dependencies, but I like the simplicity of things for now.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-nwb-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-nwb-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for nwb and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-nwb-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope a blessed CLI tool for React will emerge from the React community or Facebook so we can all direct our time and effort in the same direction. The approach react-project takes to avoiding boilerplate feels right to me - figure out which bits of plumbing will be the same and use them as dependencies instead of copying them into your project.&lt;/p&gt;
&lt;p&gt;If you have dependencies which enforce some base conventions, that also opens up the possibility of using code generation to speed up repetitive processes, but I&amp;#39;d like to see that coupled with codemods which help you upgrade later so we don&amp;#39;t end up with the same problems boilerplates and code generators leave us with today.&lt;/p&gt;
&lt;p&gt;I think Progressive Web Apps are going to become common once tooling and browser support catch up - I&amp;#39;ve been getting a closer glimpse of the bleeding edge recently because Addy Osmani has been using &lt;a href=&quot;https://github.com/insin/react-hn&quot;&gt;react-hn&lt;/a&gt; for some PWA experimentation.&lt;/p&gt;
&lt;p&gt;Maybe that&amp;#39;s something which could be extracted out into a higher level tool, eh?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;d like to read what a Ryan has to say about JavaScript tooling and webapps, be they a &lt;a href=&quot;https://github.com/ryanflorence&quot;&gt;Florence&lt;/a&gt; or a &lt;a href=&quot;https://github.com/ryan-roemer&quot;&gt;Roemer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But definitely a Ryan.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Jonny! nwb definitely fills a niche. It&amp;#39;s interesting to see if/when the situation becomes stable. I would love to see a blessed solution as well as it would bring stability especially to the React ecosystem known for its churn.&lt;/p&gt;
&lt;p&gt;The easiest way to get started with nwb is to &lt;a href=&quot;https://github.com/insin/nwb&quot;&gt;head to the project site&lt;/a&gt; and go from there. There is also specific &lt;a href=&quot;https://github.com/insin/nwb/tree/master/docs&quot;&gt;documentation&lt;/a&gt; available explaining the system in greater detail.&lt;/p&gt;
</content></entry><entry><title>Kotatsu - Less Boilerplate for Modern JavaScript - Interview with Guillaume Plique</title><id>akotatsulessboilerplateformodernjavascriptinterviewwithguillaumeplique2016-05-02t00:00:00z</id><link href="https://survivejs.com/blog/kotatsu-interview/"></link><updated>2016-05-02T00:00:00Z</updated><content type="html">&lt;p&gt;npm alone has more than three thousand JavaScript boilerplates. Often it&amp;#39;s easier to maintain your own than to use one designed by someone else. Everyone has their own preferences. At best boilerplates work as inspiration for your own work. The question is, can the amount of boilerplate be reduced?&lt;/p&gt;
&lt;p&gt;Guillaume Plique thinks so. You might remember him from the &lt;a href=&quot;https://survivejs.com/blog/baobab-interview&quot;&gt;Baobab interview&lt;/a&gt;. If not, look that up if you want to know more about him. Let&amp;#39;s let him tell us more about a tool known as &lt;a href=&quot;https://github.com/Yomguithereal/kotatsu&quot;&gt;kotatsu&lt;/a&gt; and his ideas behind it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-kotatsu-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-kotatsu-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;kotatsu&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-kotatsu-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;kotatsu&lt;/em&gt; is a straightforward CLI tool enabling JS developers to start working on a new project very fast and with as few boilerplate as possible. This means the tool will out of the box handle ES2015 for you, bundle, serve your code and handle &lt;a href=&quot;https://survivejs.com/webpack/appendices/hmr/&quot;&gt;Hot Module Replacement&lt;/a&gt; (HMR) without forcing you to write complex configuration files or tweaking your own dev express server.&lt;/p&gt;
&lt;p&gt;And all of this can be as easy as the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;kotatsu serve --es2015 ./js/main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-kotatsu-&quot; id=&quot;why-did-you-develop-kotatsu-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;kotatsu&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-kotatsu-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Initially, I started developing &lt;em&gt;kotatsu&lt;/em&gt; because I wanted to have HMR in Node.js. The thing is, after HMR started being a thing in the browser, I grew quite fond of it and, as a result, I was infuriated by the time needed to reload node.js scripts such as my express server. And even tools like &lt;a href=&quot;https://github.com/remy/nodemon&quot;&gt;nodemon&lt;/a&gt; were too slow and were furthermore wiping the state of my server application.&lt;/p&gt;
&lt;p&gt;So the first goal was indeed to make &lt;a href=&quot;https://webpack.github.io/&quot;&gt;webpack&lt;/a&gt;&amp;#39;s HMR a thing also on the server side. This was already possible, but really tiresome to setup on your own. So I developed &lt;em&gt;kotatsu&lt;/em&gt; to abstract the problem and be able to setup it more quickly on some other projects.&lt;/p&gt;
&lt;p&gt;But after some time using the tool, I found that it could also solve some issues related to the client-side and so I extended the tool to this related universe.&lt;/p&gt;
&lt;p&gt;The thing is nowadays, JS dev environment has become quite complex if you want to beneficiate from the latest advances: ES2015, ES2016, browser bundling, HMR etc. My point is not to say I regret ye old times - you won&amp;#39;t find me saying that - but just to note that it is quite tedious a task to setup your dev environment. Because you need a lot of boilerplate, a lot of complex configuration files etc. And, what&amp;#39;s more, in a lot of projects you always end up needing the same things.&lt;/p&gt;
&lt;p&gt;So, the philosophy of &lt;em&gt;kotatsu&lt;/em&gt; is the following: setup your project in a modern JS dev environment as fast as possible without boilerplate nor configuration, just the CLI tool, and only add/replace more specific parts of the stack on the fly when you start needing them.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, I need to do some maintenance work on the tool to ensure it works on every platform consistently etc. and remain sure it stays up to date with JS tooling (Babel, webpack etc.). I must also ensure that one is still able to forfeit parts of the tool, or even drop the tool altogether, without any difficulties when customizing the stack very specifically to meets one&amp;#39;s needs.&lt;/p&gt;
&lt;p&gt;I also want to add some new features but I must not go too far lest it would become another complex tool on the scale of the tools I currently abstract away for the user.&lt;/p&gt;
&lt;p&gt;Finally, I would love being able to write some unit tests for the tool but I find it very difficult to do so because of the amount of IO, system etc. the tool relies upon (any help on the subject would be gladly accepted :) ).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-build-tooling-and-boilerplates-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-build-tooling-and-boilerplates-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for build tooling and boilerplates in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-build-tooling-and-boilerplates-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think we are going to observe quite an interesting trend: On the one hand, specialist tools (Babel, webpack etc.) will become more refined, powerful, and customizable. But, on the other hand we will likely see a lot of more abstract and simple tools using the former ones as foundation making JavaScript development more accessible to everyone.&lt;/p&gt;
&lt;p&gt;This means, we&amp;#39;ll see more HMR goodies, more developer tools such as the one we can already see for frameworks &amp;amp; libraries and not only for the JS language itself etc.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess that, to stay on topic, you should probably interview &lt;a href=&quot;https://github.com/insin&quot;&gt;Jonny Buchanan&lt;/a&gt; (@insin) about &lt;a href=&quot;https://github.com/insin/nwb&quot;&gt;nwb&lt;/a&gt; which is a perfectly good example of the higher-level tools coming our way.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Guillaume! I will definitely keep an eye on Kotatsu. I have some ideas of my own on how to get rid of some of that boilerplate baggage we are carrying around. Most likely our ideas will converge somehow at some point.&lt;/p&gt;
&lt;p&gt;If you want to try out the tool, check out &lt;a href=&quot;https://github.com/Yomguithereal/kotatsu&quot;&gt;kotatsu project page on GitHub&lt;/a&gt;. You should find enough information there to get started. And I&amp;#39;m sure Guilllaume will value feedback!&lt;/p&gt;
</content></entry><entry><title>Hashnode - Community for Software Developers - Interview with Sandeep Panda</title><id>ahashnodecommunityforsoftwaredevelopersinterviewwithsandeeppanda2016-04-25t00:00:00z</id><link href="https://survivejs.com/blog/hashnode-interview/"></link><updated>2016-04-25T00:00:00Z</updated><content type="html">&lt;p&gt;One of the challenges of being a web developer is keeping up with the world. The field moves ahead constantly and it&amp;#39;s easy to fail to see the forest from the trees. In part, SurviveJS was born to address this problem, but obviously it&amp;#39;s only a small part of the solution.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hashnode.com/&quot;&gt;Hashnode&lt;/a&gt; is a service that approaches the problem from a little different angle. To get a better idea, I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/Sandeepg33k&quot;&gt;Sandeep Panda&lt;/a&gt;, one of the developers behind the service.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am Sandeep, a software developer based out of Bangalore, India. I have been developing for the web for last 6 years. Apart from programming I also like writing and helping people get better at coding.&lt;/p&gt;
&lt;p&gt;I have written two books, &lt;a href=&quot;http://shop.oreilly.com/product/9780980285826.do&quot;&gt;Jump Start HTML5 : APIs&lt;/a&gt; and &lt;a href=&quot;https://learnable.com/books/angularjs-novice-to-ninja&quot;&gt;AngularJS : Novice to Ninja&lt;/a&gt;, and have contributed many tutorials to &lt;a href=&quot;https://www.sitepoint.com/author/spanda/&quot;&gt;SitePoint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently I, along with &lt;a href=&quot;https://twitter.com/@fazlerocks&quot;&gt;Fazle&lt;/a&gt;, started Hashnode which is a community for software developers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-hashnode-to-someone-who-has-never-heard-of-it-how-does-it-differ-from-other-solutions-&quot; id=&quot;how-would-you-describe-hashnode-to-someone-who-has-never-heard-of-it-how-does-it-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Hashnode to someone who has never heard of it? How does it differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-hashnode-to-someone-who-has-never-heard-of-it-how-does-it-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hashnode brings a social angle to how developers interact. Stack Overflow already does a great job at helping developers with specific questions and programming errors&lt;/p&gt;
&lt;p&gt;At Hashnode we encourage subjective and opinion based questions and want developers to express themselves. The broader goal is to help developers get better, stay relevant and connected.&lt;/p&gt;
&lt;p&gt;Apart from Q&amp;amp;A, we also let developers share links, write about their experiences in the form of stories. Also, we recently introduced &lt;a href=&quot;https://hashnode.com/amas&quot;&gt;AMAs&lt;/a&gt; where we invite influencers and awesome tech teams to conduct live Q&amp;amp;A sessions.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-hashnode-&quot; id=&quot;why-did-you-develop-hashnode-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Hashnode?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-hashnode-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While writing books and tutorials for SitePoint I realized that there should be a community that is more welcoming to beginners and helps them get started with newer technologies.&lt;/p&gt;
&lt;p&gt;Communities like Stack Overflow are too focused on specific programming errors. So, we thought of building a community around developers with focus on questions that demand in-depth explanations and discussions.&lt;/p&gt;
&lt;p&gt;Another reason behind developing Hashnode was to connect developers with influencers and tech teams that have built great open source projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The current priority is to grow Hashnode as a community and keep getting more and more developers to use the platform. It&amp;#39;s still new (around 3 months old) and will probably undergo a lot of improvements in coming days.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-hashnode-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-hashnode-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for Hashnode and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-hashnode-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Talking about the future, we want to build a modern day community for developers where they can hang out with others on a global scale. Right now Hashnode is doing good progress by attracting developers in areas like JavaScript, Node.js, CSS, React, PHP, RoR and Java. But eventually our goal is to have all kinds of developers in a single platform.&lt;/p&gt;
&lt;p&gt;I think isomorphic (universal) apps are going to play a key role in future. Hashnode is built with React and is isomorphic in nature. So we, as a company, are going to invest a lot in this area.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s why we released an open source project called &lt;a href=&quot;http://mern.io&quot;&gt;mern.io&lt;/a&gt; which helps developers get started with building isomorphic apps using React and Redux. With around 1900 stars on GitHub, it has got good traction and we are actively looking for contributors to improve it further.&lt;/p&gt;
&lt;p&gt;I also think React Native is going to be used heavily in the coming days.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TJ Holowaychuk. Don&amp;#39;t forget to ask him about his productivity hacks.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Sandeep! We&amp;#39;ll be hosting a &lt;a href=&quot;https://hashnode.com/ama/with-survivejs-cinamhpeh005pn753oax6pf5b&quot;&gt;SurviveJS AMA&lt;/a&gt; at &lt;a href=&quot;https://hashnode.com/&quot;&gt;Hashnode&lt;/a&gt; on Friday 29th (18:00 GMT+0). So if you have any SurviveJS, Webpack, or React related questions, see you there. I&amp;#39;ll be writing answers for solid two hours and there&amp;#39;s a little something in store for the top questions.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.1.0</title><id>asurvivejswebpackv1102016-04-24t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-110/"></link><updated>2016-04-24T00:00:00Z</updated><content type="html">&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/blog/survivejs-webpack-100&quot;&gt;the first release&lt;/a&gt; a couple of weeks ago, this version has matured quite a bit. I&amp;#39;ve been reviewing the content with &lt;a href=&quot;http://angular-tips.com/&quot;&gt;my editor&lt;/a&gt; (thanks Jesús!) and that has lead to some nice insights. Our work is still in progress and so far we&amp;#39;ve combed through only a couple of the first chapters. The work will continue in the coming weeks.&lt;/p&gt;
&lt;p&gt;Overall we are going to a good direction with this book. The effort has forced me to understand webpack on a deeper level. That&amp;#39;s a good thing. I expect &lt;code&gt;1.2.0&lt;/code&gt; will improve the situation further as I can cover webpack in greater detail. The book structure seems solid and it&amp;#39;s easy to grow content on top of it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perhaps the biggest technical improvement this time around is the introduction of a new configuration format. I realized using &lt;a href=&quot;https://www.npmjs.com/package/webpack-merge&quot;&gt;webpack-merge&lt;/a&gt; allows us to split configuration into smaller functions.&lt;/p&gt;
&lt;p&gt;This way &lt;em&gt;webpack.config.js&lt;/em&gt; can remain simpler while we get configuration code that can be shared across multiple projects and even published to npm. It&amp;#39;s also easier for me to explain what&amp;#39;s going on this way.&lt;/p&gt;
&lt;p&gt;This change was motivated by a tool known as &lt;a href=&quot;https://www.npmjs.com/package/webpack-validator&quot;&gt;webpack-validator&lt;/a&gt;. It checks your webpack configuration against a schema and it is able to point out configuration issues during development. This is valuable as the errors webpack emits aren&amp;#39;t always the easiest to understand. Using a little tool like this takes some pain out of the process.&lt;/p&gt;
&lt;p&gt;There are numerous other improvements as well, but read on to learn more about those. I feel the book is evolving to a good direction although there is still a lot of work left. I&amp;#39;ll focus on the React book next so I can finally get the promised split done.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-1-0&quot; id=&quot;book-improvements-1-1-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.1.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-1-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 118 commits went to the book since the last release. You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack/compare/v1.0.0...v1.1.0&quot;&gt;all changes&lt;/a&gt;. Remember especially the &amp;quot;Files changed&amp;quot; tab as it gives you a good overview of what&amp;#39;s happening with the book.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Improved flow. Now JSPM has a section of its own and overall the chapter reads a little better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-started&quot; id=&quot;getting-started&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Started&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-started&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved flow here as well. The chapter should be a little easier to read now. I&amp;#39;ve done flow tweaks elsewhere too and I won&amp;#39;t be mentioning about it separately anymore. They are small tweaks, but they count.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-the-configuration&quot; id=&quot;splitting-the-configuration&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting the Configuration&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-the-configuration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ported to the new configuration scheme.&lt;/li&gt;
&lt;li&gt;Explained how to integrate &lt;a href=&quot;https://www.npmjs.org/package/webpack-validator&quot;&gt;webpack-validator&lt;/a&gt;. Now it&amp;#39;s within Webpack configuration. This might change in the future as a CLI is developed for the tool. Then we can run it in a smarter way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot; id=&quot;automatic-browser-refresh&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Automatic Browser Refresh&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#automatic-browser-refresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ported to the new configuration scheme just like the remainder of the book. No special mentions after this mention.&lt;/li&gt;
&lt;li&gt;Explained in greater detail what&amp;#39;s going on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot; id=&quot;enabling-sourcemaps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Enabling Sourcemaps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#enabling-sourcemaps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New chapter! I pushed the sourcemap related bits here. Now the topic is discussed in greater detail. Also &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; is covered.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#setting-up-npm-install-webpack-plugin&quot; id=&quot;setting-up-npm-install-webpack-plugin&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Setting Up &lt;code&gt;npm-install-webpack-plugin&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#setting-up-npm-install-webpack-plugin&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Removed this chapter as it didn&amp;#39;t contribute much.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#optimizing-development&quot; id=&quot;optimizing-development&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Optimizing Development&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#optimizing-development&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Removed this chapter and moved the ideas discussed to the React chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot; id=&quot;building-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#minifying-the-build&quot; id=&quot;minifying-the-build&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Minifying the Build&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#minifying-the-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pushed React &lt;code&gt;import&lt;/code&gt; to this chapter. It felt like a good idea to push it later in the book. It cannot be eliminated as we need something to minify.&lt;/li&gt;
&lt;li&gt;Explained how to use UglifyJS specific options through Webpack.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot; id=&quot;setting-environment-variables&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Setting Environment Variables&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#setting-environment-variables&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained &lt;code&gt;DefinePlugin&lt;/code&gt; in greater detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot; id=&quot;splitting-bundles&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Splitting Bundles&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#splitting-bundles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained why a manifest is extracted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot; id=&quot;adding-hashes-to-filenames&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Adding Hashes to Filenames&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#adding-hashes-to-filenames&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the idea of the approach in greater detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#separating-css&quot; id=&quot;separating-css&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Separating CSS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#separating-css&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained how to process CSS through &lt;a href=&quot;https://github.com/purifycss/purifycss&quot;&gt;purifycss&lt;/a&gt; to drop unused CSS. This is particularly useful with CSS frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot; id=&quot;analyzing-build-statistics&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Analyzing Build Statistics&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#analyzing-build-statistics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained what &lt;code&gt;--profile&lt;/code&gt; and &lt;code&gt;--json&lt;/code&gt; actually do. If you aren&amp;#39;t interested in timing information, you can skip &lt;code&gt;--profile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot; id=&quot;advanced-techniques&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Advanced Techniques&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#advanced-techniques&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-packages&quot; id=&quot;authoring-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that relying on &lt;code&gt;postinstall&lt;/code&gt; scripts can be &lt;a href=&quot;http://blog.npmjs.org/post/141702881055/package-install-scripts-vulnerability&quot;&gt;potentially dangerous&lt;/a&gt;. If you want to skip them, use &lt;code&gt;npm install --ignore-scripts&lt;/code&gt; or set &lt;code&gt;npm config set ignore-scripts true&lt;/code&gt; to default to ignore.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#configuring-react&quot; id=&quot;configuring-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Configuring React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#configuring-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/babel-preset-react-optimize&quot;&gt;babel-preset-react-optimize&lt;/a&gt; preset. You can experiment with it to get more optimal builds.&lt;/li&gt;
&lt;li&gt;Explained how to configure &lt;a href=&quot;https://www.npmjs.com/package/react-lite&quot;&gt;react-lite&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/preact&quot;&gt;preact&lt;/a&gt; for production. This is useful if you are particularly conscious about bundle size.&lt;/li&gt;
&lt;li&gt;Explained how to configure React &lt;a href=&quot;https://facebook.github.io/react/docs/perf.html&quot;&gt;performance related utilities&lt;/a&gt; so that you can access them through the browser.&lt;/li&gt;
&lt;li&gt;Moved the &lt;code&gt;module.noParse&lt;/code&gt; idea to this chapter to improve the flow and to make the early part of the book a little easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I feel this release took the book a notch further. I still have plenty of topics to explore and expand upon. We&amp;#39;ll also be continue reviewing the book chapter by chapter to push quality.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll do a little pass on the React book next to finish the split. If you have bought it already, you&amp;#39;ll receive a free coupon to this one then to thank you for your support.&lt;/p&gt;
&lt;p&gt;Of course if you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;. You can still gift the coupon to a friend. A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack. This is my way of supporting his work given mine builds on top of his.&lt;/p&gt;
</content></entry><entry><title>FRZR - a Tiny View Library - Interview with Juha Lindstedt</title><id>afrzratinyviewlibraryinterviewwithjuhalindstedt2016-04-18t00:00:00z</id><link href="https://survivejs.com/blog/frzr-interview/"></link><updated>2016-04-18T00:00:00Z</updated><content type="html">&lt;p&gt;Often when you pick up a JavaScript library it&amp;#39;s going to be a little chunky - tens, or even hundreds of kilobytes. Though this can be entirely acceptable given the benefits, it might be a little much at times.&lt;/p&gt;
&lt;p&gt;What if it was possible to begin from the other extreme and go from there? This is what Juha Lindstedt&amp;#39;s library &lt;a href=&quot;https://frzr.js.org&quot;&gt;FRZR&lt;/a&gt; is about. Read on to learn more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/46846cd7fc5658dbae2c7a8998b394dc?s=200&quot; alt=&quot;Juha Lindstedt&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;

I&amp;#39;ve been working as a freelance senior web developer, doing projects with small businesses and advertising agencies. Lately I&amp;#39;ve focused on developing &lt;a href=&quot;http://www.idid.fi&quot;&gt;iDiD&lt;/a&gt; digital signage system at &lt;a href=&quot;http://www.talents.fi&quot;&gt;ConnectingTalents&lt;/a&gt;, where I currently work.
&lt;/p&gt;

&lt;p&gt;I started in 1999 with Flash and also used PHP few years. In 2011 I fell in love with Node.js and haven&amp;#39;t looked back since. I love crafting tailor-made projects and am not into bootstraps or heavy frameworks (although I&amp;#39;ve used all kinds of frameworks a lot in the past). I always start with an empty canvas (HTML/CSS/JS).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-frzr-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-frzr-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe FRZR to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-frzr-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;FRZR is a tiny view library (only 2 kB). It is so easy that I can teach you in 20 minutes how it works under the hood. It&amp;#39;s also really really fast and versatile.&lt;/p&gt;
&lt;p&gt;Last week I actually did a presentation, where I built FRZR from scratch live, and that way explained how it works. It took me 40 minutes, but this week I&amp;#39;m giving another presentation where I have to do it 20 minutes. That tells something about the simplicity.&lt;/p&gt;
&lt;p&gt;To give you a better idea, consider the login form example below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; el &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; frzr&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; mount &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; frzr&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;mount&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;Login&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;opts&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;el &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;form&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token keyword keyword-class&quot; &gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;login&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;email &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;input&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;email&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;pass &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;input&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;password&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;submit &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Sign in&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-this&quot; &gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;onsubmit &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;onsubmit&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; login &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Login&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  onsubmit&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; email &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; login&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; pass &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; login&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;pass&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; pass&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; login&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-frzr-&quot; id=&quot;why-did-you-develop-frzr-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop FRZR?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-frzr-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like I said before, I&amp;#39;ve used heavy frameworks in the past. The problem with them is that you never know what the next version update will do to your application. Having to rewrite your whole application because of a framework update is not that nice.&lt;/p&gt;
&lt;p&gt;Or when you have to debug the code just to realize a framework swallows all the errors is just horrible. Having a really long stack traces is never good for performance and profiling, either.&lt;/p&gt;
&lt;p&gt;FRZR on the other hand is so easy, you can understand 100 % how it works.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All kinds of challenges. First I needed to study how DOM works. Then I needed to figure out how one would use the library. The latter turned out to be the hardest part. It&amp;#39;s really hard to design a library so that it&amp;#39;s usable in many different situations.&lt;/p&gt;
&lt;p&gt;The more I iterated with it, the simpler it got. Now I&amp;#39;m pretty close to releasing version 1.0, since I don&amp;#39;t think the basic idea will change that much anymore.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I should write better documentation, record some videos etc.. But I&amp;#39;m quite busy right now with client work, so it will take some time. I hope this week&amp;#39;s presentation, which will be recorded, works as a good introduction for FRZR.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also planning to publish all kinds of side libraries for FRZR. Everything is going to be really easily replaceable and usable with other libraries as well. Even the core of FRZR is just a few bunch of small and general functions.&lt;/p&gt;
&lt;p&gt;Writing components with FRZR for example means writing just a plain and simple function which just returns &lt;code&gt;el&lt;/code&gt;-property, which is the HTMLElement. And you can also mix and match HTML elements and FRZR components. Simple, really.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-frzr-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-frzr-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for FRZR and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-frzr-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m sure frameworks will get easier, but I also hope they&amp;#39;ll get more general in a sense, that you could easily swap them. Right know the situation is so, that if you write an application with Angular, you can&amp;#39;t really use that much of the code with Ember or React. So you get stuck with the one you&amp;#39;re using, and that&amp;#39;s bad.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You could interview &lt;a href=&quot;https://github.com/paldepind&quot;&gt;Simon Friis Vindum&lt;/a&gt;, the creator of &lt;a href=&quot;https://github.com/paldepind/flyd&quot;&gt;flyd&lt;/a&gt;, &lt;a href=&quot;https://github.com/paldepind/snabbdom&quot;&gt;snabbdom&lt;/a&gt; and many other great libraries. FRZR actually got started when I wrote the original DOM reordering script for &lt;a href=&quot;http://riotjs.com&quot;&gt;riot.js&lt;/a&gt;, which Simon helped me to enhance. So in a sense he&amp;#39;s the early contributor of FRZR. Say hello from me :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Juha. It&amp;#39;s always refreshing to see different kind of approaches. Yours is one of the lightest view libraries I&amp;#39;ve seen. The syntax reminds me of &lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot;&gt;hyperscript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are interested in FRZR, check out &lt;a href=&quot;https://frzr.js.org&quot;&gt;the official site of the library&lt;/a&gt;. See also &lt;a href=&quot;https://codepen.io/collection/XKwVMG/&quot;&gt;the getting started demos&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v2.1.0</title><id>asurvivejswebpackandreactv2102016-04-17t00:00:00z</id><link href="https://survivejs.com/blog/survivejs210/"></link><updated>2016-04-17T00:00:00Z</updated><content type="html">&lt;p&gt;It has been a while since &lt;a href=&quot;https://survivejs.com/blog/survivejs200&quot;&gt;the previous release&lt;/a&gt; and quite a bit has happened. As you might have noticed, there&amp;#39;s actually &lt;a href=&quot;https://survivejs.com/blog/survivejs-webpack-100&quot;&gt;a new book about webpack&lt;/a&gt; out there now. The idea is that I will split this one in two.&lt;/p&gt;
&lt;p&gt;This book will continue as something React focused while I&amp;#39;ll push all the webpack bits to the other one. All current readers will receive a free coupon to the webpack book once I complete this transition. To get a preview, check out &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;the online version&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A part of the income (around ~30%) goes to Tobias Koppers, the author of webpack, to support its development. That&amp;#39;s the least I can do to support his efforts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This release, 2.1, can be considered a bug fix release. There isn&amp;#39;t any major new content. In fact, I dropped the &lt;a href=&quot;http://jscs.info/&quot;&gt;JSCS&lt;/a&gt; section as it was announced that the project has reached end of life. The core team will join &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt; efforts.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though getting this release out there took longer than I would have liked, I feel we are on the right track. I&amp;#39;ve managed to take care of certain necessary things, such as setting up a proper business entity (waiting for the government now). I even got a nomination for &lt;a href=&quot;http://www.bluearrowawards.com/&quot;&gt;an award&lt;/a&gt;, but I have no high hopes for that of course.&lt;/p&gt;
&lt;p&gt;Splitting the book will allow me to provide more focused content. I got into touch with my old editor and we&amp;#39;ll be working especially on the webpack book to push it further. During the week I actually discovered &lt;a href=&quot;https://github.com/survivejs-demos/webpack-demo/tree/dev&quot;&gt;a neater way to structure webpack configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution relies on &lt;a href=&quot;https://www.npmjs.com/package/webpack-merge&quot;&gt;webpack-merge&lt;/a&gt;, a tool I developed earlier for the purposes of this book. The approach allows you to split your configuration into easily reusable functions. The next version of the webpack book will cover it in detail.&lt;/p&gt;
&lt;p&gt;I have agreed to a training day at May. This will give me a good excuse to research further. Particularly Redux will receive attention. During the past few weeks I&amp;#39;ve spent a lot of time with it so I know the pros/cons and related patterns quite well now. This will pay off in the coming weeks.&lt;/p&gt;
&lt;p&gt;I hope to complete the split in the next release. That will make room for more content and make it easier to maintain it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-1-0&quot; id=&quot;book-improvements-2-1-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.1.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-1-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 112 commits went to book since the last release. Given PDF generation was sketchy at best and didn&amp;#39;t even work on certain systems, I ended up scrapping it for now. &lt;a href=&quot;https://www.gitbook.com/&quot;&gt;GitBook&lt;/a&gt; doesn&amp;#39;t support the custom syntax the book relies on so the output was not optimal.&lt;/p&gt;
&lt;p&gt;It might be feasible to fix the situation in the future by rendering the site to PDF through something like &lt;a href=&quot;https://www.npmjs.com/package/html-pdf&quot;&gt;html-pdf&lt;/a&gt;. This is an approach I used successfully in my React based &lt;a href=&quot;https://github.com/bebraw/generate-invoice&quot;&gt;invoice generator&lt;/a&gt; and it worked beautifully there.&lt;/p&gt;
&lt;p&gt;Even though I did my best to avoid mistakes with &lt;a href=&quot;http://www.amazon.com/SurviveJS-Webpack-React-apprentice-master/dp/152391050X&quot;&gt;the Amazon version&lt;/a&gt;, a few smaller issues managed to find their way into the book. Fortunately nothing major, though. I&amp;#39;ve listed these issues at &lt;a href=&quot;https://github.com/survivejs/webpack_react/blob/dev/amazon_errata.md&quot;&gt;the Amazon errata&lt;/a&gt;. The errors listed there have been fixed in the paper version.&lt;/p&gt;
&lt;p&gt;You can find the important changes below. See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v2.0.0...v2.1.0&quot;&gt;all changes&lt;/a&gt;. Especially the &amp;quot;Files changed&amp;quot; tab is highly useful.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://github.com/bucaran/fly&quot;&gt;Fly&lt;/a&gt; as an alternative to Gulp. It relies on ES6 generators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Recommended the usage of an LTS (Long-Term Support) version of Node. Please don&amp;#39;t use Node 0.10 or 0.12 anymore. That&amp;#39;s just asking for trouble. :)&lt;/li&gt;
&lt;li&gt;Mentioned &lt;code&gt;--save-exact&lt;/code&gt; and &lt;code&gt;-E&lt;/code&gt; shortcut for those who want to install exact versions of their dependencies.&lt;/li&gt;
&lt;li&gt;Simplified &lt;em&gt;app/index.js&lt;/em&gt; further. Literally just &lt;code&gt;document.body.appendChild(component());&lt;/code&gt; after the import does the trick.&lt;/li&gt;
&lt;li&gt;Mentioned where to look for the generated bundle.&lt;/li&gt;
&lt;li&gt;Explained that &lt;em&gt;npm start&lt;/em&gt; and &lt;em&gt;npm test&lt;/em&gt; are special cases. Normally you run scripts through &lt;em&gt;npm run&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned that polling is needed for Vagrant and Ubuntu too.&lt;/li&gt;
&lt;li&gt;Simplified polling configuration. Now it&amp;#39;s on JavaScript side.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linked to the correct page related to &lt;a href=&quot;https://babeljs.io/docs/plugins/#stage-x-experimental-presets-&quot;&gt;Babel&amp;#39;s experimental features&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned that it&amp;#39;s a good idea to disable IDE feature known as &lt;strong&gt;safe save&lt;/strong&gt; if you are using HMR. It can cause problems.&lt;/li&gt;
&lt;li&gt;Clarified the section about React component styles.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clarified the spread operator idea so it&amp;#39;s clear that it should still go through the &lt;code&gt;setState&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Added examples of how to write function based components. This helps to understand the syntax and how it works better.&lt;/li&gt;
&lt;li&gt;Explained refs in greater detail.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;e.stopPropagation();&lt;/code&gt; to &lt;code&gt;deleteNote&lt;/code&gt; in order to avoid bubbling to edit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clarified the &lt;code&gt;waitFor&lt;/code&gt; section.&lt;/li&gt;
&lt;li&gt;Expanded on the &lt;code&gt;onEdit&lt;/code&gt; and &lt;code&gt;onValueClick&lt;/code&gt; idea to see how they work.&lt;/li&gt;
&lt;li&gt;Expanded on the idea of &lt;em&gt;controlled&lt;/em&gt; and &lt;em&gt;uncontrolled&lt;/em&gt; components. There&amp;#39;s a section for this now.&lt;/li&gt;
&lt;li&gt;Added a section about cleaning up notes. While writing this section I realized this bug could be turned into a feature - a recycle bin for notes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;code&gt;isDragging&lt;/code&gt; check. The current version of React DnD doesn&amp;#39;t need it anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added missing &lt;code&gt;inject: false&lt;/code&gt; to &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; configuration to make it work with the template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react&quot; id=&quot;testing-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained &lt;code&gt;resolve.alias&lt;/code&gt; idea in greater detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#typing-with-react&quot; id=&quot;typing-with-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#typing-with-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-flow-react-proptypes&quot;&gt;babel-plugin-flow-react-proptypes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/flow-status-webpack-plugin&quot;&gt;flow-status-webpack-plugin&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that &lt;a href=&quot;http://eslint.org/blog/2016/04/welcoming-jscs-to-eslint&quot;&gt;JSCS decided to merge its efforts with ESLint&lt;/a&gt;. As a result I dropped the JSCS section.&lt;/li&gt;
&lt;li&gt;Mentioned that it is possible to use ESLint autofixing through the Webpack plugin.&lt;/li&gt;
&lt;li&gt;Showed how to enable caching for ESLint to speed it up.&lt;/li&gt;
&lt;li&gt;Mentioned how to make ESLint respect &lt;em&gt;.gitignore&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Showed how to use vanilla ES6 with ESLint.&lt;/li&gt;
&lt;li&gt;Mentioned that ESLint supports other formats than JSON for configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-packages&quot; id=&quot;authoring-packages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Packages&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that &lt;code&gt;postinstall&lt;/code&gt; scripts can be &lt;a href=&quot;http://blog.npmjs.org/post/141702881055/package-install-scripts-vulnerability&quot;&gt;potentially dangerous&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://docs.npmjs.com/files/package.json#bundleddependencies&quot;&gt;bundledDependencies&lt;/a&gt; for those that are cautious.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/npm-check&quot;&gt;npm-check&lt;/a&gt; for updating dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added PostCSS image and linked to &lt;a href=&quot;http://postcss.org/&quot;&gt;PostCSS site&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cleaned up CSS Modules example.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#language-features&quot; id=&quot;language-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Language Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#language-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned it is possible to omit &lt;code&gt;()&lt;/code&gt; with simple fat arrow functions. I.e., &lt;code&gt;const square = a =&amp;gt; a * a;&lt;/code&gt; is valid.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/analyze-es6-modules&quot;&gt;analyze-es6-modules&lt;/a&gt; given ES6 module format is statically analyzable and enables these type of tools to provide you more information about your source.&lt;/li&gt;
&lt;li&gt;Mentioned spread operator gotchas (shallow by default).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I have managed to tackle some of my goals, there is still work left. The split took some time, and will take still, but I believe it was a good move. Upon completion it will make room for more development.&lt;/p&gt;
&lt;p&gt;I still have improvements planned. I&amp;#39;ve listed these based on priority:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete the book split. I&amp;#39;ll drop the webpack bits from this book and provide you a boilerplate instead. This means the readers get faster to the React bits. This decreases the weight of the book somewhat and makes room for more goodies and growth.&lt;/li&gt;
&lt;li&gt;Port book content to Redux. I have prepared both &lt;a href=&quot;https://github.com/survivejs-demos/redux-demo&quot;&gt;vanilla and Immutable.js versions of Kanban&lt;/a&gt; to prepare for this.&lt;/li&gt;
&lt;li&gt;Write &lt;strong&gt;async&lt;/strong&gt; appendix. This would show how to deal with asynchronous concerns through Alt. It&amp;#39;s a common problem and worth covering.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#expanding-business&quot; id=&quot;expanding-business&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Expanding Business&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#expanding-business&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently I&amp;#39;m in authoring/consulting/training mode. Even though consulting and training take time out of authoring, they feed back in terms of experience. I&amp;#39;m particularly excited about the upcoming training case. It will force me to simplify and focus.&lt;/p&gt;
&lt;p&gt;Possible service model is possible still. If you would be interested in becoming a supporter and gaining early access to content, and even one-on-one time with me, &lt;a href=&quot;http://eepurl.com/bQAeuH&quot;&gt;sign up to the supporter mailing list&lt;/a&gt;. Signing up doesn&amp;#39;t bind you to anything and it&amp;#39;s more of a signal for me to do something about it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. Thanks for support. That&amp;#39;s what makes this worth doing.&lt;/p&gt;
&lt;p&gt;Remember that you can find up to date code from &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt;. The stable version of the book is available at the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work. It&amp;#39;s good for me to know where you struggle so I can tweak the book.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt; or &lt;a href=&quot;amazon.com/SurviveJS-Webpack-React-apprentice-master/dp/152391050X&quot;&gt;Amazon&lt;/a&gt; (paper version). Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Relax - New generation CMS on top of React and Node.js - Interview with Bruno Mota</title><id>arelaxnewgenerationcmsontopofreactandnodejsinterviewwithbrunomota2016-04-11t00:00:00z</id><link href="https://survivejs.com/blog/relax-interview/"></link><updated>2016-04-11T00:00:00Z</updated><content type="html">&lt;p&gt;Even though I&amp;#39;ve spent a lot of time with web development, I never really delved into the world of Content Management Systems (CMS). I&amp;#39;m of course aware of WordPress, Drupal, and such. I&amp;#39;ve managed to get away with either something entirely custom or a static site generator. Even this site has been developed using &lt;a href=&quot;https://antwarjs.github.io/&quot;&gt;one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given how much effort developing a static site generator takes, I can only imagine how hard it is to develop an entire CMS. &lt;a href=&quot;https://twitter.com/bruno12mota&quot;&gt;Bruno Mota&lt;/a&gt; and friends have developed a system known as Relax on top of React and Node.js. He claims it is a new generation CMS. What does this mean? Let&amp;#39;s find out.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/18af7addb03d91d4659db11dc8c6c325?s=200&quot; alt=&quot;Bruno Mota&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;

My name is Bruno Mota and I&amp;#39;m one of the creators of Relax CMS. I&amp;#39;ve been working on web projects for the past few years, specially with JavaScript. I started making Flash projects with ActionScript when I was in high school which started my developer vein. Eventually switched to JavaScript and gradually to more advanced stuff.
&lt;/p&gt;

&lt;p&gt;Soon enough I was selling plugins and themes online, mainly on the &lt;a href=&quot;https://envato.com/?ref=plusquare&quot;&gt;Envato&lt;/a&gt; marketplace. And now, in the last months, Relax, a full CMS built using latest techs in the JavaScript world.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-relax-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-relax-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Relax to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-relax-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Relax is a CMS, in longer terms a content management system, with some additional powers. The idea behind relax is that anyone should be able to build a website without needing to make a single line of code.&lt;/p&gt;
&lt;p&gt;The two most important features on Relax that differentiates it from other CMSs is the page builder and the content types builder.&lt;/p&gt;
&lt;p&gt;The page builder lets you build any page with drag and drop, providing you instant feedback on how your page will look. It is component based, so you have a bunch of components from the most basic such as text and image, to more complex ones, such as music player or video. For each of these components you can alter a bunch of settings to change its looks and behavior.&lt;/p&gt;
&lt;p&gt;
&lt;iframe src=&quot;//player.vimeo.com/video/162203892?autoplay=0&amp;loop=1&amp;portrait=0&amp;title=0&amp;byline=0&amp;badge=0&quot; width=&quot;100%&quot; height=&quot;300px&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The content types builder let&amp;#39;s you create data models to use in your site or just to save information. A good and standard example of a content type is a blog, each blog post might have a featured image, a title, a description, etc. With Relax you can create this in a simple and graphic way on the admin area.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/09582769eaa13975b9336aff18957694.jpg&quot; alt=&quot;Asset types&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Asset types&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;But wait, isn&amp;#39;t there already page builders and content types builders around? Yes there is, but Relax takes it up a big notch integrating the both. You can link data from your created content types in the page builder itself, and all with drag and drop! So you can create a blog posts list using the page builder only. You can also create singles for the blog posts by linking data in the page builder as well.&lt;/p&gt;
&lt;p&gt;
&lt;iframe src=&quot;//player.vimeo.com/video/162203696?autoplay=0&amp;loop=1&amp;portrait=0&amp;title=0&amp;byline=0&amp;badge=0&quot; width=&quot;100%&quot; height=&quot;300px&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-relax-&quot; id=&quot;why-did-you-develop-relax-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Relax?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-relax-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Relax was product of my user experience perfectionist frustration with other CMSs such as WordPress. Don&amp;#39;t get me wrong, WordPress is a really solid and a great CMS that has been in the top for a long time. And I used to work with it, making plugins and themes, which is where my frustration comes from.&lt;/p&gt;
&lt;p&gt;It all started on a project to make a multipurpose WordPress theme to sell on &lt;a href=&quot;http://themeforest.net/?ref=plusquare&quot;&gt;Themeforest&lt;/a&gt;. A multipurpose theme is basically providing a lot of control to the theme user to customize their site with almost endless possibilities. This proved to be a hard challenge. Almost endless work on creating options and plugins such as: a page builder, a menu builder, options to control colors, sizes, fonts, etc.&lt;/p&gt;
&lt;p&gt;I definitely needed help, and that&amp;#39;s when &lt;a href=&quot;https://github.com/magalhas&quot;&gt;José Magalhães&lt;/a&gt; and &lt;a href=&quot;https://github.com/ivomiguelas&quot;&gt;Ivo Silva&lt;/a&gt; started to work with me on it. Short after, we came to a conclusion. Not only it was a lot of work but we were also being limited by the CMS itself. By creating plugins and options for the theme we were adding dynamism but loosing big time in user experience. It was literally hundreds of options bloated into the already bloated WordPress interface.&lt;/p&gt;
&lt;p&gt;We thought it was time to change that. The technology is available, so why not do something that prevents these issues and give total control to the user? That&amp;#39;s where Relax, the idea, started to take its form.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Whole sort of challenges! But there are two main reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User experience&lt;/strong&gt; - It has been really hard to come up with solutions that don&amp;#39;t overflow the user with options, but at the same time, provide all the options needed. We&amp;#39;ve made a huge effort in this area and one of it is currently undergoing. We&amp;#39;re re-designing the whole admin area, and our focus has been in providing a drill down experience where the user is presented with the minimum data he needs for each action or area of action.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast environment&lt;/strong&gt; - In the last months the JavaScript world has been affected by an avalanche of new trends, libs and setups. This was great for Relax in the way that it could benefit from these new techs. But bad in the way that it slowed the project down quite a lot. Since Relax was created, we&amp;#39;ve switched from ES5 to ES6, from a REST system to GraphQL, grunt build to webpack, Backbone to Redux and React Router, and recently we&amp;#39;ve introduced Relate into the mix.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;#39;re now at a stable path with the techs we&amp;#39;re using. User experience is something that is never finished but something that is constantly worked on. We do have almost everything designed and planned for the beta release.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, we should finish the dashboard design development the next 3-4 weeks. It will be a fresh face to Relax and a much better user experience overall. Then it&amp;#39;s a matter of concluding some pendent issues towards the beta release. We&amp;#39;ve set up a macro view of what&amp;#39;s missing at &lt;a href=&quot;https://github.com/relax/relax/blob/master/ROADMAP.md&quot;&gt;the roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/2b536bac95e6800e9cc6cc7b462f5bbc.jpg&quot; alt=&quot;Asset search&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Asset search&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We have bigger plans later down the road for Relax. Relax CMS will always be free as an open source project. Although, we have plans to make a marketplace where developers and designers can sell themes and more complex components for Relax. It will be a review based marketplace to assure every item will be top notch.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Front-end development changed dramatically in the last few years. I mean, not a long time back we were serving html files, introducing some JavaScript here and there. And now, the trend has shifted to full JavaScript applications. It has been really great to see and live through these changes.&lt;/p&gt;
&lt;p&gt;React broke a lot of barriers as a &amp;quot;view layer&amp;quot;. Composability enables us to focus on each piece of our application at a time. And this is a trend I see growing even more in the future. With recent build processes such as &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;, not only components define what they show, but also how they look, the assets it uses and, in more recently movements, the data needs from the server with &lt;a href=&quot;http://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt; is an awesome solution provided by the facebook team that takes this step exactly of defining server data needs in the components. For Relax we&amp;#39;ve made &lt;a href=&quot;http://relax.github.io/relate/&quot;&gt;Relate&lt;/a&gt;, a custom solution that meets its kind of demands, which we open sourced separately so other people can use it. There is still a lot of experimenting to do in this area, and I think there will be great advances in the following year.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jdalton&quot;&gt;John-David Dalton&lt;/a&gt;, the creator of &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt;. Would love to know if there are some plans for some lodash immutable utils.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot for the interview Bruno! It is definitely an exciting time to be a web developer. Projects like Relax are a good example of that.&lt;/p&gt;
&lt;p&gt;If you want to take a better look at Relax, check out the &lt;a href=&quot;https://github.com/relax/relax&quot;&gt;GitHub repository&lt;/a&gt;. There is also &lt;a href=&quot;http://slack-relax.herokuapp.com/&quot;&gt;Slack&lt;/a&gt; if you want to chat about the topic with the authors.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack - v1.0.0</title><id>asurvivejswebpackv1002016-04-02t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-webpack-100/"></link><updated>2016-04-02T00:00:00Z</updated><content type="html">&lt;p&gt;I&amp;#39;m currently in process of splitting up the big book (&lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;SurviveJS - Webpack and React&lt;/a&gt;). The split allows me to dig deeper in both topics. This book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;SurviveJS - Webpack&lt;/a&gt;, focuses on webpack as you might guess.&lt;/p&gt;
&lt;p&gt;Given this is the very first edition, you can expect some rough spots. Some interesting topics are missing as well, but you have to start from somewhere.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#release-notes&quot; id=&quot;release-notes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Release Notes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#release-notes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;#39;s an &lt;a href=&quot;https://survivejs.com/webpack/preface&quot;&gt;online edition&lt;/a&gt;. It contains the same content as the commercial version. I am just experimenting with a little different model here for a change to see how it goes.&lt;/li&gt;
&lt;li&gt;If you have bought &amp;quot;SurviveJS - Webpack and React&amp;quot;, you will receive this book for free once I complete the split. That book will become simply &amp;quot;SurviveJS - React&amp;quot;. This will give me room to develop more React specific content.&lt;/li&gt;
&lt;li&gt;A part of this books profit (around ~30%) will go to Tobias Koppers, the author of webpack. This book simply wouldn&amp;#39;t be possible without him so he more than deserves a cut.&lt;/li&gt;
&lt;li&gt;Feedback is welcome. Prefer &lt;a href=&quot;https://github.com/survivejs/webpack/issues&quot;&gt;the GitHub issue tracker&lt;/a&gt; for that. You can reach me other ways too. I am particularly interested in what sort of content to develop.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy the book. If you have read the original one, you probably won&amp;#39;t find a lot of new content here. I feel the content is easier to access, though, and there are some nuggets of information you just might not be aware of yet.&lt;/p&gt;
&lt;p&gt;If you want to support the development of the book, &lt;a href=&quot;https://leanpub.com/survivejs-webpack&quot;&gt;pick up a copy at Leanpub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Till the next release! It&amp;#39;s time to refresh the big one.&lt;/p&gt;
</content></entry><entry><title>React.rocks - React Components and Demos - Interview with Jeff Winkler</title><id>areactrocksreactcomponentsanddemosinterviewwithjeffwinkler2016-03-14t00:00:00z</id><link href="https://survivejs.com/blog/react-rocks-interview/"></link><updated>2016-03-14T00:00:00Z</updated><content type="html">&lt;p&gt;Given there&amp;#39;s a lot going on in the React ecosystem, it can be difficult to keep up. Jeff Winkler maintains a service known as &lt;a href=&quot;https://react.rocks/&quot;&gt;React.rocks&lt;/a&gt; to alleviate this problem. To get a better idea of what the service is about, read on.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/e5055021e46feb70f5383eaf34d740e8.jpg&quot; alt=&quot;Jeff Winkler&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Jeff Winkler&lt;/figcaption&gt;&lt;/figure&gt;

  I am a full stack developer and I have been writing code for over 20 years. From museum kiosks to big enterprise software. I&amp;#39;ve been using React for a couple years. I&amp;#39;m a tool/feedback loop junkie. I&amp;#39;ve been lucky enough to work on a couple green-field ReactJS projects.
&lt;/p&gt;

&lt;p&gt;My wife and I live outside Boston and we have a five year old, it&amp;#39;s really fun to see through the eyes of a kid.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-rocks-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-rocks-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe React.rocks to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-rocks-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React.rocks has examples of things built with React. To be included, entries must have online demos and be open source. Visitors can go from screenshot to demo, then dive into the source code.&lt;/p&gt;
&lt;p&gt;Entries are tagged to help find like examples. The entries are manually curated, at a rate of a couple a day. The site features bigger &amp;quot;apps&amp;quot; than single components.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-rocks-&quot; id=&quot;why-did-you-develop-react-rocks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop React.rocks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-rocks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While learning React, I kept adding to a text file file cool things built with it. It wasn&amp;#39;t working, so building a site seemed like a good forcing function. A static site with no server was intriguing. Once I registered the domain, wanted to follow through with it!&lt;/p&gt;
&lt;p&gt;I wanted to build a purely static site with ultra-fast performance. It&amp;#39;s to geek out on optimizing data transfer and size. Despite being image heavy, It&amp;#39;s 508K all-in.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The code base has been pretty stable. Challenges are more finding content. Each morning I read #reactjs. This takes a lot of time but is a good way to spot trends.&lt;/p&gt;
&lt;p&gt;Sometimes it&amp;#39;s hard to get motivated to update the site, but finding new things built with React is invigorating.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been thinking performance a lot - how to benchmark the rendering of React components? How do you encode policies in &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt;/&lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt; to keep an app fast as developers and component counts grow?&lt;/p&gt;
&lt;p&gt;On the backend, &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; is very interesting to me. It&amp;#39;s a language built on the &lt;a href=&quot;http://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt; VM that&amp;#39;s been powering telecomm for 30 years. Ground-up Immutability and functional style, multi-core ready.&lt;/p&gt;
&lt;p&gt;I need to open source the code for React.rocks, to get contributions from smarter folks.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;More fatigue! :) The JS/React communities will keep pushing the envelope and trying new things.&lt;/p&gt;
&lt;p&gt;At the same time, there&amp;#39;s an awareness that React can be too &amp;quot;bazaar&amp;quot; for newcomers.  The community has a ton of brainpower and energy. I think we&amp;#39;ll see some gentle guidance to harness that effort to improve onboarding and pave cowpaths. Ryan Florence&amp;#39;s &lt;a href=&quot;https://github.com/ryanflorence/react-project&quot;&gt;React-project&lt;/a&gt; looks promising.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/graphql/&quot;&gt;GraphQL&lt;/a&gt; will keep gathering steam. Diverse communities are excited by it. It&amp;#39;s declarative and batches expensive operations - just like React! Within a year I expect back-end ORMS/persistence layers to support GraphQL out of the box. It just makes sense to leverage the metadata.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; optimizes for team throughput. I&amp;#39;d expect more success stories.. and a tipping point in a year or so.&lt;/p&gt;
&lt;p&gt;Functional programming and Immutability are clearly good things. We&amp;#39;ll keep seeing attempts to move toward &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;-ish pure paradigms. ES2015 has the most momentum and user base.&lt;/p&gt;
&lt;p&gt;App Shells, Service Workers, and WebGL all seem super interesting, with unexplored upsides.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ryan Florence, about the work he&amp;#39;s doing with react-project, a CLI for React.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Jeff! I hope &lt;a href=&quot;https://react.rocks/&quot;&gt;React.rocks&lt;/a&gt;  continues to grow and flourish. It&amp;#39;s one of those community resources that it&amp;#39;s hard to live without. Keep it up!&lt;/p&gt;
</content></entry><entry><title>Reindex - Instant GraphQL Backend for Your React Apps - Interview with Ville Immonen</title><id>areindexinstantgraphqlbackendforyourreactappsinterviewwithvilleimmonen2016-03-07t00:00:00z</id><link href="https://survivejs.com/blog/reindex-interview/"></link><updated>2016-03-07T00:00:00Z</updated><content type="html">&lt;p&gt;More often than not, you are going to need a back-end for your application. Particularly RESTful APIs are popular. They are not the only choice, though. GraphQL is a specification that has been designed apps in mind. Rather than separating our API end-points by resource, we get something entirely different.&lt;/p&gt;
&lt;p&gt;To understand the topic a little better, I am interviewing Ville Immonen of Reindex.&lt;/p&gt;
&lt;blockquote class=&quot;warning&quot;&gt;&lt;i class=&quot;icon-attention&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://www.reindex.io/blog/discontinuing-backend-as-a-service/&quot;&gt;Reindex has been discontinued as a service&lt;/a&gt;. You can still read the post to gain insights, though.&lt;/blockquote&gt;&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img
    src=&quot;https://www.gravatar.com/avatar/e89d8e6912bf23525337395769e16505?s=200&quot;
    alt=&quot;Ville Immonen&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;
My name is Ville Immonen and I&amp;#39;m a co-founder at &lt;a href=&quot;https://www.reindex.io/&quot;&gt;Reindex&lt;/a&gt;, where I work to make it simpler for developers to build web and mobile apps by using React and GraphQL.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-reindex-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-reindex-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Reindex&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-reindex-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Reindex is a GraphQL service you can use as a backend for your apps. It&amp;#39;s very easy to setup and handles the data storage, authentication, permissions and other server-side tasks, so you can focus on building awesome apps for your users instead of managing servers and developing and maintaining APIs.&lt;/p&gt;
&lt;p&gt;You use Reindex by defining your data model – the types you have and their fields. Then you just push that definition to the service and the API and data storage for your model is created automatically. The API uses &lt;a href=&quot;http://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;, data query language developed for building apps at Facebook that lets you write client-side queries for data fetching.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-is-graphql-&quot; id=&quot;what-is-graphql-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What is GraphQL?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-is-graphql-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GraphQL is an efficient way to fetch data, because it lets you get just the data you need in a single request, instead of, for example, having to write a lot of plumbing code to patch everything together from numerous REST endpoints that return everything a client might need.&lt;/p&gt;
&lt;p&gt;GraphQL fits very well with the way we as front-end developers think of and use data on the client. We have hierarchical components, or views, and GraphQL lets us get the data to populate those views in the same hierarchical fashion.&lt;/p&gt;
&lt;p&gt;Another feature of GraphQL is that it allows introspection, the types available on the server can also be queried using GraphQL. This opens up possibilities for all kinds of smart tools and libraries.&lt;/p&gt;
&lt;p&gt;One of the most interesting ones is &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt;, a JavaScript framework for data fetching that lets you decorate React components with GraphQL queries and it can handle fetching, caching and managing data for your app.&lt;/p&gt;
&lt;p&gt;To sum up, we&amp;#39;re very excited about the possibilities GraphQL has for efficient product development and aim to make Reindex the best way to build and host a GraphQL API for your app.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-reindex-&quot; id=&quot;why-did-you-develop-reindex-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Reindex&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-reindex-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#39;re product developers ourself, with experience building apps for startups and bigger companies alike. We&amp;#39;ve used React since 2013 and it&amp;#39;s made a huge impact in productivity. But we always thought managing data in client-side apps was an unsolved problem that introduced a lot of plumbing and complexity in the code.&lt;/p&gt;
&lt;p&gt;I previously worked on a project where the data layer went through many iterations, from a REST API built in house and plumbing for it with reactive programming on the client-side, to using Flux on the client and finally dropping the custom API server in favor of a Firebase to store the data. This was a big improvement for developer productivity, but it still required a lot of complex plumbing to manage on the client.&lt;/p&gt;
&lt;p&gt;The answer came a year ago, when Facebook introduced GraphQL and Relay at React.js Conf 2015. The talk by Dan and Jing was enough to convince us that this was going to be something big and it addressed the problems we previously had in product development.&lt;/p&gt;
&lt;p&gt;We wanted to build a server that would be as easy to setup as Firebase, but have the capabilities of GraphQL to make it work with Relay. This is how the idea of Reindex was born and we started to develop it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We continue to improve Reindex to make it work for various kinds of applications. It&amp;#39;s really exciting to see what developers will build on top of it.&lt;/p&gt;
&lt;p&gt;Here are some things we want to explore going forwards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connecting to external data sources - This will allow Reindex to be used as a gateway to bring all your data sources together under one GraphQL API to build client-side apps on. We want to make Reindex the best way to build GraphQL APIs, regardless of where the data is stored.&lt;/li&gt;
&lt;li&gt;Developer experience - GraphQL opens up great possibilities for advanced integration with developer tools. We&amp;#39;ll be working in collaboration with tool developers to imagine and realize a cohesive development experience of the future for apps using GraphQL.&lt;/li&gt;
&lt;li&gt;Real-time updates - There is an ongoing effort to bring subscriptions to GraphQL and Relay. We&amp;#39;re following this progress and looking forward to making subscriptions easy to use with Reindex in apps that require them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React is not just a UI library anymore, it&amp;#39;s an ecosystem, and it&amp;#39;s becoming a cohesive platform for building apps both for the web and for proprietary mobile platforms. This platform consists of technologies like React, React Native, GraphQL, Relay, Babel and Flow, and this year we will see the ecosystem continue its huge growth, but also become more mature.&lt;/p&gt;
&lt;p&gt;In 2015 we saw a number of new solutions emerge to problems with data management, including GraphQL and Relay, Redux, Om Next and Falcor. Although my bets are on GraphQL and Relay, it&amp;#39;s not yet certain who will come out as a winner. What is certain though, is that we will continue to see a lot of new innovation and exploration in this space.&lt;/p&gt;
&lt;p&gt;We will also see better tools that make developers more productive on the React platform and ease the growing pains around tooling felt by many, also known as the &lt;a href=&quot;https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4&quot;&gt;&amp;quot;JavaScript fatigue&amp;quot;&lt;/a&gt;. The whole experience of building apps with these technologies will become more integrated, and easier to setup by virtue of opinionated toolchains that &amp;quot;just work&amp;quot;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The possibilities are endless! You should have someone talk about React Native, like Brent Vatne. And ask Nick Cammarata or Nate Wienert from Motion what the React development tools of the future will look like.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Ville! If Reindex or GraphQL sounds something that&amp;#39;s in your alley, consider the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.reindex.io/docs/&quot;&gt;Reindex docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reindexio/reindex-examples&quot;&gt;Reindex examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>SurviveJS - Learn Webpack and React - Interview with Juho Vepsäläinen</title><id>asurvivejslearnwebpackandreactinterviewwithjuhovepsalainen2016-02-29t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-interview/"></link><updated>2016-02-29T00:00:00Z</updated><content type="html">&lt;p&gt;There is always some level of tension between getting things done and learning new technologies. A lot of the recent JavaScript fatigue stems from that. A year ago I decided to take some preemptive moves against it. The whole point of the SurviveJS effort is to smoothen the way, and quite literally, survive JavaScript and its growth.&lt;/p&gt;
&lt;p&gt;The effort reached an important milestone as my first book, &lt;em&gt;SurviveJS - Webpack and React&lt;/em&gt;, reached its &lt;a href=&quot;https://survivejs.com/blog/survivejs200&quot;&gt;2.0 version&lt;/a&gt;. As a part of the release, &lt;a href=&quot;http://www.amazon.com/SurviveJS-Webpack-React-apprentice-master/dp/152391050X&quot;&gt;a paper version&lt;/a&gt; became available. This wouldn&amp;#39;t have been possible without the awesome community around me of course. The support during this little journey has enabled me to continue.&lt;/p&gt;
&lt;p&gt;As it&amp;#39;s a good idea to recover a bit after a major release, I&amp;#39;ve had time to reflect and scheme. Even though I have taken it easier when it comes to writing, I found time to pay off some technical debt and update the site. Now that this has been done, it&amp;#39;s easier to progress again.&lt;/p&gt;
&lt;p&gt;In order to give you more background on the effort, this felt like a good time to interview myself. It&amp;#39;s not perhaps the most original thing to do, but I hope you learn a thing or two about me from it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/b26ec3c2769168c2cbc64cc3df9cdd9c?s=200&quot; alt=&quot;Juho Vepsäläinen&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;
I am Juho Vepsäläinen, the person that maintains this little effort. My background is academic (&lt;abbr title=&quot;Master of Science&quot;&gt;MSc&lt;/abbr&gt;), and before delving into the world of books, I spent a few years subcontracting and working with startups. The whole point of the current effort was to find a more sustainable direction.
&lt;/p&gt;

&lt;p&gt;It feels like the work hasn&amp;#39;t been in vain. It has definitely taught me a lot about technology, authoring, and business in general. That said, there&amp;#39;s still plenty to learn.&lt;/p&gt;
&lt;p&gt;All I can hope is that I can learn from my mistakes and manage to push the effort forward. Fortunately not a lot of pushing is needed as community often literally pulls the content from me. Better this way.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-survivejs-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-survivejs-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;SurviveJS&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-survivejs-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine you found yourself in the middle of a jungle. What would you love to have with you? A machete obviously. It&amp;#39;s easy to get lost with JavaScript. My goal here is to provide tools that help you to navigate this jungle. &lt;em&gt;SurviveJS - Webpack and React&lt;/em&gt; was my first stab towards this overall vision.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-survivejs-&quot; id=&quot;why-did-you-develop-survivejs-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;SurviveJS&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-survivejs-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was somewhat frustrated with my current situation. My main gripe with contracting is that it&amp;#39;s often an hour&amp;#39;s pay for an hour&amp;#39;s work. I am simply not that great at it. So I thought maybe I could apply my skills at something else while helping the community.&lt;/p&gt;
&lt;p&gt;The common wisdom is that you shouldn&amp;#39;t write technical books. In retrospect, disregarding that wisdom was a good move for me. There are easier ways for a programmer to make money.&lt;/p&gt;
&lt;p&gt;Writing isn&amp;#39;t a problem, actually marketing and selling the books is. You will need to get a lot of things right to make it work. These problems are pronounced for a first time author as you might need to figure it out as you go.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After getting the physical edition to my hands, I realized one thing. The book is actually pretty chunky! The format, letter (about ~A4), is big. It&amp;#39;s more like a textbook. I&amp;#39;m not sure if that&amp;#39;s the vibe I want from a book. Fortunately, this is something that&amp;#39;s quite easy to fix.&lt;/p&gt;
&lt;p&gt;As the book title says, the book covers both &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. But what if you don&amp;#39;t want to learn the both?&lt;/p&gt;
&lt;p&gt;This is the reason why I will be splitting up the book in two in the near future. Instead of &lt;em&gt;SurviveJS - Webpack and React&lt;/em&gt; you will have &lt;em&gt;SurviveJS - Webpack&lt;/em&gt; and &lt;em&gt;SurviveJS - React&lt;/em&gt;. The great thing about this move is that it allows me to focus better on both topics while allowing to serve you better.&lt;/p&gt;
&lt;p&gt;The idea is that the current book will be rebranded as &lt;em&gt;SurviveJS - React&lt;/em&gt;. The current Leanpub readers will receive &lt;em&gt;SurviveJS - Webpack&lt;/em&gt; for free. The total cost of both books will go up while the price of an individual book might go down a notch. So if you want to save a bit, this might be a good chance to pick the current offering.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s &lt;a href=&quot;https://survivejs.com/webpack/preface/&quot;&gt;an early draft of the Webpack book&lt;/a&gt; online. It is based on the Webpack cookbook I wrote with &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian&lt;/a&gt; a year ago. I will still have to dig through the content and modernize it. During the process I will also port the Webpack bits from the current book there and implement a lighter setup for the React project.&lt;/p&gt;
&lt;p&gt;The model will remain the same. A part of the content will remain closed to motivate people to pay for it. Obviously I cannot force anyone to buy it, but for now this seems like a good way to go.&lt;/p&gt;
&lt;p&gt;Over longer term I want to provide something subscription based. This supporter scheme would give you early access to new content and private Slack. It would start at $20 per month. If this is something you would like to participate in, &lt;a href=&quot;http://eepurl.com/bQAeuH&quot;&gt;sign up to the supporter mailing list&lt;/a&gt;. Signing up doesn&amp;#39;t bind you to anything. It&amp;#39;s more about measuring potential interest.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are going to see consolidation. Architectures and tooling will move towards something more standard. &lt;a href=&quot;https://www.youtube.com/watch?v=-RJf2jYzs8A&quot;&gt;Ben Alpert discussed the former&lt;/a&gt; at his recent React.js conference talk. Architecture-wise the goal is to end up with something that combines the best ideas of Flux, Redux, and Relay into one.&lt;/p&gt;
&lt;p&gt;Tooling-wise we&amp;#39;ll end up with something more opinionated. Currently we have an amazing amount of boilerplates. Boilerplates help you to get started, but they don&amp;#39;t resolve issues related to maintenance. At worst they are actually counter-productive as you need to alter them to fit your purposes. Incidentally this is the reason why we have so many boilerplates. It&amp;#39;s hard to agree technically on everything.&lt;/p&gt;
&lt;p&gt;I think we&amp;#39;ll find ways to alleviate this problem. We will still have boilerplates, but they will have less boilerplate in them. Particularly the amount of direct dependencies will decrease. We will push a lot of complexity elsewhere and end up with more standard ways of doing things. Not every React developer should know how to set up something like hot loading for instance.&lt;/p&gt;
&lt;p&gt;Perhaps a tool like &lt;a href=&quot;https://github.com/Yomguithereal/kotatsu&quot;&gt;kotatsu&lt;/a&gt; or &lt;a href=&quot;https://github.com/insin/nwb&quot;&gt;nwb&lt;/a&gt; will grow popular and solve the problem once and for all. I have a little idea of my own in the form of &lt;a href=&quot;https://github.com/survivejs/webpack-presets&quot;&gt;webpack-presets&lt;/a&gt; (think Babel presets but for Webpack). There&amp;#39;s definitely room for innovation in this space.&lt;/p&gt;
&lt;p&gt;Thinking outside of React, perhaps we will end up with &lt;a href=&quot;https://survivejs.com/blog/towards-common-components&quot;&gt;better ways of sharing components&lt;/a&gt; as I discussed earlier. It doesn&amp;#39;t feel particularly smart to re-invent the wheel for every single ecosystem. We should be able to share more. Perhaps we will see more convergence as the web platform matures and we can integrate the most important ideas to it. The less layers we need on top of it, the better.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know who I am going to interview next. You have to wait till the next interview for that.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a weird interview to write. I hope it gave you some insight on what runs inside my head and how I think about technology. Web development is at the same time awesome yet frustrating. At least you will never run out of things to learn.&lt;/p&gt;
&lt;p&gt;If you haven&amp;#39;t checked out the current book, consider starting out &lt;a href=&quot;https://survivejs.com/react/introduction/&quot;&gt;the online edition&lt;/a&gt;. Even if you know the technology well, there could be some nuggets of information you could put into good use at your work. I hope you find the effort useful!&lt;/p&gt;
</content></entry><entry><title>react-styleguidist - Style guide generator for React - Interview with Artem Sapegin</title><id>areactstyleguidiststyleguidegeneratorforreactinterviewwithartemsapegin2016-02-22t00:00:00z</id><link href="https://survivejs.com/blog/styleguidist-interview/"></link><updated>2016-02-22T00:00:00Z</updated><content type="html">&lt;p&gt;People have been developing style guides for their sites and applications for quite a while. They define basic building blocks and aesthetics. This is valuable as it helps you to keep your design consistent and communicate it to your developers better. Style guides can also help to bridge designers with developers.&lt;/p&gt;
&lt;p&gt;Given React is component driven, the approach works beautifully here. Artem Sapegin has developed a tool known as &lt;a href=&quot;https://github.com/sapegin/react-styleguidist&quot;&gt;react-styleguidist&lt;/a&gt; for this purpose. It allows you to reach towards these ideals within the context of React. To understand the tool a bit better, read on.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://s.gravatar.com/avatar/16a1493bcecf09614c413e571c371e96?s=200&quot; alt=&quot;Artem Sapegin&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;I’m a front-end developer at &lt;a href=&quot;http://here.com/&quot;&gt;Here&lt;/a&gt; in Berlin where I’m trying to make work of my colleagues easier by developing internal tools using React.&lt;/p&gt;
&lt;p&gt;I like to spend my spare time making photographs, traveling, reading, drinking coffee and stroking my dogs.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-styleguidist-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-styleguidist-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;react-styleguidist&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-styleguidist-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s a style guide generator for your React components. Each component has a props table and documentation section that renders from Markdown file where every code sample transformed into a playground with rendered code and a code editor where you can change its code and see how component behave with different props.&lt;/p&gt;
&lt;p&gt;You can also use react-styleguidist as a workbench to develop new components: it has a dev-server and hot-reloads any changes in components’ code and Markdown documentation.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-styleguidist-&quot; id=&quot;why-did-you-develop-react-styleguidist-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;react-styleguidist&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-styleguidist-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because I couldn’t find any good tool to make a style guide for my project at work.&lt;/p&gt;
&lt;p&gt;Then I was trying to hack something and the idea of using Webpack loaders to load and hot-reload examples and Markdown documentation came to my mind.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The biggest challenge with developing react-styleguidist is integration with users’ projects: Webpack loaders, styles and everything else should be isolated as much as possible and react-styleguidist’s code shouldn’t clash with project’s code. At the same time, it should be easy to integrate react-styleguidist to the user’s project and the user should be able to modify style guide as they like.&lt;/p&gt;
&lt;p&gt;Most of the bugs at our GitHub issues are conflicts with users projects’ configuration. So there are still a lot of work in this area and any help is very appreciated.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think the React ecosystem will stabilize a bit and opinionated libraries, that wrap many smaller libraries, will emerge to make starting new projects for the beginners a lot easier.&lt;/p&gt;
&lt;p&gt;I hope developers will find and document more best practices of developing React applications. I also hope that tools will be easier to configure or at least it will be easier to find out what’s wrong with your configuration.&lt;/p&gt;
&lt;p&gt;Developing with React now has many benefits and very exciting, but requires you to answer too many questions and always be a bit unsure about your work.&lt;/p&gt;
&lt;p&gt;I also think that in a few years we will have a common standard for components that would work in React as well as other frameworks like Angular 7 or Ember 9. Like we had jQuery plugins before.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sebmck&quot;&gt;Sebastian McKenzie&lt;/a&gt;, a Babel’s creator.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thank you for your interview Artem. I wish the best of luck to your project!&lt;/p&gt;
&lt;p&gt;react-styleguidist just reached an important milestone with its &lt;a href=&quot;https://github.com/sapegin/react-styleguidist/releases/tag/2.0.0&quot;&gt;2.0.0 release&lt;/a&gt;. See also &lt;a href=&quot;https://github.com/sapegin/react-styleguidist&quot;&gt;the GitHub repository&lt;/a&gt; of the project.&lt;/p&gt;
&lt;p&gt;To get a better idea of what kind of style guides the tool is able to produce, check out &lt;a href=&quot;https://react-styleguidist.js.org/&quot;&gt;the example style guide&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v2.0.0</title><id>asurvivejswebpackandreactv2002016-02-15t00:00:00z</id><link href="https://survivejs.com/blog/survivejs200/"></link><updated>2016-02-15T00:00:00Z</updated><content type="html">&lt;p&gt;When I started this project roughly a year ago I had no idea how rewarding and demanding one it would be. Writing books is way harder than it sounds. Especially when you go through the self-publishing route, you have a lot to learn!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe this little journey has been worthwhile. And if it&amp;#39;s up to me, it&amp;#39;s a journey that will continue. Even though I am very happy to announce the final 2.0 version of the book, I see that as a milestone, not as an end. But what an important milestone it is.&lt;/p&gt;
&lt;p&gt;The goal of this release was to produce something worth publishing in a paper format. The greatest advantage of a digital book is that you can push updates to it at will. This is something you lose with paperbacks. As a result greater amount of finesse is required.&lt;/p&gt;
&lt;p&gt;I feel this conscious effort towards a paperback contributed to the book in a nice way. It&amp;#39;s not the perfect book and I am absolutely certain it&amp;#39;s not everyone&amp;#39;s cup of coffee. All I can hope is that someone finds it valuable and worth paying for.&lt;/p&gt;
&lt;p&gt;The 2.0 version of the book is now available through &lt;a href=&quot;http://www.amazon.com/SurviveJS-Webpack-React-apprentice-master/dp/152391050X/&quot;&gt;Amazon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I want to thank you, my readers, for providing an ample amount of feedback. It is one of those things that keeps me going. As a result, all of us learn in the process. I hope we can continue this fruitful collaboration for a long while.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0&quot; id=&quot;book-improvements-2-0-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.0.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 45 commits went to book since the last release candidate. A lot of the changes made were cosmetic (formatting related). You can find the important changes below.&lt;/p&gt;
&lt;p&gt;See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v2.0.0-rc4...v2.0.0&quot;&gt;all changes&lt;/a&gt;. Especially the &amp;quot;Files changed&amp;quot; tab is highly useful.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Put emphasis on the fact that there&amp;#39;s a community in case you are struggling with something. No need to struggle alone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a tip about &lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot;&gt;HyperScript&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/hyperscript-helpers&quot;&gt;hyperscript-helpers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://developit.github.io/preact/&quot;&gt;preact&lt;/a&gt; and &lt;a href=&quot;https://github.com/Lucifier129/react-lite&quot;&gt;react-lite&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped duplicate tip related to &lt;code&gt;import&lt;/code&gt;. This was covered in the previous chapter already.&lt;/li&gt;
&lt;li&gt;Explained React &lt;code&gt;state&lt;/code&gt; in far greater detail. This was treated too lightly earlier.&lt;/li&gt;
&lt;li&gt;Explained how/why component hierarchy is improved.&lt;/li&gt;
&lt;li&gt;Explained React &lt;code&gt;props&lt;/code&gt; in greater detail.&lt;/li&gt;
&lt;li&gt;Pushed input trimming logic to higher level. If you try to empty a field, it will simply cancel editing now and revert back to the original value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Made &lt;code&gt;Editable&lt;/code&gt; example diff based. It feels a bit easier to follow this way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linked better to the testing chapter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned about &lt;code&gt;[contenthash]&lt;/code&gt; placeholder. Unfortunately it doesn&amp;#39;t work as well as you might expect yet. See &lt;a href=&quot;https://github.com/webpack/webpack/issues/672&quot;&gt;Webpack issue #672&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned how to enable sourcemaps for CSS. You need to set Webpack&amp;#39;s &lt;code&gt;output.publicPath&lt;/code&gt; for this to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#structuring-react-projects&quot; id=&quot;structuring-react-projects&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Structuring React Projects&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#structuring-react-projects&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://github.com/gajus/create-index&quot;&gt;gajus/create-index&lt;/a&gt; as it can help a lot with the suggested structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You could say the past month or two have been pretty tough mentally. Dark winter and cold didn&amp;#39;t entirely help. I&amp;#39;ve been picking up my exercise habits, though, so it&amp;#39;s looking a little better now. That said, a break of day or two might be in order in the near future.&lt;/p&gt;
&lt;p&gt;I still have improvements planned. I&amp;#39;ve listed these based on priority:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve site outlook. Basically I&amp;#39;ll redo the landing page of the site and do a few UX tweaks here and there. I have a nice plan, just need to focus on this for a full day to get it done.&lt;/li&gt;
&lt;li&gt;Write &lt;strong&gt;async&lt;/strong&gt; appendix. This would show how to deal with asynchronous concerns through Alt. It&amp;#39;s a common problem and worth covering.&lt;/li&gt;
&lt;li&gt;Develop &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; based version of the Kanban.&lt;/li&gt;
&lt;li&gt;Port book content to Redux. I still have to decide whether or not to introduce Immutable.js there as well. It would be a good fit, but I haven&amp;#39;t made up my mind yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know there are more topics that would be nice to cover. Based on what I&amp;#39;ve seen and heard, focusing on Redux would be a nice next step. But if you have other ideas, please let me know.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#expanding-business&quot; id=&quot;expanding-business&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Expanding Business&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#expanding-business&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to keep the effort sustainable I&amp;#39;ve been forced to think about financials. Currently the primary problem is that I am relying on single sales. Even if you found my work valuable, I&amp;#39;m sure you wouldn&amp;#39;t want to buy the same book many times. I wouldn&amp;#39;t for sure.&lt;/p&gt;
&lt;p&gt;As a result I&amp;#39;ve been thinking about an alternative model that would support the current setup. I would love to build an &amp;quot;inner circle&amp;quot; of supporters. You would gain access to a private Slack at least and gain early access to new content. You would literally help me guide the effort. You would get all this against a monthly fee (say $20) and you could opt-out any time you want.&lt;/p&gt;
&lt;p&gt;If you want to participate in a supporter scheme like this, &lt;a href=&quot;http://eepurl.com/bQAeuH&quot;&gt;sign up to the supporter mailing list&lt;/a&gt;. Signing up doesn&amp;#39;t bind you to anything. This is more of an experiment to see if there are people interested. Provided there are enough, it will make sense to go ahead with the scheme and build a real business around this.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thank you for being a part of this project. I would have given up ages ago if it wasn&amp;#39;t for the community. I hope you enjoy this milestone release!&lt;/p&gt;
&lt;p&gt;Remember that you can find up to date code from &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt;. The stable version of the book is available at the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work. It&amp;#39;s good for me to know where you struggle so I can tweak the book.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt; or &lt;a href=&quot;https://www.createspace.com/6052981&quot;&gt;CreateSpace&lt;/a&gt; (paper version). Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v2.0.0-rc4</title><id>asurvivejswebpackandreactv200rc42016-02-07t00:00:00z</id><link href="https://survivejs.com/blog/survivejs200-rc4/"></link><updated>2016-02-07T00:00:00Z</updated><content type="html">&lt;p&gt;&lt;a href=&quot;https://survivejs.com/blog/survivejs200-rc3&quot;&gt;The previous release candidate&lt;/a&gt; prompted a nice amount of feedback. I&amp;#39;ve taken that into account in this release. I have a date for the final in sight and I won&amp;#39;t be making any significant changes for the final release.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not going to be the perfect book in any way, but it&amp;#39;s absolutely far better book than I could have pulled off on my own. Given this is my first effort, it has been a great learning experience. And it continues to be so.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I split my efforts during the past two weeks towards a couple of separate goals. My primary goal was to smooth out remaining bigger issues. &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;The book chat&lt;/a&gt; helped a lot in this regard. I also enjoy discussing with my readers through mail. It&amp;#39;s great to get multiple perspectives on the content.&lt;/p&gt;
&lt;p&gt;My secondary goals included getting some coding done and preparing for a little presentation I have promised to give. I don&amp;#39;t normally get invited to talk so I like to get the most out of these special occasions.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#work-on-react-components&quot; id=&quot;work-on-react-components&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Work on React Components&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#work-on-react-components&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since you need to be able to practice what you preach, I did a little API design experiment in form of &lt;a href=&quot;https://bebraw.github.io/react-pagify/&quot;&gt;react-pagify&lt;/a&gt;. It is a paginator component for React. I know it sounds like a trivial one, but the goal here was to end up with something flexible while providing a minimal API surface. This was achieved partially through utilizing &lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;React context&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve been considering using a similar design for &lt;a href=&quot;http://reactabular.js.org/&quot;&gt;reactabular&lt;/a&gt;, a data table component of mine. This was a good chance to experiment with the ideas in smaller scale. I think the design will fit &lt;em&gt;reactabular&lt;/em&gt; well and allow me to improve its API further without sacrificing any functionality.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#preparing-for-february-meetup&quot; id=&quot;preparing-for-february-meetup&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Preparing for February Meetup&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#preparing-for-february-meetup&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Beyond component development I put thought towards a presentation I have to give at &lt;a href=&quot;http://www.meetup.com/frontendfinland/events/228369937/&quot;&gt;February Meetup of Frontend Finland&lt;/a&gt;. Given I rather write than talk, this gave me a good excuse to write an opinion piece. I believe there&amp;#39;s room for &lt;a href=&quot;https://survivejs.com/blog/towards-common-components&quot;&gt;a common component definition&lt;/a&gt;. Something like this would allow us to make the ecosystem stronger and more vibrant.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#improving-kanban&quot; id=&quot;improving-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Improving Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#improving-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Kanban implementation has improved a notch. It won&amp;#39;t allow you to drag an input that&amp;#39;s being edited anymore. I also found &lt;a href=&quot;https://stackoverflow.com/questions/33108567/webpack-hash-the-same-for-css-and-js-files-both-change-when-only-one-should&quot;&gt;a book related question&lt;/a&gt; at Stack Overflow. The problem had to do with hashing and cache invalidation.&lt;/p&gt;
&lt;p&gt;If CSS was altered in the current, it also changed the hash of JavaScript. This is definitely something you don&amp;#39;t want to happen. It took a while to understand what&amp;#39;s going on, but then it hit me. Given we were using &lt;code&gt;require&lt;/code&gt; to bring the CSS to JavaScript, this made it end up in the same chunk. And that&amp;#39;s the core of the issue here.&lt;/p&gt;
&lt;p&gt;I realized the only good way to resolve this issue was to separate the CSS into a chunk of its own. This change has been implemented in the book now. The Kanban CSS gets loaded through an &lt;em&gt;entry chunk&lt;/em&gt; of its own. The only gotcha with this approach is that it will generate a redundant JavaScript. It&amp;#39;s annoying but something you can live with. To keep track of the problem, I &lt;a href=&quot;https://github.com/webpack/webpack/issues/1967&quot;&gt;opened an issue&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introducing-npm-install-webpack-plugin-&quot; id=&quot;introducing-npm-install-webpack-plugin-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introducing &lt;em&gt;npm-install-webpack-plugin&lt;/em&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introducing-npm-install-webpack-plugin-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of my personal annoyances with the book has been all those &lt;code&gt;npm install&lt;/code&gt; parts. Often they just break the flow as you have to jump into terminal and do some work there. Fortunately there&amp;#39;s a good solution for this problem now.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ericclemmons/npm-install-webpack-plugin&quot;&gt;npm-install-webpack-plugin&lt;/a&gt; by Eric Clemmons is able to detect when you &lt;code&gt;require&lt;/code&gt; something in your project and install the dependency in question. It&amp;#39;s not completely perfect yet as it doesn&amp;#39;t allow us to choose between &lt;code&gt;--save&lt;/code&gt; and &lt;code&gt;--save-dev&lt;/code&gt; easily based on context yet. I&amp;#39;ve discussed about this with Eric and it&amp;#39;s likely a feature that will be developed in the near future. I wrote a little proof of concept and it worked somewhat nicely.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s always fun to discover small gems like this plugin. You can still install all your dependencies by hand of course, but at least now there&amp;#39;s a good option that can save some trouble.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc4&quot; id=&quot;book-improvements-2-0-0-rc4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.0.0-rc4&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc4&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 68 commits went to &lt;code&gt;2.0.0-rc4&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v2.0.0-rc3...v2.0.0-rc4&quot;&gt;all changes&lt;/a&gt;. Especially the &amp;quot;Files changed&amp;quot; tab is highly useful.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clarified the book repository structure and mentioned the repository defaults to &lt;code&gt;dev&lt;/code&gt;. That&amp;#39;s not likely the branch you want to see so there&amp;#39;s an image showing how to find the one you are after.&lt;/li&gt;
&lt;li&gt;Linked to &lt;a href=&quot;https://github.com/survivejs/ama/issues&quot;&gt;SurviveJS AmA&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added an example of output you might get when running Webpack the first time.&lt;/li&gt;
&lt;li&gt;Moved to use object format for &lt;code&gt;entry&lt;/code&gt;. This leads to less hassle later on when dealing with styling and hashing so this felt like a good move.&lt;/li&gt;
&lt;li&gt;Dropped redundant &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; mention.&lt;/li&gt;
&lt;li&gt;Explained &lt;code&gt;0.0.0.0&lt;/code&gt; idea earlier on so you might actually find it in case you are using a virtual machine.&lt;/li&gt;
&lt;li&gt;Explained &lt;code&gt;eval&lt;/code&gt; options in greater detail. Now it&amp;#39;s clearer that options starting with &lt;code&gt;eval-&lt;/code&gt; emit sourcemaps as a part of JavaScript code. Better performance, but obviously this is a bad idea for production usage as it bloats the bundle.&lt;/li&gt;
&lt;li&gt;Integrated &lt;em&gt;npm-install-webpack-plugin&lt;/em&gt; so that plenty of those &lt;code&gt;npm install&lt;/code&gt; bits could be dropped.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Put emphasis on the fact why &lt;code&gt;include&lt;/code&gt; is used at the loader definition. I strongly recommend using it just for the sake of improved performance. This also documents how you expect Webpack to parse your project.&lt;/li&gt;
&lt;li&gt;Added a tip showing how to use brace expansion with npm. Example: &lt;code&gt;npm i babel-preset-{es2015,react} -D&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-array-includes&quot;&gt;babel-plugin-array-includes&lt;/a&gt; to SurviveJS preset. Given &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot;&gt;array.includes&lt;/a&gt; is a part of the standard now, this felt like a good chance to begin using it over &lt;code&gt;indexOf&lt;/code&gt; in certain places.&lt;/li&gt;
&lt;li&gt;Mentioned alternatives to shimming &lt;code&gt;Object.assign&lt;/code&gt; through Babel.&lt;/li&gt;
&lt;li&gt;Explained how to develop your own Babel presets.&lt;/li&gt;
&lt;li&gt;Mentioned that React developer tools won&amp;#39;t work if you are using Webpack in the iframe mode.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-react-require&quot;&gt;babel-plugin-react-require&lt;/a&gt; as an alternative to including &lt;code&gt;React&lt;/code&gt; for function based components.&lt;/li&gt;
&lt;li&gt;Improved flow around the part where HMR is set up with React. Now the content is discussed in a more approachable order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified &lt;strong&gt;Generating Ids&lt;/strong&gt; section. It&amp;#39;s the same content, but in simpler form.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/autobind-decorator&quot;&gt;autobind-decorator&lt;/a&gt;. That&amp;#39;s an interesting looking alternative at least.&lt;/li&gt;
&lt;li&gt;Explained the &lt;code&gt;ref&lt;/code&gt; idea in greater detail.&lt;/li&gt;
&lt;li&gt;Explained how &lt;code&gt;Note&lt;/code&gt; state changes are communicated in greater detail.&lt;/li&gt;
&lt;li&gt;Discussed the problem of &lt;code&gt;state&lt;/code&gt;. This is something you need to think a lot in the context of React.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained &lt;code&gt;Object.assign&lt;/code&gt;. Given it&amp;#39;s not that common yet, it felt like a good idea to explain why and how it is used here.&lt;/li&gt;
&lt;li&gt;Simplified code examples so that they are easier to copy from Markdown. That&amp;#39;s how I like to read the book by the way.&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;includes&lt;/code&gt; over &lt;code&gt;indexOf&lt;/code&gt; where it made sense.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;code&gt;constructor&lt;/code&gt; from &lt;code&gt;Lane&lt;/code&gt;. Even though binding the lane id to methods worked this way, it&amp;#39;s often an anti-pattern to map a prop this way. This is true particularly if the value of a prop can change. It binds through property initializers now.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;stopPropagation&lt;/code&gt; to &lt;code&gt;deleteNote&lt;/code&gt; to avoid issues with hovering.&lt;/li&gt;
&lt;li&gt;Mentioned that &lt;code&gt;Editable&lt;/code&gt; uses &lt;strong&gt;uncontrolled&lt;/strong&gt; design and discussed &lt;strong&gt;controlled&lt;/strong&gt; alternative.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified logic by introducing &lt;code&gt;includes&lt;/code&gt; to code.&lt;/li&gt;
&lt;li&gt;Fixed editing behavior during dragging. This means an additional check needed to add to &lt;code&gt;Note&lt;/code&gt; so that we know to enable/disable dragging based on editing state. This is a good example of the importance of state management.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified &lt;code&gt;DefinePlugin&lt;/code&gt; declaration to form &lt;code&gt;&amp;#39;process.env.NODE_ENV&amp;#39;: &amp;#39;&amp;quot;production&amp;quot;&amp;#39;&lt;/code&gt;. &lt;code&gt;JSON.stringify&lt;/code&gt; felt a little too verbose and it didn&amp;#39;t communicate the idea as well.&lt;/li&gt;
&lt;li&gt;Added a checklist of &lt;code&gt;dependencies&lt;/code&gt; you should see before starting to split your bundles.&lt;/li&gt;
&lt;li&gt;Renamed &lt;code&gt;Clean&lt;/code&gt; to &lt;code&gt;CleanPlugin&lt;/code&gt; in the sake of consistency. Other plugins have &lt;code&gt;Plugin&lt;/code&gt; suffix so this one should have one too.&lt;/li&gt;
&lt;li&gt;Dropped the mention of &lt;code&gt;autoprefixer-loader&lt;/code&gt; given it has been deprecated. Use &lt;code&gt;postcss-loader&lt;/code&gt; instead.&lt;/li&gt;
&lt;li&gt;Explained how to improve caching behavior by loading CSS through an entry chunk. This won&amp;#39;t work for each and every case, but it felt like a decent solution here as it fixes hashing. That was the main goal here after all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Moved from &lt;em&gt;phantomjs&lt;/em&gt; to &lt;em&gt;phantomjs-prebuilt&lt;/em&gt; as the package was renamed.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://jsverify.github.io/&quot;&gt;JSVerify&lt;/a&gt;, a property testing tool.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/invariant&quot;&gt;invariant&lt;/a&gt; package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-decorators&quot; id=&quot;understanding-decorators&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding Decorators&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-decorators&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained how to enable decorators in Babel 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#troubleshooting&quot; id=&quot;troubleshooting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Troubleshooting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#troubleshooting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained how to deal with &lt;em&gt;Warning: setState(...)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Explained how to deal with &lt;em&gt;Warning: React attempted to reuse markup&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Content-wise I&amp;#39;m done. I am still willing to do minor tweaks based on your feedback, but major work has to wait for the next releases. I can&amp;#39;t wait to get back to a normal release cycle.&lt;/p&gt;
&lt;p&gt;I will have to proof the content. In other words, I will have to go through it very carefully a couple of times and try to catch any remaining issues. No doubt some will remain, but that&amp;#39;s how books work. I will also have to craft a cover for the paper version and figure out what to put on the backside and spine. If nothing else, at least I&amp;#39;ll get something to put on my bookshelf out of this!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are working through the book, remember that you can find up to date code from &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt;. Remember that you can find the stable version at the &lt;code&gt;master&lt;/code&gt; branch or you can look up a specific tag.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work. It&amp;#39;s good for me to know where you struggle so I can tweak the book.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Towards a Common Component Definition</title><id>atowardsacommoncomponentdefinition2016-02-02t00:00:00z</id><link href="https://survivejs.com/blog/towards-common-components/"></link><updated>2016-02-02T00:00:00Z</updated><content type="html">&lt;p&gt;There has been talk of JavaScript fatigue. It&amp;#39;s true the field is progressing fast. And as you move fast, it can be tiring for sure. Fortunately, as we understand better what we are doing, we can actually standardize our ways of doing. That should take away some of the pain.&lt;/p&gt;
&lt;p&gt;Eventually development made in frameworks and libraries tends to flow back to the web platform itself. I believe one of the key advances will be a movement towards common component definitions.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#solving-javascript-in-html-or-html-in-javascript-&quot; id=&quot;solving-javascript-in-html-or-html-in-javascript-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Solving &lt;strong&gt;JavaScript in HTML&lt;/strong&gt; or &lt;strong&gt;HTML in JavaScript&lt;/strong&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#solving-javascript-in-html-or-html-in-javascript-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are two main ways to approach components in the web. You can either try to solve &lt;strong&gt;JavaScript in HTML&lt;/strong&gt; or &lt;strong&gt;HTML in JavaScript&lt;/strong&gt;. This doesn&amp;#39;t mean there won&amp;#39;t be any JavaScript. It&amp;#39;s more about how it&amp;#39;s being treated. In the former approach you leave structural aspects to HTML side of the fence while in the latter you push them to JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;JavaScript in HTML&lt;/em&gt; relies on templating. There&amp;#39;s standardization for the approach in form of &lt;a href=&quot;http://webcomponents.org/&quot;&gt;Web Components&lt;/a&gt; (example: &lt;code&gt;&amp;lt;x-gif src=&amp;quot;probably_cats.gif&amp;quot;&amp;gt;&amp;lt;/x-gif&amp;gt;&lt;/code&gt;). Frameworks, such as &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt; or &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember&lt;/a&gt;, implement a templating solution of their own. Both have made moves that will allow you to consume Web Components from both frameworks, though.&lt;/p&gt;
&lt;p&gt;Libraries like &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/anthonyshort/deku&quot;&gt;Deku&lt;/a&gt;, and &lt;a href=&quot;http://cycle.js.org/&quot;&gt;Cycle&lt;/a&gt;, fall to the &lt;em&gt;HTML in JavaScript&lt;/em&gt; category. Here we can use a format, such as &lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot;&gt;hyperscript&lt;/a&gt; (plain JavaScript) or &lt;a href=&quot;https://facebook.github.io/jsx/&quot;&gt;JSX&lt;/a&gt; (XMLish syntax compiled to JavaScript). In this approach you will perform possible templating operations (for example if, looping) using JavaScript itself.&lt;/p&gt;
&lt;p&gt;It is possible to &lt;a href=&quot;https://facebook.github.io/react/docs/webcomponents.html&quot;&gt;use the approaches together in React&lt;/a&gt;. At the moment the match isn&amp;#39;t ideal as the programming models differ and that causes friction. React documentation suggests that you wrap your Web Components within React components of their own. That is the same approach you would use with a library such as jQuery. In short, you can use Web Components with a library like React, but it might not be very fun yet.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-challenge-for-component-authors&quot; id=&quot;the-challenge-for-component-authors&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Challenge for Component Authors&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-challenge-for-component-authors&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the past few years it has become apparent component oriented approach fits the web and web applications well. We&amp;#39;re still paying a price from the fact that the web is a content oriented platform by design. That said, developing full blown web applications is far easier these days than it was ten years ago. There are still plenty of issues to resolve, though.&lt;/p&gt;
&lt;p&gt;Even though &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; makes it almost ridiculously easy to share your components, we aren&amp;#39;t quite there yet. It might be easy to consume JavaScript through it, but aspects like styling are still partially unresolved. As a result we have CSS conventions, processors, and a lot of many other solutions like &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is quite telling that &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, a popular HTML, CSS, and JavaScript framework, has its own implementations for &lt;a href=&quot;https://angular-ui.github.io/bootstrap/&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://kaliber5.github.io/ember-bootstrap/&quot;&gt;Ember&lt;/a&gt;, and &lt;a href=&quot;https://react-bootstrap.github.io/&quot;&gt;React&lt;/a&gt;. Even though I appreciate the efforts of the people behind the projects, surely we must be able to resolve these kind of things better. Perhaps that&amp;#39;s something Web Components could provide us?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#sharing-components-at-the-html-in-javascript-domain&quot; id=&quot;sharing-components-at-the-html-in-javascript-domain&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Sharing Components at the &lt;strong&gt;HTML in JavaScript&lt;/strong&gt; Domain&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#sharing-components-at-the-html-in-javascript-domain&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although Web Components might be the longer term solution, there could be something that could be achieved for &lt;strong&gt;HTML in JavaScript&lt;/strong&gt; type libraries like React, Deku, or Cycle. After all, even a small win is a win. And anything we can do to battle unnecessary fragmentation is good in my eyes.&lt;/p&gt;
&lt;p&gt;Currently any component I develop for React is useful only within React context. I find this a little problematic as I would love to share my work with a larger amount of people. I am sure this applies to other component authors too, and this would benefit the JavaScript community on the whole.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html&quot;&gt;React 0.14&lt;/a&gt; introduced a feature known as stateless functional components. To give you an example, consider the one from their release notes (slightly modified for readability):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// A functional component using an ES2015 (ES6) arrow function:&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;Aquarium&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; fish &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;getFish&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;species&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;Tank&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;fish&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;Tank&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Or with destructuring and an implicit return, simply:&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot; &gt;Aquarium&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;species&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;Tank&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getFish&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;species&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot; &gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;/&lt;/span&gt;Tank&lt;span class=&quot;token operator&quot; &gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Then use: &amp;lt;Aquarium species=&quot;rainbowfish&quot; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the definition looks simple, that&amp;#39;s because it is. A function based component like this cannot do much, but they are still highly useful! The best feature is that the syntax can be seen as something React agnostic! You could compile that JSX to Hyperscript and use that as an intermediate format to mediate between libraries.&lt;/p&gt;
&lt;p&gt;Components like this don&amp;#39;t require a direct dependency on React thanks to &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-react-require&quot;&gt;babel-plugin-react-require&lt;/a&gt;. The plugin injects &lt;code&gt;import React from &amp;#39;react&amp;#39;;&lt;/code&gt; so that the JSX transpilation process works. It would be possible to pull this off with other libraries as well.&lt;/p&gt;
&lt;p&gt;There are proposals that would allow you to write &lt;a href=&quot;https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State&quot;&gt;stateful functions&lt;/a&gt;. Deku implements something like &lt;a href=&quot;https://github.com/anthonyshort/deku/blob/master/docs/advanced/context.md&quot;&gt;React context&lt;/a&gt; (read-only within the tree). Adopting ideas like these would give more room for potential sharing.&lt;/p&gt;
&lt;p&gt;Even though you cannot do absolutely everything with function based components, they allow you to achieve quite much! I believe adopting the core ideas would allow larger scale sharing of components between libraries. Currently solutions like Deku or Cycle feel like islands of their own compared to the continent of React. Building bridges wouldn&amp;#39;t hurt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There have been interesting developments in the React world itself. Libraries, such as &lt;a href=&quot;https://github.com/Lucifier129/react-lite&quot;&gt;react-lite&lt;/a&gt; and &lt;a href=&quot;https://developit.github.io/preact/&quot;&gt;Preact&lt;/a&gt;, provide much lighter ways to achieve the same results as using vanilla React might.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think we&amp;#39;ll begin to see adoption of Web Components this year especially as frameworks like Angular and Ember allow you to consume them. The biggest benefit of following the standards is that you shield yourself from some of the churn. And of course you avoid vendor lock-in!&lt;/p&gt;
&lt;p&gt;I hope we see a similar movement within the React world. That would benefit the community as a whole and give more freedom for component authors. Even though having more standard ways of defining basic components would benefit libraries other than React initially, I believe this development could flow back to the React ecosystem as well.&lt;/p&gt;
</content></entry><entry><title>Unexpected - The Extensible BDD Assertion Toolkit - Interview with Sune Simonsen</title><id>aunexpectedtheextensiblebddassertiontoolkitinterviewwithsunesimonsen2016-01-30t00:00:00z</id><link href="https://survivejs.com/blog/unexpected-interview/"></link><updated>2016-01-30T00:00:00Z</updated><content type="html">&lt;p&gt;When it comes to testing, often you assert certain truths.  At the very least you might have simple &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;asserts&lt;/a&gt; sprinkled in your code. Or you might push them to separate suites which you then execute using a test runner.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://unexpected.js.org/&quot;&gt;Unexpected&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/sunesimonsen&quot;&gt;Sune Simonsen&lt;/a&gt; takes this simple idea into a little different direction. Read on to learn more.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;http://we-knowhow.dk/interview/sune-simonsen.png&quot; alt=&quot;Sune Simonsen&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
&lt;/span&gt;

I don&amp;#39;t consider my personal life that exciting - or at least it is pretty far from your regular JavaScript hacker trying to start the next unicorn business from a dorm room. I am a family man with two small girls and a wife. We live a pretty regular and happy life in Copenhagen.
&lt;/p&gt;

&lt;p&gt;I started my career as an enterprise Java consultant, after doing that for five years I saw the industry starting to take a turn towards the front-end being the orchestrating part in most applications. So I decided to change my career and focused on the front-end - that was one of the best decisions I have ever made.&lt;/p&gt;
&lt;p&gt;Soon after this change, I started working at One.com. A great thing about working there was that it had a small team consisting of very talented people in charge of building most of their web applications. It was quite a large scale, and we had a lot of technical freedom, so I learned a lot from working there.&lt;/p&gt;
&lt;p&gt;Little more than a year ago I switched jobs to Zendesk where I&amp;#39;m currently building React applications backed by GraphQL. So far my journey with Zendesk has been incredible, it is a great company with so many fantastic people. Zendesk is moving fast, so it is also a lot of fun to be a passenger on this bullet train.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-unexpected-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-unexpected-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;Unexpected&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-unexpected-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Unexpected&lt;/em&gt; is an assertion library like &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; or &lt;a href=&quot;https://github.com/Automattic/expect.js&quot;&gt;expect.js&lt;/a&gt;. It can be used with any test runner that catches exceptions, but I would recommend &lt;a href=&quot;http://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;, &lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt; or &lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; as Unexpected is integration tested with these runners on every release.&lt;/p&gt;
&lt;p&gt;Below you can see an example of a test written with &lt;em&gt;Mocha&lt;/em&gt; and &lt;em&gt;Unexpected&lt;/em&gt; where we assert that the &lt;code&gt;indexOf&lt;/code&gt; method on arrays returns &lt;code&gt;-1&lt;/code&gt;, when it can&amp;#39;t find the given element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; expect &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;unexpected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;Array&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;indexOf&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;should return -1 when the given item is not present&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;to equal&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-unexpected-&quot; id=&quot;why-did-you-develop-unexpected-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;Unexpected&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-unexpected-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I came to One.com, there were no tests for the front-end, so I started introducing a test setup. We were using &lt;a href=&quot;https://github.com/Automattic/expect.js&quot;&gt;expect.js&lt;/a&gt; as our assertion library and were happy with it. One of my colleagues started using &lt;em&gt;expect.js&lt;/em&gt; for some randomized tests, and it happened to be very slow.&lt;/p&gt;
&lt;p&gt;I investigated the performance issue and found that every &lt;code&gt;expect&lt;/code&gt; would create 84 &lt;code&gt;Assertion&lt;/code&gt; instances. In an attempt to impress my colleague, I hacked together the first version of &lt;em&gt;Unexpected&lt;/em&gt; that was just a function backed by a hash table of assertions.&lt;/p&gt;
&lt;p&gt;That version was as capable as &lt;em&gt;expect.js&lt;/em&gt;, but a lot faster. The idea that made this possible was to use strings as assertions, instead of the method chains that &lt;em&gt;expect.js&lt;/em&gt; uses. The following code snippet contrast the syntax of &lt;em&gt;expect.js&lt;/em&gt; with &lt;em&gt;Unexpected&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// expect.js&lt;/span&gt;
&lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;be&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;within&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Unexpected&lt;/span&gt;
&lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;to be within&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My team embraced the project and started using it for all JavaScript testing. That meant the library was improved based on real use cases as they appeared. Unexpected owes a lot to my former colleague at One.com, especially &lt;a href=&quot;https://github.com/papandreou&quot;&gt;Andreas Lind&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-unexpected-work-&quot; id=&quot;how-does-unexpected-work-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Unexpected&lt;/em&gt; work?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-unexpected-work-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After almost four years of development &lt;em&gt;Unexpected&lt;/em&gt;&amp;#39;s implementation looks very different from the initial solution, we introduced custom assertions, a plugin API, an extremely flexible dynamic type system that allow you to namespace assertions by type, asynchronous assertions, colored output and error diffing in a way you have never seen before.&lt;/p&gt;
&lt;p&gt;We still have an assertion lookup table, but as you can reuse the same assertion for several types, the lookup table maps to a list of assertions ordered by precedence. We look up the assertion string, find the first assertion that has a matching type signature and execute it. Below you can see an example of the same assertion string on two different types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Expect that a string contains two sub-strings&lt;/span&gt;
&lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;Hello beautiful world!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;to contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;world&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Expect that an array contains two items&lt;/span&gt;
&lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;to contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you run the above code snippet, two different assertions will be called as the types differ.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#built-with-extensibility-in-mind&quot; id=&quot;built-with-extensibility-in-mind&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Built with Extensibility in Mind&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#built-with-extensibility-in-mind&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Unexpected&lt;/em&gt; is build with extensibility in mind from the ground up. All of the built-in assertions and types are installed as plugins. All assertions are defined by delegating to others except for one. I find this to be a very elegant solution.&lt;/p&gt;
&lt;p&gt;As an example, the assertion &lt;code&gt;to be true&lt;/code&gt; is defined the following way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;expect&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;addAssertion&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;&amp;lt;boolean&amp;gt; [not] to be true&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;expect&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; subject&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;subject&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;[not] to be&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#output-through-magicpen&quot; id=&quot;output-through-magicpen&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Output Through MagicPen&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#output-through-magicpen&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another implementation detail that might be interesting is that all output generated by &lt;em&gt;Unexpected&lt;/em&gt; is created with a library that I wrote called &lt;a href=&quot;https://github.com/sunesimonsen/magicpen&quot;&gt;MagicPen&lt;/a&gt;. The cool thing about &lt;em&gt;MagicPen&lt;/em&gt; is that you append to a buffer, which has a very flexible API. It allows us to create very complex output quickly.&lt;/p&gt;
&lt;p&gt;Because we append the output to a buffer in a high-level format, we can serialize the output to both plain text, ANSI colored text, and HTML.&lt;/p&gt;
&lt;p&gt;Below you can see some output from an &lt;em&gt;Unexpected&lt;/em&gt; error message generated by &lt;em&gt;MagicPen&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/5415b1295875b657a22d6a1c2e78d247.png&quot; alt=&quot;MagicPen output&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;MagicPen output&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A lot of the output we generated with &lt;em&gt;Unexpected&lt;/em&gt; would just be too hard without &lt;em&gt;MagicPen&lt;/em&gt; in my opinion.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-does-unexpected-differ-from-other-solutions-&quot; id=&quot;how-does-unexpected-differ-from-other-solutions-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How does &lt;em&gt;Unexpected&lt;/em&gt; differ from other solutions?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-does-unexpected-differ-from-other-solutions-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Unexpected&lt;/em&gt; differ from other assertion libraries in a very obvious way by using a different syntax than all other assertion libraries I have seen. Using assertion strings was a coincidence that turned out to be fantastic.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#strings-instead-of-method-chaining&quot; id=&quot;strings-instead-of-method-chaining&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Strings Instead of Method Chaining&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#strings-instead-of-method-chaining&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A lot of people get turned off by the different approach, but I think that it mainly comes down to familiarity. There are a lot of advantages of using strings instead of method chaining. We can display a helpful error message when you mistype something:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/d61f773548c67e4883eee30b52a6b7ef.png&quot; alt=&quot;Unknown assertion&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Unknown assertion&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can use assertion strings when adding new assertions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;expect&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;addAssertion&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;&amp;lt;array&amp;gt; [not] to be sorted&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;expect&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; subject&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;subject&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;[not] to equal&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;subject&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we know your assertion we can generate a nice default error message for an assertion like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;to be sorted&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;#39;s the resulting message:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/61a9498e8702e2264894d097ebeb737f.png&quot; alt=&quot;Default error message&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Default error message&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#faster-assertions-and-colored-output&quot; id=&quot;faster-assertions-and-colored-output&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Faster Assertions and Colored Output&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#faster-assertions-and-colored-output&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Unexpected&lt;/em&gt; allows faster assertion lookup than a chained API due to its approach. Another thing that sets us apart from the rest of the assertions libraries is that we offer very specific colored output. Below you can see the output when comparing two buffers:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/7f67c660499c8312c5cabead3b18157f.png&quot; alt=&quot;Buffer comparison&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Buffer comparison&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#plugin-api&quot; id=&quot;plugin-api&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Plugin API&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#plugin-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We offer a much more powerful plugin API than other assertion libraries, that enables plugin authors to create support for new types and tools that we never planned.&lt;/p&gt;
&lt;p&gt;An example of that is the excellent &lt;a href=&quot;http://bruderstein.github.io/unexpected-react/&quot;&gt;unexpected-react&lt;/a&gt; plugin from &lt;a href=&quot;https://twitter.com/bruderstein&quot;&gt;Dave Brotherstone&lt;/a&gt; that enables you to test React components in a declarative way and gives you very detailed errors when things fail.&lt;/p&gt;
&lt;p&gt;Below you can see an error message from &lt;code&gt;unexpected-react&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/aa456fda8979098e37b43cda37a5247b.png&quot; alt=&quot;Unexpected with React&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Unexpected with React&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#asynchronous-assertions&quot; id=&quot;asynchronous-assertions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Asynchronous Assertions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#asynchronous-assertions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally &lt;em&gt;Unexpected&lt;/em&gt; has first class support for asynchronous assertions. You can even combine multiple asynchronous assertions.&lt;/p&gt;
&lt;p&gt;Below is an example showing a test that combines multiple asynchronous assertions. The test asserts that a Node.js readable stream outputs an image that&amp;#39;s at most 10% different from a reference image and have the format &lt;code&gt;png&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;fs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-const&quot; &gt;const&lt;/span&gt; expect &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;unexpected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;unexpected-stream&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;unexpected-image&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;unexpected-resemble&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;should spew out the expected image&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;
    fs&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;foo.png&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot; &gt;&apos;to yield output satisfying&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    expect&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;to resemble&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;bar.png&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      mismatchPercentage&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; expect&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;to be less than&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;to have metadata satisfying&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
      format&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;PNG&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cool thing is that you can choose how advanced you want to go, &lt;em&gt;Unexpected&lt;/em&gt; won&amp;#39;t stop you.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That is a splendid question. I feel like we have most of the features I would like by now, in my opinion, the energy should be put into improving the plugins. A lot of the contributors are meeting in Copenhagen in February to discuss how we continue to progress the library - so it going to be interesting what comes out of that.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-unexpected-and-web-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-unexpected-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for &lt;em&gt;Unexpected&lt;/em&gt; and web development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-unexpected-and-web-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#39;t consider &lt;em&gt;Unexpected&lt;/em&gt; to be especially aimed at web development but see it more as a general purpose assertion library that can be used to test any JavaScript code base.&lt;/p&gt;
&lt;p&gt;Where I see &lt;em&gt;Unexpected&lt;/em&gt; shine, is that it can be adapted to any code base by creating new plugins. You see a lot of assertion libraries tailored to testing JSX components, but then you need a new library when the trend changes.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#optional-typing-is-getting-traction&quot; id=&quot;optional-typing-is-getting-traction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Optional Typing is Getting Traction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#optional-typing-is-getting-traction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I currently following the optional typing trend like &lt;a href=&quot;https://flowtype.org/&quot;&gt;Flow&lt;/a&gt; and &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; with a bit of skepticism - but it seems to be getting a lot of traction. I think this movement will be a stepping stone towards stricter languages like &lt;a href=&quot;https://facebook.github.io/reason/&quot;&gt;Reason&lt;/a&gt;, &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; or even &lt;a href=&quot;http://www.purescript.org/&quot;&gt;PureScript&lt;/a&gt; as people realize the trade-offs these halfway safe type systems provides.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#still-work-to-do&quot; id=&quot;still-work-to-do&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Still Work to Do&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#still-work-to-do&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have a strong feeling that we haven&amp;#39;t arrived at the perfect development tool-chain yet - React and friends have solved a lot of problems that was a huge struggle in the past. But this new world where people remix their platform with crazy metaprogramming achieved trough transpiling has to stop at some point.&lt;/p&gt;
&lt;p&gt;My guess is that we will see something like &lt;a href=&quot;https://facebook.github.io/reason/&quot;&gt;Reason&lt;/a&gt; being able to eliminate dead code in a much better way than any dynamic language and therefore provide much better download sizes. That might be the tipping point that will make the masses switch.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot; id=&quot;what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What advice would you give to programmers getting into web development?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-advice-would-you-give-to-programmers-getting-into-web-development-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use your brain to evaluate new things you bring into your stack, don&amp;#39;t just follow the hype blindly. You don&amp;#39;t have to switch your approach to how you handle CSS every week just because your Twitter stream indicate that is the way it should be done.&lt;/p&gt;
&lt;p&gt;When you create a side-project, decide upfront if you want to learn something new or want the project to succeed - you can&amp;#39;t have both.&lt;/p&gt;
&lt;p&gt;Use a queue instead of a stack in your brain to handle incoming side-projects - that is how you get something done. This advice was stolen from &lt;a href=&quot;https://github.com/papandreou&quot;&gt;Andreas Lind&lt;/a&gt;, but it is the best advice I ever received.&lt;/p&gt;
&lt;p&gt;When you run into problems with a library, make it a habit of contributing. You will realize that you can get fixes approved for most projects.&lt;/p&gt;
&lt;p&gt;Surround yourself with people that are better than yourself. If you think you better then your co-workers, it is time to leave.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/papandreou&quot;&gt;Andreas Lind&lt;/a&gt; or &lt;a href=&quot;https://github.com/mafintosh&quot;&gt;Mathias Buus&lt;/a&gt; they are both wizard level Danish JavaScript hackers.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot; id=&quot;any-last-remarks-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Any last remarks?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#any-last-remarks-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Stay happy; it is only bits.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Sune! I think it&amp;#39;s particularly impressive that you ended up with a nice, fluent plugin API. I&amp;#39;m a great fan of plugin based systems myself and even though they require some upfront investment and design, they are often worth it if you value flexibility. Particularly the quality of output seems to set Unexpected apart.&lt;/p&gt;
&lt;p&gt;To learn more, check out the &lt;a href=&quot;http://unexpected.js.org/&quot;&gt;site of Unexpected&lt;/a&gt;. You can also find &lt;a href=&quot;https://github.com/unexpectedjs/unexpected&quot;&gt;Unexpected&lt;/a&gt; and &lt;a href=&quot;https://github.com/sunesimonsen/magicpen&quot;&gt;MagicPen&lt;/a&gt; on GitHub.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v2.0.0-rc3</title><id>asurvivejswebpackandreactv200rc32016-01-22t00:00:00z</id><link href="https://survivejs.com/blog/survivejs200-rc3/"></link><updated>2016-01-22T00:00:00Z</updated><content type="html">&lt;p&gt;If the previous &lt;a href=&quot;https://survivejs.com/blog/survivejs200-rc2&quot;&gt;release candidate&lt;/a&gt; had few changes, this one is the opposite. I consider this good news as it&amp;#39;s better to catch bigger issues now rather than later. Thanks for feedback!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I managed to improve &lt;a href=&quot;https://github.com/survivejs/redux-demo&quot;&gt;the Redux version of Kanban&lt;/a&gt;. Most importantly I integrated &lt;a href=&quot;https://www.npmjs.com/package/redux-devtools&quot;&gt;redux-devtools&lt;/a&gt; to it. The implementation could probably use a few more tweaks, but that&amp;#39;s not the priority right now.&lt;/p&gt;
&lt;p&gt;Thanks to reader feedback, the Kanban implementation has improved in various places. The UX is a little better now and the logic is clearer in certain parts. These are small touches that are worth doing. I still need to update certain screenshots at the book to match the current status, but the technical parts are there.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;/a&gt; reached a new major version. Unfortunately this broke compatibility with &lt;a href=&quot;https://www.npmjs.com/package/html-webpack-template&quot;&gt;html-webpack-template&lt;/a&gt; temporarily. There&amp;#39;s a compatible version of the latter available as a tagged version. The problem has been resolved in the current version.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s starting to look good. I will be very happy to get this puppy out of the door. Who said writing books is easy? :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc3&quot; id=&quot;book-improvements-2-0-0-rc3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.0.0-rc3&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc3&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 58 commits went to &lt;code&gt;2.0.0-rc3&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;On general level I tidied up arrow syntax. I.e. instead of &lt;code&gt;(name) =&amp;gt; ...&lt;/code&gt; you might see &lt;code&gt;name =&amp;gt; ...&lt;/code&gt;. The latter form is less noisy so that&amp;#39;s used where it makes sense. Feel free to use either one you prefer, though.&lt;/p&gt;
&lt;p&gt;See GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v2.0.0-rc2...v2.0.0-rc3&quot;&gt;all changes&lt;/a&gt;. Especially the &amp;quot;Files changed&amp;quot; tab is highly useful.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To make it easier to use the book, I wrote a section on how to approach it. There&amp;#39;s no one right way and it all depends on what you know already and how you prefer to learn. You could, for instance, jump straight to the React bits and read Webpack ones after that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Suggested the usage of &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; in addition to the official &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;Node.js packages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Defined a starter &lt;em&gt;index.html&lt;/em&gt; by hand. Now &lt;em&gt;html-webpack-plugin&lt;/em&gt; gets discussed later in the book. It felt like introducing it so early could be distracting. It&amp;#39;s better to start with something people are familiar with and move from there.&lt;/li&gt;
&lt;li&gt;Improved flow overall. Now it should be a little easier to follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped the mention that &lt;em&gt;stage 2&lt;/em&gt; features are included in Babel. That&amp;#39;s not true anymore given the book uses Babel 6.&lt;/li&gt;
&lt;li&gt;Corrected naming. &lt;em&gt;Class properties&lt;/em&gt; -&amp;gt; &lt;em&gt;property initializers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Included &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-transform-object-assign&quot;&gt;babel-plugin-transform-object-assign&lt;/a&gt; to the project preset. This allows us to use the standard &lt;code&gt;Object.assign&lt;/code&gt; while keeping it legacy compatible. One less direct dependency to worry about!&lt;/li&gt;
&lt;li&gt;Simplified &amp;quot;Rendering Through &lt;code&gt;index.jsx&lt;/code&gt;&amp;quot; greatly. This was possible thanks to the fact that &lt;em&gt;html-webpack-plugin&lt;/em&gt; is discussed later.&lt;/li&gt;
&lt;li&gt;Dropped the mention of &lt;a href=&quot;https://github.com/gaearon/react-transform-catch-errors&quot;&gt;react-transform-catch-errors&lt;/a&gt;. No need for that anymore given there&amp;#39;s a Babel preset now that deals with the details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Changed editing logic to use &lt;code&gt;defaultValue&lt;/code&gt; instead of &lt;code&gt;placeholder&lt;/code&gt; while setting the input caret to the end. This achieved by using a &lt;code&gt;ref&lt;/code&gt; with a callback. It&amp;#39;s a small trick that&amp;#39;s worth knowing and covering as it gives you more control just for cases like this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;em&gt;object-assign&lt;/em&gt; dependency. This isn&amp;#39;t needed anymore given we go through Babel now. We can use just &lt;code&gt;Object.assign&lt;/code&gt; directly and it will work.&lt;/li&gt;
&lt;li&gt;Cleaned up the implementation of &lt;em&gt;storage.js&lt;/em&gt;. Now it&amp;#39;s all ES6.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Renamed &lt;code&gt;NoteStore.get&lt;/code&gt; and &lt;code&gt;NoteStore.getNotesByIds&lt;/code&gt; to make it unambiguous.&lt;/li&gt;
&lt;li&gt;Annotated &lt;code&gt;NoteStorage.getNotesByIds&lt;/code&gt; in detail. There&amp;#39;s quite a bit going on so this felt like a good idea.&lt;/li&gt;
&lt;li&gt;Improved UX of lanes. Now there are separate controls for editing and removing lanes. You can begin to edit a lane name by clicking anywhere on the lane header. The only exception to that rule is adding a note to it. In that case we trigger &lt;code&gt;stopPropagation&lt;/code&gt; to override the default bubbling behavior.&lt;/li&gt;
&lt;li&gt;Converted &lt;code&gt;console.log&lt;/code&gt; to use backtick syntax where it felt like a good idea. A little easier to read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Converted &lt;code&gt;console.log&lt;/code&gt; to use backtick syntax where it felt like a good idea.&lt;/li&gt;
&lt;li&gt;Removed &lt;code&gt;removeNote&lt;/code&gt; and wrote the logic inline into &lt;code&gt;attachToLane&lt;/code&gt;. Simpler and easier to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Moved &lt;em&gt;html-webpack-plugin&lt;/em&gt; bits here. Now there&amp;#39;s a single section where I discuss the approach. Far neater!&lt;/li&gt;
&lt;li&gt;Made sure &lt;em&gt;webpack-clean-plugin&lt;/em&gt; isn&amp;#39;t in verbose mode. This breaks Webpack stats so it&amp;#39;s better to do it this way for now. The problem is that the plugin &lt;a href=&quot;https://github.com/johnagan/clean-webpack-plugin/issues/11&quot;&gt;uses Webpack API wrong&lt;/a&gt; and goes through &lt;code&gt;console&lt;/code&gt; instead of the logging API that Webpack provides. I&amp;#39;ll try to get the plugin fixed in the near future.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot; id=&quot;typing-with-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped redundant &lt;code&gt;onDelete&lt;/code&gt; &lt;code&gt;propType&lt;/code&gt; from &lt;code&gt;Note&lt;/code&gt;. This isn&amp;#39;t needed at all as it&amp;#39;s enough to assert it on &lt;code&gt;Editable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Recommended the usage of &lt;code&gt;&amp;quot;extends&amp;quot;: &amp;quot;eslint:recommended&amp;quot;,&lt;/code&gt; at &lt;em&gt;.eslintrc&lt;/em&gt;. It&amp;#39;s a good starting point.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Changed &lt;em&gt;package.json&lt;/em&gt; example to use namespacing and added some newlines. Cleaner to read and use.&lt;/li&gt;
&lt;li&gt;Explained various ways to bump a version in greater detail.&lt;/li&gt;
&lt;li&gt;Clarified why to preprocess your distribution files instead of including them to your version control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#language-features&quot; id=&quot;language-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Language Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#language-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Showed how to return an object easily when using the arrow notation for functions.&lt;/li&gt;
&lt;li&gt;Expanded on string interpolation.&lt;/li&gt;
&lt;li&gt;Added a section on object shorthands.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As usual, I will work based on your feedback. I have a couple of discussion points in mind I want to expand upon. And I need to get those screenshots done. The nice thing is that there aren&amp;#39;t that many content related tasks yet! So in short, it&amp;#39;s starting to look good.&lt;/p&gt;
&lt;p&gt;After I have done the tweaks I have in mind, I&amp;#39;ll move to the next step with my publication process to get the first paper version done. Interesting times.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are working through the book, remember that you can find up to date code from &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt;. I maintain the stable version at the &lt;code&gt;master&lt;/code&gt; branch. For technical reasons the repository shows you the development version, though. This is just to make it easier to contribute to the book.&lt;/p&gt;
&lt;p&gt;Remember that you can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work. It&amp;#39;s good for me to know where you struggle so I can tweak the book.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v2.0.0-rc2</title><id>asurvivejswebpackandreactv200rc22016-01-10t00:00:00z</id><link href="https://survivejs.com/blog/survivejs200-rc2/"></link><updated>2016-01-10T00:00:00Z</updated><content type="html">&lt;p&gt;Not a lot has happened since the previous &lt;a href=&quot;https://survivejs.com/blog/survivejs200-rc1&quot;&gt;release candidate&lt;/a&gt;. The biggest change has to do with a little bug that the recent release of Babel 6.4 revealed. All property initializer based declarations were missing a semicolon as Babel treated them in a too lax way before. This has been fixed in this release candidate.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#39;re on a good track as far as I can see. It&amp;#39;s not the perfect book, but no book is. In any case, the development will continue even after the release. To prepare for the future, I made sure &lt;a href=&quot;https://github.com/survivejs/redux-demo&quot;&gt;the Redux version of Kanban&lt;/a&gt; is up to date.&lt;/p&gt;
&lt;p&gt;The next bigger effort is porting the chapters to it. The implementation will most likely live still as I&amp;#39;ll want to given &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; a go. I feel discussing these two topics could be valuable to a lot of readers.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#experimenting-with-webpack&quot; id=&quot;experimenting-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Experimenting with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#experimenting-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I experimented with a higher level format for configuring Webpack. You can see my work in the form of &lt;a href=&quot;https://www.npmjs.com/package/webpack-presets&quot;&gt;webpack-presets&lt;/a&gt;. There&amp;#39;s a little parser that converts the JSON format into the one we all are more or less familiar with.&lt;/p&gt;
&lt;p&gt;I am not the only one who is looking into this problem. Jason Quense developed a prototype known as &lt;a href=&quot;https://github.com/jquense/webpack-config-utils&quot;&gt;webpack-config-utils&lt;/a&gt;. The idea is to provide a DSL that hides some problems of the current format. Most importantly it&amp;#39;s able to give us good errors.&lt;/p&gt;
&lt;p&gt;A user known as @scriptjs has led an effort to push Webpack into a Babel style monorepo. There was an early specification that has since been removed. The approach is quite close to &lt;em&gt;.webpackrc&lt;/em&gt; and we&amp;#39;ve been collaborating on it.&lt;/p&gt;
&lt;p&gt;Tobias Koppers, the author of Webpack, has prepared a specification known as &lt;a href=&quot;https://github.com/webpack/concord&quot;&gt;Concord&lt;/a&gt;. It&amp;#39;s yet another way to solve these issues. Especially the mimetype, loader mapping is highly interesting.&lt;/p&gt;
&lt;p&gt;I hope something good comes out of these experiments and we can resolve some of the pain points of the tool. Even though it&amp;#39;s quite nice already, there is always room for improvement.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc2&quot; id=&quot;book-improvements-2-0-0-rc2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.0.0-rc2&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 17 commits went to &lt;code&gt;2.0.0-rc2&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v2.0.0-rc1...v2.0.0-rc2&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Showed how to polyfill &lt;code&gt;Promise&lt;/code&gt; through &lt;code&gt;require(&amp;#39;es6-promise&amp;#39;).polyfill()&lt;/code&gt;. This is good to know if you have to run on a legacy platform.&lt;/li&gt;
&lt;li&gt;Added a brief description of HMR just to get the basic point through.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;code&gt;netstat -na | grep 8080&lt;/code&gt; as that&amp;#39;s useful for checking whether or not the port is available.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Set up a &lt;a href=&quot;https://github.com/survivejs/babel-preset-survivejs-kanban&quot;&gt;custom Babel preset&lt;/a&gt; to make the project a little lighter.&lt;/li&gt;
&lt;li&gt;Explained Webpack loader declarations. This is something good to be aware of so it felt like a good place to go through it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned that &lt;code&gt;this.setState&lt;/code&gt; is required for committing data to &lt;code&gt;state&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added missing semicolons to property initializers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added missing semicolons to property initializers.&lt;/li&gt;
&lt;li&gt;Cleaned up &lt;code&gt;update&lt;/code&gt; method slightly. Returning early is a good practice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed &lt;code&gt;Editable&lt;/code&gt; import paths. They were missing &lt;code&gt;..&lt;/code&gt;&amp;#39;s.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#language-features&quot; id=&quot;language-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Language Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#language-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added missing semicolons to property initializers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will tweak the book based on your feedback as usual and start certain preparations. I expect the final version will be out in a week or two. After that we are back to usual cadence. I hope to maintain a monthly release cycle at least. Currently a lot of decisions are made based on the situation.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are working through the book, remember that you can find up to date code from &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt;. This time there weren&amp;#39;t a lot of changes fortunately.&lt;/p&gt;
&lt;p&gt;Remember that you can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work. It&amp;#39;s good for me to know where you struggle so I can tweak the book.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v2.0.0-rc1</title><id>asurvivejswebpackandreactv200rc12016-01-06t00:00:00z</id><link href="https://survivejs.com/blog/survivejs200-rc1/"></link><updated>2016-01-06T00:00:00Z</updated><content type="html">&lt;p&gt;Since the &lt;a href=&quot;https://survivejs.com/blog/survivejs200-beta2&quot;&gt;beta&lt;/a&gt; was launched, I&amp;#39;ve been working on remaining improvements. This has mostly meant tuning the existing content, although there are some new bits as well.&lt;/p&gt;
&lt;p&gt;Obviously the released book won&amp;#39;t be complete in sense that it contains everything you need to know about React and surrounded technologies. But I believe it amounts to something. Given the nature of the effort, the coverage will slowly but surely improve over time.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-compared-to-pete-hunt-s-learning-recommendation&quot; id=&quot;book-compared-to-pete-hunt-s-learning-recommendation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Compared to Pete Hunt&amp;#39;s Learning Recommendation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-compared-to-pete-hunt-s-learning-recommendation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Compared to &lt;a href=&quot;https://github.com/petehunt/react-howto&quot;&gt;Pete Hunt&amp;#39;s official learning recommendation&lt;/a&gt; we&amp;#39;re doing quite well. The book covers most of the issues he mentions. Mainly the book is missing information on routing, &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt;, &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt;, &lt;a href=&quot;https://netflix.github.io/falcor/&quot;&gt;Falcor&lt;/a&gt;, and such topics. I&amp;#39;m not worried, though. These topics can be discussed in detail at a later time. And there&amp;#39;s plenty of other material available already.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve improved the book based on your feedback. I also ate my own dogfood and went through it myself. This revealed some issues (mainly code formatting) and helped me to simplify certain portions further.&lt;/p&gt;
&lt;p&gt;I also wrote a little appendix that should inspire you to think about how to structure your application. There&amp;#39;s no one true way. Rather, as with all things React, there&amp;#39;s a lot of flexibility available.&lt;/p&gt;
&lt;p&gt;Feedback is still welcome of course. I&amp;#39;ll spend more time with the content and start pushing certain other bits to get a nice release done.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc1&quot; id=&quot;book-improvements-2-0-0-rc1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.0.0-rc1&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-rc1&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 79 commits went to &lt;code&gt;2.0.0-rc1&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v2.0.0-beta2...v2.0.0-rc1&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained the point of appendices.&lt;/li&gt;
&lt;li&gt;Added more sectioning to make the points clearer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more sectioning. Better be consistent with that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Moved &lt;code&gt;require&lt;/code&gt; statements to use &lt;code&gt;const&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt;. This feels more consistent given &lt;code&gt;const&lt;/code&gt;s are used anyway.&lt;/li&gt;
&lt;li&gt;Added more terminal output to make expectations clearer.&lt;/li&gt;
&lt;li&gt;Added a section about &lt;em&gt;HMR on Windows&lt;/em&gt;. The default setup won&amp;#39;t work on all versions of Windows so I added an alternative. It&amp;#39;s not as efficient as it uses polling.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv&lt;/a&gt;. That&amp;#39;s handy for managing environment variables through a module of its own.&lt;/li&gt;
&lt;li&gt;Made sure &lt;em&gt;babel-loader&lt;/em&gt; caching gets enabled through &lt;code&gt;babel?cacheDirectory&lt;/code&gt;. This helps especially with rebuild performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed Babel settings passing. Instead of &lt;code&gt;babel?stage=1&lt;/code&gt; you&amp;#39;ll want to use &lt;code&gt;babel?presets[]=react,presets[]=es2015&lt;/code&gt; kind of format. It&amp;#39;s cleaner to use &lt;em&gt;.babelrc&lt;/em&gt;, though.&lt;/li&gt;
&lt;li&gt;Defined a section for &lt;em&gt;Using Babel for Webpack Configuration&lt;/em&gt; and expanded on the idea. If you want to use &lt;em&gt;webpack.config.babel.js&lt;/em&gt;, you need to have &lt;a href=&quot;https://www.npmjs.com/package/babel-register&quot;&gt;babel-register&lt;/a&gt; installed to your project.&lt;/li&gt;
&lt;li&gt;Moved the setup to use &lt;a href=&quot;https://www.npmjs.com/package/babel-preset-react-hmre&quot;&gt;babel-preset-react-hmre&lt;/a&gt;. This simplifies the Babel setup a lot!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Restructured for clarity. There are less steps now and the chapter gets faster to the point.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added missing subsections to the Flux explanation. This is consistent with the rest of the book now.&lt;/li&gt;
&lt;li&gt;Explained the difference between a &lt;em&gt;ponyfill&lt;/em&gt; and a &lt;em&gt;polyfill&lt;/em&gt;. Former don&amp;#39;t override native methods whereas latter do.&lt;/li&gt;
&lt;li&gt;Cleaned up code examples. They should be easier to follow now.&lt;/li&gt;
&lt;li&gt;Defaulted to the term &lt;em&gt;universal rendering&lt;/em&gt; over &lt;em&gt;isomorphic&lt;/em&gt; given it seems that&amp;#39;s winning over. The term &lt;em&gt;isomorphic&lt;/em&gt; is still mentioned, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Renamed &lt;code&gt;this.addItem&lt;/code&gt; as more specific &lt;code&gt;this.addLane&lt;/code&gt; to communicate the intent better.&lt;/li&gt;
&lt;li&gt;Pushed &lt;em&gt;On Data Dependencies and &lt;code&gt;waitFor&lt;/code&gt;&lt;/em&gt; to a more appropriate place in the chapter. Earlier it broke the flow a bit.&lt;/li&gt;
&lt;li&gt;Explained the need for association (notes to lane) better.&lt;/li&gt;
&lt;li&gt;Added missing &lt;code&gt;constructor&lt;/code&gt; bits to the &lt;code&gt;Lane&lt;/code&gt; code examples.&lt;/li&gt;
&lt;li&gt;Simplified add/remove annotations of the code examples to make them easier to copy and follow.&lt;/li&gt;
&lt;li&gt;Moved from &lt;code&gt;defaultValue&lt;/code&gt; to &lt;code&gt;placeholder&lt;/code&gt; at &lt;code&gt;Editable&lt;/code&gt;. This is a cleaner approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clarified the point that HTML5 Drag and Drop based backend is now separate from React DnD core.&lt;/li&gt;
&lt;li&gt;Made the code examples clearer to follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Updated terminal output to match the current state.&lt;/li&gt;
&lt;li&gt;Explained &lt;em&gt;Defining a &lt;code&gt;vendor&lt;/code&gt; Entry Point&lt;/em&gt; in greater detail.&lt;/li&gt;
&lt;li&gt;Linked to &lt;a href=&quot;https://www.npmjs.com/package/extract-text-webpack-plugin&quot;&gt;ExtractTextPlugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Simplified deployment configuration. It&amp;#39;s enough to do just &lt;code&gt;&amp;quot;deploy&amp;quot;: &amp;quot;gh-pages -d build&amp;quot;&lt;/code&gt; given &lt;em&gt;gh-pages&lt;/em&gt; provides a CLI tool these days.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;code&gt;require(&amp;#39;babel/register&amp;#39;)&lt;/code&gt; mention. This isn&amp;#39;t needed in the current setup anymore.&lt;/li&gt;
&lt;li&gt;Added missing id to &lt;code&gt;NoteContent&lt;/code&gt; at &lt;code&gt;Note&lt;/code&gt; test to mute a propType warning.&lt;/li&gt;
&lt;li&gt;Simplified Babel setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/eslint-friendly-formatter&quot;&gt;eslint-friendly-formatter&lt;/a&gt; and ESLint &lt;code&gt;--format&lt;/code&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/irish-pub&quot;&gt;irish-pub&lt;/a&gt;. This is a useful tool for checking what your package looks like before hitting &lt;code&gt;npm publish&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clarified &lt;em&gt;Dealing with Preprocessing&lt;/em&gt; so it&amp;#39;s easier to understand the point.&lt;/li&gt;
&lt;li&gt;Modernized &lt;code&gt;lib/post_install.js&lt;/code&gt; script.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#structuring-react-projects&quot; id=&quot;structuring-react-projects&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Structuring React Projects&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#structuring-react-projects&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New content. This appendix gives you some ideas on how to proceed with &lt;a href=&quot;..webpack_react/structuring_react_projects&quot;&gt;structuring React projects&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#language-features&quot; id=&quot;language-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Language Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#language-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added an example of &lt;em&gt;aliasing imports&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Added an example of &lt;em&gt;Classes and Modules&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Added more examples to property initializers.&lt;/li&gt;
&lt;li&gt;Explained arrow functions more accurately.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As usual, I&amp;#39;ll remain responsive to feedback. I&amp;#39;m prepared to do minor tweaks to the book. Major development will have to wait for subsequent versions.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll most likely spend time on some technical development. The site could use some tweaks and there are certain ideas I must prototype.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are working through the book, remember that you can find up to date code from &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt;. I know it&amp;#39;s a little inconvenient to catch up with changes, but what can you do. :)&lt;/p&gt;
&lt;p&gt;Remember that you can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work. It has been very instructive to work through various issue with my readers. This is useful for all parties involved.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Codemod - Refactoring Code Programmatically - Interview with Ramana Venkata</title><id>acodemodrefactoringcodeprogrammaticallyinterviewwithramanavenkata2016-01-01t00:00:00z</id><link href="https://survivejs.com/blog/codemod-interview/"></link><updated>2016-01-01T00:00:00Z</updated><content type="html">&lt;p&gt;Performing big changes to a codebase is always a little daunting. Doing each change by hand is time consuming and generally leads to errors, unless you have a good test suite in place.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/codemod&quot;&gt;Codemod&lt;/a&gt; is a tool that has been designed to help in this problem. In this interview, Ramana Venkata describes the tool in detail.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot;&gt;
    &lt;img src=&quot;https://www.gravatar.com/avatar/641693d5a45d1cd8b698aa96cebb3178?s=200&quot; alt=&quot;Ramana Venkata&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
  &lt;/span&gt;
My name is Ramana Venkata. I am front-end developer from India. I have been following the React Community since a year and half or so. I wanted to contribute to this community from that but I couldn&amp;#39;t due to my commitments at college and lack of experience I guess. But now that I have started working, I have a good amount of free time and I am trying to put good use.
&lt;/p&gt;

&lt;p&gt;We have plethora of tools but very little documentation. Sometimes the documentation exists but you can hardly learn anything from it. Sometimes the examples are there but they are not explained. So currently, my main focus is on improving tooling and the documentation around it. I want to make them more accessible.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-codemod-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-codemod-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Codemod to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-codemod-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Codemod is snippet of code which transforms JS code. It is one-time transformation that you apply on your code base to change an API or to change the style of your code etc., Under the hood, it turns your js code into an Abstract Syntax Tree (AST), applies transform on the AST and then convert it back to JavaScript. This is different from Babel because the codemod changes the original file where as babel doesn&amp;#39;t change the original file.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-use-codemod-&quot; id=&quot;who-should-use-codemod-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should use Codemod?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-use-codemod-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think every library author, that wants to make a breaking changes to their API, should at least consider the possibility of writing a codemod. You can potentially run codemods in the postinstall lifecycle hook of npm to update your code for any breaking changes that library introduces. This will probably make library authors worry less about breaking changes and spend more time on implementing great stuff.&lt;/p&gt;
&lt;p&gt;But it&amp;#39;s always not possible to write a codemod for breaking changes sometimes because of the change itself. Also, you have be to very defensive in the way you write a codemod to avoid false positives. This is partly is because of the dynamic nature of JavaScript itself and people use varying styles to write their code and structure their application.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#are-there-other-similar-tools-you-should-be-aware-of-&quot; id=&quot;are-there-other-similar-tools-you-should-be-aware-of-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Are there other similar tools you should be aware of?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#are-there-other-similar-tools-you-should-be-aware-of-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a natural next step, you can learn about &lt;a href=&quot;https://babeljs.io/docs/plugins/&quot;&gt;Babel plugins&lt;/a&gt;. It is very easy to write them with the help of &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt;. I think it&amp;#39;s possible to write a plugin that provides auto-completion engine like &lt;a href=&quot;http://ternjs.net/&quot;&gt;Tern&lt;/a&gt;, but a little more advanced.&lt;/p&gt;
&lt;p&gt;Imagine auto-completing a React component with all the required props and we can show type of props when you hover over it etc.,. You can use it for compile time transforms also. For example, I think the &lt;a href=&quot;https://www.npmjs.com/package/classnames&quot;&gt;classnames&lt;/a&gt; package by Jed Watson (which is amazing btw) can be replaced by a simple Babel transform.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t know how much value it has or whether its good thing or bad thing. This approach feels similar to having macros where we write code using custom syntax and at compile time we just transform them to JavaScript.&lt;/p&gt;
&lt;p&gt;I think there are is a lot of untapped potential there. We just need more time for the tools to mature and for that we need more contribution, adoption and feedback from the community.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-codemod-and-javascript-development-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-codemod-and-javascript-development-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for Codemod and JavaScript development in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-codemod-and-javascript-development-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think Codemod are just getting started (in the jscodeshift sense to make breaking changes to the API, etc.,). It is still a new tool the community even though it has been there for sometime. I have heard about it a lot of times but never really cared about it. It is &lt;a href=&quot;https://www.youtube.com/watch?v=d0pOgY8__JM&quot;&gt;Christoph Pojer&amp;#39;s talk on Codemods&lt;/a&gt; which gave me the really inspiration to try it out.&lt;/p&gt;
&lt;p&gt;We have seen a lot of people complain about burnouts because fast moving landscape of JavaScript and library are making breaking changes all over the place, etc., We definitely can&amp;#39;t stop innovating, but we should do invest time in tools that help us upgrade smoothly for this every breaking API changes situation.&lt;/p&gt;
&lt;p&gt;For example, Ember provides new releases on a six week cycle. If you have a large code-base in Ember, getting rid of all the deprecation warnings can be a nightmare and doing it every six weeks is not fun at all. Codemods can ease some of that pain.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think you should either interview Felix Kling or Christoph Pojer.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Ramana! I think Codemod is one of those tools that has great potential in taking some edge of development. I hope it becomes more popular and we see more adoption.&lt;/p&gt;
&lt;p&gt;From a library consumer&amp;#39;s point of view this can help a lot. I feel people aren&amp;#39;t just that aware of the tool yet but perhaps that will change during this year.&lt;/p&gt;
&lt;p&gt;If you are interested in the topic, I recommend checking out Ramana&amp;#39;s &lt;a href=&quot;https://vramana.github.io/blog/2015/12/21/codemod-tutorial/&quot;&gt;in-depth tutorial&lt;/a&gt;. I&amp;#39;ve listed various other resources below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=d0pOgY8__JM&quot;&gt;Christoph Pojer&amp;#39;s talk - Evolving Complex Systems Incrementally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb&quot;&gt;Effective JavaScript Codemods&lt;/a&gt; - A related blog post&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/codemod&quot;&gt;facebook/codemod&lt;/a&gt; - The project itself&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/jscodeshift&quot;&gt;facebook/jscodeshift&lt;/a&gt; - A toolkit for running codemods over multiple JavaScript files&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/react-codemod&quot;&gt;reactjs/react-codemod&lt;/a&gt; - Codemods for updating React&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cpojer/js-codemod&quot;&gt;cpoject/js-codemod&lt;/a&gt; - Codemods for transforming old JavaScript to a newer standard&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>2015 Recap</title><id>a2015recap2015-12-30t00:00:00z</id><link href="https://survivejs.com/blog/recap/"></link><updated>2015-12-30T00:00:00Z</updated><content type="html">&lt;p&gt;I know the common wisdom is that you shouldn&amp;#39;t write technical books. It&amp;#39;s a difficult way to earn your income, especially when you live in a country with heavy taxation and price level. Strangely enough, it&amp;#39;s working out for me at the moment. I&amp;#39;ll go through this year and its teachings in this brief post. It was a good year and I can only hope the next one will be even better!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-i-start-the-project-&quot; id=&quot;why-did-i-start-the-project-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why Did I Start the Project?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-i-start-the-project-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was a huge risk to start an effort like this. SurviveJS was born out of frustration. Besides being frustrated at my personal situation, I was frustrated at the lack of cohesive Webpack and React related material. Sure, you can learn it all from blog posts, source code, and documentation. But that is painful. So it felt like there could be a chance to make a difference.&lt;/p&gt;
&lt;p&gt;Initially I and &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian&lt;/a&gt; prepared a table of contents (TOC) and a sample chapter for a known publisher. After all, it makes a lot of sense to have people behind you that understand how the business works. Even though we did our best and negotiated for four weeks, the publisher eventually said no.&lt;/p&gt;
&lt;p&gt;As Christian got busy with work and his own projects, I decided to carry on with the effort. It felt wrong not to. Initially, the plan was to write a book about &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;, but quite soon &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; portion began to gain more significance. The structure of the book has grown organically based on intuition and demand. Even though this is slower than writing through some predefined TOC, this has allowed me to maneuver and alter the content as I understand better what&amp;#39;s needed.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#going-indie&quot; id=&quot;going-indie&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Going Indie&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#going-indie&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Self-publishing a book means you will have to deal with a lot of work yourself. You will have to take care of aspects like marketing, sales, graphics, editing, and copy-editing. Of course, you can outsource these portions as you like.&lt;/p&gt;
&lt;p&gt;Given I didn&amp;#39;t want to deal with the complexity of sales (VAT MOSS and all that), I decided to publish my book through &lt;a href=&quot;https://leanpub.com/&quot;&gt;Leanpub&lt;/a&gt;. As discussed in &lt;a href=&quot;https://survivejs.com/blog/succeed-at-technical-books&quot;&gt;an earlier post&lt;/a&gt;, that&amp;#39;s just an option amongst many. It has worked quite well for me, though.&lt;/p&gt;
&lt;p&gt;There are still a lot of things I should do better. In short term improving my distribution is one of the key things. I can also improve the way I work. Now it&amp;#39;s a little chaotic. More structured approach might be beneficial. I need to begin to think in terms of processes.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#success-is-rare&quot; id=&quot;success-is-rare&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Success is Rare&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#success-is-rare&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I know it&amp;#39;s rare that you actually succeed with an effort like this. In fact, it was &lt;a href=&quot;https://survivejs.com/blog/balance&quot;&gt;really hard&lt;/a&gt; at one point. The situation didn&amp;#39;t look particularly good around July. I realized I was being perhaps a bit too open about my efforts. Fortunately some sort of balance was reached.&lt;/p&gt;
&lt;p&gt;I think offering most of the content for free was the right call to make. That way more people can get into the technology. This in turn might lead to visibility I need to make sales. Sales in turn feed the wheel and lead to more content to pull in more people.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-through-the-storm&quot; id=&quot;getting-through-the-storm&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Through the Storm&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-through-the-storm&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am glad I persisted through the hard times. Especially editing support provided by &lt;a href=&quot;http://angular-tips.com/&quot;&gt;Jesús&lt;/a&gt; was extremely important. It helped me to shape the book for the better and manage the scope more effectively. I know the book isn&amp;#39;t perfect, no book is, but it would be far worse without some gentle nudges towards the right direction.&lt;/p&gt;
&lt;p&gt;Besides Jesús, I have received direct support at least from tens of people if not over a hundred. It&amp;#39;s always heartwarming to get feedback, no matter whether it&amp;#39;s positive or negative. Often it&amp;#39;s the negative feedback that keeps your feet on the ground. The problem with an intense effort like this is that you tend to lose perspective. That&amp;#39;s where the community feedback and support has helped immensely. Thank you guys!&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-indie-bundle&quot; id=&quot;react-indie-bundle&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Indie Bundle&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-indie-bundle&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the interesting things we did during this year was an effort known as &lt;a href=&quot;https://survivejs.com/blog/react-indie-bundle&quot;&gt;React Indie Bundle&lt;/a&gt;. The main problem in going alone, and especially first time, is that your audience is extremely limited. There simply isn&amp;#39;t a lot of marketing power. In React Indie Bundle we joined forces and did a joint effort to reach larger masses. It worked out reasonably well, and it might yield some further benefits. Thanks for inviting me to the bundle.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#blog-content&quot; id=&quot;blog-content&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Blog Content&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#blog-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Perhaps one of the better moves was to begin to arrange structured, short interviews for the &lt;a href=&quot;.&quot;&gt;blog&lt;/a&gt;. We have picked the brains of guys like &lt;a href=&quot;https://survivejs.com/blog/mobx-interview&quot;&gt;Michel Weststrate&lt;/a&gt;, &lt;a href=&quot;https://survivejs.com/blog/redux-interview&quot;&gt;Dan Abramov&lt;/a&gt;, and &lt;a href=&quot;https://survivejs.com/blog/cycle-interview&quot;&gt;André Staltz&lt;/a&gt; just to mention some. Thanks for participating!&lt;/p&gt;
&lt;p&gt;There will be more of these interviews in the future. I think it&amp;#39;s a fine way to get some visibility on what people think and where they think the world is going and makes an effort like this worthwhile. We&amp;#39;re all in the same boat after all.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve done a decent amount of &lt;a href=&quot;https://survivejs.com/blog/react-indie-bundle&quot;&gt;my blogging efforts&lt;/a&gt; not to mention a talk or two. I didn&amp;#39;t visit any notable React conferences this year, but perhaps I get more lucky in 2016. We&amp;#39;ll see.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-have-i-learned-&quot; id=&quot;what-have-i-learned-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Have I Learned?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-have-i-learned-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I feel going forward with this venture was easily the best thing I have done so far. I may have gotten a little better at writing and certain business and technology related aspects. I have had to develop some technology to fit my needs. And I will continue to do so. As the technology matures, you will get to benefit from it of course.&lt;/p&gt;
&lt;p&gt;One surprising thing is that &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;a small community&lt;/a&gt; has grown around the effort. It is one of those things that keeps you going.&lt;/p&gt;
&lt;p&gt;Throughout the process I have learned is that a bit of persistency, and luck, can take you quite far. From my perspective the current situation is sustainable. It allows me to push the effort further without having to worry too much. I couldn&amp;#39;t ask for more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You could say year 2015 was about learning to float. 2016 is about learning to swim. There are still some aspects I haven&amp;#39;t quite nailed yet, but I&amp;#39;m getting there. The big thing is that I don&amp;#39;t have to start from scratch anymore. A dent has been made.&lt;/p&gt;
&lt;p&gt;At the moment my primary priority is in getting a solid 2.0 version of the book out. It&amp;#39;s currently &lt;a href=&quot;https://survivejs.com/blog/survivejs200-beta2&quot;&gt;running in beta&lt;/a&gt;. This process allows me to fix certain kinks and make sure the book works for most people. I&amp;#39;m aware the approach the book uses isn&amp;#39;t ideal for everyone. But, as they say, you cannot bow one way without mooning to another. Being opinionated is good.&lt;/p&gt;
&lt;p&gt;From my perspective the current book has two bigger omissions. It doesn&amp;#39;t discuss &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt; in detail. Instead, the focus is on &lt;a href=&quot;http://alt.js.org/&quot;&gt;Alt&lt;/a&gt; and the Flux pattern. The whole aspect of back-end is skipped. I believe even with these omissions the book is quite useful already. But these are something that can be developed during the next year as demand arises. I want to keep the book as a living effort.&lt;/p&gt;
&lt;p&gt;It could also be worthwhile to modernize &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;the Webpack cookbook&lt;/a&gt; and turn it into a sibling offering through a similar model where most of the content is open and freely available.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s definitely a lot of ground to cover. But I see that more as an opportunity rather than a challenge.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I want to thank you for a great 2015. It is the community that makes an effort like this possible in the first place. I have a feeling 2016 could be even better in many ways. And I&amp;#39;m prepared to do my part. Happy 2016 guys!&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v2.0.0-beta2</title><id>asurvivejswebpackandreactv200beta22015-12-28t00:00:00z</id><link href="https://survivejs.com/blog/survivejs200-beta2/"></link><updated>2015-12-28T00:00:00Z</updated><content type="html">&lt;p&gt;The long awaited 2.0 is getting very close. &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/a&gt; reached version 2.0 last Wednesday. This was all I needed to push the book to Babel 6. I released &lt;em&gt;2.0.0-beta1&lt;/em&gt; as a xmas present of some sort to my &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;Leanpub readers&lt;/a&gt; in early access at 25th. I think they earned it. :)&lt;/p&gt;
&lt;p&gt;Today, after some initial feedback and subsequent fixes, I am prepared to publish a wider scale beta. Besides Babel 6 support, I have improved the formatting of the code examples considerably. Instead of having to guess what code goes and where, the examples now contain bolding and overlining to illustrate the changes better. In addition, there&amp;#39;s some new content about Flow and JavaScript language features.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The primary purpose of this beta is to encourage you to provide feedback as there&amp;#39;s still some time before the book goes to printing presses. I know it&amp;#39;s missing some interesting topics, but that&amp;#39;s something that can be worked during the next iteration (2 -&amp;gt; 3) of the book.&lt;/p&gt;
&lt;p&gt;I am prepared to spend the next week or two on improvements on both the book and the site. It might be fun to code something cool for a change. ;)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-beta2&quot; id=&quot;book-improvements-2-0-0-beta2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;2.0.0-beta2&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-2-0-0-beta2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 129 commits went to &lt;code&gt;2.0.0-beta2&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.9.15...v2.0.0-beta2&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Made the chapter paragraphs flow better.&lt;/li&gt;
&lt;li&gt;Improved section structure.&lt;/li&gt;
&lt;li&gt;Explained better who the book is meant for.&lt;/li&gt;
&lt;li&gt;Added a bit about book versioning. Version included.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Made Webpack explanation flow better. It should be easier to understand what it does now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;code&gt;npm init -y&lt;/code&gt; shortcut. Far better than having to hit &lt;em&gt;return&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Reworked chapter structure. Now it&amp;#39;s more logical and hopefully easier to follow.&lt;/li&gt;
&lt;li&gt;Expanded explanations and added warnings about gotchas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://github.com/paldepind/snabbdom&quot;&gt;paldepind/snabbdom&lt;/a&gt; as a Virtual DOM alternative.&lt;/li&gt;
&lt;li&gt;Added missing section (JSX vs. HTML)&lt;/li&gt;
&lt;li&gt;Hinted about the difference of React components and elements. Components generate elements and are more complex by nature given they can contain state.&lt;/li&gt;
&lt;li&gt;Updated the setup to Babel 6.&lt;/li&gt;
&lt;li&gt;Explained Babel 6 plugins and presets.&lt;/li&gt;
&lt;li&gt;Simplified application entry point by introducing &lt;a href=&quot;https://www.npmjs.com/package/html-webpack-template&quot;&gt;html-webpack-template&lt;/a&gt;. It&amp;#39;s a versatile template that works simple projects like this perfectly. This avoids unnecessary DOM manipulation.&lt;/li&gt;
&lt;li&gt;Explained how &lt;code&gt;BABEL_ENV&lt;/code&gt; works and why it needs to be set.&lt;/li&gt;
&lt;li&gt;Dropped the mention of &lt;code&gt;bind&lt;/code&gt; convention and replaced that with a snippet about property initializers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Updated React components to use function based definitions where it made sense. This is a good starting point for new components.&lt;/li&gt;
&lt;li&gt;Renamed &lt;code&gt;items&lt;/code&gt; to more specific &lt;code&gt;notes&lt;/code&gt;. This has been done also for &lt;code&gt;lanes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hinted about the benefits of immutability when discussing &lt;code&gt;componentWillUpdate&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generalized &lt;code&gt;update&lt;/code&gt; interface. Now it doesn&amp;#39;t care about the data you pass to it. This has been done for both stores (&lt;code&gt;NoteStore&lt;/code&gt;, &lt;code&gt;LaneStore&lt;/code&gt;). The implementation goes through &lt;code&gt;object-assign&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Discussed possible alternative implementations briefly to give more perspective.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generalized &lt;code&gt;update&lt;/code&gt; interface here as well. One interesting refactoring would be to do a generic CRUD store and then reuse that from elsewhere.&lt;/li&gt;
&lt;li&gt;Dropped &lt;code&gt;waitFor&lt;/code&gt;. It just introduced unnecessary complexity given we&amp;#39;re dealing with synchronous data. There&amp;#39;s still an explanation around as you need to be aware of it in asynchronous cases when you are dealing with data dependencies.&lt;/li&gt;
&lt;li&gt;Pushed &lt;code&gt;Lane&lt;/code&gt; &lt;code&gt;bind&lt;/code&gt;s from the &lt;code&gt;constructor&lt;/code&gt; to &lt;code&gt;render()&lt;/code&gt;. Although this isn&amp;#39;t ideal performance-wise, this is something that is easier to handle in Flow typing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Did just grammar fixes, better highlighting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;em&gt;Setting Up a Build Target&lt;/em&gt;. This was possible given we set up one at &lt;em&gt;Developing with Webpack&lt;/em&gt; already.&lt;/li&gt;
&lt;li&gt;Improved flow and dropped some redundant information.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-transform-inline-environment-variables&quot;&gt;babel-plugin-transform-inline-environment-variables&lt;/a&gt; as an alternative to &lt;code&gt;DefinePlugin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Dropped sourcemaps from production. Less complexity.&lt;/li&gt;
&lt;li&gt;Mentioned about how to structure the project. I might write a little appendix about that, but we&amp;#39;ll see.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed test path for &lt;code&gt;include&lt;/code&gt;s. Interestingly this worked even if it was missing a &amp;quot;s&amp;quot;. That&amp;#39;s something to investigate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot; id=&quot;typing-with-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on Flow somewhat. Now you can see how you would begin to push the project towards Flow typing. Flow is still missing some functionality required by a full port, but this is far better than nothing.&lt;/li&gt;
&lt;li&gt;Linked to various TypeScript loaders. I might do a TypeScript version of Kanban if there&amp;#39;s interest.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved grammar, highlighting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://docs.npmjs.com/files/package.json#files&quot;&gt;files&lt;/a&gt; &lt;em&gt;package.json&lt;/em&gt; field as an alternative to &lt;em&gt;.npmignore&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Explained &lt;code&gt;peerDependencies&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/semantic-release&quot;&gt;semantic-release&lt;/a&gt;. It&amp;#39;s a tool that provides better release flow.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;code&gt;&amp;gt;= 1.3.0 &amp;lt; 2.0.0&lt;/code&gt; version range.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved grammar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#language-features&quot; id=&quot;language-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Language Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#language-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New content! This is supposed to help especially those that haven&amp;#39;t used the features before. The appendix is terse and gets to the point. I&amp;#39;ll improve this based on your feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#understanding-decorators-&quot; id=&quot;understanding-decorators-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Understanding Decorators.&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#understanding-decorators-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved grammar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#troubleshooting&quot; id=&quot;troubleshooting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Troubleshooting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#troubleshooting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved grammar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This depends on you. I have a couple smaller things on my plate, but nothing major. I want to push the final release as far as I can. But to achieve that, I&amp;#39;m going to need feedback so I know what to improve. There&amp;#39;s no such thing as a perfect book, but at least I&amp;#39;m willing to push this as far as I possibly can.&lt;/p&gt;
&lt;p&gt;I might do an intermediate &lt;em&gt;beta-3&lt;/em&gt;. I want to do a final release within a week or two. After that I&amp;#39;ll focus my efforts depending on demand.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are working through the book, it might be a good idea to patch your project based on &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt; so it&amp;#39;s up to date and continue from there. Eggs and omelette, right?&lt;/p&gt;
&lt;p&gt;Leanpub readers have access to the stable release through &amp;quot;extras&amp;quot;. I made a little switcheroo there. Earlier the beta version was within &amp;quot;extras&amp;quot;. Speaking of which, I will need to figure out a better way to archive releases and make them available. Leanpub isn&amp;#39;t working in my favor here unfortunately.&lt;/p&gt;
&lt;p&gt;Remember that you can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work. The last thing I want is that you curse some parts of the book alone. I&amp;#39;m here to help after all.&lt;/p&gt;
&lt;p&gt;You can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>WhitestormJS - Three.js Based Game Engine - Interview with Alexander Buzin</title><id>awhitestormjsthreejsbasedgameengineinterviewwithalexanderbuzin2015-12-22t00:00:00z</id><link href="https://survivejs.com/blog/whitestormjs-interview/"></link><updated>2015-12-22T00:00:00Z</updated><content type="html">&lt;p&gt;I remember, when a few years ago a friend asked me what JavaScript game engine to use. As a result, I set up a little gist that in turn lead to something larger, namely &lt;a href=&quot;https://github.com/bebraw/jswiki&quot;&gt;jswiki&lt;/a&gt;, and eventually &lt;a href=&quot;http://jster.net/&quot;&gt;jster.net&lt;/a&gt;. The &lt;a href=&quot;https://github.com/bebraw/jswiki/wiki/Game-Engines&quot;&gt;game engine listing&lt;/a&gt; and &lt;a href=&quot;https://github.com/bebraw/jswiki/wiki/Game-engine-feature-matrix&quot;&gt;game engine feature matrix&lt;/a&gt; are quite useful still.&lt;/p&gt;
&lt;p&gt;Today, I&amp;#39;m interviewing Alexander Buzin, the author of a new engine known as &lt;a href=&quot;http://whitestormjs.xyz/&quot;&gt;WhitestormJS&lt;/a&gt;. I don&amp;#39;t understand about engines that much myself so it&amp;#39;s nice to get some perspective to the topic.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/e002d265845b7625ef396bf74763e31d?s=200&quot; alt=&quot;Alexander Buzin&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;My name is Alexander Buzin. I am a front-end developer and a hockey player from Kiev. I am interested in WebGL technology and everything related to 3D rendering in Web, such as &lt;a href=&quot;http://threejs.org/&quot;&gt;Three.js&lt;/a&gt;, &lt;a href=&quot;http://seenjs.io/&quot;&gt;seen.js&lt;/a&gt; and 3D physics engines like &lt;a href=&quot;http://www.cannonjs.org/&quot;&gt;Cannon.js&lt;/a&gt; or &lt;a href=&quot;https://github.com/lo-th/Oimo.js/&quot;&gt;Oimo.js&lt;/a&gt;. I am inspired by projects created on it and my favourite one is &lt;a href=&quot;http://www.ro.me/&quot;&gt;ROME&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beyond 3D projects, I want to highlight latest cool website which impressed me: &lt;a href=&quot;http://because-recollection.com/&quot;&gt;because-recollection.com&lt;/a&gt;.
Such sites make the internet a better place.&lt;/p&gt;
&lt;p&gt;Before I started learning Three.js, I tried my skills in AngularJS and NodeJS. But my ideal still was jQuery, given it&amp;#39;s so simple to use.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-whitestormjs-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-whitestormjs-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe WhitestormJS to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-whitestormjs-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I said, I like the idea of powerful, but simple in usage libraries like jQuery. Only a few lines of code, and you have a completely new website with smooth transitions and animations. WhitestormJS relies on the same idea. You only input parameters, which make your 3D object different from others. All other options are generated automatically by default.&lt;/p&gt;
&lt;p&gt;For example, if you forgot to input a color, WhitestormJS will display random one by default. If you forgot to insert your sphere radius - it will always be &amp;quot;1&amp;quot;.&lt;/p&gt;
&lt;p&gt;By the way, I noticed that almost every Three.js project or demo have their own resize function, so if you have 10 such projects, you need to write this simple function 10 times. Is it necessary? With WhitestormJS - no. Just put &lt;code&gt;autoresize: true&lt;/code&gt; parameter to the &lt;code&gt;init()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;You can see all this in a small example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; GAME &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;WHS&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    anaglyph&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Anaglyph effect.&lt;/span&gt;
    helper&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Cannon.js shape helper&lt;/span&gt;
    stats&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;fps&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// fps, ms, mb or false if not need.&lt;/span&gt;
    gravity&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Physics (gravity).&lt;/span&gt;
        x&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        y&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        z&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

GAME&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;sphere &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; GAME&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;addObject&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&quot;sphere&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    geometryOptions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
        radius&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot; &gt;3&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Sphere radius&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    mass&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Mass for CANNON.JS&lt;/span&gt;
    onlyvis&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot; &gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// If set true - no physics for this object&lt;/span&gt;
    materialOptions&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// ThreeJs material options&lt;/span&gt;
        color&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0xffffff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// White.&lt;/span&gt;
        type&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;basic&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    pos&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// position in space&lt;/span&gt;
        x&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        y&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
        z&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; &gt;0&lt;/span&gt;
    &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The project is available through &lt;a href=&quot;https://github.com/WhitestormJS/whitestorm.js&quot;&gt;GitHub&lt;/a&gt;. This way people can create pull requests to fix problems and improve the engine. I hope users will find it interesting.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-whitestormjs-&quot; id=&quot;why-did-you-develop-whitestormjs-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop WhitestormJS?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-whitestormjs-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first projects were based on Three.js. I used it for a long time and I realized that for a beginner developer (like me at the time) it is too complex. You need to understand how to construct a 3D scene, animate it and make changes to objects all the time. It scared me initially, but then my desire made me understand all this.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had a lot of troubles while developing this engine. Three.js has a lot of subtleties that you need to know. Early on, the library was just a single .js file + index.html (which served as an example for testing). Then I organized it all with &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;. I split my main file to 10+ smaller parts. Each of those now contain a specific function (for example, &lt;code&gt;addObject()&lt;/code&gt;, &lt;code&gt;addGround()&lt;/code&gt;, or &lt;code&gt;init()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The next big challenge for me was adding shadows to the terrain. I searched through almost the entire internet in the hope of finding an answer to the question &amp;quot;Why doesn&amp;#39;t my terrain cast shadows?&amp;quot;. I came by shaders. As a user, who has spent all his life on JavaScript, I was confused. I mean, I don&amp;#39;t know how to debug numbers through GLSL shaders. After spending about 2 days, I still decided to try to run the shadow of trial and error and I got it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each day we are making new changes. Big updates will come in the nearest future. Now we are focused on making improvements to working performance and stability. In this month you will see added skybox feature, improved shadows and fps count.
What will come exactly? - I know that we will add proper Audio support. It does not mean that now you can&amp;#39;t perform audio. Of course you can implement it to your 3D object throught Three.js, but later it will be much easier.&lt;/p&gt;
&lt;p&gt;P.s.: Maybe we will release an editor for people, who don&amp;#39;t know how to code.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-game-engines-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-game-engines-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for game engines and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-game-engines-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some weeks ago I contacted &lt;a href=&quot;https://twitter.com/aerotwist&quot;&gt;Paul Lewis&lt;/a&gt; from &lt;a href=&quot;https://aerotwist.com/&quot;&gt;Aerotwist blog&lt;/a&gt; and asked him a similar question. His answer was ES2015 (the latest version of JavaScript) and React.js.&lt;/p&gt;
&lt;p&gt;As for me, I think it will be awesome, if we can play games with excellent graphics in browsers. Currently the problem is that we need to develop games separately for multiple platforms. The web solves that.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I can mention &lt;a href=&quot;https://twitter.com/Cabbibo&quot;&gt;Cabbibo&lt;/a&gt;, who is my favourite web developer specializing in 3D. I like his projects.&lt;/p&gt;
&lt;p&gt;He works with Three.js and make awesome abstract sites, which are worthy of attention.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for your interview Alexander. Best of luck with your engine! If you want to study the engine, &lt;a href=&quot;https://github.com/sasha240100/WhitestormJS&quot;&gt;head to GitHub&lt;/a&gt; or check out the &lt;a href=&quot;http://whitestormjs.xyz/&quot;&gt;project homepage&lt;/a&gt; for documentation and demos.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React v1.9.15</title><id>asurvivejswebpackandreactv19152015-12-11t00:00:00z</id><link href="https://survivejs.com/blog/survivejs1915/"></link><updated>2015-12-11T00:00:00Z</updated><content type="html">&lt;p&gt;This is perhaps the last release before the long awaited &lt;code&gt;2.0&lt;/code&gt;. &lt;a href=&quot;http://alt.js.org/&quot;&gt;Alt&lt;/a&gt; reached version &lt;code&gt;0.18&lt;/code&gt;. As a result a certain part of the book broke. I have fixed that issue in this release. There are also plenty of other tweaks here and there, and even some new content.&lt;/p&gt;
&lt;p&gt;I visited an event known as &amp;quot;Web on the Edge&amp;quot; earlier this week. Even though these kind of trips always take some time, they tend to be worthwhile. At least I got to see some readers and managed to get exposure to some new ideas. See my &lt;a href=&quot;http://www.nixtu.info/2015/12/afterthoughts-web-on-edge.html&quot;&gt;conference report&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The situation with Babel 6 is starting to look a little better. Babel 6 compatible beta version of &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/a&gt; just came out a couple of days ago. Other plugins have been moving towards Babel 6 as well. I know decorator support is still a little iffy, but I have some solutions in sight that might work.&lt;/p&gt;
&lt;p&gt;I made a little breakthrough with my &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt;. It will still take some work, but I cannot see any blockers anymore. This is something I will tackle in the near future.&lt;/p&gt;
&lt;p&gt;In order to make it easier to contribute fixes and tweaks to the book, I changed the &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;GitHub repository&lt;/a&gt; to use the &lt;code&gt;dev&lt;/code&gt; branch by default. That&amp;#39;s where the development happens after all. This will help to avoid some confusion.&lt;/p&gt;
&lt;p&gt;I want to give special thanks to the user &lt;a href=&quot;https://github.com/snowyplover&quot;&gt;snowyplover&lt;/a&gt; for providing nice edits to early parts of the book. &lt;a href=&quot;https://github.com/sokra&quot;&gt;Tobias Koppers&lt;/a&gt; deserves a special mention as well. Overall the feedback has been encouraging and helped me to push the book a notch further. Thanks guys!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-15&quot; id=&quot;book-improvements-1-9-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.9.15&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-15&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 74 commits went to &lt;code&gt;1.9.15&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.9.10...v1.9.15&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved the flow of the chapter. Now it should read a little better.&lt;/li&gt;
&lt;li&gt;Added emphasis between &lt;em&gt;task runners&lt;/em&gt; and &lt;em&gt;bundlers&lt;/em&gt;. This helps to understand how these tools can complement each other.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Documented Webpack &lt;code&gt;entry&lt;/code&gt; better. It accepts a path or an object of entries.&lt;/li&gt;
&lt;li&gt;Pointed &lt;code&gt;open&lt;/code&gt; to the correct location.&lt;/li&gt;
&lt;li&gt;Put emphasis on the fact that the dev server runs in-memory. This should decrease the amount of confusion.&lt;/li&gt;
&lt;li&gt;Mentioned that &lt;code&gt;HOST&lt;/code&gt; should be set to &lt;code&gt;0.0.0.0&lt;/code&gt; for Cloud9 and similar environments.&lt;/li&gt;
&lt;li&gt;Noted that &lt;code&gt;test&lt;/code&gt; expects a RegExp.&lt;/li&gt;
&lt;li&gt;Noted that &lt;code&gt;include&lt;/code&gt; expects a path or an array of paths.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Removed mention of &lt;em&gt;stage 1&lt;/em&gt; now that we enable specific features we use at the project one by one.&lt;/li&gt;
&lt;li&gt;Added examples of the custom features used to make it easier to understand what they do.&lt;/li&gt;
&lt;li&gt;Pushed the ES6 class autobinding note to the correct place.&lt;/li&gt;
&lt;li&gt;Added missing `&amp;quot;es7.classProperties&amp;quot; declaration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Removed mention of &lt;em&gt;react-hot-loader&lt;/em&gt;. It has been replaced by &lt;em&gt;babel-plugin-react-transform&lt;/em&gt; so no need for this anymore.&lt;/li&gt;
&lt;li&gt;Added emphasis to the fact that I prefer functional style and the reasons for this.&lt;/li&gt;
&lt;li&gt;Renamed &lt;code&gt;renderTask&lt;/code&gt; as &lt;code&gt;renderNote&lt;/code&gt; to communicate the intent better.&lt;/li&gt;
&lt;li&gt;Showed how to use &lt;code&gt;map&lt;/code&gt; to set context. Example: &lt;code&gt;map(fn, context)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Dropped &lt;code&gt;findIndex&lt;/code&gt;. The usage has been replaced with simpler functions. This reduces the complexity of the project and makes the chapter quicker to go through.&lt;/li&gt;
&lt;li&gt;Improved the flow of &lt;em&gt;Understanding React Components&lt;/em&gt;. Now it explains things in the right order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integrated &lt;em&gt;alt-utils&lt;/em&gt; so the project works with Alt 0.18.&lt;/li&gt;
&lt;li&gt;Simplified store methods somewhat.&lt;/li&gt;
&lt;li&gt;Put emphasis on the dangers of mutation.&lt;/li&gt;
&lt;li&gt;Explained isomorphic rendering briefly given it&amp;#39;s mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified store methods.&lt;/li&gt;
&lt;li&gt;Dropped &lt;em&gt;Implementing &lt;code&gt;findLane&lt;/code&gt;&lt;/em&gt;. This isn&amp;#39;t needed now that the implementation is simpler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Installed &lt;em&gt;react-addons-update&lt;/em&gt; from a package of its own so the project won&amp;#39;t break with React 0.15.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved the flow of the chapter. Now it proceeds in a slightly smarter order.&lt;/li&gt;
&lt;li&gt;Fixed hashing configuration. Bundles should get invalidated as initially intended now. This took some extra effort to pull off.&lt;/li&gt;
&lt;li&gt;Linked the chapter better to &lt;em&gt;Authoring Libraries&lt;/em&gt;. It&amp;#39;s valuable to understand npm in detail as that can help with your build so that&amp;#39;s a good chapter to read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on &lt;em&gt;.gitignore&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Added mention of &lt;em&gt;postinstall&lt;/em&gt; and its usage.&lt;/li&gt;
&lt;li&gt;Explained how to deal with preprocessing (i.e., &lt;em&gt;postinstall&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Added a section about version ranges and how they work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved the flow of the early part of the chapter.&lt;/li&gt;
&lt;li&gt;Added an image showing how different processing tools can work in tandem. &lt;a href=&quot;https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3&quot;&gt;Stefan Baumgartner&lt;/a&gt; describes that well so I used his idea.&lt;/li&gt;
&lt;li&gt;Added a section for &lt;a href=&quot;https://github.com/postcss/postcss&quot;&gt;PostCSS&lt;/a&gt;. It was mentioned already but I felt it could use a better description.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#troubleshooting&quot; id=&quot;troubleshooting&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Troubleshooting&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#troubleshooting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a section about &lt;code&gt;Module parse failed&lt;/code&gt;. That&amp;#39;s something you can see with Webpack quite easily so it felt like something nice to cover.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The coast is clear for the Flow work. I see no blockers with that. TypeScript will take some further investigation. And there are some smaller things, like improving those code examples, which I want to get done. That should keep me busy next week.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Again, this is a small release. If you are working through the book, it might be a good idea to patch your project based on &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;the book repository&lt;/a&gt; so it&amp;#39;s up to date and continue from there. I know this isn&amp;#39;t ideal, but you cannot make an omelette without breaking an egg. It&amp;#39;s for the better.&lt;/p&gt;
&lt;p&gt;Thanks for the feedback again. It helps. You can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>React Indie Bundle - Summary</title><id>areactindiebundlesummary2015-12-07t00:00:00z</id><link href="https://survivejs.com/blog/react-indie-bundle/"></link><updated>2015-12-07T00:00:00Z</updated><content type="html">&lt;p&gt;It is amazing what a great year this turned out to be. I launched this site &lt;a href=&quot;https://survivejs.com/blog/the-story-so-far&quot;&gt;around July&lt;/a&gt;. Since then a lot has changed. While the situation might have looked a little desperate back then, I feel we are on a sustainable track now. And there is still a lot to come.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;ve been wondering about the radio silence, a lot of it has to do with the &lt;a href=&quot;http://www.reactindiebundle.com/&quot;&gt;React Indie Bundle&lt;/a&gt;. We got a couple of smart heads together and decided to launch something that would work well as an entry point to React. In order to support the effort, I launched a little campaign of my own. I thought it would be fun to summarize some of my efforts, so here we go.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#presentations&quot; id=&quot;presentations&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Presentations&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#presentations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#39;t present a lot. There simply isn&amp;#39;t a lot of demand for presentations locally so it makes sense for me to focus my efforts on coding and writing. That said, I&amp;#39;ll do my best if I get asked to talk about some topic.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#frontend-in-2015-clear-the-decks&quot; id=&quot;frontend-in-2015-clear-the-decks&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Frontend in 2015 - Clear the Decks&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#frontend-in-2015-clear-the-decks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Earlier this year I was invited to talk about the state of frontend in 2015. Even though that was a couple of months ago, a lot of the points still stand. The &lt;a href=&quot;https://survivejs.github.io/frontend-in-2015&quot;&gt;slides&lt;/a&gt; work best in Chrome.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s more of an overview. This was an interesting year in front-end and I can only imagine what 2016 is going to be like.&lt;/p&gt;
&lt;p&gt;I know this presentation didn&amp;#39;t contribute to the bundle directly. It just felt like something fun to mention.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-to-write-a-book-and-survivejs-it&quot; id=&quot;how-to-write-a-book-and-survivejs-it&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How to Write a Book and SurviveJS it&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-to-write-a-book-and-survivejs-it&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was invited to talk about my book a week ago. Even though &lt;a href=&quot;https://www.youtube.com/watch?v=DrgZaiqm4YE&quot;&gt;the recording&lt;/a&gt; of my presentation is in Finnish, you might still enjoy &lt;a href=&quot;https://survivejs.github.io/how-to-write-a-book-and-survivejs-it&quot;&gt;the slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s more about the business side of things, but having that sort of understanding doesn&amp;#39;t hurt. Especially if you want to write a book of your own.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-for-awesome-people&quot; id=&quot;react-for-awesome-people&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React for Awesome People&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-for-awesome-people&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Webinars are tough. In addition to potential technical woes, it can feel strange to talk to an audience you don&amp;#39;t see. Regardless, I gave a little introduction to React in a recent one we did to discuss React.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://survivejs.github.io/react-for-awesome-people/&quot;&gt;slides&lt;/a&gt; get to the point. In short, there is not that much to learn in React itself. It&amp;#39;s more about learning how to deal with the ecosystem as a whole. I feel we&amp;#39;re still in a discovery mode as new, better solutions to complement React come along.&lt;/p&gt;
&lt;p&gt;This is in contrast to approaches enabled by popular frameworks. The framework approach itself is very powerful. Rather than having to splice things together, you just follow the conventions. The potential problems begin as you need to go beyond the initial design of the framework.&lt;/p&gt;
&lt;p&gt;Keeping up with the framework&amp;#39;s development can sometimes be a daunting proposition as you need to drag all of the project forward. A library oriented approach allows you to modernize your project one dependency at a time. This seems more sustainable to me over longer term.&lt;/p&gt;
&lt;p&gt;I am sure both approaches are valid depending on the situation. And sometimes the approaches overlap. It may even make sense to construct a &amp;quot;framework&amp;quot; of your own out of libraries you like and then standardize on that. In the end it&amp;#39;s about the constraints you want.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#guest-posts&quot; id=&quot;guest-posts&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Guest Posts&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#guest-posts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given I&amp;#39;m a little stronger on the writing side of things, I put some conscious effort to that. Writing some guest posts felt like a good way to generate some interest towards the bundle while being useful to the community as a whole. I&amp;#39;ve listed some of my efforts below.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-bundling-for-fun-and-profit&quot; id=&quot;webpack-bundling-for-fun-and-profit&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack – Bundling for Fun and Profit&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-bundling-for-fun-and-profit&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codersclan.net/&quot;&gt;CodersClan&lt;/a&gt; is a little service meant for getting small coding tasks done. It fits somewhere between Fiverr and those larger freelancing sites. I decided to give them a taste of Webpack. This is what &lt;a href=&quot;https://blog-admin.codersclan.com/webpack-bundling-for-fun-and-profit-2/&quot;&gt;Webpack - Bundling for Fun and Profit&lt;/a&gt; achieves.&lt;/p&gt;
&lt;p&gt;If you have read my book or understand the basics of Webpack, there&amp;#39;s nothing new here. It is an entry level post after all.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-a-cdn-reporting-application-with-webpack-and-react&quot; id=&quot;building-a-cdn-reporting-application-with-webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building a CDN Reporting Application with Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-a-cdn-reporting-application-with-webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I wrote an entire tutorial for &lt;a href=&quot;https://www.maxcdn.com/&quot;&gt;MaxCDN&lt;/a&gt;, a popular CDN provider. &lt;a href=&quot;https://www.maxcdn.com/blog/cdn-reporting-application-webpack-react/&quot;&gt;Building a CDN Reporting Application with Webpack and React&lt;/a&gt; shows you how to build a little reporting application to understand how your CDN is performing.&lt;/p&gt;
&lt;p&gt;Again, this is a 101 level post that&amp;#39;s meant for beginners. Beyond that the API mocking idea might be worthwhile.&lt;/p&gt;
&lt;p&gt;The cool thing about front-end development that you don&amp;#39;t need an actual endpoint to work against. You can just generate the data that looks about right. When the time is right, you will plug in the real back-end. And this will just work assuming there is no impedance mismatch somewhere.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-to-structure-a-react-project-&quot; id=&quot;how-to-structure-a-react-project-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How to Structure a React Project?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-to-structure-a-react-project-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjsnews.com/structuring-react-projects&quot;&gt;How to Structure a React Project?&lt;/a&gt; written for &lt;a href=&quot;https://reactjsnews.com/&quot;&gt;ReactJS News&lt;/a&gt; gained some nice visibility through &lt;a href=&quot;https://news.ycombinator.com/item?id=10645170&quot;&gt;Hacker News&lt;/a&gt;. This was surprising given I usually get ignored there. But I&amp;#39;m not complaining.&lt;/p&gt;
&lt;p&gt;I think the post hit some nerve. Even though the Reddit commentary wasn&amp;#39;t entirely supporting as some readers felt there wasn&amp;#39;t enough substance, I believe the core idea of the post is valid.&lt;/p&gt;
&lt;p&gt;There simply isn&amp;#39;t one right way to structure your React project. It&amp;#39;s a matter of judgment. Even though conventions can be cool, I think you should evolve the structure of your project as it evolves. It&amp;#39;s about making things understandable, not about following some rules. Rules can be great, but it&amp;#39;s better to make them yourself based on the situation.&lt;/p&gt;
&lt;p&gt;Over longer term the community might begin to gravitate towards certain structures. That&amp;#39;s fine, though, as it tells something about maturity. As we begin to understand better what we are doing, structure emerges. I believe this is one of the pain points for people coming from more structured environments.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy the material. Now that &lt;a href=&quot;http://www.reactindiebundle.com/&quot;&gt;the bundle&lt;/a&gt; is nearing its end, I can get back to normal business. That said, there might be something interesting on the horizon. I&amp;#39;ll get back to that when the time is right, though.&lt;/p&gt;
</content></entry><entry><title>StarHackIt - A Full Stack ES6/ES7 Starter Kit based on React and Node - Interview with Frederic Heem</title><id>astarhackitafullstackes6es7starterkitbasedonreactandnodeinterviewwithfredericheem2015-11-24t00:00:00z</id><link href="https://survivejs.com/blog/starhackit-interview/"></link><updated>2015-11-24T00:00:00Z</updated><content type="html">&lt;p&gt;I discussed my &lt;a href=&quot;https://survivejs.github.io/react-component-boilerplate/&quot;&gt;React component boilerplate&lt;/a&gt; earlier on. It is focused and deals only with the frontend. Often you need more than just a frontend, though. This is where Frederic Heem&amp;#39;s &lt;a href=&quot;http://starhack.it/&quot;&gt;StarHackIt&lt;/a&gt; fits. It is a full stack boilerplate. Read on to learn more.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/2327ce3a89bc1eecbc6273990933ca14.jpg&quot; alt=&quot;Frederic Heem&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Frederic Heem&lt;/figcaption&gt;&lt;/figure&gt;

  I studied industrial engineering in France but ended up being a software engineer for the last the last 15 years mostly in the UK and Italy. Right now, I am working on blockchain and distributed ledger technology in the city of London. During my spare time and when the wind blows, I am hooked on my kitesurf.
&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/f6266e90693345a60b5763491b141dd6.jpg&quot; alt=&quot;dunkerque-malo&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;dunkerque-malo&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-starhackit-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-starhackit-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;StarHackIt&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-starhackit-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;StarHackIt&lt;/em&gt; is a full stack web application boilerplate. The aim is to provide a code base to quickly create a new web application. It is a foundation on which software developers can build on top of it.&lt;/p&gt;
&lt;p&gt;This starter kit is written in JavaScript &lt;strong&gt;ES6&lt;/strong&gt;/&lt;strong&gt;ES7&lt;/strong&gt;, it is composed of a frontend based on React/Reflux, a Node.js backend, the data is backed by &lt;strong&gt;SQL&lt;/strong&gt; thanks to the Sequelize ORM, automatic deployment is done with Ansible. The code is built with Gulp, analyzed by ESLint, tested with Mocha, covered by Istanbul.&lt;/p&gt;
&lt;p&gt;One of the main benefits is that StarHackIt comes with &lt;em&gt;authentication&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users can register and login with username and password, reset the password via email.&lt;/li&gt;
&lt;li&gt;Social login with Facebook, Google, GitHub etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A fine-grained &lt;strong&gt;authorization&lt;/strong&gt; system based on groups, permissions and resources is also provided. This allows to create users belonging to groups with a different set of permissions to the API. A simple example is to grant special access to users belonging to the &lt;em&gt;Admin&lt;/em&gt; group.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-starhackit-&quot; id=&quot;why-did-you-develop-starhackit-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop StarHackIt?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-starhackit-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most JavaScript boilerplates are not really full stack, either they focus on the frontend or they specialize on the backend.&lt;/p&gt;
&lt;p&gt;The data is almost always stored on non-relational &lt;strong&gt;NoSQL&lt;/strong&gt; database like MongoDB or in the cloud with Firebase. However, most applications rely on relational data so SQL databases such as PostgreSQL or MySQL are better suited. Actually, using a NoSQL database when the data are essentially relational could lead to serious issues.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/f9f43270e97c04a701da1e092b18d6f6.jpg&quot; alt=&quot;NoSQL&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;NoSQL&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;MEAN stack&lt;/strong&gt; is quite popular, it&amp;#39;s composed of MongoDB, Express, Angular and Node. Instead, StarHackIt is a &lt;strong&gt;SERNA stack&lt;/strong&gt;: SQL, Express, React, Node, and Ansible.&lt;/p&gt;
&lt;p&gt;The Ruby fans have Ruby on Rails, but the JavaScript developers don&amp;#39;t have Node on rails (yet). This project is a little step towards the direction of a productive JavaScript web framework.&lt;/p&gt;
&lt;p&gt;Image that you have to attend a hackathon to create a useful app in a weekend, is there any time to lose creating from scratch an application with some basic functionalities such as login and register?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The JavaScript ecosystem is vibrant with a record number of packages that have overtaken any other languages, see &lt;a href=&quot;http://www.modulecounts.com/&quot;&gt;modulecount&lt;/a&gt; for the facts.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/dce302f14d08517a2b429487e9cb5aa6.png&quot; alt=&quot;Module counts&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Module counts&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The challenge is mostly about making choice between these huge numbers of packages to build upon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React/Angular/Angular2/Ember/Backbone&lt;/li&gt;
&lt;li&gt;Reflux/Flux/Redux/Alt&lt;/li&gt;
&lt;li&gt;Bootstrap/Material/Foundation&lt;/li&gt;
&lt;li&gt;Eslint/Jscs/Jshint&lt;/li&gt;
&lt;li&gt;Stylus/Saas/Less/CSS&lt;/li&gt;
&lt;li&gt;Express/Koa/Hapi/Strongloop/Sails/Meteor&lt;/li&gt;
&lt;li&gt;SQL/NoSql&lt;/li&gt;
&lt;li&gt;Sequelize/Bookshelf&lt;/li&gt;
&lt;li&gt;Webpack/Browserify/RequiresJs&lt;/li&gt;
&lt;li&gt;Gulp/Grunt&lt;/li&gt;
&lt;li&gt;Ansible/Chef/Puppet&lt;/li&gt;
&lt;li&gt;Mocha/QUnit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is about selecting the best tools at a given time and integrating them. Over time, new libraries will emerge, other libraries will be unmaintained. Keeping the code up to date with the new version will require some kind of maintenance.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/fc5f093b9df95762434e509adeddc6a0.jpg&quot; alt=&quot;Red pill or blue pill?&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;Red pill or blue pill?&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Writing code in &lt;em&gt;ES6&lt;/em&gt; and &lt;em&gt;ES7&lt;/em&gt; adds another layer of complexity on the build system since files need to be transpiled to plain old JavaScript. This also makes setting up code coverage and testing trickier, however, it&amp;#39;s definitely worth it.&lt;/p&gt;
&lt;p&gt;The most amazing feature of &lt;em&gt;ES7&lt;/em&gt; is &lt;strong&gt;async/await&lt;/strong&gt;, forget about callbacks and Promises, async/await is an enlightenment and the way to go, it makes writing asynchronous code similar to writing synchronous code, it significantly changes the way JavaScript is written, especially on the node side.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Twenty years ago JavaScript was a joke, now it&amp;#39;s the future. &lt;a href=&quot;http://jster.net/blog/monthly-jster-september-2015-part-2#.VkPBH2SKH-k&quot;&gt;jster.net september-2015 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next is to improve the documentation to explain the various parts of the stack, write a tutorial on how to create the famous TODO app. Then a native mobile app with react-native is definitely on the roadmap. An admin interface to manage users and other aspects of the app would be also very useful.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The future of React lies in the various Flux implementations that are evolving very quickly, React is only a part of the equation for building an application. The React community is growing at fast pace, for instance, the React Meetup in London is fully booked only after 20 minutes upon publication of the event. The frontend development and software in general have a bright and sustainable future, there is no shortage of software development jobs in sight.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/7821f82bb4f18138a170324c822e730a.png&quot; alt=&quot;React trends&quot; class=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;figcaption&gt;React trends&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What about an interview of Juho Vepsäläinen? The mind behind &lt;a href=&quot;http://jster.net/&quot;&gt;jster.net&lt;/a&gt; and &lt;a href=&quot;http://survivejs.com/&quot;&gt;SurviveJS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot for the interview Frederic! I&amp;#39;ll consider interviewing myself in the near future for sure as I might have a little announcement to make.&lt;/p&gt;
&lt;p&gt;Best of luck to &lt;a href=&quot;http://starhack.it/&quot;&gt;StarHackIt&lt;/a&gt;! Let&amp;#39;s hope people find it and help you to push it further. Beyond the project site, consider checking &lt;a href=&quot;https://github.com/FredericHeem/starhackit&quot;&gt;the source code on GitHub&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v1.9.10</title><id>asurvivejswebpackandreactv19102015-11-22t00:00:00z</id><link href="https://survivejs.com/blog/survivejs1910/"></link><updated>2015-11-22T00:00:00Z</updated><content type="html">&lt;p&gt;It&amp;#39;s time for another maintenance release with minor tweaks here and there. Probably the biggest change is the fancy new cover which I crafted based on the logo design of &lt;a href=&quot;http://prospectone.pl/&quot;&gt;Prospect One&lt;/a&gt;. Cheers for that.&lt;/p&gt;
&lt;p&gt;Probably the biggest news this time around is that the book is going to be a part of the &lt;a href=&quot;http://www.reactindiebundle.com/&quot;&gt;React Indie Bundle&lt;/a&gt;. This will be a good chance to pick up some additional material while supporting indie authors and library/tool developers in their craft.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot; id=&quot;overview-of-the-situation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Overview of the Situation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#overview-of-the-situation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The situation with Babel 6 is still a little problematic. Besides waiting for &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/a&gt; to catch up, there&amp;#39;s &lt;a href=&quot;http://phabricator.babeljs.io/T2645&quot;&gt;the additional issue of decorator support&lt;/a&gt;. I&amp;#39;ll keep an eye on the progress and update the book once the time is right.&lt;/p&gt;
&lt;p&gt;The biggest cosmetic change has to do with the introduction of property initializers. I simply got tired of having to use &lt;code&gt;bind&lt;/code&gt; at constructor so I enabled the feature for the project. Even though experimental feature, it cleans up the examples somewhat so I believe it was worth it. The only gotcha is that hot loading doesn&amp;#39;t support property initializers. But then, we had the same issue earlier. Now the code is just a little neater.&lt;/p&gt;
&lt;p&gt;I put some serious effort to developing &lt;a href=&quot;https://antwarjs.github.io/&quot;&gt;Antwar&lt;/a&gt;, my Webpack and React based site generator. Given I use it to develop this site, I felt it was a good chance to push it further. I managed to simplify it conceptually somewhat while improve performance a great deal. The work is on-going and I&amp;#39;m still dogfooding it. By the looks of it, the next release should be quite sweet. You can think of Antwar as &amp;quot;Webpack of static site generators&amp;quot;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-10&quot; id=&quot;book-improvements-1-9-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.9.10&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-10&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 34 commits went to &lt;code&gt;1.9.10&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.9.5...v1.9.10&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained Webpack&amp;#39;s approach in detail.&lt;/li&gt;
&lt;li&gt;Explained React in detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pushed path configuration to a single &lt;code&gt;PATHS&lt;/code&gt; structure. A little neater this way.&lt;/li&gt;
&lt;li&gt;Explained how to serve build results easily.&lt;/li&gt;
&lt;li&gt;Made &lt;a href=&quot;https://survivejs.com/webpack/developing/webpack-dev-server/&quot;&gt;webpack-dev-server&lt;/a&gt; use &lt;code&gt;stats: &amp;#39;errors-only&amp;#39;,&lt;/code&gt; option. This relatively new option gives you far less output and helps to keep your terminal clean.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enabled &lt;a href=&quot;https://github.com/jeffmo/es-class-static-properties-and-fields&quot;&gt;class properties&lt;/a&gt; so we can use &lt;em&gt;property initializers&lt;/em&gt; to clean up the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added warning mentioning that hot loading isn&amp;#39;t fool proof. It&amp;#39;s at its best if you can push your state to a state container such as &lt;a href=&quot;http://redux.js.org/&quot;&gt;redux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Changed &lt;code&gt;key&lt;/code&gt; to use &lt;code&gt;id&lt;/code&gt; directly. The ids are unique so why not.&lt;/li&gt;
&lt;li&gt;Explained &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind&lt;/a&gt; in greater detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added missing filenames.&lt;/li&gt;
&lt;li&gt;Simplified &lt;a href=&quot;http://alt.js.org/docs/components/altContainer/&quot;&gt;AltContainer&lt;/a&gt; explanation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clarified &lt;code&gt;waitFor&lt;/code&gt; explanation.&lt;/li&gt;
&lt;li&gt;Hinted how to improve &lt;code&gt;Editable&lt;/code&gt;. Now it encapsulates store itself. It would be interesting to extract the state and control it outside. This would be a good extension point for further development.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tied drag and drop explanation to the application better.&lt;/li&gt;
&lt;li&gt;Fixed filenames.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on &lt;code&gt;DefinePlugin&lt;/code&gt; and how to use it. I managed to bum a couple of lines of code while at it given you can do just &lt;code&gt;&amp;#39;process.env.NODE_ENV&amp;#39;&lt;/code&gt;. Small win but a win still.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed &lt;em&gt;isparta-instrumenter-loader&lt;/em&gt; to version 0.2.1 given that&amp;#39;s the last version that works with Babel 5.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will review the typing situation and go through the book myself from start to finish to see potential pain points. Perhaps I can do something to improve the code examples. There are a couple of ideas related to that. After this I have to cut &lt;code&gt;v2.0.0&lt;/code&gt;. That&amp;#39;s not an end of course but I feel it&amp;#39;s an important milestone for this project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though small release, I want to thank you for feedback again. You helped me to fix a lot of issues I never would have caught on my own. You can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>react-router5 - Routing Alternative for React - Interview with Thomas Roch</title><id>areactrouter5routingalternativeforreactinterviewwiththomasroch2015-11-09t00:00:00z</id><link href="https://survivejs.com/blog/react-router5-interview/"></link><updated>2015-11-09T00:00:00Z</updated><content type="html">&lt;p&gt;When people ask about what routing solution to use with React, they often get pointed at &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;react-router&lt;/a&gt;. It is a powerful solution and used by many so it can make sense. That doesn&amp;#39;t mean it&amp;#39;s the only alternative, though.&lt;/p&gt;
&lt;p&gt;This time I&amp;#39;m interviewing &lt;a href=&quot;https://twitter.com/tcroch&quot;&gt;Thomas Roch&lt;/a&gt;, the author of &lt;a href=&quot;https://github.com/router5/react-router5&quot;&gt;react-router5&lt;/a&gt;. It provides React bindings for &lt;a href=&quot;https://router5.github.io/&quot;&gt;router5&lt;/a&gt;, a generic routing solution he has developed. Read on to learn more about this interesting alternative.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are also &lt;a href=&quot;https://github.com/router5/redux-router5&quot;&gt;redux bindings&lt;/a&gt; available for router5!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/900c67ec2d8cfd30e537cc3d49de969f.jpg&quot; alt=&quot;Thomas Roch&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Thomas Roch&lt;/figcaption&gt;&lt;/figure&gt;

  I have a degree in engineering, although my education was for most parts non specialised, I ended up studying a bit more mechanical and electronics engineering. I have always been programming in my spare time and hacking stuff, and inevitably, my early professional career slowly drifted towards software engineering. I explored a few areas and languages: embedded software on micro-processors, desktop applications and web applications.
&lt;/p&gt;

&lt;p&gt;I did a fair amount of full-stack web development, and a few years ago I decided to take front-end development very seriously, being amazed by what a difference Node.js and social coding had started to make. I am a French national, I am currently a software engineer at Fanduel and live in Glasgow, Scotland.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-router5-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-router5-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe &lt;em&gt;react-router5&lt;/em&gt; to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-router5-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;react-router5&lt;/em&gt; (and router5) is a different way of thinking about routing in front-end applications, and a way which I think suits a lot more trees of components. Instead of focusing on what component to render for what route, or providing a handler function per route, it sees routing as going from A to B, not loading B.&lt;/p&gt;
&lt;p&gt;There is clear separation of concerns: router5 will take care of checking routing can happen and provide route updates. react-router5 provides ways to update your virtual tree, but won&amp;#39;t do it for you. So you can have control over routing. I am not the only one testing and implementing new ideas around routing though.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-router5-&quot; id=&quot;why-did-you-develop-react-router5-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop &lt;em&gt;react-router5&lt;/em&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-router5-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started using React a little more than a year ago, while still developing heavily with Angular. Working alongside a back-end team using Scala, I had slowly been introduced to functional programming, immutability, reactive programming, etc... I played with React, used it on a playground project at home, and one of the really first thing I searched for was a router. I think it is a habit most of us have, having being used to rely on frameworks. And no surprise on the outcome, I ended up with react-router.&lt;/p&gt;
&lt;p&gt;Slowly, my practice of React evolved. I started to reject state, played with Flux without being fully convinced, looked a lot at reactive programming but I didn&amp;#39;t know what to do about routing. It felt like it was standing on my way, I wasn&amp;#39;t building my application virtual tree, a router was doing it for me. So I started to play with routing, implementing custom solutions.&lt;/p&gt;
&lt;p&gt;The first ones reflected my thoughts at the time: it was all very confusing. I slowly realized I wanted routing to be treated the same way application state changes are. Therefore, I didn&amp;#39;t need a router for React. And not only did I need a library or framework agnostic router, I needed a router spitting out route updates as data updates, and not a router defining routes as a map of paths and route handlers.&lt;/p&gt;
&lt;p&gt;I looked around and couldn&amp;#39;t find what I was after. At the time, an article mentioning &lt;a href=&quot;https://github.com/pillarjs/routington&quot;&gt;pillarjs/routington&lt;/a&gt; on DailyJS was published, I really liked the idea of a trie of routes. It mirrors your tree of components which helps building a mental model about your application and routing in general.&lt;/p&gt;
&lt;p&gt;But I wanted to use named routes with parameters and it became router5 starting point: developing a library allowing to build a tree of named routes (route-node, supported by path-parser) before developing a router. It was also a conscious effort to explode routing in specialised parts, and remove the tight coupling between routes and components. I took some inspiration from various sources, including new generation frameworks like Aurelia and Angular2 for functionalities.&lt;/p&gt;
&lt;p&gt;A few months back, shortly after ReactEurope 2015, I remember watching Christopher Chedeau saying about routers during his keynote: &lt;em&gt;&amp;quot;We have seen only one player emerge which is react-router... Is there any innovation going on? ... Actually, innovation already happened a few years ago and it happened in the Ember community...&amp;quot;.&lt;/em&gt; That fuelled my motivation and made me accelerate on router5. Once router5 was released in July, I started to focus on integration with React but lacked time and maturity. And it is only now with 1.0.0 that a solid React integration is provided with react-router5.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first barrier was to believe routing is complicated, there was an intimidation factor. Once I started to focus on specific areas and to split concerns, those initial concerns went away. One other challenge was to detrain from libraries and frameworks I was used to, and trying not to be too much influenced by existing routing solutions.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t think I had major technical challenges, I was for example able to re-use previous experiences around lexical analysis and tokenisers to build a library for parsing and matching paths. I otherwise needed to let my thoughts and knowledge mature over time. For react-router5, I had to gain experience on higher-order components to be able to propose them rather than mixins.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Version 1.0.0 of router5 is an important milestone because it totally removes side-effects from the router core. URL and browser history are now fully treated as side-effects, like DOM updates are side-effects of state updates and virtual tree re-renders. It also introduces plugins and improves on the use of middleware functions. The next step would be to start to see stuff emerge from the community.&lt;/p&gt;
&lt;p&gt;The second important aspect is data loading. I don&amp;#39;t currently have examples demonstrating how it can be achieved. Partially because there are so many ways data loading can be handled depending on how you handle state, and partially because I am careful not to introduce tight coupling where I wouldn&amp;#39;t want to see some. But I will explore GraphQL and Falcor and see if there is a need to introduce integration helpers.&lt;/p&gt;
&lt;p&gt;I would also like to improve the overall quality of the documentation I provide in order to attract more people.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The biggest trend right now is functional programming. At the component level, it means context-free and state-free components with higher-order components linking them to state and context. The second trend is reactive programming, outside components.&lt;/p&gt;
&lt;p&gt;I mentioned above having routes in a tree to help with building mental pictures, having an application state as a tree is also very beneficial in that sense, and I believe in global application states. I am currently using redux on a greenfield project and released &lt;a href=&quot;https://github.com/router5/redux-router5&quot;&gt;redux-router5&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also like Baobab a lot and follow what Christian Alfoni is doing with Cerebral, and what Andre Staltz is doing with CycleJs.&lt;/p&gt;
&lt;p&gt;For React, the future will be towards stateless, context-less, this-less functional components. It only started with 0.14.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I like what Anthony Short is doing with &lt;a href=&quot;https://github.com/dekujs/deku&quot;&gt;Deku&lt;/a&gt;. I also like the work of Simon Friis Vindum (&lt;a href=&quot;https://github.com/paldepind&quot;&gt;paldepind&lt;/a&gt; on Github).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot for the interview Thomas! I hope people will find your routing solution. To make it easier to dig in, I&amp;#39;ve compiled a set of resources below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://router5.github.io/&quot;&gt;The official site of router5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/router5/router5/tree/master/packages/react-router5&quot;&gt;router5/react-router5&lt;/a&gt; - React bindings&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://router5.github.io/docs/with-react.html#/inbox&quot;&gt;Online demo for React&lt;/a&gt; - &lt;a href=&quot;https://github.com/router5/examples/tree/master/apps/react&quot;&gt;Demo source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/router5/router5/tree/master/packages/redux-router5&quot;&gt;router5/redux-router5&lt;/a&gt; - Redux bindings&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://router5.github.io/docs/with-react-redux.html#/inbox&quot;&gt;Online demo for React and Redux&lt;/a&gt; - &lt;a href=&quot;https://github.com/router5/examples/tree/master/apps/react-redux&quot;&gt;Demo source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v1.9.5</title><id>asurvivejswebpackandreactv1952015-11-03t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-195/"></link><updated>2015-11-03T00:00:00Z</updated><content type="html">&lt;p&gt;You could say a lot has happened since &lt;a href=&quot;https://survivejs.com/blog/survivejs-19&quot;&gt;the previous release&lt;/a&gt;. &lt;a href=&quot;https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html&quot;&gt;React 0.14&lt;/a&gt; came out mere hours after it. React DnD gained 0.14 compatibility in its 2.0 release. Node.js reached &lt;a href=&quot;https://nodejs.org/en/blog/release/v5.0.0/&quot;&gt;5.0.0&lt;/a&gt; (v4 is LTS, supported for four years). And a couple of days ago &lt;a href=&quot;https://babeljs.io/blog/2015/10/29/6.0.0&quot;&gt;Babel 6.0.0&lt;/a&gt; was released. In addition &lt;a href=&quot;https://github.com/webpack/webpack/pull/861&quot;&gt;Webpack 2&lt;/a&gt; is in sight.&lt;/p&gt;
&lt;p&gt;The purpose of this release is to take some of these changes into account. Most importantly it introduces initial support for React 0.14. Babel hasn&amp;#39;t been updated to the newest version yet given some tooling the book relies upon needs to catch up. The book doesn&amp;#39;t take advantage of the function based component syntax because of the same reason. As the tooling matures, I&amp;#39;ll perform the changes needed.&lt;/p&gt;
&lt;p&gt;Due to a twist of fate I had a chance to represent &lt;a href=&quot;http://www.jsdelivr.com/&quot;&gt;jsDelivr&lt;/a&gt;, a free super-fast CDN, at &lt;a href=&quot;http://conferences.oreilly.com/oscon/open-source-eu-2015&quot;&gt;OSCON EU&lt;/a&gt;. It was a great trip and gave some new perspective on what I&amp;#39;m doing at the moment. Besides &lt;a href=&quot;http://www.nixtu.info/2015/10/thoughts-on-oscon-2015-amsterdam.html&quot;&gt;visiting OSCON&lt;/a&gt;, I did a quick visit at &lt;a href=&quot;http://www.nixtu.info/2015/10/thoughts-on-blender-conference-2015.html&quot;&gt;the Blender conference&lt;/a&gt;. It&amp;#39;s fun to break the monotony every once in a while.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-5&quot; id=&quot;book-improvements-1-9-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.9.5&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-5&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 79 commits went to &lt;code&gt;1.9.5&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.9.0...v1.9.5&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved the flow of the chapter and made it more accessible hopefully.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; configuration. Now you can set those through the env if you want.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://survivejs.com/webpack/developing/webpack-dev-server/&quot;&gt;webpack-dev-server&lt;/a&gt; alternatives.&lt;/li&gt;
&lt;li&gt;Made the code examples more complete so it&amp;#39;s harder to miss vital parts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed &lt;em&gt;babel-loader&lt;/em&gt; to version 5. If version 6 is installed, the current setup will fail as major changes are needed.&lt;/li&gt;
&lt;li&gt;Expanded code examples so it&amp;#39;s harder to miss vital parts.&lt;/li&gt;
&lt;li&gt;Changed the configuration to enable specific features instead of &lt;em&gt;stage 1&lt;/em&gt;. This will change further with Babel 6. I believe it&amp;#39;s preferable to enable specific features rather than stages as that documents the project better.&lt;/li&gt;
&lt;li&gt;Streamlined Babel discussion and removed duplication.&lt;/li&gt;
&lt;li&gt;Added React 0.14 specific bits (&lt;em&gt;react-dom&lt;/em&gt; most importantly).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned React import shortcut. Personally I favor explicit imports as then it&amp;#39;s easier to grep around. It&amp;#39;s good to be aware of alternatives, though.&lt;/li&gt;
&lt;li&gt;Linked to &lt;code&gt;debugger;&lt;/code&gt; statement documentation and cleared it up. It matters where you place it.&lt;/li&gt;
&lt;li&gt;Explained &lt;code&gt;super&lt;/code&gt; behavior in greater detail.&lt;/li&gt;
&lt;li&gt;Fixed &lt;code&gt;concat&lt;/code&gt; shortcut related typo. It&amp;#39;s better to use &lt;code&gt;[...this.state.notes, {id: uuid.v4(), task: &amp;#39;New task&amp;#39;}]&lt;/code&gt; there.&lt;/li&gt;
&lt;li&gt;Simplified &lt;em&gt;context&lt;/em&gt; discussion now that there is &lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;official documentation&lt;/a&gt; for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained &lt;code&gt;bind&lt;/code&gt; and its behavior in greater detail.&lt;/li&gt;
&lt;li&gt;Pushed decorator parts to an appendix of its own. Now the chapter is more digestible and you can check out decorators later if you want.&lt;/li&gt;
&lt;li&gt;Changed Alt to use &lt;code&gt;alt-container&lt;/code&gt; package. This makes it React 0.14 compatible.&lt;/li&gt;
&lt;li&gt;Simplified dispatching discussion to make PDF layout work better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Discussed alternative ways to deal with data modeling at introduction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;react-dnd-html5-backend&lt;/code&gt; to the project. Now React DnD backends are available through separate packages.&lt;/li&gt;
&lt;li&gt;Explained what the decorator does given this is the first place where we hit them now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added a little section about deploying to GitHub Pages. This is one of those small things that makes life simpler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgraded to 0.14. Now React DnD uses a separate package for testing.&lt;/li&gt;
&lt;li&gt;Renamed &lt;code&gt;react-testutil-query&lt;/code&gt; as &lt;code&gt;teaspoon&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot; id=&quot;typing-with-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgraded to 0.14.&lt;/li&gt;
&lt;li&gt;Fixed &lt;code&gt;Lane&lt;/code&gt; propType definition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote portions to improve flow.&lt;/li&gt;
&lt;li&gt;Dropped &lt;em&gt;bower.json&lt;/em&gt; mention.&lt;/li&gt;
&lt;li&gt;Updated &lt;em&gt;package.json&lt;/em&gt; example to match &lt;a href=&quot;https://survivejs.github.io/react-component-boilerplate/&quot;&gt;the boilerplate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added a section about publishing packages. Now the workflow should be clearer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote portions to improve flow.&lt;/li&gt;
&lt;li&gt;Replaced &lt;a href=&quot;https://github.com/hackhat/smart-css&quot;&gt;smart-css&lt;/a&gt; with &lt;a href=&quot;https://github.com/jsstyles/jss&quot;&gt;JSS&lt;/a&gt; as JSS is more current and represents an interesting alternative.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Content-wise there isn&amp;#39;t much to do. I want to get the typing chapter to a good shape. Fortunately &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt; has been developing nicely. The same goes for &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yahoo/react-dnd-touch-backend&quot;&gt;react-dnd-touch-backend&lt;/a&gt; related work is progressing. There are still some initial problems to resolve, though, so I&amp;#39;m not sure if this will make the cut.&lt;/p&gt;
&lt;p&gt;Depending on how 0.14 related tooling develops, I may do an intermediate release before &lt;code&gt;v2.0.0&lt;/code&gt;. In any case, there&amp;#39;s light at the end of the tunnel.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most amazing part of this project has been the amount of feedback I&amp;#39;ve received. I&amp;#39;ve tried to put it to good use. You can &lt;a href=&quot;mailto:info@survivejs.com&quot;&gt;contact me directly&lt;/a&gt; or through the GitHub &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;issue tracker&lt;/a&gt;. Also &lt;a href=&quot;https://gitter.im/survivejs/webpack_react&quot;&gt;Gitter&lt;/a&gt; will work.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Baobab - Data Trees with Cursors - Interview with Guillaume Plique</title><id>abaobabdatatreeswithcursorsinterviewwithguillaumeplique2015-11-02t00:00:00z</id><link href="https://survivejs.com/blog/baobab-interview/"></link><updated>2015-11-02T00:00:00Z</updated><content type="html">&lt;p&gt;I remember running into &lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt; through &lt;a href=&quot;http://www.christianalfoni.com/articles/2015_02_06_Plant-a-Baobab-tree-in-your-flux-application&quot;&gt;Christian Alfoni&amp;#39;s post about it&lt;/a&gt;. In short, it&amp;#39;s a library that provides you optionally immutable data trees with cursors. Admittedly that&amp;#39;s quite a mouthful.&lt;/p&gt;
&lt;p&gt;In order to understand the topic a little better, it&amp;#39;s probably best to let the author, Guillaume Plique, to explain his ideas behind the library.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/bf9a4ab548cfa85acdeb57dffa196a72.jpg&quot; alt=&quot;Guillaume Plique&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Guillaume Plique&lt;/figcaption&gt;&lt;/figure&gt;

  My name is Guillaume Plique and I am a full stack developer currently working in Paris for Sciences Po&amp;#39;s &lt;a href=&quot;https://github.com/medialab&quot;&gt;médialab&lt;/a&gt; which is a laboratory aiming at gathering people from social sciences, design and IT in order to develop innovative research projects.
&lt;/p&gt;

&lt;p&gt;I mostly deal with web mining, graph processing and, of course, UI development. More concretely, my job consists in helping researchers achieve their goals by designing and developing the correct tools for them.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-baobab-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-baobab-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Baobab to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-baobab-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess you could picture Baobab as a mere JavaScript object. As such, you can set its keys, and of course, nest items as you wish. If you do so, you will find yourself with what is commonly known in computer science as a tree (hence the Baobab).&lt;/p&gt;
&lt;p&gt;Now this is where the library kicks in: imagine that you can select any particular branch of the tree, because at this precise moment it might be the only part of the tree you are interested in, and subscribe to its updates.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Let&apos;s create a very simple tree:&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; tree &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token keyword keyword-new&quot; &gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; &gt;Baobab&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  user&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    surname&lt;span class=&quot;token punctuation&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Doe&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Selecting a part of the tree by creating a &quot;cursor&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; nameCursor &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; tree&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Getting the user&apos;s name:&lt;/span&gt;
tree&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// or&lt;/span&gt;
nameCursor&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Listening to the name&apos;s updates&lt;/span&gt;
nameCursor&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;update&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;The name has changed!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&amp;#39;s imagine this tree is meant to hold your whole app&amp;#39;s state (think &lt;em&gt;model&lt;/em&gt; in a typical MVC architecture) and you have, with cursors, a very straightforward way to plug UI components to it. Just make your component declare the part of the tree they are interested in and they will be re-rendered &lt;strong&gt;only&lt;/strong&gt; if required because said part of the tree was updated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// A simplistic component displaying the user&apos;s surname:&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;surname&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-return&quot; &gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;&amp;lt;span&amp;gt;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; surname &lt;span class=&quot;token operator&quot; &gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;&amp;lt;/span&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Rendering logic&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; mountNode &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;surname&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Getting the surname from our tree&lt;/span&gt;
  &lt;span class=&quot;token keyword keyword-var&quot; &gt;var&lt;/span&gt; surname &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; tree&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-get&quot; &gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;surname&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Rendering our component&lt;/span&gt;
  mountNode&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot; &gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; &gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;surname&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// Subscribing to the surname&apos;s updates&lt;/span&gt;
tree&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;surname&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; &gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;update&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token keyword keyword-function&quot; &gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// The surname has been updated, let&apos;s re-render!&lt;/span&gt;
  &lt;span class=&quot;token function&quot; &gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// This will trigger a render:&lt;/span&gt;
tree&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-set&quot; &gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;surname&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Williams&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot; &gt;// This will not:&lt;/span&gt;
tree&lt;span class=&quot;token punctuation&quot; &gt;.&lt;/span&gt;&lt;span class=&quot;token keyword keyword-set&quot; &gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot; &gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&apos;Jack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation brackets-parentheses&quot; &gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a bonus, the tree&amp;#39;s data is persistent and immutable (at least by default, but feel free to tweak this if needed through options). This means that you can easily store its history to go back and forth in time, plus you can perform efficient referential comparisons (&lt;code&gt;O(1)&lt;/code&gt;, no diffing involved) between several states of the tree in time. Comparison of states is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;previousData &lt;span class=&quot;token operator&quot; &gt;!==&lt;/span&gt; nextData
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-baobab-&quot; id=&quot;why-did-you-develop-baobab-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Baobab?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-baobab-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I really enjoy developing in &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; from time to time and I grew accustomed to &lt;a href=&quot;https://en.wikipedia.org/wiki/Zipper_%28data_structure%29&quot;&gt;zippers&lt;/a&gt; (a typical data structure you generally encounter in functional programming languages) and I am very fond of cursors such as the ones you can find in the &lt;a href=&quot;https://github.com/omcljs/om/wiki/Cursors&quot;&gt;Om&lt;/a&gt; library (a popular ClojureScript interface to &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So, basically, the idea was to port/re-use those concepts (functional programming is a place full of wonderful concepts) in raw JavaScript. But none of the existing solutions were fitting my needs.&lt;/p&gt;
&lt;p&gt;At first, I tried to create cursors for the &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;immutable-js&lt;/a&gt; library but finally abandoned because of the mere size of the files that clients would need to load and the quirks of having to use a dedicated API for both get/set operations on the data compared to what you would do with raw JavaScript objects.&lt;/p&gt;
&lt;p&gt;Then I stumbled upon React&amp;#39;s &lt;a href=&quot;https://facebook.github.io/react/docs/update.html&quot;&gt;immutability helpers&lt;/a&gt; and thought this was mainly what I wanted but needed to go further (the first versions of Baobab&amp;#39;s updates specifications were by the way very similar to the MongoDB-like objects used by the aforementioned helpers).&lt;/p&gt;
&lt;p&gt;Hence I started developing the first version of Baobab along with its React integration so I could build my UIs the way I wanted. The objectives of the library were therefore the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Baobab tree should be able to hold the centralized state of an app and this state could be as complex as any JavaScript object would (simple key/value store without nesting capabilities would not be enough, for instance).&lt;/li&gt;
&lt;li&gt;The Boabab tree should support cursors and should dispatch update events correctly so that the rendering of components bound to specific parts of the tree may be optimal.&lt;/li&gt;
&lt;li&gt;The data you read from the tree should be raw JavaScript and not some abstraction over it.&lt;/li&gt;
&lt;li&gt;The tree&amp;#39;s data should be persistent and immutable (I must thank &lt;a href=&quot;https://github.com/christianalfoni&quot;&gt;Christian Alfoni&lt;/a&gt; here for our numerous discussions on the subject when developing the first versions of the library).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main challenges concerned memory structures and optimization. Baobab really sits halfway between raw JavaScript objects and immutable data structures. Remaining as efficient as possible in this case is not the easiest thing. For instance, to ensure persistence and referential comparisons between several states of your tree, I have to shallow clone some parts of it, not the whole tree, of course, but only the updated branch in the tree.&lt;/p&gt;
&lt;p&gt;The outcome is that you do have a data structure which is really faster than &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;immutable-js&lt;/a&gt; if your objective is to read and handle raw JavaScript objects but which comes with a performance cost on writes. But this cost remain extremely negligible when handling the kind of data we usually use as our app&amp;#39;s state. But, obviously, I wouldn&amp;#39;t vouch for Baobab, for instance, if you need to store immutable lists containing billions of items and that need to be updated very frequently (i.e. every ~n ms).&lt;/p&gt;
&lt;p&gt;To be true, I am still pondering some internal optimizations of the library and the main challenge here is to be able to optimize the general cases and the cases for which the library was created while not falling into the trap of over optimizing edge cases that wouldn&amp;#39;t happen normally.&lt;/p&gt;
&lt;p&gt;Another challenge was to produce an API as streamlined as possible. What I noticed before starting to develop Baobab was that most of the zippers/cursors libraries existing in JavaScript often have a very complex and verbose API which is, in the end, very difficult to manipulate.&lt;/p&gt;
&lt;p&gt;My aim, with Baobab, was therefore to offer the simplest and most polymorphic API so that one could use it easily and without having to be an expert on lambda calculus. I hope I have reached this goal with the current API.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For now, I need to polish some things, optimize the internals of the library, fix bugs and add some more features to the library. After that, I will start trimming useless parts of the library that no one is using and maybe relocate some of its parts to external libraries (the history helpers might become an external library, for instance).&lt;/p&gt;
&lt;p&gt;What I want to avoid is to bloat the library with unnecessary features that would make it evolve into a complex and shapeless blob.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Those are great times for JavaScript as most functional principles finally start to reach web development. To me, UI componentization is key here (mainly symbolized by React and web components nowadays but not only) and will slowly make everyone realize that UIs should be, as far as possible, considered as pure functions. The centralized state of your app is therefore no less than the arguments you pass to such a function.&lt;/p&gt;
&lt;p&gt;Building UIs thusly comes with a lot of collateral advantages: UI snapshots, app state storage, time travel, easy hot-reloading etc. and it would be a loss not to embrace them. What&amp;#39;s more, functional principles, notably immutability, really make reasoning about complexity easier and make us better developers at the end.&lt;/p&gt;
&lt;p&gt;To me, the future also means new tools that should make working on front-end apps more comfortable/enjoyable and hot-loading is just the beginning. The &lt;a href=&quot;https://github.com/bhauman/devcards&quot;&gt;devcards&lt;/a&gt; concept by &lt;a href=&quot;https://github.com/bhauman&quot;&gt;Bruce Hauman&lt;/a&gt; (again, coming from ClojureScript&amp;#39;s community) is the very symbol of what we can expect to work with in a near future.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I cannot give you a specific name but I think you should definitely interview someone from the ClojureScript community. We still have a lot to learn from this community which is actively bringing functional concepts to life in modern web development.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Guillaume! In case you want to get started with Baobab, consider the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab project site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Yomguithereal/baobab-react&quot;&gt;baobab-react&lt;/a&gt; - baobab-react implements popular React patterns to make it easier to integrate with Baobab.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that &lt;a href=&quot;https://cerebraljs.com/&quot;&gt;Cerebral&lt;/a&gt; has Baobab bindings. We &lt;a href=&quot;https://survivejs.com/blog/cerebral-interview&quot;&gt;discussed the topic earlier&lt;/a&gt; with Christian.&lt;/p&gt;
</content></entry><entry><title>React Component Boilerplate v1.0</title><id>areactcomponentboilerplatev102015-10-22t00:00:00z</id><link href="https://survivejs.com/blog/react-component-boilerplate-10/"></link><updated>2015-10-22T00:00:00Z</updated><content type="html">&lt;p&gt;If you &lt;a href=&quot;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=react+boilerplate&quot;&gt;try searching GitHub for React boilerplates&lt;/a&gt;, you&amp;#39;ll find over thousand results. Nothing is harder than to agree on a standard boilerplate. As a result we have many to choose from.&lt;/p&gt;
&lt;p&gt;Given I like to author React components, such as &lt;a href=&quot;http://reactabular.js.org/&quot;&gt;Reactabular&lt;/a&gt;, I&amp;#39;ve developed a little boilerplate myself. &lt;a href=&quot;https://survivejs.github.io/react-component-boilerplate/&quot;&gt;survivejs/react-component-boilerplate&lt;/a&gt; incorporates a large amount of good practices. I&amp;#39;ll go through some of them next. I cover many of them &lt;a href=&quot;..webpack_react/authoring_libraries/&quot;&gt;at the book&lt;/a&gt; but it doesn&amp;#39;t hurt to dig deeper.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing&quot; id=&quot;testing&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I implemented my testing approach based on Cesar Andreu&amp;#39;s &lt;a href=&quot;https://github.com/cesarandreu/web-app&quot;&gt;web-app&lt;/a&gt;. It is based on &lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt; (test runner), &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; (test framework), &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; (assertions), and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; (headless browser). Code coverage reports are generated through &lt;a href=&quot;https://gotwarlost.github.io/istanbul/&quot;&gt;istanbul&lt;/a&gt; and &lt;a href=&quot;https://github.com/douglasduteil/isparta&quot;&gt;isparta&lt;/a&gt; (Babel compatibility for istanbul). Besides casual &lt;em&gt;npm test&lt;/em&gt;, there&amp;#39;s also a TDD mode (&lt;em&gt;npm run tdd&lt;/em&gt;) so you can run tests automatically while you develop.&lt;/p&gt;
&lt;p&gt;Not surprisingly this is where most of the complexity of my boilerplate lies. There&amp;#39;s not much I can do about it, though. There are times when I wish npm allowed more granularity. If I could push test dependencies to something like &lt;code&gt;testDependencies&lt;/code&gt; or define hierarchies below &lt;code&gt;devDependencies&lt;/code&gt;, that would help me to communicate the intent better.&lt;/p&gt;
&lt;p&gt;My earlier setup relied on Facebook&amp;#39;s &lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt;. Even though it&amp;#39;s easier to hook it up, I find the current approach more developer friendly. I never could get into grips with Jest&amp;#39;s auto-mocking behavior and performance was an issue even with small libraries. It is possible the situation will change but for now I&amp;#39;m sticking with Mocha myself. Keep an eye on Jest, though.&lt;/p&gt;
&lt;p&gt;Linting is handled through &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;. It&amp;#39;s an amazing tool and will contribute towards the quality and consistency of your code. Read &lt;a href=&quot;..webpack_react/linting_in_webpack/&quot;&gt;my chapter about linting&lt;/a&gt; to get into it. There&amp;#39;s &lt;em&gt;npm run lint&lt;/em&gt; and Webpack triggers it as a pre-loader. This way I get linting warnings and errors during develop. In addition I have my editor set up to show them interactively.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#handling-versions&quot; id=&quot;handling-versions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Handling Versions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#handling-versions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important part of developing libraries is actually publishing them. I&amp;#39;ve tried to keep this simple. I can get a release out simply by hitting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &lt;span class=&quot;token function&quot; &gt;npm&lt;/span&gt; version 0.2.1
$ &lt;span class=&quot;token function&quot; &gt;npm&lt;/span&gt; publish
$ &lt;span class=&quot;token function&quot; &gt;git&lt;/span&gt; push
$ &lt;span class=&quot;token function&quot; &gt;git&lt;/span&gt; push --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know this could be hidden easily behind a single command but it&amp;#39;s not too bad as I might not want to push immediately always. A tool known as &lt;a href=&quot;https://www.npmjs.com/package/semantic-release&quot;&gt;semantic-release&lt;/a&gt; could simplify the workflow further but I haven&amp;#39;t adopted it yet. &lt;/p&gt;
&lt;p&gt;To make sure I get the right build artifacts out there in the current approach, I&amp;#39;ve set up a couple of npm hooks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  ...
  &lt;span class=&quot;token property&quot; &gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
    ...
    &lt;span class=&quot;token property&quot; &gt;&quot;preversion&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;npm run test &amp;amp;&amp;amp; npm run lint &amp;amp;&amp;amp; npm run dist &amp;amp;&amp;amp; npm run dist-min &amp;amp;&amp;amp; git commit --allow-empty -am \&quot;Update dist\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot; &gt;&quot;prepublish&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;npm run dist-modules&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot; &gt;&quot;postpublish&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;npm run gh-pages &amp;amp;&amp;amp; npm run deploy-gh-pages&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot; &gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot; &gt;&quot;node lib/post_install.js&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;preversion&lt;/em&gt; hook makes sure all tests pass, lint included, generates distribution builds, and includes those into a commit. I prefer to maintain the builds this way as it&amp;#39;s convenient and I don&amp;#39;t feel they bloat the repository too much. So far the approach has worked well.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;prepublish&lt;/em&gt; hook makes sure the npm version of the package gets generated. In short, it just triggers &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; over the source and converts possible special features and JSX I&amp;#39;m using into a form that&amp;#39;s easy to consume from the Node.js world.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;postpublish&lt;/em&gt; generates the package site and pushes it to the &lt;em&gt;gh-pages&lt;/em&gt; branch. The setup is isomorphic and it will convert the project &lt;em&gt;README.md&lt;/em&gt; into a HTML structure. This was implemented to make sure the package page works even without JavaScript. There&amp;#39;s also a minor SEO benefit. And you get to say that your boilerplate is isomorphic so there&amp;#39;s that.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;postinstall&lt;/em&gt; portion is there to make sure that it is possible to consume the package through a GitHub reference (i.e., &lt;code&gt;bebraw/reactabular#hashgoeshere&lt;/code&gt;). If I detect that there isn&amp;#39;t expected directory, it will trigger &lt;em&gt;npm run dist-modules&lt;/em&gt; just like the &lt;em&gt;prepublish&lt;/em&gt; process does. The only problem is that the current solution supports only Node.js 0.12+. It would be possible to rewrite that if it becomes an issue.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#pre-push-hook&quot; id=&quot;pre-push-hook&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Pre-push Hook&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#pre-push-hook&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I have &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; set up and make it run my tests after each push, I&amp;#39;ve gone a step further. I like to catch problems before a push. That&amp;#39;s why I&amp;#39;ve set up a pre-push hook through a package known as &lt;a href=&quot;https://www.npmjs.com/package/git-prepush-hook&quot;&gt;git-prepush-hook&lt;/a&gt;. It writes the Git configuration to your repository when you install it. You can control its behavior through &lt;em&gt;package.json&lt;/em&gt; by a declaration like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;{&lt;/span&gt;
  ...
  &lt;span class=&quot;token property&quot; &gt;&quot;pre-push&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot; &gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation brackets-square&quot; &gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot; &gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; &gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot; &gt;&quot;lint&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation brackets-square&quot; &gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation brackets-braces&quot; &gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You tell it what npm scripts to execute and it does that before a push. The biggest advantage of doing this is that it allows you to fix potential issues before they end up in public consumption. You can do the fix and then make it look as if you didn&amp;#39;t make one through an interactive rebase (&lt;code&gt;git rebase -i&lt;/code&gt;). It&amp;#39;s one of those Git features that can help to keep your version history sane.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#other-features&quot; id=&quot;other-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Other Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#other-features&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s of course &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;React Transform&lt;/a&gt; based hot loading. The Webpack configuration is a little elaborate but I&amp;#39;ve done my best to keep it readable. You can find some usual React related optimizations there (mainly env). The isomorphic portion takes some code as well.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been thinking of pushing some of the common parts to a library of its own to ease the maintenance effort. This is the way &lt;a href=&quot;https://www.npmjs.com/package/hjs-webpack&quot;&gt;hjs-webpack&lt;/a&gt; does it. The problem is that a boilerplate is a snapshot always. A library based approach would help in this regard. Most importantly, it would help to cut down the amount of dependencies.&lt;/p&gt;
&lt;p&gt;I believe it could be valuable to adopt a tool such as &lt;a href=&quot;https://commitizen.github.io/cz-cli/&quot;&gt;commitizen&lt;/a&gt;. That would make it easier to write meaningful Git commit messages. Even better, the tool can generate change logs for releases.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you&amp;#39;ll find my little boilerplate useful. There might be some ideas there you could adopt for your own. Boilerplates are a little problematic maintenance-wise, but as mentioned, it might be possible to alleviate that by pushing the problem elsewhere.&lt;/p&gt;
&lt;p&gt;Of course the situation is far worse if you don&amp;#39;t have a boilerplate to begin with. Even a small project tends to require quite a few dependencies before you can become productive with it.&lt;/p&gt;
</content></entry><entry><title>React-Bootstrap - Bootstrap Rebuilt for React - Interview with Matt Smith</title><id>areactbootstrapbootstraprebuiltforreactinterviewwithmattsmith2015-10-13t00:00:00z</id><link href="https://survivejs.com/blog/react-bootstrap-interview/"></link><updated>2015-10-13T00:00:00Z</updated><content type="html">&lt;p&gt;&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; is easily one of the most popular CSS frameworks out there. Beyond grids and basic layout utilities, it provides a nice set of widgets to use. Even though you can use the CSS with React, this may become cumbersome quite soon. You will likely end up wrapping portions of Bootstrap within components of your own.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://react-bootstrap.github.io/&quot;&gt;React-Bootstrap&lt;/a&gt; is a project that solves this problem for you. To understand the project better, I&amp;#39;m interviewing Matt Smith, one of the authors.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot; style=&quot;float: right&quot;&gt;
    &lt;img src=&quot;https://www.gravatar.com/avatar/2edcba3f73592de39dc2e83826e22fe2?s=200&quot; alt=&quot;Matt Smith&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
  &lt;/span&gt;

I have been writing software since I was in High School back in the 90s. I wasn&amp;#39;t able to land my first real job though until the mid 2000s as a QA Engineer. Automating the UI of desktop applications I didn&amp;#39;t write was not what I&amp;#39;d call fun, though the learning experience was immeasurable.
&lt;/p&gt;

&lt;p&gt;Shortly after that I was serving in the United States Marine Corps Reserve which required a break from coding to serve a 1 year tour of duty in Al Ramadi, Iraq. Soon after my return I was able to find a new job where I built a number of internal web applications for my employer.&lt;/p&gt;
&lt;p&gt;It was there that I first tested out the waters of OSS Development. I mainly stayed in the realm of the C# or .Net community until about two years ago when I started branching out. Writing well crafted quality software is my passion.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-bootstrap-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-bootstrap-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe React-Bootstrap to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-react-bootstrap-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React-Bootstrap is a collection of React Components that are primarily designed to work with
Bootstrap CSS classes. Bootstrap does provide some JavaScript but it&amp;#39;s tightly coupled to jQuery which does not play well with React idioms. We aim to provide parity with Bootstrap CSS in functionality and styling, though we differ in the JavaScript API.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-bootstrap-&quot; id=&quot;why-did-you-develop-react-bootstrap-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop React-Bootstrap?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-react-bootstrap-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&amp;#39;t that credit goes to &lt;a href=&quot;https://github.com/stevoland&quot;&gt;Stephen J. Collings (stevoland)&lt;/a&gt; and &lt;a href=&quot;https://github.com/pieterv&quot;&gt;Pieter Vanderwerff (pieterv)&lt;/a&gt;. Though when I came into the picture active development on React-Bootstrap wasn&amp;#39;t really going anywhere. From what I could tell it had been abandoned, though the number of issues and pull requests kept growing.&lt;/p&gt;
&lt;p&gt;The design team at our dev shop has been using a slightly modified version of Bootstrap for years, and when we started moving to React we found React-Bootstrap. We were using Angular and didn&amp;#39;t use a core UI library leaving us to implement a lot of the Bootstrap JavaScript ourselves in an Angular world. We didn&amp;#39;t want to make that mistake again so we grabbed a hold of React-Bootstrap pretty quick.&lt;/p&gt;
&lt;p&gt;At the same time that we started this transition to React, we were also going after Section 508 and WCAG 2.0 AA Compliance. We were continually finding that the React-Bootstrap components are not compliant so we wanted to contribute back.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-react-bootstrap-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-react-bootstrap-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing React-Bootstrap?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-kind-of-challenges-have-you-experienced-while-developing-react-bootstrap-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier, the React-Bootstrap project felt like a dead project around February/March of 2015. The release up on npm at that time didn&amp;#39;t even work nor had it for a few months. I had submitted a PR or two prior to that time so I reached out to Stephen and Pieter to ask if there was anything I could do to help. They were kind enough to include me in the organization and granted me push access to npm.&lt;/p&gt;
&lt;p&gt;The npm release was broken because there was a tedious manual process in place to build the JSX code and manually push that to the Bower repo and Docs repo. Most of my background is in DevOps build engineering so this was something that I knew I could fix. I moved the project from the old JSX Transformer tools and Browserify to Babel and Webpack. This made the Bower release and Docs site easier to build and develop against. Then I automated the push to those separate repos on GitHub. Common tools for this with Grunt and Gulp just weren&amp;#39;t fast enough for me, so I rolled our own tailored experience.&lt;/p&gt;
&lt;p&gt;During this time I was also working to triage issues and review/accept pull requests from the community. On most issues I was quick to say that I&amp;#39;d accept a pull request, which many people did do. This presented the next biggest problem, which was around the Firehose of issues and pull requests that just kept coming in.&lt;/p&gt;
&lt;p&gt;It was at this time that me employer sent me to the &lt;a href=&quot;http://dotnetfringe.org/&quot;&gt;.Net Fringe&lt;/a&gt;
conference. At my dev shop we have been active contributors to OSS in the .Net ecosystem for years, and this was a conference devoted to that community. While at that conference a large number of the sessions were mainly focused on breaking down the barriers that folks encounter when contributing to OSS projects. The basic undertone I walked away from that was that we as an open source community need to reach out to those that are testing out the OSS waters and welcome, no pull, them in with a warm embrace.&lt;/p&gt;
&lt;p&gt;I was already feeling overwhelmed with the number of issues and pull requests that were coming in on React-Bootstrap and my colleagues in the office didn&amp;#39;t have the bandwidth to really help. Some of them have tried, but viewed it as a second class citizen to our development efforts. I can&amp;#39;t entirely blame them for this since most of our code was still in Angular. So there was a huge cost benefit deficit competing for attention with the newer features we were getting asked to produce by the business.&lt;/p&gt;
&lt;p&gt;It was at this time that I reached out to the more frequent pull request authors that showed attention to testing and documentation with an invite to join the organization. I worked on improving the Contributing Guide and Maintaining Guide to stand as a governance for this growing team. In a sense I didn&amp;#39;t want to see the project cease progression again because of my own inabilities to keep up. I also knew that I would be moving off our front-end sites in the coming months to head up a DevOps team.&lt;/p&gt;
&lt;p&gt;Many folks did accept the invite to join the organization and we haven&amp;#39;t really heard much from them since. Though there were others that did accept the invite and are now thriving contributors. In fact I&amp;#39;d say that &lt;a href=&quot;https://github.com/taion&quot;&gt;Jimmy Jia (taion)&lt;/a&gt; and &lt;a href=&quot;https://github.com/jquense&quot;&gt;Jason Quense (jquense)&lt;/a&gt; now stand as the current technical leads with &lt;a href=&quot;https://github.com/AlexKVal&quot;&gt;Alexander Shemetovsky (AlexKVal)&lt;/a&gt; as the bulldog that just keeps fixing everything he can as fast as he can.&lt;/p&gt;
&lt;p&gt;I can say that my goal to build a community that worked together to continue building the project was a success that continues to refine the project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React-Bootstrap still has some work to achieve Section 508 and WCAG 2.0 AA compliance, at which point we&amp;#39;ll declare a 1.0 release. We&amp;#39;ll need to keep up with React and Bootstrap to keep the project up to date with the latest features of both projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The future of React is undeniably bright. I have full confidence in the core community involved in defining the best practices for building these front-end frameworks and tools.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jimmy and Jason would have more current insight to the affairs of React-Bootstrap.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot for the interview Matt! I hope React-Bootstrap will have a bright future and more people will find the project. There&amp;#39;s a &lt;a href=&quot;https://react-bootstrap.github.io/getting-started/introduction&quot;&gt;getting started guide&lt;/a&gt; for those interested. Also check out &lt;a href=&quot;https://react-bootstrap.github.io/components/alerts/&quot;&gt;the component listing&lt;/a&gt; to get a better idea of the capabilities of the library.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v1.9.0</title><id>asurvivejswebpackandreactv1902015-10-07t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-19/"></link><updated>2015-10-07T00:00:00Z</updated><content type="html">&lt;p&gt;Compared to &lt;a href=&quot;https://survivejs.com/blog/survivejs-18&quot;&gt;1.8.0&lt;/a&gt;, &lt;code&gt;1.9.0&lt;/code&gt; can be seen as a more conservative release. There are plenty of smaller fixes and even some new content too. I decided to fix the chapter structure to the current. I rather provide less but better content. This also helps to keep the cost of a paper version down.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#towards-2-0-0&quot; id=&quot;towards-2-0-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Towards &lt;code&gt;2.0.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#towards-2-0-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides integrating changes (thanks Steve!) and ideas, I gave &lt;code&gt;2.0.0&lt;/code&gt; some proper thought. With &lt;code&gt;2.0.0&lt;/code&gt; I will finally try to get the book to Amazon while getting it printed through them. This means I&amp;#39;ll need to get a proper ISBN for the book. Only smaller tweaks, such as grammar fixes, are allowed after this. That&amp;#39;s a little problematic.&lt;/p&gt;
&lt;p&gt;The way I see it, the smartest move would be to treat &lt;code&gt;2.0.0&lt;/code&gt; as an Amazon snapshot while developing the book further at Leanpub (&lt;code&gt;2.1.0&lt;/code&gt; and so on). Once &lt;code&gt;3.0.0&lt;/code&gt; is reached, Amazon would get a new snapshot. I don&amp;#39;t expect &lt;code&gt;3.0.0&lt;/code&gt; to happen anytime soon, though, as that wouldn&amp;#39;t be fair to the Amazon customers that bought &lt;code&gt;2.0.0&lt;/code&gt;. Perhaps a yearly cycle would work. That would mean a minor release per month.&lt;/p&gt;
&lt;p&gt;In order to keep it fair to potential Amazon clients, I&amp;#39;m willing to provide the Leanpub version for them using a heavily discounted upgrade cost. I&amp;#39;m a still fuzzy on the exact details but there has to be a neat transition path in place.&lt;/p&gt;
&lt;p&gt;Getting the book printed is a huge step for me personally. It&amp;#39;s great unknown but you don&amp;#39;t get ahead unless you put in the effort. At the very least I will get something for my bookshelf if nothing else. The printing costs seem adequate given the current scope of the book. The print version will likely have to be black and white to keep the cost bearable but apart from that we should be good.&lt;/p&gt;
&lt;p&gt;Ideally the book will continue to provide some level of income as that enables me to keep developing the content and technology around it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-0&quot; id=&quot;book-improvements-1-9-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.9.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-1-9-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 134 commits went to &lt;code&gt;1.9.0&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.8.0...v1.9.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#general-fixes&quot; id=&quot;general-fixes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;General Fixes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#general-fixes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Grammar was improved overall. Big thanks again Steve!&lt;/li&gt;
&lt;li&gt;Move from &lt;code&gt;&amp;lt;ul className=&amp;#39;names&amp;#39;&amp;gt;&lt;/code&gt; format to &lt;code&gt;&amp;lt;ul className=&amp;quot;names&amp;quot;&amp;gt;&lt;/code&gt;. This is the format that official React documentation uses so it&amp;#39;s better to use the same here as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linked to alternative implementations of Kanban. See &lt;a href=&quot;https://github.com/survivejs-demos/mobx-demo&quot;&gt;MobX&lt;/a&gt;, &lt;a href=&quot;https://github.com/survivejs-demos/redux-demo&quot;&gt;Redux&lt;/a&gt;, and &lt;a href=&quot;https://github.com/survivejs-demos/cerebral-demo&quot;&gt;Cerebral/Baobab&lt;/a&gt; demos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained in more detail what Webpack actually does.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Noted that &lt;em&gt;css-loader&lt;/em&gt; requires some tweaking when using Node 0.10. See &lt;a href=&quot;https://github.com/webpack/css-loader/issues/144&quot;&gt;the issue&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;Dropped &lt;em&gt;node-libs-browser&lt;/em&gt; from project dependencies. Webpack depends on it directly now.&lt;/li&gt;
&lt;li&gt;Explained why &lt;em&gt;html-webpack-plugin&lt;/em&gt; is used.&lt;/li&gt;
&lt;li&gt;Pushed configuration paths to higher level. This way it&amp;#39;s easier to tweak them to fit your personal projects.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/open-browser-webpack-plugin&quot;&gt;open-browser-webpack-plugin&lt;/a&gt;. There are small plugins like this that save time once you have set them up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;em&gt;babel-core&lt;/em&gt; as &lt;em&gt;babel-loader&lt;/em&gt; depends on that directly.&lt;/li&gt;
&lt;li&gt;Replaced deprecated &lt;em&gt;react-hot-loader&lt;/em&gt; with a &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/a&gt; based solution. Even though it takes more configuration, it&amp;#39;s more powerful. I recommend moving your projects to it if you are using &lt;em&gt;react-hot-loader&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;code&gt;debugger;&lt;/code&gt; statement. I realized this is a feature not many people are aware of. It&amp;#39;s good to have it mentioned as a tip.&lt;/li&gt;
&lt;li&gt;Mentioned that spread operator can be used to replace &lt;code&gt;concat&lt;/code&gt;. I.e., instead of &lt;code&gt;this.state.notes.concat({id: uuid.v4(), task: &amp;#39;New task&amp;#39;})&lt;/code&gt; you could do &lt;code&gt;[...this.state.notes, [{id: uuid.v4(), task: &amp;#39;New task&amp;#39;}]]&lt;/code&gt;. You see this particularly in Redux examples so it&amp;#39;s good to know.&lt;/li&gt;
&lt;li&gt;Explained why we have to retain the state at &lt;code&gt;App&lt;/code&gt; level. We&amp;#39;ll push that to a nicer place in the following chapter of course.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&quot;https://github.com/casesandberg/react-context/&quot;&gt;feature detection&lt;/a&gt; example as that showcases well when to use a context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on Flux explanation. Now we start from a unidirectional flow and show how that becomes a cycle in the architecture.&lt;/li&gt;
&lt;li&gt;Noted that &lt;code&gt;{notes}&lt;/code&gt; is analogous to &lt;code&gt;{notes: notes}&lt;/code&gt; and linked to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer&quot;&gt;property shorthand&lt;/a&gt; documentation. We are using this shorthand a lot so it&amp;#39;s worth discussing it.&lt;/li&gt;
&lt;li&gt;Explained by I don&amp;#39;t use &lt;code&gt;splice&lt;/code&gt; although it would work here.&lt;/li&gt;
&lt;li&gt;Dropped matryoshka image. That was a poor analogy. Better to save the space for something else.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Passed Lane data through &lt;code&gt;lane&lt;/code&gt; prop instead of object spreading. It is easier to understand what&amp;#39;s going on in this solution.&lt;/li&gt;
&lt;li&gt;Explained why Object rest spread syntax is used when it&amp;#39;s used.&lt;/li&gt;
&lt;li&gt;Explained why &lt;code&gt;waitFor&lt;/code&gt; is used in a clearer manner.&lt;/li&gt;
&lt;li&gt;Fixed the ordering between &lt;code&gt;LaneActions.detachFromLane&lt;/code&gt; and &lt;code&gt;NoteActions.delete&lt;/code&gt;. It is a very good idea to detach a note from a lane before actually removing it from the system. Else you might end up trying to render notes that don&amp;#39;t exist.&lt;/li&gt;
&lt;li&gt;Noted that it would be a very good idea to get rid of notes associated to a lane when a lane is removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Showed how to indicate where to move a note while you are moving. This improves user experience somewhat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified JSX related Webpack configuration. This was possible because &lt;em&gt;react-hot-loader&lt;/em&gt; was dropped.&lt;/li&gt;
&lt;li&gt;Moved cache invalidation hashes back to filenames. I&amp;#39;m going to take &lt;a href=&quot;http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/&quot;&gt;Steve Souders&lt;/a&gt;&amp;#39; word on it.&lt;/li&gt;
&lt;li&gt;Dropped the section about isomorphic rendering. That felt like a kludge and you would never do it like this in a real world configuration. As a result I removed it from the book. It is a far better idea for me to discuss the topic in a blog post of its own later on.&lt;/li&gt;
&lt;li&gt;Explained how to analyze your Webpack build statistics using &lt;a href=&quot;http://webpack.github.io/analyse/&quot;&gt;the online tool&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote the introduction and added testing pyramid to get better into the topic.&lt;/li&gt;
&lt;li&gt;Updated configuration to work with the adjusted setup (no &lt;em&gt;react-hot-loader&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Linked to more associated tooling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot; id=&quot;typing-with-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#typing-with-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed &lt;code&gt;Lane&lt;/code&gt; related &lt;code&gt;propTypes&lt;/code&gt;. There were a couple of glitches to fix.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained why &lt;code&gt;preLoaders&lt;/code&gt; is used for linting. These get executed first. If a linter fails, you&amp;#39;ll want to know about it before doing anything else.&lt;/li&gt;
&lt;li&gt;Explained how to enable specific ES6 features with ESLint. Of course as we go through &lt;em&gt;babel-eslint&lt;/em&gt;, we can skip that but it&amp;#39;s good to know.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained how &lt;code&gt;style-loader&lt;/code&gt; and &lt;code&gt;css-loader&lt;/code&gt; work in tandem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I originally intended to have this release to include React 0.14 related fixes. Rather than to keep you waiting, I decided to push those to &lt;code&gt;2.0.0&lt;/code&gt;. An intermediate &lt;code&gt;1.9.5&lt;/code&gt; might be possible but we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;The book content is fixed and I&amp;#39;ll perform tweaks only to the current content. I&amp;#39;m most interested in expanding the sections about Flow and TypeScript. Even though Flow has been developing fast, there are still some issues I have to wrestle with.&lt;/p&gt;
&lt;p&gt;I also have to look into integrating &lt;a href=&quot;https://github.com/yahoo/react-dnd-touch-backend&quot;&gt;react-dnd-touch-backend&lt;/a&gt;. I&amp;#39;ve done some preliminary work on that and hope to get included it in &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have a variety of blog content coming up. It&amp;#39;s the perfect place for me to play with ideas in a more freeform manner. As I stated earlier, getting that Amazon release done is the biggest hurdle for me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Cerebral - Expressing Application Flow with Signals - Interview with Christian Alfoni</title><id>acerebralexpressingapplicationflowwithsignalsinterviewwithchristianalfoni2015-10-05t00:00:00z</id><link href="https://survivejs.com/blog/cerebral-interview/"></link><updated>2015-10-05T00:00:00Z</updated><content type="html">&lt;p&gt;I ran into &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian Alfoni&lt;/a&gt; through his original blog early this year (2015). He had written a nice post about Webpack. That led me to provide a several suggestions and I realized we might want to combine some of our knowledge in the form of a &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;React/Webpack cookbook&lt;/a&gt;. Eventually the development led to this book so I suppose you can blame Christian for that.&lt;/p&gt;
&lt;p&gt;While I&amp;#39;ve been plugging away with the book, Christian has been busy developing cool technology. This includes &lt;a href=&quot;https://github.com/christianalfoni/EmptyBox&quot;&gt;EmptyBox&lt;/a&gt;, a static site generator, &lt;a href=&quot;https://github.com/christianalfoni/formsy-react&quot;&gt;formsy-react&lt;/a&gt;, a form input builder and validator for React, and of course &lt;a href=&quot;https://cerebraljs.com/&quot;&gt;Cerebral&lt;/a&gt;, the primary topic of our interview. You could say it puts some brains to React and Angular development. We&amp;#39;ll also discuss &lt;a href=&quot;https://github.com/christianalfoni/addressbar&quot;&gt;addressbar&lt;/a&gt;, a routing solution with a twist.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot; id=&quot;how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How did you discover Webpack and React? Can you provide a bit of background?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/a3ec41be3805962e3c90ccdbbb8e32fb.jpg&quot; alt=&quot;Christian Alfoni&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Christian Alfoni&lt;/figcaption&gt;&lt;/figure&gt;

  I had saved up some money and chose to quit my job the summer of last year (2014). I wanted to spend 6 months on my own researching web technologies and play around with projects. I feel kinda lucky that way, as obsessed I am with JavaScript and building things I now got the chance to level up. At my previous employer I left a Backbone app with a Grunt workflow. Before that it was all vanilla JavaScript… crazy, but learned a lot!
&lt;/p&gt;

&lt;p&gt;So I suppose my timing was good. I started my expedition by diving into Angular, but now both React and Flux started to get some solid ground. Not being too opinionated by Angular I instantly saw the benefits of the “one way flow” of Flux. Now I had a strong concept of storing any kind of state, it being from the server or produced on the client. This was a huge issue at my previous employer, sharing client side state between views and keeping it in sync.&lt;/p&gt;
&lt;p&gt;At the same time, I was exploring Gulp and saw this video where Pete Hunt introduced Webpack. As I had time on my hands, I decided to make an overview of different build tools and write an article on it. It got some attention and the feedback gave me the confidence to share more knowledge. Other developers were actually interested in what I had to say. It was a big eye opener!&lt;/p&gt;
&lt;p&gt;When comparing the build tools I realized that Webpack was awesome, but had one big issue. It was hard to understand and configure. With my new earned confidence in sharing knowledge I wrote a new article. This one got even more attention, also by you Juho. It is amazing to see all the work you have done after that little comment. You have done fantastic work!&lt;/p&gt;
&lt;p&gt;Anyways, around this time I got a job offer and since I soon needed income I grabbed the opportunity. My employer wanted to build a React framework for their huge application portfolio. I suggested we use Webpack to handle all the packaging, use ES6 etc. It has been a great success and that led to the last article on &lt;a href=&quot;http://www.christianalfoni.com/articles/2015_04_19_The-ultimate-webpack-setup&quot;&gt;The ultimate Webpack setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I often get questions about combining Webpack with other build tools like Grunt or Gulp. I have never been in a situation where that is necessary. Webpack is just a brilliant piece of engineering and it makes my day so much easier. Other projects like &lt;a href=&quot;http://jspm.io/&quot;&gt;JSPM&lt;/a&gt; are interesting though. We are moving towards HTTP2 and bundling files does not fit in with that technology. It will be interesting to see how this pans out! &lt;a href=&quot;https://mattwilcox.net/web-development/http2-for-front-end-web-developers&quot;&gt;More info&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-cerebral-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot; id=&quot;why-did-you-develop-cerebral-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Cerebral? How would you describe it to someone who has never heard of it? What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-cerebral-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though Flux made a lot of sense to me as a concept, the implementation details did not. In my opinion it is a bit verbose and many stores gave me the same problems that Flux fixed in my view layer. Like circular dependencies and just understanding the flow of state changes.&lt;/p&gt;
&lt;p&gt;Then I found &lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt;, a single state tree. It fixed all the issues I had with the initial Flux implementation and kept the concept of “one way flow”. All my state was now in one place. No dispatcher and no splitting state into different “containers”. I wrote &lt;a href=&quot;http://www.christianalfoni.com/articles/2015_02_06_Plant-a-Baobab-tree-in-your-flux-application&quot;&gt;an article on this too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now I was actually pretty happy about developing applications. With React I got a great concept for composing my view layer. With Baobab I got a great concept for storing all my state in a single entity. But there was still a problem… the stuff that happens &amp;quot;in between&amp;quot;. The layer that actually produces the state.&lt;/p&gt;
&lt;p&gt;As this was bugging me I got some “a-ha” moments. One &amp;quot;a-ha&amp;quot; was a video on “turning the database inside out” and talking to a backend colleague about it. I also got an &amp;quot;a-ha&amp;quot; watching a clip on &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; with its time travel debugging. Most importantly though, I got my head around why immutability is so great. One day everything kinda merged into one big “A-HA” moment.&lt;/p&gt;
&lt;p&gt;No matter what you call your architecture it has three main layers. A layer to produce UI and get user input, a layer to handle this input and produce state and a layer to store the state. I wanted to make these three layers as clear and simple as possible. So I thought a lot about what this state changing layer looks like today. How do we actually express handling these inputs from the view layer and update our state?&lt;/p&gt;
&lt;p&gt;What I realized is that we often do this with a single function. We get some user input and call a function that does one or more state updates. This is fine if you just want to increase/decrease a counter. It is not so nice if you want to handle more than one HTTP response and do other conditionals.&lt;/p&gt;
&lt;p&gt;It is difficult to understand the flow of an application reading implementation details. So I wanted to express the state changes of my app without having to dive into implementation details. I also wanted to be able to analyze this flow to create developer tools. Reading your &lt;a href=&quot;https://survivejs.com/blog/redux-interview&quot;&gt;interview with Dan Abramov&lt;/a&gt; I can totally relate to how Redux got started. With Cerebral it is the signals the makes this possible.&lt;/p&gt;
&lt;p&gt;Signals is a way to express state changes in your application using pure functions. These pure functions, called actions, are composed into a signal. This makes a signal declarative. It is almost like reading a sentence and it can be complex without being hard to read and reason about. But it is also functional as these actions are just functions. So for example factories is an important part of expressing your state flow.&lt;/p&gt;
&lt;p&gt;As signals are arrays of actions you can also use the new spread operator. This allows you to compose action chains together with ease. So a signal never calls or depends on other signals, you just reuse actions. “Composition over inheritance”.&lt;/p&gt;
&lt;p&gt;So Cerebral is this layer between your state storing and UI. It handles the complex part of your application, state changing flow. It is a single powerful entity representing the layer between state and ui, as displayed here:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/d2543ad75e5e1f64596bee7ffcbdc4ad.png&quot; alt=&quot;Cerebral is between the state and the UI&quot; class=&quot;center-image&quot; width=&quot;425&quot; height=&quot;510&quot; /&gt;&lt;figcaption&gt;Cerebral is between the state and the UI&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Running the debugger next to the UI gives you insight into all these three layers. The UI, the state changing flow and the current state of the application. It is pretty cool!
About the future of Cerebral. I have been working on a project for a year now.&lt;/p&gt;
&lt;p&gt;When the Cerebral idea came up, I got a breakthrough. I decided to apply for some funding and what do you know, I got it! From October 1st I will spend most of my time on this project and Cerebral. For Cerebral this means cleaning up any bugs/API and make it production ready.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-describe-what-addressbar-https-github-com-christianalfoni-addressbar-is-about-given-there-are-so-many-routers-already-why-to-develop-yet-another-one-&quot; id=&quot;can-you-describe-what-addressbar-https-github-com-christianalfoni-addressbar-is-about-given-there-are-so-many-routers-already-why-to-develop-yet-another-one-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you describe what &lt;a href=&quot;https://github.com/christianalfoni/addressbar&quot;&gt;addressbar&lt;/a&gt; is about? Given there are so many routers already, why to develop yet another one?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-describe-what-addressbar-https-github-com-christianalfoni-addressbar-is-about-given-there-are-so-many-routers-already-why-to-develop-yet-another-one-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So routers have two main concepts. Listen to url changes and act upon url changes. Different routers has their own implementation of how they listen to url changes. They also have different and opinionated ways of acting upon those changes. Some routers just triggers a function related to a url change, like &lt;a href=&quot;https://visionmedia.github.io/page.js/&quot;&gt;Page JS&lt;/a&gt;. Most of them goes way beyond this though. Often routers dive into the view layer of your application and decides what views to display.&lt;/p&gt;
&lt;p&gt;As applications are complex you often want to load some data before doing the actual change in the view. Your router now fetches data for you to achieve this. But this data is something you want to store so now your router also needs a relationship with your state store. Some of them also do transitions in the UI. In my opinion this increases complexity as you already have concepts for this. View updates, ajax requests, transitions etc. are things you already do in the general state changing flow of your app.&lt;/p&gt;
&lt;p&gt;Inspired by React I got this idea about the addressbar not being this magical URL thing. Just a plain input you could listen to and change the value of. If that was the case I think a lot of developers would have a much lower threshold to experiment with urls. Create their own custom routing logic. Something that makes sense for the specific application.&lt;/p&gt;
&lt;p&gt;As a result I built a project called &lt;a href=&quot;https://github.com/christianalfoni/addressbar&quot;&gt;addressbar&lt;/a&gt;. It just exposes the addressbar as an input you can listen to. You can also prevent default behaviour on it and change the value of it. Now you can focus on the important part, creating the routing logic.&lt;/p&gt;
&lt;p&gt;So one way of doing routing is to map the url to a url definition which in turn triggers a function. With help from a couple of guys on the Cerebral gitter channel we created the project &lt;a href=&quot;https://github.com/christianalfoni/url-mapper&quot;&gt;url-mapper&lt;/a&gt;. Combine “addressbar” with “url-mapper” and you have yourself a typical router. Much like the Page JS approach. But I think there are many other approaches to handling URL changes.&lt;/p&gt;
&lt;p&gt;An example of this is the Cerebral Router. It uses both “addressbar” and “url-mapper” to bind URLs to signals. This means that you can trigger signals in your app and the bound url will update in the addressbar. If you trigger the url from a hyperlink or in the addressbar that will result in the same behaviour. So it works both ways.&lt;/p&gt;
&lt;p&gt;You do not have to do a typical route change to update the url, it is just a side-effect of running a signal. This gives you great freedom in developing your application. You just think about these signals that defines the state changing flow of your app. You can actually bring in URLs into your app later if you wanted to. This might not make complete sense just reading about it, but I have a &lt;a href=&quot;https://www.youtube.com/watch?v=PZjXPziD9Cw&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So to summarize. I think it would benefit us to think about routing differently. When I read discussions on routing they often tend to be “How can we make the router change the views in the app?”. I might be a bit controversial, but I think that is the wrong approach.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say you have an “isLoading” state.  You use that state in your views to toggle a “loading-indication”. Why can not the url “/messages” set a state called “currentPage=’messages’”? You would then use the exact same approach to render the correct page. It is just less complex in my opinion because now a url change is a state change like any other. No special logic and you can go about it however you want.&lt;/p&gt;
&lt;p&gt;I am going a bit off trail here! What I want to emphasize here is that addressbar lowers the threshold for developers. The threshold to explore urls in new ways. Creating new experiences and evolve urls to mean something more. Not just “what view to display”, but for example “what signal to trigger” like the Cerebral-Router.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobx-https-mobxjs-github-io-mobx-or-redux-http-redux-js-org-&quot; id=&quot;at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobx-https-mobxjs-github-io-mobx-or-redux-http-redux-js-org-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;At the moment a lot of architecture related innovation seems to happen. What do you think of alternative approaches such as &lt;a href=&quot;https://mobxjs.github.io/mobx/&quot;&gt;MobX&lt;/a&gt; or &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobx-https-mobxjs-github-io-mobx-or-redux-http-redux-js-org-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I think a lot of innovation lately has been improving stores in Flux. It can be a bit difficult to reason about them. Projects like MobX and Redux do exactly this. They make it easier to reason about how to store state. It is amazing to see how much attention Redux has gotten. The community is enthusiastic and contributes a lot with their own ideas. Kudos to Dan for inspiring so many developers and handling it so well!&lt;/p&gt;
&lt;p&gt;Personally I have not dived into MobX and Redux. For me it was Baobab that made the difference, which had an earlier release. It is a single immutable state tree storing all the state of your application.&lt;/p&gt;
&lt;p&gt;So both Redux and MobX make Flux simpler. That said, I think there are still challenges to tackle. I am going to compare these two projects to Cerebral, but only to highlight what Cerebral does. I am not saying that any of them are bad.&lt;/p&gt;
&lt;p&gt;Both the solutions mentioned here hides state from the other state entities. It being reducers or stores. Take note that Redux does indeed produce a single state tree by combining its reducers. But inside a reducer, you do not have access to the whole tree as far as I know.&lt;/p&gt;
&lt;p&gt;So many entities to store state is in my experience a challenge. Large applications often need to know about state in other stores/reducers when producing new state. This is often related to relational data, like looking up state by id. I do not think an approach where you isolate different parts of your state is the way to go.&lt;/p&gt;
&lt;p&gt;You risk creating relationships which can be hard to reason about and even create. If you just have one entity, there is no relationship, which makes it easier to reason about and scale your app. This is what I like about &lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt;. It is impossible to go wrong in how you structure your state.&lt;/p&gt;
&lt;p&gt;But Baobab does not have any concepts for producing state. In Redux you produce state in the reducer itself or in combination with an async action creator. MobX does this inside the stores. What these two have in common, like many others, is that producing a state change is expressed with a single function. You have to read the implementation details of this function to understand it. This is easy when you want to add a todo or change a counter, but our applications are more complex than that.&lt;/p&gt;
&lt;p&gt;I think the concept of expressing a “state changing flow” is where we have to go next. Cerebral is a contribution to this. Libraries like &lt;a href=&quot;http://cycle.js.org/&quot;&gt;Cycle.js&lt;/a&gt; uses FRP concepts to express this flow. I thought about this for Cerebral, but to me it is hard to reason about complex flows using FRP.&lt;/p&gt;
&lt;p&gt;RxJS has so many methods and most examples converts input to a single state change. App flows are a lot more complex than that. HTTP responses, conditionals, multiple state changes, relational data, optimistic updates etc. I just really really want it declared as one flow.&lt;/p&gt;
&lt;p&gt;But FRP in JavaScript is still in its early adoption and I am not trying to state FRP as a bad thing at all. I just think its current form is too difficult to use for the common JavaScript developer. André Staltz is doing fantastic work with Cycle.js. Making FRP more developer friendly for application development. Evan Czaplicki, creator of Elm, is also doing a tremendous effort. I think both Dan and André will agree that Evan has been a great inspiration for our contributions.&lt;/p&gt;
&lt;p&gt;I just want to say that I think it is great that everybody is so open to sharing what they build. Also sharing theories on how we can make development more fun than painful. What works and makes sense to people is what inspires the next step of this evolution.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What developers miss out on with React is that it is not related to templating at all. React is not a templating engine, it is a rendering engine. It has a lot more in common with game rendering engines than Handlebars etc. This makes React able to render to different targets in lightning speed. In the browser that would be the DOM, but it can render to whatever. So getting projects like React Native is great!&lt;/p&gt;
&lt;p&gt;What I also think trips developers up is that components in React are not views. They are closer to defining a single HTML tag than defining a complete view in your application. This unlike templates. I can see how scary a component would be if you copied an Angular template into it… the thing is, you would never do that.&lt;/p&gt;
&lt;p&gt;Also JSX is controversial and is partly guilty in tripping developers up on what React is. I have been using it from the start and love it. I understand why developers used to working with HTML templates does not embrace it though. Often overlooking what React is all about. It is just sad and I think this will continue to be an unfair challenge for Reacts adoption.&lt;/p&gt;
&lt;p&gt;It is also a matter of Web Components. React JS, as I understand it, does not support Web Components. Now, I do not think Web Components will be app specific building blocks at all. I think they will be &lt;code&gt;&amp;lt;GoogleMap/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;GoogleDocs/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Youtube/&amp;gt;&lt;/code&gt; types of tags. Web Components will just become new superpowered HTML tags that we can use globally in our apps, like the existing tags.&lt;/p&gt;
&lt;p&gt;So why do I say that? The problem with Web Components, as far as I know, is that they are loaded globally. You do not have a good way to wrap these components into modules. But maybe I am just not getting it! Anyways, React will have a missing feature if it is unable to render these new HTML tags. I think we will import a lot of them in the future.&lt;/p&gt;
&lt;p&gt;So to summarize I think React is here to stay for a long time. It will be exciting to see how Ember and Angular catches up with their new rendering solutions too. As I understand they will also support native development and web components.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It would be interesting to talk to someone invested in FRP.  Who uses it for something more than counters and lists. Since you already interviewed André, it would be great to get Evan in here too. And if you do, tell him thanks for all his great work :-)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Christian! I hope the best of luck with your projects. It is always inspiring to see alternative solutions like these to pop up.&lt;/p&gt;
&lt;p&gt;If you became interested in Cerebral, consider checking out &lt;a href=&quot;https://gitter.im/christianalfoni/cerebral&quot;&gt;gitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/survivejs/cerebral-demo&quot;&gt;Cerebral port of Kanban&lt;/a&gt;. You can also try running &lt;a href=&quot;https://chrome.google.com/webstore/detail/cerebral-debugger/ddefoknoniaeoikpgneklcbjlipfedbb&quot;&gt;Cerebral Chrome debugger plugin&lt;/a&gt; against &lt;a href=&quot;http://www.christianalfoni.com/todomvc/&quot;&gt;TodoMVC demo&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>ShaderFrog - Building a WebGL Shader Editor and Composer - Interview with Andrew Ray</title><id>ashaderfrogbuildingawebglshadereditorandcomposerinterviewwithandrewray2015-09-28t00:00:00z</id><link href="https://survivejs.com/blog/shaderfrog-interview/"></link><updated>2015-09-28T00:00:00Z</updated><content type="html">&lt;p&gt;It&amp;#39;s always impressive when people take an idea and turn it into a concrete service. &lt;a href=&quot;http://andrewray.me/&quot;&gt;Andrew Ray&lt;/a&gt; did this with his &lt;a href=&quot;http://shaderfrog.com/&quot;&gt;ShaderFrog&lt;/a&gt;. It&amp;#39;s a portal where you can design 3D shaders using WebGL. Most interestingly, it has been developed using React.&lt;/p&gt;
&lt;p&gt;As building tools such as this isn&amp;#39;t easy, I&amp;#39;m primarily curious to know why Ray picked React and what sort of challenges he faced during the development of his service.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot; id=&quot;how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How did you discover Webpack and React? Can you provide a bit of background?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/b3a21f6147bcc6bd9d997d5cc5b5f87c?size=200&quot; alt=&quot;Andrew Ray&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;

The front-end ecosystem is constantly morphing, so we have to stay on top of front-end news. That&amp;#39;s how I heard about React, most likely from Hacker News. The path to Webpack was natural from there. Many example projects use Webpack and there&amp;#39;s a lot of Webpack and React development overlap in the community.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-shaderfrog-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot; id=&quot;why-did-you-develop-shaderfrog-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop ShaderFrog? How would you describe it to someone who has never heard of it? What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-shaderfrog-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I built ShaderFrog to solve a problem that no one was aware existed. I was making a WebGL 3d browser game, where your character is a bubble in an underwater environment. To make a &lt;a href=&quot;http://shaderfrog.com/app/view/147&quot;&gt;bubble look convincing visually&lt;/a&gt; you have to have a few effects, such as reflection and refraction. The program that draws these effects is called a &amp;quot;shader.&amp;quot;&lt;/p&gt;
&lt;p&gt;It tells the computer how to &amp;quot;shade&amp;quot; a 3d object. I also had a &lt;a href=&quot;http://shaderfrog.com/app/view/30&quot;&gt;fireball powerup&lt;/a&gt;, and I wanted to show the player getting the powerup by combining the fire effect (a shader) and the bubble effect (another shader).&lt;/p&gt;
&lt;p&gt;That meant I had to take these two programs and combine them together by hand, and essentially add their output color together. It was quite tedious, and I thought I could build a tool to automate the process. That&amp;#39;s how ShaderFrog was born.&lt;/p&gt;
&lt;p&gt;ShaderFrog is a tool to design effects called shaders for 3d games and applications in a visual environment without writing code. There are still plenty of features to add, and it&amp;#39;s still finding its place in the world. Right now I&amp;#39;m continuing to build out more features and doing some marketing.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-choose-to-use-react-for-the-project-which-alternatives-did-you-consider-&quot; id=&quot;why-did-you-choose-to-use-react-for-the-project-which-alternatives-did-you-consider-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you choose to use React for the project? Which alternatives did you consider?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-choose-to-use-react-for-the-project-which-alternatives-did-you-consider-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a front-end developer for most of my career, React feels like the first framework that got it &amp;quot;right.&amp;quot; I had previously tried Angular and Backbone, and toyed with Ember, but none of them felt like they actually helped me solve complex UI problems.&lt;/p&gt;
&lt;p&gt;One of React&amp;#39;s biggest benefits is it stays as close to normal Javascript paradigms as possible. You don&amp;#39;t have to understand &lt;code&gt;$scope&lt;/code&gt; or learn a huge API like Backbone. It&amp;#39;s just functions and Javascript classes. Even JSX is just HTML and Javascript.&lt;/p&gt;
&lt;p&gt;Learning Flux was a steep hill for me, but in the end you&amp;#39;re basically writing event listeners and plain Javascript objects. Server side rendering was very important to me too. I honestly feel like without React, I could not have built ShaderFrog.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-sort-of-challenges-did-you-encounter-during-development-what-would-you-do-differently-&quot; id=&quot;what-sort-of-challenges-did-you-encounter-during-development-what-would-you-do-differently-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What sort of challenges did you encounter during development? What would you do differently?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-sort-of-challenges-did-you-encounter-during-development-what-would-you-do-differently-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React is a newcomer to the field and we&amp;#39;re still figuring out how to do things correctly. CSS is the easiest target. React is teaching me that CSS is a fundamentally flawed concept and that our newest iteration of inline styles, or &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt;, is a welcomed future. There is plenty of legacy CSS in ShaderFrog that I am embarrassed by, but at least I can see the light at the end of the tunnel.&lt;/p&gt;
&lt;p&gt;I faced some challenges specific to making a 3d editor. I need to maintaining 60 frames per second constantly. For example, let&amp;#39;s say I have three lights moving around my scene. Every time their position changes, I have to fire an action through Flux, which triggers many component updates.&lt;/p&gt;
&lt;p&gt;If you do this three times per &lt;code&gt;requestAnimationFrame&lt;/code&gt;, you get two unnecessary virtual DOM comparison checks. The solution to this problem was to &amp;quot;batch&amp;quot; the Flux calls until the last one, so my stores only emit once per loop, removing unnecessary work.&lt;/p&gt;
&lt;p&gt;When I first started work on ShaderFrog, I didn&amp;#39;t fully understand Flux, so I built a few things using event listeners binding to specific data properties. This code is still in my application, and it&amp;#39;s often a source of bugs, and more difficult to reason about than the Flux code. If I could change things I would have stuck more closely to the Flux pattern, because every time I diverge, it causes me problems and increased cognitive load.&lt;/p&gt;
&lt;p&gt;Server side rendering was also a big challenge. React has an unspoken idea that you get server side rendering for free, but this is very far from the truth. For static pages, yes, it&amp;#39;s easy to render some components to an HTML string. For dynamic pages that require data pre-fetching that must be done differently on the client and the server, there are countless edge cases. I hope that in the future, Relay solves many of these problems.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React has paved a bright future of front-end development, but React probably isn&amp;#39;t the end of the road. A better virtual DOM library may come out. We&amp;#39;ve already seen the evolution of the Flux pattern with Redux, and the evolution of CSS with inline and CSS modules. I would definitely say we&amp;#39;re moving towards more computer science principles boosting the productivity of the front-end.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re moving towards more componentization, less coupling, and more portability. React has shown many front-end developers the true power of an entirely self contained component. I think these principles will continue to drive the productivity and enjoyment of front-end development forward.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have no idea! :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Andrew! I wish you great success with &lt;a href=&quot;http://shaderfrog.com/&quot;&gt;ShaderFrog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I remember writing little shaders of my own in the past. If you&amp;#39;ve ever wondered what to use math for, well, here&amp;#39;s a good application. You can actually put operations, such as &lt;code&gt;mod&lt;/code&gt;, into use here! It&amp;#39;s amazing how little operations can make nice patterns.&lt;/p&gt;
&lt;p&gt;To get started, &lt;a href=&quot;http://shaderfrog.com/app&quot;&gt;pick up a shader&lt;/a&gt; you like and start modifying. If you want to dig into theory, you can&amp;#39;t go wrong with NeHe&amp;#39;s material. They&amp;#39;ve written &lt;a href=&quot;http://nehe.gamedev.net/article/glsl_an_introduction/25007/&quot;&gt;an introduction to GLSL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to share your shaders at the comments.&lt;/p&gt;
</content></entry><entry><title>Cycle.js - Reactive Framework for HCI - Interview with André Staltz</title><id>acyclejsreactiveframeworkforhciinterviewwithandrestaltz2015-09-21t00:00:00z</id><link href="https://survivejs.com/blog/cycle-interview/"></link><updated>2015-09-21T00:00:00Z</updated><content type="html">&lt;p&gt;If there&amp;#39;s one thing that has been bubbling below for a couple of years now, it must be reactive programming. There have been solutions, such as &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;RxJS&lt;/a&gt; or &lt;a href=&quot;https://github.com/baconjs/bacon.js&quot;&gt;bacon.js&lt;/a&gt;, but they haven&amp;#39;t quite made it to the mainstream yet. I feel the time for that might be close, though.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cycle.js.org/&quot;&gt;Cycle.js&lt;/a&gt; builds on top of RxJS and characterizes itself as a fully reactive JavaScript framework for Human-Computer Interaction. The question of course is what that means. André Staltz, the author of Cycle.js, is the best person to tell us.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/d992db0c8f42fcee52f96dc320f8aa04?s=200&quot; alt=&quot;André Staltz&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;

I am a UI developer at Futurice in Finland, with extensive knowledge in reactive programming. In my daily work I build web apps and Android applications, and on my free time I build open source libraries such as Cycle.js and contribute to ReactiveX.
&lt;/p&gt;

&lt;p&gt;A lot of people have read the &lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;Introduction to Reactive Programming you&amp;#39;ve been missing&lt;/a&gt; that I wrote in the summer of 2014, or have seen &lt;a href=&quot;http://RxMarbles.com&quot;&gt;RxMarbles&lt;/a&gt;. That is how most people know me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-cycle-js-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-cycle-js-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Cycle.js to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-cycle-js-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cycle.js is a framework where your app is described as a simple function taking an event stream as input and outputting an event stream. These event streams might sound magical, but they are pretty simple. They are similar to arrays in reality, except they evolve over time instead of being static.&lt;/p&gt;
&lt;p&gt;A simple Cycle.js app might take an array-like sequence of clicks and output an array-like sequence of DOM elements. So essentially coding is just describing how to dynamically transform a stream of user events into a stream of interface elements.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-cycle-js-&quot; id=&quot;why-did-you-develop-cycle-js-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Cycle.js?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-cycle-js-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started developing Cycle.js after I took React for a spin and was disappointed with its API. I initially got really excited about the Virtual DOM concept in React, but could not understand why the API is built on OOP classes, state mutation, and imperative event handlers. There is a mismatch between React’s foundational ideas (reactive rendering and UI as pure function of state) and its implementation means (OOP, classes, imperative programming).&lt;/p&gt;
&lt;p&gt;Cycle.js is a React alternative where implementation matches foundational ideas by applying functional and reactive programming to the extreme. The result is a tiny API surface where everything is either a function or an RxJS Observable.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been slowly learning more about hard core functional programming, in other words Haskell. I have also been experimenting with Elm, a more approachable Haskell alternative for the Web.&lt;/p&gt;
&lt;p&gt;I have many plans on what to develop next. My time will probably be mainly focused on improving Cycle.js: making it simpler to use, building integrations with React Native, integrating the upcoming rewritten RxJS by Netflix, etc. But I hope to join efforts with the pure functional programming community, be it &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;, &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, or &lt;a href=&quot;http://www.purescript.org/&quot;&gt;PureScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cycle.js has a lot of functional techniques but JavaScript is not a language that supports functional programming well enough. I miss the types, the immutability, and the clean syntax.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Functional programming is definitely a trend in the front-end community. React is also at the center of this trend. I recall Sebastian Markbåge mentioned multiple times in his interview at React Europe that React is all about functional programming and how to introduce it in a clever way to people unfamiliar with this paradigm.&lt;/p&gt;
&lt;p&gt;It seems there are still a lot of unsolved problems regarding APIs. In modern JavaScript, we use functional and reactive techniques, often mixed with some imperative programming. One on hand, imperative programming is familiar and simple for many of us, but functional and reactive have amazing benefits often hidden behind obscure terminology. Yet these two sides are often incompatible in the same application.&lt;/p&gt;
&lt;p&gt;The community will need to actively experiment with alternatives, and we need to start considering transpiled functional languages (PureScript, Elm) more and more if our techniques are mainly functional anyway. I am not convinced we have stable best practices and good guiding principles in how to architect applications. Cycle.js is just one attempt at finding that guiding principle.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Evan Czaplicki. I was skeptic about Elm before meeting him, but after meeting him in person, I strongly believe his work with Elm is doing a great service to the whole community in bringing functional programming to a level most of us can digest. Evan has vision, is enthusiastic, reads Computer Science papers, and has a ton of great and wild ideas.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot for the interview André! Perhaps a programming model as demonstrated by Cycle.js is the future. It always takes time for the community to warm up to the ideas. Interestingly there&amp;#39;s a proof of concept that implements &lt;a href=&quot;https://github.com/jas-chen/thisless-react&quot;&gt;thisless React&lt;/a&gt;, inspired by Cycle.js of course!&lt;/p&gt;
&lt;p&gt;If this interview made you interested in Cycle.js, consider the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cycle.js.org/getting-started.html&quot;&gt;Getting started guide&lt;/a&gt;. I set up a small &lt;a href=&quot;https://github.com/survivejs/cycle-starter&quot;&gt;boilerplate&lt;/a&gt; to help you get up to speed faster.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cyclejs/cycle-time-travel&quot;&gt;Time traveling with Cycle.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/eschwartz/c8a98275e014b43ea6f0d3b8876d67ac&quot;&gt;A Dead-Simple Todo List with Cycle.js&lt;/a&gt; by Edan Schwartz&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitter.im/cyclejs/cycle-core&quot;&gt;Online support through Gitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vic/awesome-cyclejs&quot;&gt;Awesome Cycle.js&lt;/a&gt; contains a lot more.&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Redux - Reinventing Flux - Interview with Dan Abramov</title><id>areduxreinventingfluxinterviewwithdanabramov2015-09-14t00:00:00z</id><link href="https://survivejs.com/blog/redux-interview/"></link><updated>2015-09-14T00:00:00Z</updated><content type="html">&lt;p&gt;I remember seeing these strange &lt;code&gt;webpack.config.js&lt;/code&gt; files in JavaScript projects for a long time. I didn’t give &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; a good look until the promise of hot loading with React drew me in. &lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt;’s &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot;&gt;React Hot Loader&lt;/a&gt; was life changing for me.&lt;/p&gt;
&lt;p&gt;Besides React Hot Loader, Dan is behind well-known projects such as &lt;a href=&quot;https://gaearon.github.io/react-dnd/&quot;&gt;React DnD&lt;/a&gt; and &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;. Redux in particular has begun to make waves across the community even though it’s a young project. Compared to earlier &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux&lt;/a&gt; inspired implementations it is particularly small (~2k) yet powerful.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-did-you-discover-react-can-you-provide-a-bit-of-background-&quot; id=&quot;how-did-you-discover-react-can-you-provide-a-bit-of-background-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How did you discover React? Can you provide a bit of background?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-did-you-discover-react-can-you-provide-a-bit-of-background-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;figure&gt;&lt;img src=&quot;/5154916f130998044607903ae0d64f0d.jpg&quot; alt=&quot;Dan Abramov&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;figcaption&gt;Dan Abramov&lt;/figcaption&gt;&lt;/figure&gt;

  I think it’s a typical story. In 2014, when I was working at &lt;a href=&quot;http://stampsy.com&quot;&gt;Stampsy&lt;/a&gt;, we needed to pivot from an iPad app to a webapp in a matter of a few months. We only knew Backbone so we went with it, but as the app grew more dynamic and complicated, we knew we couldn’t use it for much longer.
&lt;/p&gt;

&lt;p&gt;However, we also decidedly did not adopt any opinionated data binding library because we wanted to maintain a simple mental model of what’s happening in the app. At some point in time, there was a widget with a dozen of different states that occurred several times on the page, and we knew we &lt;em&gt;had&lt;/em&gt; to throw some data binding library into the mix.&lt;/p&gt;
&lt;p&gt;A coworker of mine suggested React a few month before, but I shrugged at JSX and didn’t investigate. So he suggested it again, and I decided to go for it. The same evening, I got this widget working exactly as I wanted, and I was hooked. Over the course of the next nine months, we gradually rewrote the Backbone app into a React app. Then React Router came along, and we migrated fully. All the while adding new features.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#as-i-ran-to-you-through-react-hot-loader-what-motivated-you-to-develop-the-project-in-the-first-place-&quot; id=&quot;as-i-ran-to-you-through-react-hot-loader-what-motivated-you-to-develop-the-project-in-the-first-place-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;As I ran to you through React Hot Loader what motivated you to develop the project in the first place?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#as-i-ran-to-you-through-react-hot-loader-what-motivated-you-to-develop-the-project-in-the-first-place-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There were a couple of factors.&lt;/p&gt;
&lt;p&gt;Firstly, it was watching our designer &lt;a href=&quot;https://twitter.com/kkga_&quot;&gt;Gadzhi&lt;/a&gt; struggle with tweaking components inside modal windows. (By the way, Gadzhi created &lt;a href=&quot;https://github.com/kkga/spacegray&quot;&gt;Spacegray&lt;/a&gt;, which is still more popular than any of my projects!)&lt;/p&gt;
&lt;p&gt;Every time he’d change some tiny piece of UI, he’d have to refresh, open that modal, find that widget, discover that something is wrong, and change it again, over and over. It was even more painful with widgets like autocomplete, or dynamic widgets that change their state too quickly.&lt;/p&gt;
&lt;p&gt;Secondly, I read a book on Erlang when I was a teenager, and it said something that changed my life forever:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/49237d4d6e78c110844fba22f53d01c0.jpg&quot; alt=&quot;Pure functions can be replaced while the application is running&quot; class=&quot;center-image&quot; width=&quot;400&quot; height=&quot;400&quot; /&gt;&lt;figcaption&gt;Pure functions can be replaced while the application is running&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Thirdly, I was in awe of Bret Victor’s videos.&lt;/p&gt;
&lt;p&gt;At some point I was reading Webpack docs and it described something mysterious called &lt;a href=&quot;https://survivejs.com/webpack/appendices/hmr/&quot;&gt;hot module replacement&lt;/a&gt;. I &lt;a href=&quot;http://stackoverflow.com/q/24581873&quot;&gt;asked about it&lt;/a&gt;, and &lt;a href=&quot;http://stackoverflow.com/a/24587740&quot;&gt;Tobias answered&lt;/a&gt;. I realized I could mix HMR with React, and this was the birth of React Hot Loader.&lt;/p&gt;
&lt;p&gt;I don’t think React Hot Loader is important as a piece of tech—it’s really not—but I definitely see people’s expectations of web tooling capabilities raise, and I’m happy if my work helped this. &lt;a href=&quot;https://github.com/elm-lang/elm-reactor&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;ClojureScript&lt;/a&gt; community are doing exciting work in this field, and I’m happy that JavaScript community is now paying more attention to the functional programming and developer experience it enables.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-redux-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Redux to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#how-would-you-describe-redux-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, it’s tiny (about 2k). If you remove sanity checks that prevent common beginner mistakes, it’s 1K. I’m not saying this to brag, and I’m not obsessed with microlibraries. However, this should give you an idea about the scope of the project.&lt;/p&gt;
&lt;p&gt;Although it is often used instead of Backbone, Flummox, or some other Flux-inspired library, the size of the API surface is comparable to the original &lt;a href=&quot;https://github.com/facebook/flux&quot;&gt;Flux&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;Why would you use it? Redux embraces immutability and &lt;a href=&quot;https://youtu.be/1uRC3hmKQnM?t=15m26s&quot;&gt;ties your hands to free your mind.&lt;/a&gt; If you developed a complex JavaScript application, you might have fallen into one of two traps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using mutable models in asynchronous code which is later impossible to trace, understand, modify, or refactor;&lt;/li&gt;
&lt;li&gt;using a framework that promised to solve this problem, and then spending hours debugging the guts of this framework and working around its limitations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redux is my attempt to answer the following question: what is the least opinionated API surface useful for predictably managing state of complex apps with a &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;great developer experience&lt;/a&gt;? What hooks do we need to expose to create &lt;a href=&quot;https://github.com/xgrommx/awesome-redux&quot;&gt;an ecosystem&lt;/a&gt; around a 2K library?&lt;/p&gt;
&lt;p&gt;There is nothing new in Redux: David Nolen has been talking about benefits of a single immutable state tree &lt;a href=&quot;https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs&quot;&gt;for two years now&lt;/a&gt;, and Evan Czaplicki has made an enormous effort to describe the &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;Elm architecture&lt;/a&gt; from which Redux borrows its ideas.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-&quot; id=&quot;why-did-you-develop-redux-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Redux?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-did-you-develop-redux-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn’t mean to create a Flux framework. When React Europe was first announced, I proposed a talk on “hot reloading and time travel” but to be honest I had no idea how to implement time travel. I thought about it for a while, and I knew there was prior art in &lt;a href=&quot;http://elm-lang.org&quot;&gt;Elm&lt;/a&gt;, so I read &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;Elm Architecture&lt;/a&gt;, but forgot about it soon. I attempted to create a “Flux Hot Loader” but it was full of horrible hacks to work around all the side effects inside Flux Stores: registering a handler, managing subscriptions.&lt;/p&gt;
&lt;p&gt;I wanted the logic of the Stores to be hot reloadable so I tried to move subscriptions and registering outside the Stores. I also realized I needed to guarantee the data to be immutable. I remembered how Pete Hunt and others described Flux Stores as &lt;code&gt;state, action =&amp;gt; state&lt;/code&gt;, and how Jing Chen suggested me to replay actions for hot reloading. So all of this was in my head, but I was still prototyping when I released Redux 0.1.0.&lt;/p&gt;
&lt;p&gt;I had these “stateless Stores” (now we call them reducers) that take &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; and return the next &lt;code&gt;state&lt;/code&gt;. This let me implement hot reloading for their logic. However, there was still a big missing piece: I had this “dispatcher” thing from Flux that would call those “stateless Stores”.&lt;/p&gt;
&lt;p&gt;Then Andrew Clark &lt;a href=&quot;https://gist.github.com/acdlite/9f1b5883d132ad242323&quot;&gt;suggested&lt;/a&gt; we just combine reducer functions into a single reducer function. This would kill the need for dispatcher. Just like UI component tree has one component at the root, different reducer functions can be called from a single root reducer function. Later I realized that this is exactly &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;Elm architecture&lt;/a&gt;, and I just didn’t understand it at first.&lt;/p&gt;
&lt;p&gt;This is how Redux came to be. I was trying to write some code for a fancy React Europe demo, but it turned out that people really liked the architecture, so I marketed it as a library, although there is really very little code there.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am happy to have moved Redux to &lt;a href=&quot;http://github.com/reactjs&quot;&gt;reactjs&lt;/a&gt; where we share ownership of quality React-related code. I’ve been doing things on my own for quite a while, and lately it’s been more stressful because of the attention my work is receiving, so I intend to &lt;a href=&quot;http://250bpm.com/blog:50&quot;&gt;step back&lt;/a&gt; from the active maintenance of Redux once I’m happy with it. (And I almost am.)&lt;/p&gt;
&lt;p&gt;Andrew Clark is collaborating with &lt;a href=&quot;https://reactjs-training.com/&quot;&gt;Ryan and Michael&lt;/a&gt; on the &lt;a href=&quot;https://github.com/acdlite/redux-react-router&quot;&gt;React Router integration&lt;/a&gt;—people have been asking for it for a long time, so I’m full of joy this is finally happening.&lt;/p&gt;
&lt;p&gt;I have released &lt;a href=&quot;https://github.com/gaearon/react-transform-boilerplate&quot;&gt;a few new tools&lt;/a&gt; that are going to obsolete React Hot Loader. I will write a post describing them in greater detail soon. I am also going to work on screencasts about Redux, as I promised in &lt;a href=&quot;https://www.patreon.com/reactdx&quot;&gt;my Patreon campaign&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And then—who knows?—I might even take a day job!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobx-https-mobxjs-github-io-mobx-or-cerebral-https-cerebraljs-com-&quot; id=&quot;at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobx-https-mobxjs-github-io-mobx-or-cerebral-https-cerebraljs-com-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;At the moment a lot of architecture related innovation seems to happen. What do you think of alternative approaches such as &lt;a href=&quot;https://mobxjs.github.io/mobx/&quot;&gt;MobX&lt;/a&gt; or &lt;a href=&quot;https://cerebraljs.com/&quot;&gt;Cerebral&lt;/a&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobx-https-mobxjs-github-io-mobx-or-cerebral-https-cerebraljs-com-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not the right person to ask, as I have not used them. I’m definitely in awe of the work Christian has been putting into Cerebral and the &lt;a href=&quot;http://www.youtube.com/watch?v=xCIv4-Q2dtA&quot;&gt;developer experience behind it&lt;/a&gt;. Its concept of signals and expressing async flow declaratively is &lt;a href=&quot;https://github.com/reactjs/redux/issues/343&quot;&gt;also very interesting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My hope with Redux is that it’s extensible enough that great ideas and patterns find its way into it as userland extensions like &lt;a href=&quot;https://redux.js.org/introduction/ecosystem#middleware&quot;&gt;Redux middleware&lt;/a&gt;. My other hope is that migrating &lt;em&gt;from&lt;/em&gt; Redux to something better won’t be difficult because of its tiny API surface.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Look no further than &lt;a href=&quot;https://www.youtube.com/watch?v=Zemce4Y1Y-A&quot;&gt;Sebastian’s talk&lt;/a&gt;. We’re going to see more &lt;a href=&quot;https://medium.com/@mjackson/universal-javascript-4761051b7ae9&quot;&gt;universality&lt;/a&gt;. We’re going to see both cross-platform, as well as platform-specific components for DOM, server, native, &lt;a href=&quot;https://github.com/gaearon/react-blessed-hot-motion&quot;&gt;console&lt;/a&gt;, WebGL, you name it.&lt;/p&gt;
&lt;p&gt;With the advent of &lt;a href=&quot;http://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html&quot;&gt;pure functions as components&lt;/a&gt;, we’re also entering the era of a new kind of universality: components that work across libraries. If you don’t use imperative APIs, what’s the different between a React component function, Deku component function and a Cycle component function? Only the rendering backend and element factories. If you use JSX, you can literally replace the view framework, and pure function components will “just work” with the new engine.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/andrestaltz&quot;&gt;André Staltz&lt;/a&gt;, creator of &lt;a href=&quot;http://cycle.js.org/&quot;&gt;Cycle&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Dan! It has been certainly amazing to see how much React has evolved within a year. And of course we can thank you for some of the innovation - hot loading and Redux in particular.&lt;/p&gt;
&lt;p&gt;It was straight-forward to port the &lt;a href=&quot;https://github.com/survivejs/redux-demo&quot;&gt;Kanban example of the book to Redux&lt;/a&gt;. There&amp;#39;s a lot of familiar code. It has been just structured a little differently. It is easy to understand what&amp;#39;s going on.&lt;/p&gt;
&lt;p&gt;If Redux piqued your interest, check out &lt;a href=&quot;http://redux.js.org/&quot;&gt;the official documentation&lt;/a&gt; to get started. Even though the library is tiny, it comes with high quality documentation. See the following resources for more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html&quot;&gt;Full-Stack Redux Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@bananaoomarang/handcrafting-an-isomorphic-redux-application-with-love-40ada4468af4&quot;&gt;Tutorial: Handcrafting an Isomorphic Redux Application (With Love)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/happypoulp/redux-tutorial&quot;&gt;happypoulp/redux-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v1.8.0</title><id>asurvivejswebpackandreactv1802015-09-13t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-18/"></link><updated>2015-09-13T00:00:00Z</updated><content type="html">&lt;p&gt;We have once more new chapters in the book. I&amp;#39;m going to try a new model with these. For now the full versions of the testing and typing chapters will be available through &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;Leanpub&lt;/a&gt; only. The community version will contain TLDR;s for these so you still get the core points. Of course the project source is public for examination.&lt;/p&gt;
&lt;p&gt;By doing this I want to give my supporters a small edge. As a result they&amp;#39;ll get the access to the new material first. If it looks like this works, I don&amp;#39;t mind developing more content and opening old as new chapters get developed. Consider it as a poor man&amp;#39;s Kickstarter. We can even agree on goals if that works better.&lt;/p&gt;
&lt;p&gt;Pricing-wise I&amp;#39;ve bumped the minimum price of the book to $20 as I believe that reflects its current value. I may do another bump later on as I understand how the situation develops.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-v1-8-0&quot; id=&quot;book-improvements-v1-8-0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.8.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-v1-8-0&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 137 commits went to &lt;code&gt;v1.8.0&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.7.5...v1.8.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#general-fixes&quot; id=&quot;general-fixes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;General Fixes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#general-fixes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Grammar was improved overall. Big thanks Steve!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;app/main.js[x]&lt;/em&gt; was renamed as &lt;em&gt;app/index.js[x]&lt;/em&gt;. This simplifies Webpack entry configuration as you can point directly to &lt;code&gt;app&lt;/code&gt;. This resolves to the index file within the directory and saves some hassle.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. This free editor has grown fast. It gained JSX support in &lt;code&gt;v0.8.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fixed basic JSX example. A React component should return a single node.&lt;/li&gt;
&lt;li&gt;Linked to a &lt;a href=&quot;https://medium.com/@housecor/react-s-jsx-the-other-side-of-the-coin-2ace7ab62b98&quot;&gt;blog post about JSX shock&lt;/a&gt;. It goes more detail about the experience.&lt;/li&gt;
&lt;li&gt;Updated Webpack example to use &lt;code&gt;eval-source-map&lt;/code&gt; instead of &lt;code&gt;eval&lt;/code&gt;. This is consistent with the earlier chapter. In our case we can avoid &lt;code&gt;eval&lt;/code&gt;. Even though it&amp;#39;s faster we can afford to go for quality.&lt;/li&gt;
&lt;li&gt;Explained &lt;code&gt;resolve.extensions&lt;/code&gt; in detail. Simply put this Webpack property allows us to control the way it matches against files (is it ok to skip extension or not).&lt;/li&gt;
&lt;li&gt;Moved Babel to use &lt;code&gt;.babelrc&lt;/code&gt;. This will become even more important in the future as &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;react-transform&lt;/a&gt; Babel plugin will replace the current hot loader.&lt;/li&gt;
&lt;li&gt;Documented how to control &lt;code&gt;.babelrc&lt;/code&gt; based on env easily. This is important when you want to perform branching based on your build target.&lt;/li&gt;
&lt;li&gt;Mentioned about &lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;React Developer Tools&lt;/a&gt;. They give you a better idea of what&amp;#39;s going on at your code. Available for both Chrome and Firefox.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Noted that hot loading won&amp;#39;t pick up changes made to a &lt;code&gt;constructor&lt;/code&gt;. It simply replaces method contents so these get missed. It would be nice to find a good alternative to those &lt;code&gt;bind&lt;/code&gt; statements that is performant and works with hot loading.&lt;/li&gt;
&lt;li&gt;Explained what &lt;code&gt;super()&lt;/code&gt; actually does. Simply put it invokes the same method of the parent class.&lt;/li&gt;
&lt;li&gt;Mentioned that using a &lt;em&gt;context&lt;/em&gt; might be a viable option for dealing with &lt;code&gt;onEdit&lt;/code&gt;. It is currently and undocumented feature. Dmitry Kudryavtsev goes into a good detail at his article &lt;a href=&quot;https://medium.com/@skwee357/the-land-of-undocumented-react-js-the-context-99b3f931ff73&quot;&gt;The land of undocumented react.js: The Context&lt;/a&gt;. React 0.14 will introduce a stable context API and it&amp;#39;s worth discussing then.&lt;/li&gt;
&lt;li&gt;Caught possible &lt;code&gt;alt.bootstrap&lt;/code&gt; related exception. It can fail if it receives data it cannot interpret. Better to deal with that than to blow up.&lt;/li&gt;
&lt;li&gt;Linked to Sebastian Markbåge&amp;#39;s expanded explanation of &lt;a href=&quot;https://gist.github.com/sebmarkbage/07bbe37bc42b6d4aef81&quot;&gt;JSX spread attributes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Made &lt;code&gt;get(ids)&lt;/code&gt; more tolerant against missing data. Now it doesn&amp;#39;t return possible empty (&lt;code&gt;undefined&lt;/code&gt; or such) results. Of course getting that sort of data at &lt;code&gt;localStorage&lt;/code&gt; isn&amp;#39;t a good idea in the first place but sometimes it&amp;#39;s a good idea to be a little defensive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pushed &lt;code&gt;ItemTypes&lt;/code&gt; below &lt;em&gt;app/constants/itemTypes.js&lt;/em&gt;. Given they are constants that feels like the right place for those. I noticed this while implementing the &lt;a href=&quot;https://github.com/survivejs/redux-demo&quot;&gt;Redux version of the Kanban&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Expanded explanations. I tend to go somewhat terse on my first pass of content. Now I&amp;#39;ve expanded on possibly clear parts so it&amp;#39;s easier to see what&amp;#39;s going on and why.&lt;/li&gt;
&lt;li&gt;Passed &lt;code&gt;id&lt;/code&gt; instead of &lt;code&gt;data&lt;/code&gt; to &lt;code&gt;Note&lt;/code&gt;. This change simplified &lt;code&gt;move&lt;/code&gt; logic somewhat and it goes according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;the law of Demeter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped redundant references to &lt;code&gt;TARGET&lt;/code&gt;. Now we can avoid setting &lt;code&gt;TARGET&lt;/code&gt; at &lt;em&gt;package.json&lt;/em&gt; as we deduce the target based on npm lifecycle information.&lt;/li&gt;
&lt;li&gt;Noted that peeking at the warnings Uglify.js, the minifier, provides can be beneficial.&lt;/li&gt;
&lt;li&gt;Expanded on splitting &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; bundles. Now it&amp;#39;s easier to see what&amp;#39;s going on and, most importantly, why.&lt;/li&gt;
&lt;li&gt;Noted &lt;code&gt;ExtractTextPlugin&lt;/code&gt; related gotchas. It won&amp;#39;t work through &lt;code&gt;loader&lt;/code&gt; form. Instead you have to use &lt;code&gt;loaders: [ExtractTextPlugin.extract(&amp;#39;style&amp;#39;, &amp;#39;css!autoprefixer&amp;#39;)]&lt;/code&gt; or such. If you need to use multiple loaders with it, note the syntax! You should use the &lt;code&gt;!&lt;/code&gt; form in the second parameter to add more if needed.&lt;/li&gt;
&lt;li&gt;Noted that &lt;a href=&quot;https://github.com/webpack/webpack/issues/1315&quot;&gt;chunkhash seems to be broken&lt;/a&gt; at the moment. For now I would suggest generating hashes of your own but I understand it&amp;#39;s a heavy solution. Hopefully this one gets fixed soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#testing-react&quot; id=&quot;testing-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#testing-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a new chapter! The chapter can likely use some work still. I&amp;#39;ll probably cover techniques such as mocking in the future but the basic setup inspired by Cesar Andreu&amp;#39;s &lt;a href=&quot;https://github.com/cesarandreu/web-app&quot;&gt;web-app&lt;/a&gt; is there. We also get some tests done so that&amp;#39;s good.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#typing-with-react&quot; id=&quot;typing-with-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#typing-with-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is another new chapter. In the chapter I show how to annotate our project using &lt;a href=&quot;https://facebook.github.io/react/docs/reusable-components.html&quot;&gt;propTypes&lt;/a&gt;. This is one of those steps you should take to solidify your project.&lt;/p&gt;
&lt;p&gt;There is a basic introduction to &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt;. Unfortunately the current version is missing some functionality our project would need. I have to get back to this later as the tool develops further.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; will receive JSX support in 1.6. That&amp;#39;s another tool I want to cover once it gets out.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote introduction to be easier to approach.&lt;/li&gt;
&lt;li&gt;Mentioned about &lt;a href=&quot;https://eslint.org/blog/2015/09/eslint-v1.4.0-released&quot;&gt;ESLint autofixing&lt;/a&gt;. This is a feature that allows you to fix certain linting errors automatically. As it&amp;#39;s new, not a lot of rules are supported yet.&lt;/li&gt;
&lt;li&gt;Explained ESLint env configuration detail. That&amp;#39;s important to know especially when you are dealing with multiple environments and testing tools.&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&quot;http://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;. This tool allows you to maintain project-wide coding style. There&amp;#39;s a good level of editor/IDE support. It&amp;#39;s a valuable tool in a team environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on &lt;code&gt;npm adduser&lt;/code&gt; and mentioned &lt;code&gt;npm login&lt;/code&gt; alias to clear up confusion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added &amp;quot;resources&amp;quot; sidebar to the site. I&amp;#39;ll be setting similar ones for other chapters. I&amp;#39;ll likely push this to a separate repository so it&amp;#39;s easier to contribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given there&amp;#39;s a &lt;a href=&quot;https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html&quot;&gt;release candidate of React 0.14&lt;/a&gt; out there, it likely doesn&amp;#39;t take that long for a final version to appear. This will lead to some important changes in the book. Most importantly it will allow me to default to function syntax for components. In addition I can dig into features such as context.&lt;/p&gt;
&lt;p&gt;Once I&amp;#39;m convinced that &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/a&gt; is stable enough and that it works well with the project, I&amp;#39;ll change my recommendation to it. It&amp;#39;s already worth a look.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll also develop the content based on your feedback. The site may receive some small updates. I would love to do something about the highlighting of the code examples and improve the way the are laid out (show added/removed lines better).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll write at least one more chapter for my Leanpub readers. The way the situation develops determines the rest.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m still a little conflicted about Amazon and dead tree versions. One option is that I&amp;#39;ll do a snapshot (&lt;code&gt;v2.0.0&lt;/code&gt;) that will be published. Leanpub version would then continue from there. Amazon buyers would obviously receive a heavy discount on Leanpub. It&amp;#39;s more about reaching more people with the work than anything else.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Front-end Singularity and How to Deal with It</title><id>afrontendsingularityandhowtodealwithit2015-09-06t00:00:00z</id><link href="https://survivejs.com/blog/frontend-singularity-is-here/"></link><updated>2015-09-06T00:00:00Z</updated><content type="html">&lt;p&gt;Technological progress is both exhilarating and terrifying thing. And by the looks of it, it just keeps on progressing faster and faster. This has lead to an idea of technological singularity. As singularity is reached, technology develops so fast humans can&amp;#39;t keep up with the progress anymore. It feels like something similar is happening with front-end development right now.&lt;/p&gt;
&lt;p&gt;This is a topic I&amp;#39;ve had to ponder about for a presentation known as &lt;a href=&quot;https://survivejs.github.io/frontend-in-2015/&quot;&gt;Frontend in 2015 - Clear the Decks&lt;/a&gt;. I believe the term &amp;quot;clear the decks&amp;quot; gets to the gist of it. Embrace change.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-big-bang-of-frameworks&quot; id=&quot;the-big-bang-of-frameworks&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Big Bang of Frameworks&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-big-bang-of-frameworks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;https://twitter.com/geraldyeo/status/640036032138846208&quot;&gt;Gerald Yeo put it&lt;/a&gt;, we&amp;#39;re experiencing an explosion of frameworks - a big bang. We&amp;#39;ve gone from literally nothing to an amazing amount of alternatives. Add libraries, such as React, to that and you end up with a massive ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; alone has over 180k packages to give you a sense of scale. By this rate it will reach million packages by 2020 as it keeps growing faster and faster. Of course the growth comes with problems of its own. How do you find the good packages and know which ones are maintained well?&lt;/p&gt;
&lt;p&gt;From the perspective of a developer this means it&amp;#39;s impossible to keep up with the development. Even as a book author I have trouble keeping up. I can only imagine how difficult it is for normal developers that have their hands full keeping the boat from sinking.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-hype-cycle&quot; id=&quot;the-hype-cycle&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Hype Cycle&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-hype-cycle&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This all ties to the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Hype_cycle&quot;&gt;the hype cycle&lt;/a&gt;. In the context of JavaScript that&amp;#39;s something we&amp;#39;re experiencing constantly. Each framework and new technique goes through the cycle. After initial excitement you will face the reality. Eventually the situation will stabilize and, of course, something new will come along. To quote Teletubbies, &amp;quot;Again-Again&amp;quot;!&lt;/p&gt;
&lt;p&gt;As new solutions become available, they can learn from the earlier efforts. For instance, you can see the influence of React in Angular 2.0 and other up and coming frameworks. Eventually the most powerful ideas make it to the standards (i.e. Web Components). In turn this allows libraries and frameworks to collaborate.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#working-across-boundaries&quot; id=&quot;working-across-boundaries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Working Across Boundaries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#working-across-boundaries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No matter what solution you are using, there&amp;#39;s always room for collaboration. Even though we might choose our &amp;quot;side&amp;quot; and prefer some specific stack, the world is never black and white. I believe this is the reason why shared, lower level constructs, such as ones enabled by Web Components, are so important.&lt;/p&gt;
&lt;p&gt;Ideally Web Components will make it possible to work across boundaries. Instead of having separate bindings of &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; per framework, it would be more beneficial to have canonical bindings which to consume. Hopefully the world moves into that direction.&lt;/p&gt;
&lt;p&gt;Interestingly Angular 2.0 can consume Web Components already and I can only hope others will follow the suit. Anything we can do to enable collaboration across boundaries is worth it. npm has shown that already but we can go further than that.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#preparing-for-the-future&quot; id=&quot;preparing-for-the-future&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Preparing for the Future&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#preparing-for-the-future&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The future is already here — it&amp;#39;s just not very evenly distributed. - William Gibson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&amp;#39;s no telling what the world will look like in a year. It&amp;#39;s easier to look back and see how antiquated things were. Progress happens so gradually it can be difficult to realize it. Some bleeding edge developers are already experiencing the future while mainstream is behind in many ways. Of course sticking to the bleeding edge implies a certain amount of pain.&lt;/p&gt;
&lt;p&gt;It is hard to prepare for the future as so many things are possible. When it comes to software architecture it may be a good idea to design for change. As new winds blow, you may want to rethink your approach. As a result the architecture has to live. Web development is organic by definition. It is grown, not built.&lt;/p&gt;
&lt;p&gt;As I put it in my presentation slides subtitle, prepare to clear the decks. It&amp;#39;s hard to avoid that in web development. If you are prepared for change, you can deal with it better.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-need-for-new&quot; id=&quot;the-need-for-new&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Need for New&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-need-for-new&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In some ways front-end development is very frustrating. It is particularly difficult for perfectionists. As you get bombarded by new, shiny things, it can be easy to feel inadequate.&lt;/p&gt;
&lt;p&gt;Looking through job requirements doesn&amp;#39;t do any favors either. There are simply so many matters to master. And as they say, jack of all trades is a master of none. At the same time you should master something to stand out at least a little bit.&lt;/p&gt;
&lt;p&gt;This is one of the reasons why I wrote my book. I wanted to go through a slice of interesting technologies. Besides being useful for me personally, I believe the material saves some effort on your part. It is important to be aware of some of the available technologies if nothing else.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important part of front-end development is knowing what you don&amp;#39;t know. You don&amp;#39;t have to be an absolute master at everything. There simply isn&amp;#39;t enough time for that. Instead, build around your strengths and stay curious.&lt;/p&gt;
&lt;p&gt;Big thanks to &lt;a href=&quot;http://lemire.me/blog/archives/2015/09/04/revisiting-vernor-vinges-predictions-for-2025/&quot;&gt;Daniel Lemire&lt;/a&gt; for inspiration. I also appreciate the feedback from &lt;a href=&quot;https://twitter.com/mbrochh&quot;&gt;Martin Brochhaus&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/geraldyeo&quot;&gt;Gerald Yeo&lt;/a&gt; that pushed me to write this post.&lt;/p&gt;
</content></entry><entry><title>How to Succeed at Technical Books?</title><id>ahowtosucceedattechnicalbooks2015-09-04t00:00:00z</id><link href="https://survivejs.com/blog/succeed-at-technical-books/"></link><updated>2015-09-04T00:00:00Z</updated><content type="html">&lt;p&gt;I&amp;#39;ve &lt;a href=&quot;http://www.nixtu.info/2015/07/on-economics-of-ebook-publishing.html&quot;&gt;written about book publishing earlier&lt;/a&gt; at my personal blog. It is an interesting yet difficult business. I sort of stumbled into the world by chance. In this post I want to share some of my learnings.&lt;/p&gt;
&lt;p&gt;Long story short I wrote a little &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;Webpack cookbook&lt;/a&gt; with &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian Alfoni&lt;/a&gt;. That led to an idea of a bigger book. Initially we pitched that to a real publisher. After long negotiations we got a no. That didn&amp;#39;t stop me. You can see the result here.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#growing-pains&quot; id=&quot;growing-pains&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Growing Pains&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#growing-pains&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the book hasn&amp;#39;t been a great financial success, it has proven its benefits. There are multiple reasons for this. For instance having all your content open might not be the best idea for a beginner author unless you have some way to upsell. This is something I&amp;#39;m going to experiment with to see if having at least some of the content closed makes a difference.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#tackling-big-problems-by-yourself&quot; id=&quot;tackling-big-problems-by-yourself&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Tackling Big Problems by Yourself&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#tackling-big-problems-by-yourself&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am aware a lot of beginner authors do a lot worse than me. The problem is that when you are starting out alone, you have to tackle big problems by yourself. Simply put even if you could write but fail at other important tasks, such as marketing and sales, it won&amp;#39;t work. If you wrote an excellent book and people failed to find it, it would still be a failure, at least financially.&lt;/p&gt;
&lt;p&gt;Note that you can, and probably should, outsource some of the book related tasks. You can find people to proofread your material for relatively cheap. Even if the reader knows nothing about the topic, you will likely get a bunch of grammar fixes to make. Same goes for crafting landing pages, marketing material and graphics. A professional can simply do better work, faster.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#extra-challenge-for-non-natives&quot; id=&quot;extra-challenge-for-non-natives&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Extra Challenge for Non-natives&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#extra-challenge-for-non-natives&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a non-native author you&amp;#39;ll encounter an extra challenge in the form of grammar. As a Finn I tend to be quite blind at articles. I miss some at times. My writing style has likely been inspired by my culture as well. That&amp;#39;s something that&amp;#39;s hard to tone down. On the other hand that can be treated as a strength. Sometimes it&amp;#39;s good to be a little different and stand out.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#royalties&quot; id=&quot;royalties&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Royalties&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#royalties&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a first time author going through an established publisher could be a good option. They&amp;#39;ll deal with some of the hard parts. You will pay for this quite literally, though. And there are no guarantees for success. At least this will make you familiar with the process. When you decide to self-publish, you already know some of the ropes. As a result you aren&amp;#39;t starting from the scratch anymore.&lt;/p&gt;
&lt;p&gt;The economics of self-publishing can be more rewarding. There are more aspects to worry about but the economics make up for that. Roughly put you might need to sell six times the books through a real publisher than otherwise. This means you can reach decent income even with modest sales.&lt;/p&gt;
&lt;p&gt;To give you a better idea, consider the figures below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traditional publisher - 15-50% royalty, closer to 15% normally and can be less even&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/&quot;&gt;Leanpub&lt;/a&gt; - $0.50 + 10%&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gumroad.com/&quot;&gt;Gumroad&lt;/a&gt; - $0.25 + 5%&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://getdpd.com/&quot;&gt;DPD&lt;/a&gt; - $10 per month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shortly, the more responsibility you take, the more you get paid for it. But this assumes you can deal with all the parts involved. Having a great royalty rate doesn&amp;#39;t help if the book doesn&amp;#39;t sell.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#leanpub-vs-alternatives&quot; id=&quot;leanpub-vs-alternatives&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Leanpub vs. Alternatives&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#leanpub-vs-alternatives&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Especially with something like DPD you would be raking most of the profit to yourself. But as stated earlier, the cost is usually elsewhere. The benefit of Leanpub is that they offer a decent landing page for your book and support Markdown based authoring.&lt;/p&gt;
&lt;p&gt;One potential problem is that you don&amp;#39;t get direct access to your clients. This makes it more difficult to grow your personal mailing list than it would have to be. There are likely good reasons for this, though.&lt;/p&gt;
&lt;p&gt;It is hard to underestimate the importance of a good mailing list. It is an amazing way to reach your audience. There are an entire set of techniques related to growing them. I am not an expert when it comes to mailing lists but I can see the value. Beyond marketing they actually allow you to help your audience directly, get feedback and so on.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#control-over-output&quot; id=&quot;control-over-output&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Control over Output&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#control-over-output&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can get output similar to Leanpub through something like &lt;a href=&quot;https://www.gitbook.com/&quot;&gt;Gitbook&lt;/a&gt;. If you have the skills for that, you can customize the result as you want. You can sell the result through Gumroad, DPD, and such. You will get more control over the sales process and can set up the sales funnel just the way you want it. I believe growing your mailing list becomes easier this way.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#benefits-of-a-proxy&quot; id=&quot;benefits-of-a-proxy&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Benefits of a Proxy&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#benefits-of-a-proxy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I feel selling is one of the smallest problems, especially if you go through a proxy. If you deal with it yourself, you will have to deal with things like EU VAT. That will get very complex and time consuming fast. It is likely a better idea to leave these kind of details to companies that have them sorted out.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#going-dead-tree-and-beyond&quot; id=&quot;going-dead-tree-and-beyond&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Going Dead Tree and Beyond&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#going-dead-tree-and-beyond&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Note that services like &lt;a href=&quot;https://www.lulu.com/&quot;&gt;Lulu&lt;/a&gt; allow you to get actual dead tree books done. The obvious disadvantage of this is that it becomes difficult to push updates. Lulu also gives access to major digital bookshops, such as Amazon, B&amp;amp;N, and iBooks. This means you&amp;#39;ll need to have your book content fixed apart from grammatical fixes, though, as these platforms expect your book has an ISBN.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#potential-benefits&quot; id=&quot;potential-benefits&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Potential Benefits&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#potential-benefits&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Financial success is only one potential benefit of writing a book. It will actually force you to become better at writing. Even though I&amp;#39;m far from top notch writers, I feel like my writing has improved. At least I&amp;#39;m faster at it, and it takes less effort. In addition I have gained contacts I wouldn&amp;#39;t have otherwise. And, most importantly, writing a book has opened an entire new world to me in the form of opportunities.&lt;/p&gt;
&lt;p&gt;Even in the worst case I have established a source of some level of income. The book seems to sell consistently and I have some tricks in my sleeve to improve on that. Better yet, I have made a dent to the market. It will be far easier to develop another book should I want to.&lt;/p&gt;
&lt;p&gt;Having a book in your CV doesn&amp;#39;t hurt either. The next time I do a round of interviews, I have an ace at sleeve. A book adds to your credibility and might be the factor that will help you to get the job. At the very least you will have a stronger bargaining position when negotiating over the financial bits.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-would-i-do-differently-&quot; id=&quot;what-would-i-do-differently-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Would I Do Differently?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-would-i-do-differently-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like with software projects the easiest thing to mess up is scoping. It&amp;#39;s difficult to estimate how long getting things done actually takes. This is exacerbated by the fact that as a first time author you don&amp;#39;t have a frame of reference. Based on this experience I would say it&amp;#39;s better to aim for a short guide, say 30-50 pages, rather than shoot for the moon from the first go.&lt;/p&gt;
&lt;p&gt;It is easier to expand than to cut down. Go for a short, quality book rather than something long and shoddy. Your readers will thank you.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#experiment-at-moderation&quot; id=&quot;experiment-at-moderation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Experiment at Moderation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#experiment-at-moderation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One interesting aspect of self-publishing is that it allows a wide range of experimentation. I probably went too far with that at some points. Instead it might be a good idea to try to fix your table of contents as soon as possible. This is just to avoid the amount of rework needed. Sometimes there&amp;#39;s no way to avoid that but as they say &amp;quot;fail to plan, plan to fail&amp;quot;.&lt;/p&gt;
&lt;p&gt;Ideally you wouldn&amp;#39;t have to iterate a lot on the content. I know this sounds like waterfall. It&amp;#39;s easier from a reader&amp;#39;s perspective, though. If nothing is ever done, how do you know when to read? At some point a book has to become ready. Editions are ideal for bigger changes. That&amp;#39;s the way the ISBN system has been designed.&lt;/p&gt;
&lt;p&gt;You could say there&amp;#39;s an interesting conflict between the need to move fast and the need for a stable result. Platforms, such as Leanpub or Gumroad, allow this sort of experimentation. As your book grows, it doesn&amp;#39;t hurt to become more conservative in your approach. For instance I&amp;#39;ve made conscious effort to move towards a more stable release cycle.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#shifting-topics&quot; id=&quot;shifting-topics&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Shifting Topics&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#shifting-topics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the big challenges of being a technical author is that the scene changes all the time. If I started to write my book right now, I would perhaps choose some technologies covered a little differently. Especially in front-end development even a month is a long time. That puts extra pressure on both authors and readers.&lt;/p&gt;
&lt;p&gt;It can be hard to accept that your book is obsolete in some ways as soon as you publish it. That&amp;#39;s something for technical authors to endure.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#subscription-based-books-&quot; id=&quot;subscription-based-books-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Subscription Based Books?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#subscription-based-books-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://commonsware.com/Android/&quot;&gt;The Busy Coder&amp;#39;s Guide to Android Development&lt;/a&gt; is an interesting alternative to the common approach. The author is selling his book as a subscription service. It&amp;#39;s a massive book, over 3,300 pages. Subscription would give you access to the newest content.&lt;/p&gt;
&lt;p&gt;From business point of view recurring income is one of the greatest things you can achieve. The problem with traditional sales is that it&amp;#39;s one-off. If you want more income from the same client, you would have to sell another offering or try to upsell your current offering in some way. You could for instance try to produce a video course or sell personal consulting to complement your base offering.&lt;/p&gt;
&lt;p&gt;A subscription based approach is more involved. It implies the need for continuous work. I believe that can work when scaled to a sufficient volume. As always, the problem for first time authors is in reaching that critical mass required to make it work.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#open-vs-closed&quot; id=&quot;open-vs-closed&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Open vs. Closed&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#open-vs-closed&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I went for an open approach in my first effort. The greatest advantage of this has been an immense amount of visibility. Of course translating that to sales is another story. If I started now, I would likely start with a mixed approach. Have something valuable behind a paywall to encourage sales. Perhaps a part of the content could be exclusive to the paid version only. Some keep all of the content closed.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s likely no one right answer to this question. As the content has been available in an open format, that has enabled external contributions I would have missed otherwise. Given I&amp;#39;m a solo author, that has been a massive help. Now everyone gets a better book. This is something I am very happy about.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though publishing a technical book is surprisingly simple, actually succeeding at it is another story. There are a lot of things that could go wrong. Don&amp;#39;t get discouraged, though. I believe that persistency, and the willingness to learn and adapt, will yield results at some point. Very few succeed with their first book anyway. So be prepared for another.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v1.7.5</title><id>asurvivejswebpackandreactv1752015-08-30t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-175/"></link><updated>2015-08-30T00:00:00Z</updated><content type="html">&lt;p&gt;Onwards we go. &lt;code&gt;v1.7.5&lt;/code&gt; can be characterized as a refinement release. I went through &amp;quot;React and Flux&amp;quot; and &amp;quot;From Notes to Kanban&amp;quot; with my editor (thanks Jesús!). As a result we should have something that&amp;#39;s a notch better together. I took some decompression time during this iteration and negotiated a lot towards a better future I hope.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-v1-7-5&quot; id=&quot;book-improvements-v1-7-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.7.5&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-v1-7-5&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 116 commits went to &lt;code&gt;v1.7.5&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;#39;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.7.0...v1.7.5&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#general-fixes&quot; id=&quot;general-fixes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;General Fixes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#general-fixes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I learned something curious about &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;an&lt;/em&gt; (no, we don&amp;#39;t have these things in Finnish). It is important to remember to take in count what the words &lt;strong&gt;sound&lt;/strong&gt; like.&lt;/li&gt;
&lt;li&gt;Use nicer formatting for &lt;code&gt;npm i&lt;/code&gt; bits. Now &lt;code&gt;--&lt;/code&gt; shouldn&amp;#39;t get mangled.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The introduction of the book has been expanded somewhat. There&amp;#39;s only one chance to make a first impression so might as well try to do a good one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added an expanded explanation for &lt;code&gt;make&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&quot;http://jspm.io/&quot;&gt;JSPM&lt;/a&gt;. You should watch &lt;a href=&quot;https://www.youtube.com/watch?t=33&amp;amp;v=iukBMY4apvI&quot;&gt;Glen Maddern&amp;#39;s&lt;/a&gt; awesome demo about it. It wouldn&amp;#39;t surprise me a lot if JSPM had a bright future.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Highlighted the importance of a proper &lt;code&gt;.gitignore&lt;/code&gt;. I&amp;#39;ve seen some people to neglect this so I felt it&amp;#39;s good to cover. It&amp;#39;s just one of those things that saves your nerves. :)&lt;/li&gt;
&lt;li&gt;Dropped &lt;code&gt;colors: true&lt;/code&gt; setting from &lt;code&gt;devServer&lt;/code&gt; configuration. Reading from source I learned that &lt;code&gt;webpack-dev-server&lt;/code&gt; actually detects for terminal colors automatically. As a result this bit of configuration can be dropped.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pushed &lt;code&gt;notes&lt;/code&gt; definition outside of the &lt;code&gt;App&lt;/code&gt; component. This cleans up the implementation a little.&lt;/li&gt;
&lt;li&gt;Added screenshots to show what you should see after each visual step.&lt;/li&gt;
&lt;li&gt;Expanded the explanation of &lt;code&gt;super()&lt;/code&gt;. Remember that it refers to the method of the parent class.&lt;/li&gt;
&lt;li&gt;Improved the visual outlook of the add button.&lt;/li&gt;
&lt;li&gt;Made sure note tasks get assigned &lt;code&gt;display: inline-block;&lt;/code&gt; to force a minimum height to them even if there&amp;#39;s no content at all. This way they can be edited even then.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clarified &lt;em&gt;Gluing It All Together&lt;/em&gt; section a lot.&lt;/li&gt;
&lt;li&gt;Pushed &lt;em&gt;Dispatching in Alt&lt;/em&gt; to the end. I&amp;#39;ve settled for a convention where the main content should be about getting ahead with the application whereas these sort of good to know things have been pushed to the end.&lt;/li&gt;
&lt;li&gt;Dropped redundant &lt;code&gt;this.notes = this.notes || [];&lt;/code&gt; check. This won&amp;#39;t be needed so it can be safely dropped. The same goes for bootstrapped data in general. It just works.&lt;/li&gt;
&lt;li&gt;Clarified and expanded &lt;em&gt;What Are Decorators?&lt;/em&gt; and added an example showing how to implement &lt;code&gt;@log&lt;/code&gt; for logging how methods are called.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Using &lt;code&gt;AltContainer&lt;/code&gt; Instead of a Decorator&lt;/em&gt; for clarity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added screenshots to illustrate progress.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Modeling Lane&lt;/em&gt; for clarity.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Making Lanes Responsible of Notes&lt;/em&gt; for clarity.&lt;/li&gt;
&lt;li&gt;Push &lt;code&gt;addNote&lt;/code&gt; and &lt;code&gt;deleteNote&lt;/code&gt; &lt;code&gt;bind&lt;/code&gt;s to &lt;code&gt;constructor&lt;/code&gt; level. Logically &lt;code&gt;Lane&lt;/code&gt; id remains the same during its lifecycle so this seemed like a safe change to make.&lt;/li&gt;
&lt;li&gt;Highlighted important code changes using bullet points.&lt;/li&gt;
&lt;li&gt;Added a section known as &lt;em&gt;On Namespacing Components&lt;/em&gt;. This is a small technique you may find handy. It allows you to model cleaner component APIs so it&amp;#39;s worth knowing.&lt;/li&gt;
&lt;li&gt;Added missing &lt;code&gt;get&lt;/code&gt; to &lt;code&gt;NoteStore&lt;/code&gt;. While at it I bummed a couple of lines of code from it. Now it&amp;#39;s as compact as it can get.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reworked introduction.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Preparing Notes to Be Sorted&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Pushed &lt;code&gt;ItemTypes&lt;/code&gt; to &lt;code&gt;&amp;#39;../libs/item_types&amp;#39;&lt;/code&gt; as it&amp;#39;s not a component.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be doing more work on this chapter to make it clearer still.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more context to the code examples to make them clearer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Made sure &lt;code&gt;preversion&lt;/code&gt; hook &lt;code&gt;git commit&lt;/code&gt; takes &lt;code&gt;--allow-empty&lt;/code&gt; to allow empty distribution commits to be made.&lt;/li&gt;
&lt;li&gt;Dropped redundant version related tip as &lt;code&gt;preversion&lt;/code&gt; hook does everything we need now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on CSS Modules and linked to &lt;a href=&quot;https://github.com/gajus/react-css-modules&quot;&gt;gajus/react-css-modules&lt;/a&gt; as that makes it more convenient to work with them in React.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll continue going through the content with my editor while listening to your feedback. I&amp;#39;m particularly interested in &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues/224&quot;&gt;highlighting updated lines&lt;/a&gt; as that would make it easier to follow what lines of code changed during the tutorial. I believe resolving this could help to push the book quality a notch further.&lt;/p&gt;
&lt;p&gt;Now that the content is getting solid this means I can spend more time on producing new content. I&amp;#39;ll be focusing on typing next. Also some other plans have been put to motion but more on those later.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think this was yet another good step towards a quality release at Amazon. Thanks for everyone involved! You make it worthwhile. :)&lt;/p&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>MobX - Reactive React - Interview with Michel Weststrate</title><id>amobxreactivereactinterviewwithmichelweststrate2015-08-19t00:00:00z</id><link href="https://survivejs.com/blog/mobx-interview/"></link><updated>2015-08-19T00:00:00Z</updated><content type="html">&lt;p&gt;As React deals only with the view layer you will often have to complement it with something else. &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux architecture&lt;/a&gt; is one answer but not the only one. &lt;a href=&quot;https://mobxjs.github.io/mobx/&quot;&gt;MobX&lt;/a&gt; by &lt;a href=&quot;https://github.com/mweststrate&quot;&gt;Michel Weststrate&lt;/a&gt; is a refreshing alternative. But what is it really about?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#can-you-tell-something-about-yourself-michel-how-did-you-discover-react-&quot; id=&quot;can-you-tell-something-about-yourself-michel-how-did-you-discover-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell something about yourself Michel? How did you discover React?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#can-you-tell-something-about-yourself-michel-how-did-you-discover-react-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/bdbeb02a7fe50b769e67e0c076b33c54?size=200&quot; alt=&quot;Michel Weststrate&quot; class=&apos;author&apos; width=&apos;100&apos; height=&apos;100&apos; /&gt;
&lt;/span&gt;
I&amp;#39;m a lead developer at Mendix where I worked on both frontend and backend development. About half a year ago me and my team started working on a greenfield,  enterprise scale project where most of the complexity is on the client side. We started a small research project to find the right technology and looked into Angular, Ember and React.
&lt;/p&gt;

&lt;p&gt;React was definitely the one that did enlighten us the most. Its mental model is really simple, it has a clearly defined scope and it is convenient to write.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-drove-you-to-develop-mobx-why-not-to-just-stick-with-flux-&quot; id=&quot;what-drove-you-to-develop-mobx-why-not-to-just-stick-with-flux-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What drove you to develop MobX Why not to just stick with Flux?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-drove-you-to-develop-mobx-why-not-to-just-stick-with-flux-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Performance and code simplicity are both very important values in our project. Performance because we have to draw hundreds of different, moving components at 50fps. Code simplicity because we have about 400 different domain concepts to cover, so all our components should be really DRY. An always-re-render-everything approach results in very simple code. But it doesn&amp;#39;t cut it in terms of performance.&lt;/p&gt;
&lt;p&gt;With most Flux implementations, it really seems that to achieve performance you have to give up code simplicity. Immutable data is often presented as the way to go here. Yet it results in verbose controller (store) functions and forces you to do reference management yourself.&lt;/p&gt;
&lt;p&gt;With mutable data structures, it is trivial to guarantee that there is only one version of a certain domain object in memory. So you never have to worry whether you leaked an old reference. With immutable data, pointer equality guarantees structural equality. Which is nice in terms of optimizations and history. Yet with mutable data, pointer equality means that you are looking at conceptually the same (and latest) thing.&lt;/p&gt;
&lt;p&gt;So our goal for MobX is: Be able to write components that look like they are always fully rendered. Without needing nifty things like cursors or store subscriptions. To achieve DRY: the render function is the dependency tree, and nothing else. For our model and controller code we wanted to be able to write vanilla JS code as much as possible. Be able to use the mutable arrays and objects, cyclic data-structures and classes. I think MobX achieves these goals.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#mobx-can-work-with-flux&quot; id=&quot;mobx-can-work-with-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;MobX can work &lt;strong&gt;with&lt;/strong&gt; Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#mobx-can-work-with-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is actually funny that you present MobX as an alternative to Flux. MobX can be combined with most Flux implementations. But I heard indeed from several people that they dropped Flux after starting to use MobX in their project.&lt;/p&gt;
&lt;p&gt;I think the issue with Flux is that it is very obtrusive to your code base. If you use React and Flux together, it impacts your whole codebase. While just React nicely separates the concerns of view and &amp;#39;the rest&amp;#39;. With Flux frameworks you go all-in. That introduces new problems like: &amp;#39;how do I do async actions&amp;#39; and &amp;#39;my actions need to go through the stores in a certain order&amp;#39;.&lt;/p&gt;
&lt;p&gt;That makes me wonder: Did you have these questions when building vanilla JavaScript applications? What do you get in return from Flux? I think most things offered by Flux can also be achieved by disciplined programming. Stuff like uni-directional flow and making it clear where your state lives.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#on-frameworks-vs-libraries&quot; id=&quot;on-frameworks-vs-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;On frameworks vs. libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#on-frameworks-vs-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At Mendix we are pretty reluctant to use all-in frameworks. The first two years they serve you really well. But the third year they cannot longer keep up the pace with new technologies. The fourth year you spent refactoring just be able to adopt new technologies.&lt;/p&gt;
&lt;p&gt;We have learned from that, so MobX tries to be as unobtrusive as possible. Less obtrusive than frameworks that use immutables, cursors or reactive streams. So that you have a great deal of flexibility in how you structure your controller, view and model code (or actions and stores).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-are-your-next-steps-how-do-you-plan-to-develop-mobx-further-&quot; id=&quot;what-are-your-next-steps-how-do-you-plan-to-develop-mobx-further-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What are your next steps? How do you plan to develop MobX further?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-are-your-next-steps-how-do-you-plan-to-develop-mobx-further-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;MobX is all about updating views on your data automatically. People often interpret views as &amp;#39;user interface&amp;#39; and this plays a central role indeed in the React integration. But reactive data is really convenient for backend integration as well.&lt;/p&gt;
&lt;p&gt;At our project we do not only use MobX to update the user interface, but also to create a changelog that is sent to the backend server. Both are just views on the same data. I hope to get this idea more clear and to find some nice convenience methods that hints users in this direction.&lt;/p&gt;
&lt;p&gt;Soon, MobX will include a way to visualize all the relations between state and views. This will provide great insight in the actual flow of state through your application.&lt;/p&gt;
&lt;p&gt;And maybe I should write some Flux thingy around MobX and React. Because either people seem to think you need to Flux in order to properly React. Or they just love to be guided in how to setup each part of their application.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think React has a brighter future than Angular. Simply because you aren&amp;#39;t stuck with a full fledged framework that you have to obey, or it will work against you. But React has to keep an ecosystem that prefers composition of micro libraries over all-in-one solutions.&lt;/p&gt;
&lt;p&gt;This is also the reason that small editors like Sublime and Atom in combination with standalone build tools like Grunt and Gulp are now more popular than feature creeped IDEs (I think, I don&amp;#39;t have any numbers on that).&lt;/p&gt;
&lt;p&gt;No framework lives forever. So if you want to make sure your software outlives your frameworks, you have to be able to replace your libraries one by one. One day you will wake up to discover that browsers are fast enough to re-calculate your whole application on each state change. Then you just remove MobX and everything will work just the same as the day before without a major refactoring.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m very interested to see what Relay will do in this regard. Because from a bird&amp;#39;s eye view it seems to increase the coupling between view, controller and backend. Making it much harder to replace any of these parts.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dan Abramov, his &lt;a href=&quot;https://github.com/gaearon/redux&quot;&gt;redux&lt;/a&gt; is the only &amp;#39;Flux implementation&amp;#39; I could see myself using. It is not unobtrusive if you are coming from the mutable world, but the mental model of redux is beautiful and the dev tools are fun. I can imagine it works really well in (at least) medium sized applications.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Michel! It was certainly enlightening. We ported the book &lt;a href=&quot;https://github.com/survivejs/mobx-demo&quot;&gt;Notes and Kanban examples to MobX&lt;/a&gt;. Check out the source to see how this worked out. Compared to the original I was definitely positively surprised. MobX seems like a good fit for these problems. You can play around with MobX online by taking the &lt;a href=&quot;https://mobxjs.github.io/mobx/getting-started.html&quot;&gt;ten minute, interactive introduction to MobX + React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Michel goes into more detail at &lt;a href=&quot;https://www.mendix.com/tech-blog/making-react-reactive-pursuit-high-performing-easily-maintainable-react-apps/&quot;&gt;his post about making React reactive&lt;/a&gt;. So if this article piqued your interest that might be a worthwhile read. Of course you can just hop into the &lt;a href=&quot;https://github.com/mobxjs/mobx-react-boilerplate&quot;&gt;MobX boilerplate&lt;/a&gt; and proceed from there.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v1.7</title><id>asurvivejswebpackandreactv172015-08-16t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-17/"></link><updated>2015-08-16T00:00:00Z</updated><content type="html">&lt;p&gt;I skipped doing a public post for &lt;code&gt;v1.6&lt;/code&gt; as I was too tired (berry season is taxing). Now I&amp;#39;m going to give you release notes for both &lt;code&gt;v1.6&lt;/code&gt; and &lt;code&gt;v1.7&lt;/code&gt; at once. I have also some news of the future plans. So stay tuned.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#development-model-changes&quot; id=&quot;development-model-changes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Development Model Changes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#development-model-changes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve moved to a staged development model. Now I maintain &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;dev&lt;/code&gt; branches. &lt;code&gt;master&lt;/code&gt; contains the current stable release. All development happens at &lt;code&gt;dev&lt;/code&gt;. This way the code examples stay in sync with the book and the site. Less frustration and a better book for everyone. If you have PRs in mind, please make them against &lt;code&gt;dev&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-v1-6&quot; id=&quot;book-improvements-v1-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.6&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-v1-6&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 63 commits went to &lt;code&gt;v1.6&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some typo fixes were made. A lot more follow in &lt;code&gt;v1.7&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt; configuration was pushed to &lt;code&gt;webpack.config.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Noted that &lt;code&gt;webpack.config.babel.js&lt;/code&gt; works. I&amp;#39;ve expanded on this at &lt;code&gt;v1.7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A lot of effort went into making &lt;em&gt;Implementing a Basic Note Application&lt;/em&gt; easier to approach&lt;/li&gt;
&lt;li&gt;Dropped custom &lt;code&gt;findIndex&lt;/code&gt;. In &lt;code&gt;v1.7&lt;/code&gt; I went further and now it uses &lt;a href=&quot;https://www.npmjs.com/package/array.prototype.findindex&quot;&gt;array.prototype.findindex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added imagery to &lt;em&gt;React and Flux&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Mentioned that &lt;code&gt;-S&lt;/code&gt; and &lt;code&gt;-D&lt;/code&gt; map to &lt;code&gt;npm i --save&lt;/code&gt; and &lt;code&gt;npm i --save-dev&lt;/code&gt;. This is just for you keyboard jockeys out there.&lt;/li&gt;
&lt;li&gt;Added the book subtitle to the cover. It looked strange without.&lt;/li&gt;
&lt;li&gt;Formatted all &lt;code&gt;npm i&lt;/code&gt; parts so that they stand out better. The web version uses special formatting reminiscent of a real terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.5.0...v1.6.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements-v1-7&quot; id=&quot;book-improvements-v1-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.7&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements-v1-7&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;108 commits went to &lt;code&gt;v1.7&lt;/code&gt;. So based on numbers it was busier. Especially the early part of the week was good. After that it was all berries and mushrooms for me. It&amp;#39;s the season after all and Winter is coming.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A massive amount of typo and grammar fixes were made in this iteration. I tried my luck with Fiverr and it paid off seriously. Thank you Ava and Nancy! There might be some left still but we squashed quite a few. I also ran the content through &lt;a href=&quot;http://www.hemingwayapp.com/&quot;&gt;Hemingway&lt;/a&gt; to simplify sentence structures where needed.&lt;/li&gt;
&lt;li&gt;I managed to make &lt;em&gt;webpack.config.js&lt;/em&gt; &lt;code&gt;TARGET&lt;/code&gt; selection cross-platform. Now the configuration relies on &lt;code&gt;process.env.npm_lifecycle_event&lt;/code&gt;. npm sets that during execution and we can rely on that. Thanks Hector for pointing me to the right direction!&lt;/li&gt;
&lt;li&gt;Clarified point about &lt;code&gt;eval&lt;/code&gt;. As it happens Webpack provides multiple &lt;a href=&quot;https://webpack.js.org/configuration/devtool/#devtool&quot;&gt;devtool&lt;/a&gt; options. I suggest &lt;code&gt;eval-source-map&lt;/code&gt; for development in small projects. You can try faster, lower quality options with bigger projects.&lt;/li&gt;
&lt;li&gt;Noted that it&amp;#39;s possible to exit Node.js repl using &lt;code&gt;CTRL-D&lt;/code&gt; instead of &lt;code&gt;CTRL-C&lt;/code&gt;. Thanks to Ahmed for pointing this out!&lt;/li&gt;
&lt;li&gt;Improved Kanban project naming (consistent with CRUD) overall. Now it should read a little better. I also pushed reference related logic to a store method. It&amp;#39;s nicer but still a lot of code considering what it actually does. As long as we operate through indices like this, there&amp;#39;s no neat way around it.&lt;/li&gt;
&lt;li&gt;Showed how to set up isomorphic rendering for the Kanban application. It&amp;#39;s not that useful in this case. I do hope you get the idea as it&amp;#39;s powerful.&lt;/li&gt;
&lt;li&gt;Dropped deployment chapter. As I managed to explain isomorphic rendering earlier in the previous point, the deployment chapter became redundant. Good riddance.&lt;/li&gt;
&lt;li&gt;Added JSX suffixes to imports. As the project gets run through Node.js context when rendering in an isomorphic way, I had to add JSX suffixes. Perhaps someone knows a better solution but this made sense at the time.&lt;/li&gt;
&lt;li&gt;Pushed id creation inside stores. The reasoning for this is that if you are dealing with a real back-end, that&amp;#39;s the way it goes. You should &lt;em&gt;never&lt;/em&gt; have to think about ids at view level so it&amp;#39;s better to do it right. Besides now gluing a real back-end with the project is a notch easier.&lt;/li&gt;
&lt;li&gt;Reworked the early part of the Flux chapter with my editor (thanks Jesús!). The chapter can likely still be improved but it&amp;#39;s better now. It&amp;#39;s a little long to my tastes but on the other hand it covers a lot of ground.&lt;/li&gt;
&lt;li&gt;Ended up using term &lt;em&gt;Webpack&lt;/em&gt; everywhere. I know &lt;em&gt;webpack&lt;/em&gt; is the correct name but I went for consistency here. So consider that &amp;quot;Webpack&amp;quot; == &amp;quot;webpack&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to get some screenshots done for this iteration too and work on a Leanpub exclusive chapter. This work will go to the next iteration. The good news are that now there&amp;#39;s far less to worry about so I&amp;#39;m more likely to get these tasks done.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.6.0...v1.7.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Fail to plan, plan to fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems to me the book is on a good track and we&amp;#39;re making steady progress. New people are finding the book and even buying it. And the feedback has been good. I know the book isn&amp;#39;t everyone&amp;#39;s piece of cake. But I&amp;#39;m okay with that. By trying to please everyone you please none.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#going-amazon&quot; id=&quot;going-amazon&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Going Amazon&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#going-amazon&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next major goal for me is to get the book to Amazon, iBooks and such through &lt;a href=&quot;https://www.lulu.com/&quot;&gt;Lulu&lt;/a&gt;. This might also provide us a paper version if there&amp;#39;s demand. Enhanced distribution could go a long way in improving sales. After all I&amp;#39;ll need to make this work financially in order to be able to write more.&lt;/p&gt;
&lt;p&gt;For this to happen we&amp;#39;ll need to lock the scope of the book. This is due to ISBN requirements. You can make small changes to a published book but nowhere on the level what we&amp;#39;re doing right now.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#but-there-s-more-technology-to-cover&quot; id=&quot;but-there-s-more-technology-to-cover&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;But There&amp;#39;s More Technology to Cover&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#but-there-s-more-technology-to-cover&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I know interesting new technology, such as &lt;a href=&quot;http://redux.js.org/&quot;&gt;redux&lt;/a&gt;, keeps on coming out all the time. The problem is that if I keep on changing the newest cool thing I will never get a stable version out. It is far better idea to lock the scope and cover the interesting things through the blog.&lt;/p&gt;
&lt;p&gt;This gives me a more flexible way to try out various ideas before committing them to a book. It also helps to give the current work some visibility it sorely needs.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#the-current-plan&quot; id=&quot;the-current-plan&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Current Plan&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#the-current-plan&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a result the current plan is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continue iterating on the current content based on feedback. No major changes to the chapter structure anymore, just minor tweaks to make the book more approachable.&lt;/li&gt;
&lt;li&gt;Write chapters that are unique for the commercial edition. This improves the value proposition and actually might encourage more people to buy the book. After all, that enables more content! I expect at least three chapters.&lt;/li&gt;
&lt;li&gt;Expand this blog with supporting topics. I have a nice series of posts planned up and I welcome ideas. I want more people to discover the book and this could go a long way towards that.&lt;/li&gt;
&lt;li&gt;Figure out how Hacker News works. I did try &lt;em&gt;Show HN&lt;/em&gt; but received zero response. Perhaps I&amp;#39;ll have better luck next time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So towards the Amazon release I go. It might be interesting to try running some sort of campaign to eventually open the unique content. For now I will need to let the commercial version to have some leverage over the community edition. Perhaps there&amp;#39;s a way to align these two goals (community content, making a living) but as for now this might be the way.&lt;/p&gt;
&lt;p&gt;I will be able to tell a lot more after a wider scale release. Given I&amp;#39;m a first time author I&amp;#39;m still learning the ropes here and no doubt making a lot of mistakes in the process. I have other book ideas but I&amp;#39;ll have to get this first one out before I can even think about those. Perhaps within a year or so I can do an expanded second edition. Any sooner and I&amp;#39;m pissing off my first edition readers. :)&lt;/p&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome. It&amp;#39;s interesting to write a book this way. That&amp;#39;s for sure.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>A Quick Look at React Books</title><id>aaquicklookatreactbooks2015-08-01t00:00:00z</id><link href="https://survivejs.com/blog/react-books/"></link><updated>2015-08-01T00:00:00Z</updated><content type="html">&lt;p&gt;As an author I like to keep an eye on the market. You have to know who you are against after all! It&amp;#39;s not an understatement to say could that it&amp;#39;s about to get swarmed with books. In this post I&amp;#39;ll go through the ones I could find and provide you some intel on them. Perhaps you would like to get a couple of books to your collection!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#free-books&quot; id=&quot;free-books&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Free Books&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#free-books&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though there are &lt;a href=&quot;https://github.com/enaqx/awesome-react&quot;&gt;a lot of freely available React resources&lt;/a&gt; there aren&amp;#39;t too many free books yet.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#survivejs-webpack-and-react&quot; id=&quot;survivejs-webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;SurviveJS - Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#survivejs-webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://survivejs.com/&quot;&gt;SurviveJS - Webpack and React&lt;/a&gt; is the most comprehensive freely available book I&amp;#39;m aware of. It will show you how to set up a &lt;a href=&quot;https://webpack.github.io/&quot;&gt;webpack&lt;/a&gt; based development environment and then develop a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Kanban&quot;&gt;Kanban&lt;/a&gt; based on it. More theoretical topics, such as linting, styling and library authoring are discussed as well. At the time of writing it has over 250 pages and more content is planned based on demand.&lt;/p&gt;
&lt;p&gt;The book is open to external contributions and in fact a lot of people have contributed feedback and fixes. From author&amp;#39;s point of view this has been just awesome!&lt;/p&gt;
&lt;p&gt;If you like the book and want to support the effort, &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;buying a digital copy&lt;/a&gt; would most likely make the author&amp;#39;s day. Suggested price without VAT is $19.99. Pay based on value you perceive as Leanpub books allow.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s also &lt;a href=&quot;http://www.amazon.com/SurviveJS-Webpack-React-apprentice-master/dp/152391050X&quot;&gt;a paper version available through Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-webpack-cookbook&quot; id=&quot;react-webpack-cookbook&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Webpack Cookbook&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-webpack-cookbook&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;React Webpack Cookbook&lt;/a&gt; is a little guide I developed with &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian Alfoni&lt;/a&gt;. The eventual plan is to polish the content and host the improved version here with a similar support model.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#hacking-with-react&quot; id=&quot;hacking-with-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Hacking with React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#hacking-with-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hackingwithreact.com/&quot;&gt;Hacking with React&lt;/a&gt; by Paul Hudson delves straight into React. At the time of writing it has 123 pages and it uses a no-nonsense approach. In some ways it&amp;#39;s the anti-thesis to SurviveJS, but there&amp;#39;s room for different kind of offerings. Even though the book is free to read online, the author offers it through &lt;a href=&quot;https://leanpub.com/hackingwithreact/&quot;&gt;Leanpub&lt;/a&gt; as well. The minimum price without VAT is $10.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-native-animation-book&quot; id=&quot;react-native-animation-book&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Native Animation Book&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-native-animation-book&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://browniefed.com/react-native-animation-book/&quot;&gt;React Native Animation Book&lt;/a&gt; by &lt;a href=&quot;http://browniefed.com/&quot;&gt;Jason Brown&lt;/a&gt; explains how to deal with animation in React Native. You get all relevant bits in a single place. That&amp;#39;s it really.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#commercial-books&quot; id=&quot;commercial-books&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Commercial Books&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#commercial-books&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The commercial side of React books is about to go wild. &lt;strong&gt;Developing a React Edge&lt;/strong&gt; was likely the first book on the market. Since then a few others have followed. The challenge for authors is that as React moves forward quite fast. Books will require constant maintenance effort to stay up to date.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#developing-a-react-edge-the-javascript-library-for-user-interfaces&quot; id=&quot;developing-a-react-edge-the-javascript-library-for-user-interfaces&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing a React Edge: The JavaScript Library for User Interfaces&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#developing-a-react-edge-the-javascript-library-for-user-interfaces&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9781939902122.do&quot;&gt;Developing a React Edge&lt;/a&gt; by Frankie Bagnardi, Jonathan Beebe, Richard Feldman, Tom Hallett, Simon Højberg and Karl Mikkelsen was published by Bleeding Edge Press at November 2014. At 234 pages it covers a wide range of React related issues starting from the very basics and including aspects such performance tuning, server side rendering and testing.&lt;/p&gt;
&lt;p&gt;As I haven&amp;#39;t bought the book it is hard for me to evaluate how up to date it is. The book has both digital and paperback versions available. At Amazon the price is around $30 for both VAT included. At O&amp;#39;Reilly digital edition costs $22.99.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-d3-js&quot; id=&quot;react-d3-js&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React+d3.js&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-d3-js&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://swizec.com/reactd3js/&quot;&gt;React+d3.js&lt;/a&gt; by &lt;a href=&quot;http://swizec.com/&quot;&gt;Swizec Teller&lt;/a&gt; is a focused book at 63 pages. At &lt;a href=&quot;https://leanpub.com/reactd3js&quot;&gt;Leanpub&lt;/a&gt; it&amp;#39;s minimum price is $9 while suggested on is at $19 VAT excluded. There are expanded packages available that provide more material such as screencast and example code. In the book you will build a small data visualization project based on the technologies.&lt;/p&gt;
&lt;p&gt;If you want a quick read that&amp;#39;s straight to the point, this could be it. It&amp;#39;s nowhere broad as &lt;strong&gt;Developing a React Edge&lt;/strong&gt; for instance but if you just want to visualize data, this might work.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-beginner-s-guide&quot; id=&quot;react-beginner-s-guide&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React - Beginner&amp;#39;s Guide&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-beginner-s-guide&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/react-beginner-guide&quot;&gt;React - Beginner&amp;#39;s Guide&lt;/a&gt; by Daniel Schmitz and Daniel Pedrinha Georgii is a small, focused book. Its minimum price is $5 VAT excluded.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#effective-react&quot; id=&quot;effective-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Effective React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#effective-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/effective-react&quot;&gt;Effective React&lt;/a&gt; by Ian Chursky covers the basic tools you need to get started with React. Also ECMAScript 6 is covered. Published through Leanpub, it&amp;#39;s minimum price has been set to $16.99 (no VAT).&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#descubre-react&quot; id=&quot;descubre-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Descubre React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#descubre-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/descubre-react&quot;&gt;Descubre React&lt;/a&gt; by &lt;a href=&quot;http://soyjavi.com/&quot;&gt;Javi Jiménez&lt;/a&gt; is a Spanish introduction to React. It has 83 pages and its minimum price is $12.49 VAT excluded.&lt;/p&gt;
&lt;p&gt;If you want a Spanish introduction to React, here&amp;#39;s your only option at the moment.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#pengenalan-reactjs&quot; id=&quot;pengenalan-reactjs&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Pengenalan ReactJS&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#pengenalan-reactjs&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/pengenalan-reactjs&quot;&gt;Pengenalan ReactJS&lt;/a&gt; by Donny Stark is an Indonesian introduction to React. It will be published through Leanpub. At the time of writing it has 34 pages. No minimum price has been set yet.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#rails-meets-react-js&quot; id=&quot;rails-meets-react-js&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Rails Meets React.js&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#rails-meets-react-js&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.arkency.com/rails-react/&quot;&gt;Rails Meets React.js&lt;/a&gt; by Marcin Grzywaczewski and &lt;a href=&quot;http://robert.pankowecki.pl/&quot;&gt;Robert Pankowecki&lt;/a&gt; explains how to get started with React in Ruby on Rails environment. The book is available through Arkency for $49 and has over 150 pages.&lt;/p&gt;
&lt;p&gt;Based on table of contents the book shows you how to get started from scratch, how to set up an effective asset pipeline and of course how to integrate with Rails. The book covers also concepts such as testing, forms and i18n. Note that React portions have been written in CoffeeScript.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-by-example&quot; id=&quot;react-by-example&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React by Example&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-by-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://reactkungfu.com/react-by-example/&quot;&gt;React by Example&lt;/a&gt; by Arkency explains React through numerous examples. The book shows how to build a password strength meter, credit card input and Twitter posting box for instance. The book is available for $49 and has over 130 pages.&lt;/p&gt;
&lt;p&gt;If you want to learn React through a series of specific examples this might be the way to go. Even though the book is in early access it has sold already over 200 copies.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#easy-react&quot; id=&quot;easy-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Easy React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#easy-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://easyreactbook.com/&quot;&gt;Easy React&lt;/a&gt; by &lt;a href=&quot;http://www.wjgilmore.com/&quot;&gt;W. Jason Gilmore&lt;/a&gt; is available through &lt;a href=&quot;https://leanpub.com/easyreact&quot;&gt;Leanpub&lt;/a&gt;. The book is currently in beta and the price starts from $14.99 without VAT. At the time of writing it has 83 pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Easy React&lt;/strong&gt; is a project based book and focuses on an application known as &lt;em&gt;VocabGiant&lt;/em&gt;, a language learning tool. The book discusses a wide range of topics ranging from setting up a development environment, developing the app (Flux included), developing a backend (REST + Express + MongoDB) and React Native. So by the looks of it this should be a great book for a full stack developer!&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-under-the-hood&quot; id=&quot;react-under-the-hood&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Under the Hood&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-under-the-hood&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/reactunderthehood&quot;&gt;React Under the Hood&lt;/a&gt; by Freddy Rangel is available through Leanpub. The minimum price of the book is $9.99 without VAT. At the time of writing it has around 80 pages of content. As per title, the book delves into the technical foundations of React.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#reactjs-cookbook&quot; id=&quot;reactjs-cookbook&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;ReactJS Cookbook&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#reactjs-cookbook&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/web-development/reactjs-cookbook&quot;&gt;ReactJS Cookbook&lt;/a&gt; by Johannes Stein is available through Packt exclusively at the moment. It is on preorder for $39.68 and is due November.&lt;/p&gt;
&lt;p&gt;As many books discussed by now, &lt;strong&gt;ReactJS Cookbook&lt;/strong&gt; shows you how React components work and goes into topics such as animation, isomorphism, ES6 and testing. It is expected to have 301 pages.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-js-essentials&quot; id=&quot;react-js-essentials&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React.js Essentials&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-js-essentials&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/web-development/reactjs-essentials&quot;&gt;React.js Essentials&lt;/a&gt; by &lt;a href=&quot;http://artemij.com/&quot;&gt;Artemij Fedosejev&lt;/a&gt; is available through Packt and Amazon. At Packt preorder price of the digital version is $23.80 while at &lt;a href=&quot;http://www.amazon.com/React-js-Essentials-Artemij-Fedosejev-ebook/dp/B00YSILZRW&quot;&gt;Amazon&lt;/a&gt; Kindle version is available for $29.75. According to Packt site the book should been available in July but Amazon has expected date at January 2016.&lt;/p&gt;
&lt;p&gt;The book is expected to have 194 pages. It covers basics of React and goes into architecture (Flux). There is also information about testing (Jest). No official table of contents is available as of yet.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#introduction-to-react&quot; id=&quot;introduction-to-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction to React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#introduction-to-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apress.com/9781484212462&quot;&gt;Introduction to React&lt;/a&gt; by Cory Gackenheimer is available through Apress and Amazon. At Apress digital edition is available for $17.99 while print costs $24.99. At Amazon paperback costs $19.68. The book is expected to be available at September.&lt;/p&gt;
&lt;p&gt;The planned length of the book is 170 pages and it will cover basics of React, Flux architecture and testing at least. There is also specific discussion about JSX.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#pro-react&quot; id=&quot;pro-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Pro React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#pro-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apress.com/9781484212615&quot;&gt;Pro React&lt;/a&gt; by Cassio de Sousa Antonio is available through Apress and Amazon. At Apress digital edition is available for $27.99 while print costs $39.99. At Amazon the print costs the same. The book should be available at December.&lt;/p&gt;
&lt;p&gt;The book has 280 pages and covers a wide range of React related topics.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-up-running-building-web-applications&quot; id=&quot;react-up-running-building-web-applications&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React: Up &amp;amp; Running: Building Web Applications&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-up-running-building-web-applications&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920042266.do&quot;&gt;React: Up &amp;amp; Running: Building Web Applications&lt;/a&gt; by Stoyan Stefanov is available through O&amp;#39;Reilly and Amazon. At O&amp;#39;Reilly digital early access version costs $33.99 while print goes for $39.99. At Amazon print is slightly cheaper at $37.99.&lt;/p&gt;
&lt;p&gt;Early chapters of the book are already available and according to Amazon the full book should be completed by December. The book will have around 250 pages.&lt;/p&gt;
&lt;p&gt;I probably don&amp;#39;t need to repeat myself here. Expect to learn basics of React and then some.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#master-react&quot; id=&quot;master-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Master React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#master-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://ludovf.net/reactbook/&quot;&gt;Master React&lt;/a&gt; by Ludovico Fischer doesn&amp;#39;t have a lot of information available yet. Digital version of the book is due Autumn and there is some early content at the site.&lt;/p&gt;
&lt;p&gt;By the looks of the book will go through a wide range of React related concepts. These include development tools, third party libraries, JSX and server-side React as with so many other books.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#mastering-react&quot; id=&quot;mastering-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Mastering React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#mastering-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://pragprog.com/book/lfreact/mastering-react&quot;&gt;Mastering React&lt;/a&gt; by The Pragmatic Programmers doesn&amp;#39;t have a lot of information available. So far we know that it will have 250 pages and is due 10th of January, 2016.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-native-books&quot; id=&quot;react-native-books&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Native Books&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-native-books&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s also an emerging category of React Native books and the first book has already been released and more are on their way.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#beginning-mobile-app-development-with-react-native&quot; id=&quot;beginning-mobile-app-development-with-react-native&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Beginning Mobile App Development with React Native&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#beginning-mobile-app-development-with-react-native&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://beginning-mobile-app-development-with-react-native.com/&quot;&gt;Beginning Mobile App Development with React Native&lt;/a&gt; by &lt;a href=&quot;http://manuel.kiessling.net/&quot;&gt;Manuel Kiessling&lt;/a&gt; is likely the first book on the market. It is available through &lt;a href=&quot;https://leanpub.com/beginning-mobile-app-development-with-react-native&quot;&gt;Leanpub&lt;/a&gt; for $29.99 (no VAT) and has 82 pages guiding you into the topic.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#learning-react-native&quot; id=&quot;learning-react-native&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Learning React Native&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#learning-react-native&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Learning React Native by &lt;a href=&quot;http://blog.bonnieeisenman.com/&quot;&gt;Bonnie Eisenman&lt;/a&gt; is available through O&amp;#39;Reilly and Amazon. At O&amp;#39;Reilly digital early access version costs $33.99 while print goes for $39.99. At Amazon print is available for $32.59 and is expected to deliver at December. The book is around 200 pages long.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#react-quickly&quot; id=&quot;react-quickly&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Quickly&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#react-quickly&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.manning.com/books/react-quickly&quot;&gt;React Quickly&lt;/a&gt; by Azat Mardan, published by Manning Publications, delves through React related topics quickly as the title promises. The early access version costs $31.99. If you want the paperback as well, expect to pay $39.99.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A lot of the React books have significant overlap. Their length ranges from very short (63 pages) up to quite long (301 pages). There&amp;#39;s also wide variance in pricing as a result. The cheapest goes for $5 while the most expensive costs $49. There are both self-published options and books backed by a publisher. It is hard to comment on the quality of the books as I haven&amp;#39;t read these.&lt;/p&gt;
&lt;p&gt;The situation is very interesting. It&amp;#39;s going to be difficult for a book to stand out content-wise. The biggest differentiating factor I can see is actually openness of the book. My book is a notable exception to the rule. It&amp;#39;s going to be interesting to see if it makes any difference compared to the competition and publisher backed options.&lt;/p&gt;
&lt;p&gt;Let me know if I missed some awesome book at the comments and I&amp;#39;ll add it to the listing.&lt;/p&gt;
</content></entry><entry><title>SurviveJS - Webpack and React - v1.5</title><id>asurvivejswebpackandreactv152015-07-31t00:00:00z</id><link href="https://survivejs.com/blog/survivejs-15/"></link><updated>2015-07-31T00:00:00Z</updated><content type="html">&lt;p&gt;Compared to the previous tagged release (v1.1.0, 10th of July) this new one (v1.5.0) is a monster. 274 commits went into it and nine contributors took part. Of course it was up to me to do most of the work. That said it is always amazing to get external contributions. It always makes my day when I get one.&lt;/p&gt;
&lt;p&gt;I have to give my biggest thanks to &lt;a href=&quot;https://github.com/Foxandxss&quot;&gt;Jesús Rodríguez Rodríguez&lt;/a&gt;, my new official editor! It&amp;#39;s not understatement to say that he motivated most of the changes you see in the current revision.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#book-improvements&quot; id=&quot;book-improvements&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#book-improvements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The book has been improved in various important ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The early part of the book gets faster to the interesting parts (i.e. React). I removed some of the fluff (Flow, redundant &lt;code&gt;index.html&lt;/code&gt; etc.) and eliminated the old &lt;code&gt;Getting Started&lt;/code&gt; chapter. Now you jump straight to &lt;a href=&quot;https://survivejs.com/webpack_react/developing_with_webpack&quot;&gt;developing with webpack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There&amp;#39;s a new chapter about &lt;a href=&quot;https://survivejs.com/webpack_react/building_kanban&quot;&gt;building the Kanban project&lt;/a&gt;. I focus on production related concerns there solely and discuss various related techniques. I believe some of those might be useful even if you don&amp;#39;t care about the project itself.&lt;/li&gt;
&lt;li&gt;The architecture of the Kanban application has been revamped to be singleton based. This is more faithful to the way &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux architecture&lt;/a&gt; has been designed to use. There are some parts of code that aren&amp;#39;t particularly beautiful and there&amp;#39;s likely some room for improvement.&lt;/li&gt;
&lt;li&gt;More insightful explanations. Instead of dropping some code and waiting you to decipher it I&amp;#39;ve moved to &lt;strong&gt;explain&lt;/strong&gt;, &lt;strong&gt;show code&lt;/strong&gt;, &lt;strong&gt;what happened&lt;/strong&gt; kind of model that should be hopefully easier to follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition there are hundreds of other fixes. But you know me, I don&amp;#39;t like to ramble too much. You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.1.0...v1.5.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#known-issues&quot; id=&quot;known-issues&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Known Issues&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#known-issues&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The portions dealing with Alt don&amp;#39;t support hot loading yet. I will have to craft a pull request to fix &lt;a href=&quot;https://github.com/goatslacker/alt/issues/408&quot;&gt;a hot loading issue&lt;/a&gt;. Doing that should improve your experience a bit. So be prepared to refresh the old fashioned way for now.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will prioritize my work depending on the feedback this release receives. I know some of the current content can be pushed further. For instance deployment chapter could use some TLC. On the other hand it would be a good idea to start serving my paying clients (i.e. Leanpub readers) better.&lt;/p&gt;
&lt;p&gt;Given I want to provide the guys that support me a little extra something I&amp;#39;ve thought of making &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues?q=is%3Aopen+is%3Aissue+label%3A%22bonus+chapter%22&quot;&gt;bonus chapters&lt;/a&gt; available on early access through Leanpub. The chapters would become available to public as certain conditions are met.&lt;/p&gt;
&lt;p&gt;In order to encourage you to encourage me I could tie it to amount of readers. There are two hundred readers right now. I could release a new chapter as another two hundred are gained for instance until I run out of chapters to write. I believe this would be a fair way to deal with it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. There&amp;#39;s a lot of content to go through. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome. I hope you enjoy the improved version of the book.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry><title>Web Design is Scrappy</title><id>awebdesignisscrappy2015-07-17t00:00:00z</id><link href="https://survivejs.com/blog/web-design-is-scrappy/"></link><updated>2015-07-17T00:00:00Z</updated><content type="html">&lt;p&gt;If you had to describe my approach to web design in one word the word would be scrappy. I rather get something to work fast than agonize on details. It is going to take a fair amount of iteration no matter what. This site is a good example of scrappy design.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#getting-scrappy&quot; id=&quot;getting-scrappy&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Scrappy&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#getting-scrappy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started from a base design created by &lt;a href=&quot;http://eldh.co/&quot;&gt;Andreas Eldh&lt;/a&gt;. We have developed a static site generator known as &lt;a href=&quot;https://antwarjs.github.io/&quot;&gt;Antwar&lt;/a&gt; together. Incidentally it is based upon webpack and React. And Antwar itself is based on an &lt;a href=&quot;http://braddenver.com/blog/2015/react-static-site.html&quot;&gt;experiment by Brad Denver&lt;/a&gt;. Feeling scrappy yet?&lt;/p&gt;
&lt;p&gt;As nothing is harder than evaluating your own work I looked actively for feedback during the development process. I had to &lt;a href=&quot;https://antwar.js.org/blog/antwar-050/&quot;&gt;develop Antwar further&lt;/a&gt; in order to reach my goals. Besides the technical part I also had to make sure the content is accessible and that there&amp;#39;s marketing copy in place.&lt;/p&gt;
&lt;p&gt;The design is scrappy in sense that I integrated ideas from various sources. Sometimes I might realize something randomly and will just add it there. A good example is the recent addition of commenting per chapter. I understood it might be a nice way to get some extra feedback on content and help me to see potential problems clearer. And given it was fast to add, it made perfect sense.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#services-to-support-scrappy-design&quot; id=&quot;services-to-support-scrappy-design&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Services to Support Scrappy Design&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#services-to-support-scrappy-design&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides asking for feedback from friends and sometimes total strangers I used a couple of services with varying results. Out of the services &lt;del&gt;criticue&lt;/del&gt; (now defunct) worked the best for me. Often it&amp;#39;s the negative feedback that helps you the most. Criticue helped me to prune out the worst mishaps.&lt;/p&gt;
&lt;p&gt;As I had good experiences of Feedback roulette (defunct now) in the past I set it up too. Unfortunately I have yet to receive single useful round of feedback even though I have a single credit for testing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fivesecondtest.com/&quot;&gt;Five Second Test&lt;/a&gt; was useful for getting answers to specific design issues. I didn&amp;#39;t use it a lot, though, but I can see its value. The response times were adequate as well.&lt;/p&gt;
&lt;p&gt;All of these services allow you to earn credits by providing feedback yourself. Even though this takes time it can be enlightening to see designs of other people and help them to improve. Perhaps over longer term you might develop a stronger intuition for design.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe the current design of the site is quite passable. It doesn&amp;#39;t remind me of the 90s too much at least. I&amp;#39;m sure it could be better in some ways but as they say you are blind to your own work. I have outlined some issues I&amp;#39;m aware of at the &lt;a href=&quot;https://github.com/survivejs/site/issues&quot;&gt;site issue tracker&lt;/a&gt;. If you have any ideas, please set up issues there for me to study or comment on this post.&lt;/p&gt;
&lt;p&gt;I would love to have more functionality on the site. Even though Disqus comments work I believe Medium style commenting system would work better for books. Unfortunately I haven&amp;#39;t been able to find a suitable 3rd party service for this purpose yet.&lt;/p&gt;
&lt;p&gt;It would be nice to have more interactivity. Web as a platform would allow that but of course it&amp;#39;s going to require a lot of work to pull off. That said if you are aiming for the maximum amount of awesomeness, go interactive.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-could-have-been-done-differently-&quot; id=&quot;what-could-have-been-done-differently-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Could Have Been Done Differently?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-could-have-been-done-differently-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would have probably saved a great deal of time by going with some established solution such as &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress&lt;/a&gt; or &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; supports Jekyll particularly well and I have even written a &lt;a href=&quot;http://yeswejekyll.com/&quot;&gt;scrappy guide for it&lt;/a&gt; so I know the topic. I&amp;#39;m also aware of the limitations of Jekyll. Developing Antwar gave me a good excuse to learn more about the topic.&lt;/p&gt;
&lt;p&gt;Whole site design could have been bought from elsewhere. Same goes for marketing copy, photography and such. In fact this given me a good excuse to work on these skills. That said it may be a good idea to use professional services in the future. After all they have spent years honing their skills and will be able to get better results faster.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope this brief post gave you some idea of why the site is the way it is. If you like the design or just want to study how it has been made, check out the &lt;a href=&quot;https://github.com/survivejs/site&quot;&gt;site repository&lt;/a&gt;. The source itself might be a little scrappy in parts but that&amp;#39;s to be expected. It&amp;#39;s a scrappy design after all!&lt;/p&gt;
&lt;p&gt;I suppose the nicest thing about working on a webpack and React stack is that it gives me a nice amount of flexibility. I can build layouts using React and author using Markdown. That&amp;#39;s the best out of both worlds. Antwar is still missing some of the functionality you might expect (pagination, tagging etc.) but it keeps on growing as I use it. No need to aim for perfection the first time around.&lt;/p&gt;
&lt;p&gt;I feel web design is scrappy by definition. It is hard to get everything right the first time around. It is a good idea to leave room for creativity and experimentation. I suppose taken further you would start running tests on your site and looking at the numbers. So far my approach has been guided by intuition and might not be the best when compared to data based approaches.&lt;/p&gt;
</content></entry><entry><title>Reaching Towards the Next Level</title><id>areachingtowardsthenextlevel2015-07-15t00:00:00z</id><link href="https://survivejs.com/blog/reaching-towards-the-next-level/"></link><updated>2015-07-15T00:00:00Z</updated><content type="html">&lt;p&gt;In &lt;a href=&quot;https://survivejs.com/blog/balance&quot;&gt;my previous post&lt;/a&gt; I discussed some of the difficulties of related to technical publishing. I also presented a possible solution, a mixed model that might make open publishing more feasible. The idea is that starting closed and asking for money beforehand you reward early adopters while decreasing the risk of the author. As the content gets opened eventually others can benefit from it. I know this goes against the common wisdoms of book publishing but it&amp;#39;s a model I would like to try.&lt;/p&gt;
&lt;p&gt;It has become apparent to me that if I put my weight behind it, I could grow this into a business that&amp;#39;s able to support me and perhaps a few others should I get so lucky. Even though Finland has its issues it isn&amp;#39;t a bad place to start a company. In fact there&amp;#39;s support for starting businesses that can help to cover starting costs up to 18 months. It will be enough to get past the beginning stage.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-would-a-viable-business-look-like-&quot; id=&quot;what-would-a-viable-business-look-like-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Would a Viable Business Look Like?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-would-a-viable-business-look-like-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to get by I would have to make around $1500 per month after taxes. That&amp;#39;s $50 per day. In terms of book sales that would mean five sales per day assuming a book costs $20 (half goes to side costs). It doesn&amp;#39;t sound so hard when put this way.&lt;/p&gt;
&lt;p&gt;Fortunately book sales aren&amp;#39;t the only towards a sustainable business. More specialized products can be built on top of the freely available content. In addition I&amp;#39;m open to consulting. In the end it comes down to finding the ways in which I can be most useful and provide most value.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#it-s-about-helping-other-developers&quot; id=&quot;it-s-about-helping-other-developers&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;It&amp;#39;s About Helping Other Developers&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#it-s-about-helping-other-developers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a developer myself I have known my share of pain. SurviveJS is about that. I want you to avoid some of that pain. If I can make someone&amp;#39;s life a little easier through SurviveJS I have done my job.&lt;/p&gt;
&lt;p&gt;Besides helping developers I would love to be able to help smoothen the way for other technical authors. Getting started is tough and anything you can do to make it less so is welcome. Leanpub helps in its own way but it isn&amp;#39;t nearly enough. There are just so many things to worry about. And should you fail at some critical aspect, you end up with a dud.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#next-steps&quot; id=&quot;next-steps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Next Steps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My next major goal is to resolve the biggest remaining issues related to the book and get a release out on 31st. After that I&amp;#39;ll expand distribution to see if that makes any difference.&lt;/p&gt;
&lt;p&gt;I have a couple of older books in backburner waiting to be edited. One of them is &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;Webpack and React Cookbook&lt;/a&gt;. It deserves a refresh and an editing pass. As the content is already freely available that won&amp;#39;t change. Ebook will cost, though, and will hopefully provide some financial relief.&lt;/p&gt;
&lt;p&gt;Another, older effort known as &lt;a href=&quot;https://github.com/survivejs/js_tricks_and_tips&quot;&gt;JavaScript Tips and Tricks&lt;/a&gt;, will require a bigger refresh. It&amp;#39;s actually the original &amp;quot;SurviveJS&amp;quot; and the reason why I ended up with the name. The idea of this book is to go through a variety of JavaScript techniques to give you deeper insight to the language. It won&amp;#39;t be a long book. It&amp;#39;s more of a &amp;quot;oh, I can do that?&amp;quot; type of an affair.&lt;/p&gt;
&lt;p&gt;Over shorter term I want to establish little streams like these. After all every dollar counts at this point. The sooner I can reach my viability goal, the better. Over longer term I would love to grow the brand to help other technical authors. But before I can do that I need to help myself and figure out these things. Fortunately I won&amp;#39;t have to do that alone as community support has shown.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Becoming incorporated is both an exciting and a scary step. So far community response has been great so why not to push it and see if this can be turned into a real business? The numbers look realistic to me. In the worst case it won&amp;#39;t work out and I end up with a ton of references to use at a job interview. In the best case I&amp;#39;ll have a little business that will allow me to produce even more content and most importantly keep on helping.&lt;/p&gt;
</content></entry><entry><title>Balancing Between Open and Closed Publishing</title><id>abalancingbetweenopenandclosedpublishing2015-07-14t00:00:00z</id><link href="https://survivejs.com/blog/balance/"></link><updated>2015-07-14T00:00:00Z</updated><content type="html">&lt;p&gt;If there&amp;#39;s one thing technical authors have in common, it&amp;#39;s that they all want to help other people. The question is how to achieve that most effectively. In my &lt;a href=&quot;https://survivejs.com/blog/the-story-so-far&quot;&gt;previous post&lt;/a&gt; I discussed how I have fared with my first effort so far. The results have been mixed. Community response has been amazing in many ways but that hasn&amp;#39;t translated to amazing sales. That said I&amp;#39;m grateful to all that have contributed. In the end sales enable further efforts.&lt;/p&gt;
&lt;p&gt;I was likely naive in thinking that having the content freely available while offering a way to purchase a digital copy would work by default. The greatest benefit of this approach has been possible extra visibility (easy to link) and the amount of external contributions. I believe this has improved the quality of the book further than I could have ever achieved alone. Next time around I might have a group of people that are interested in pushing the content straight from the start!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#current-publishing-solutions&quot; id=&quot;current-publishing-solutions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Current Publishing Solutions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#current-publishing-solutions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As an author you have a couple of options. You can try to pitch your idea to an established publisher. They would take care of the logistics, provide editing and help with the marketing and sales efforts. In return they would take a significant chunk of the profit. Normally you can expect a royalty between 15 and 50 percent per sale depending on the publisher. If you are a tough negotiator you can receive an advance. That will help to fund authoring and will be deduced from potential profits.&lt;/p&gt;
&lt;p&gt;Another option is to self-publish. You will take care of the bits a traditional publisher would. In return you receive a larger chunk of the profit but on the downside you have more work ahead of you. Especially as a first time author this will include some additional risk as you have to learn these things. If you don&amp;#39;t have a pre-existing audience you will have to earn it. More established authors have an advantage here.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#self-publishing-approaches&quot; id=&quot;self-publishing-approaches&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Self-publishing Approaches&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#self-publishing-approaches&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you choose self-publishing you have some additional alternatives. You can do it the old fashioned way. First you find the potential reader somehow, demonstrate the value and close the sale. This isn&amp;#39;t the only way, though. Making the content freely available makes the sales effort voluntary. You can gain value, consider it zero and move along.&lt;/p&gt;
&lt;p&gt;You can also try to compromise between these ends. Having some of the content available may encourage the potential reader to purchase the rest. You can also refine the content into different formats (audio/video) and aim to produce most of the income through that. A book can give you certain amount of prestige and lead to consulting opportunities.&lt;/p&gt;
&lt;p&gt;The biggest benefit of having the content freely available is that it becomes easy to share it. It won&amp;#39;t feel like selling. You can gently point towards your content without feeling too bad. Your readers can contribute directly without having to go through an errata process. Business-wise the problem is that you are relying on generosity.&lt;/p&gt;
&lt;p&gt;If you want something equivalent to an advance, there are a couple of alternatives. Platforms such as &lt;a href=&quot;https://www.kickstarter.com/&quot;&gt;Kickstarter&lt;/a&gt; or &lt;a href=&quot;https://www.indiegogo.com/&quot;&gt;Indiegogo&lt;/a&gt; have become popular. Essentially they provide one way to receive pre-sales and validate the concept. Platforms such as &lt;a href=&quot;https://www.patreon.com/&quot;&gt;Patreon&lt;/a&gt; allow you to receive donations that can contribute towards your efforts. Feasibility of these depends upon your legislation.&lt;/p&gt;
&lt;p&gt;To measure potential interest before moving on with your idea you can set up a light landing page. There are services such as &lt;a href=&quot;https://www.launchrock.com/&quot;&gt;Launchrock&lt;/a&gt; that will allow you to set up one easily. You can start gathering emails of the interested readers and begin to build your audience. I went the hard way and build a site of my own but that doesn&amp;#39;t mean you have to.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#an-alternative-self-publishing-approach&quot; id=&quot;an-alternative-self-publishing-approach&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;An Alternative Self-publishing Approach&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#an-alternative-self-publishing-approach&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given it is not possible for me to leverage donations or crowdfunding without potential trouble I started thinking about alternatives. It seems to me it should be possible to merge some of the best features of both open and closed approaches.&lt;/p&gt;
&lt;p&gt;I like how open approach fosters contribution. It is encouraging and helps you to refine your content better faster. The problem is that it is difficult to demonstrate value and convert that into sales. The closed approach doesn&amp;#39;t have that problem but contributing won&amp;#39;t be as easy. In addition linking to content isn&amp;#39;t going to work by definition.&lt;/p&gt;
&lt;p&gt;What if it was possible to take a bit of open, a bit of closed and a bit of Kickstarter, mix it together and end up with something that works for both authors and readers? I imagine it could work as a graduation process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A book idea is identified based on community demand. You as an author pick it up, perform further market study on it and decide to proceed based on that.&lt;/li&gt;
&lt;li&gt;The book will get started in a closed incubator (private GitHub repository for instance) and pre-sales begin. Early adopters will receive access to the content and will be able to contribute towards development of the book.&lt;/li&gt;
&lt;li&gt;After a predefined sales threshold is reached (Kickstarter bit) the book content will become available to the public. To make sure book content becomes open despite the sales, a time limit (a year or two?) can be set after which it will become open.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The idea is that by starting closed you provide incentive for early adopters to buy due to exclusivity. Just being able to contribute towards the development of the book can be a good incentive. You will still get contributions just like in an open model. This requires a certain level of trust, however. What if someone forks the content and runs with it?&lt;/p&gt;
&lt;p&gt;The Kickstarter bit is there to push community towards a common goal. Open content is valuable as it will allow people to access knowledge regardless of their income. It is a shame to see old books become forgotten due to long copyright terms. The time limit is a way to work against this.&lt;/p&gt;
&lt;p&gt;Too often good technical books become obsolete in a blink. Having them maintained by the community that uses them actively seems like a good idea to me. After all this is the way open source has proven to work.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perhaps hitting some kind of a balance between open and closed ways of publishing would pave way for more technical authors. In addition it should help in keeping the content fresh. That is a problem that plagues technical books in particular. Technology tends to be a moving target and having books with better longevity isn&amp;#39;t a bad goal.&lt;/p&gt;
&lt;p&gt;I believe an alternative model such as this could help to alleviate some of the risks involved. I am certain there are problems I am overlooking. But based on what I&amp;#39;ve seen perhaps it could work. What do you think?&lt;/p&gt;
</content></entry><entry><title>SurviveJS - The Story So Far</title><id>asurvivejsthestorysofar2015-07-13t00:00:00z</id><link href="https://survivejs.com/blog/the-story-so-far/"></link><updated>2015-07-13T00:00:00Z</updated><content type="html">&lt;p&gt;Given I&amp;#39;m a first time author I&amp;#39;ve done my fair share of mistakes with &lt;a href=&quot;http://survivejs.com/&quot;&gt;SurviveJS - Webpack and React&lt;/a&gt;. It was an attempt to change the direction of my career. Being a subcontractor&amp;#39;s subcontractor provides income, sure, but was a dead end for me with no room to grow in an economy that keeps getting tougher. Interestingly the book has garnered a lot of attention and I believe some have found it useful. It has been bit of a disaster economically and it&amp;#39;s hard to imagine I could keep a business like this up for long if something doesn&amp;#39;t change.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#why-survivejs-webpack-and-react-was-written-&quot; id=&quot;why-survivejs-webpack-and-react-was-written-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why SurviveJS - Webpack and React Was Written?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#why-survivejs-webpack-and-react-was-written-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first steps towards the book were taken at the end of January. I happened upon &lt;a href=&quot;https://christianalfoni.github.io/javascript/2014/12/13/did-you-know-webpack-and-react-is-awesome.html&quot;&gt;a blog post about Webpack by Christian Alfoni&lt;/a&gt;. As I had worked with webpack and React earlier I of course couldn&amp;#39;t resist commenting. I even proposed that it would be nice if there was a cookbook about the topic. The comment has been lost to the history but Christian took on my initiative. As a result &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;react-webpack-cookbook&lt;/a&gt; was born.&lt;/p&gt;
&lt;p&gt;We worked on it together for a few weeks and I started to realize there&amp;#39;s demand. It would have saved me so much time if someone had gathered this information to one place. As a result I poked a contact of mine at a quite known book publisher that pays decent royalties. And so the negotiations began. We negotiated till early April but in the end the publisher wasn&amp;#39;t interested. We failed at writing style.&lt;/p&gt;
&lt;p&gt;That could have been the end of the story but the opportunity seemed too good to miss. There was a clear demand for a book. Why not to write it? As Christian got busy with work and I was getting increasingly frustrated with my situation I decided to channel the frustration towards something constructive and so I started writing the book. Sometimes you have to go &amp;quot;all in&amp;quot; no matter what.&lt;/p&gt;
&lt;p&gt;As I didn&amp;#39;t feel like going through another round of negotiations with other publishers and I was aware of &lt;a href=&quot;https://leanpub.com/&quot;&gt;Leanpub&lt;/a&gt; I decided to pick them. Early on I agreed with Christian to keep the material open. I was a bit hesitant at first but the approach has shown some of its benefits. I&amp;#39;m still a bit unsure about the financial part, though.&lt;/p&gt;
&lt;p&gt;The nice thing about Leanpub is that it allows you to test the market so to speak. I actually released the initial, raw version of the book for free and slowly but surely started to bump up the price as the content matured. That allowed me to gauge interest in the topic. One day Leanpub decided to feature the book and this in turn converted to a nice amount of sales. It always gives you an extra dose of motivation to see people actually appreciate your work.&lt;/p&gt;
&lt;p&gt;An alternative would have been to start pre-sales through a platform such as &lt;a href=&quot;https://www.kickstarter.com/&quot;&gt;Kickstarter&lt;/a&gt;. Unfortunately that was not an option for me as a finn given our legislation is against it. There are strict regulations against donations to protect citizens against fraud. Even though understandable it can be a little restricting at times.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#where-i-failed-&quot; id=&quot;where-i-failed-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Where I Failed?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#where-i-failed-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having the content &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;out in the open&lt;/a&gt; has resulted in numerous external contributions. I believe this has contributed towards the quality of the book immensely and will continue to do so. But here lies the great conundrum. Why would you pay for something that&amp;#39;s freely available?&lt;/p&gt;
&lt;p&gt;So far the book has earned around $1177 excluding Leanpub&amp;#39;s cut (10% + $0.50 per sale). After all the middlemen (PayPal, government, co-op) get their cut and taxes have been paid, that translates to 614 euros. That would be even less if I earned more per year due to the way tax progression works. It would have been more profitable for me to fiddle my thumbs at home and live on social security.&lt;/p&gt;
&lt;p&gt;The big question is can this situation be changed somehow? I would of course love to keep on developing content. The goofy prefix &lt;code&gt;SurviveJS&lt;/code&gt; implies a series of book. But if I can expect profits like this it just doesn&amp;#39;t make any sense economically. Even though I write because I want to write I still need to make enough to have butter on my bread.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial plan was that people that feel they get value out of the book would buy the digital version to help fund the maintenance effort and development of new content. Unfortunately this isn&amp;#39;t working out as you can see from the figures above. Sure, the book might generate some income but nowhere enough to make this worth it financially.&lt;/p&gt;
&lt;p&gt;As far as I can see there are a few options. The easiest option would be just to give up and move onto something more profitable. I had a good run but it wasn&amp;#39;t enough this time. End of story. That would be a silly way to end this, though.&lt;/p&gt;
&lt;p&gt;As donations are illegal that rules out Kickstarter, Patreon and such. I can see these approach have worked for many but unfortunately it&amp;#39;s not possible here.&lt;/p&gt;
&lt;p&gt;I could stop maintaining the open content while putting all the effort to a superior, commercial version. I feel this might result in a lot of bad karma, though. That said I could develop commercial content on top of the free content and sell that perhaps.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://survivejs.com/#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;https://survivejs.com/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the book has been a success in some ways and exposed people to webpack and React, unfortunately it has failed in the only way that matters in the end. If there&amp;#39;s not a sustainable source of income it is hard to justify the effort financially. I would love to develop more content but if the invisible hand decides it&amp;#39;s not possible, then it&amp;#39;s not.&lt;/p&gt;
&lt;p&gt;In the end if we want to keep this project alive we&amp;#39;ll need to climb that final, financial hurdle. It is the hardest hurdle for me as I may have to bend on some of my principles. How is it possible to combine open content and business?&lt;/p&gt;
</content></entry></feed>